[{"path":"https://eloch216.github.io/PhotoGEA/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 PhotoGEA authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/PhotoGEA.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Getting Started With PhotoGEA","text":"PhotoGEA (short photosynthetic gas exchange analysis) R package provides suite tools loading, processing, analyzing photosynthetic gas exchange data.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/PhotoGEA.html","id":"installing-photogea","dir":"Articles","previous_headings":"","what":"Installing PhotoGEA","title":"Getting Started With PhotoGEA","text":"easiest way install PhotoGEA type following within R terminal: Note method requires remotes package, can installed within R typing install.packages('remotes').","code":"remotes::install_github('eloch216/PhotoGEA')"},{"path":"https://eloch216.github.io/PhotoGEA/articles/PhotoGEA.html","id":"an-example-c3-co2-response-curves","dir":"Articles","previous_headings":"","what":"An Example: C3 CO2 Response Curves","title":"Getting Started With PhotoGEA","text":"example, read data two Licor Li-6800 log files contain several -Ci curves measured tobacco soybean plants, fit model response curve, plot results. basic example just scratches surface possible PhotoGEA.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/PhotoGEA.html","id":"fitting-the-curves","dir":"Articles","previous_headings":"An Example: C3 CO2 Response Curves","what":"Fitting the Curves","title":"Getting Started With PhotoGEA","text":"following code can used read data fit curve: document generated, evaluating code required following amount time: timing results may vary depending particular machine used run code. Nevertheless: think fit six -Ci curves less 2 seconds using method? example contains 12 commands, certainly isn’t short; however, close look reveals much commands general apply set C3 response curves. fact, parts need modified, list files read, curve identifier, value mesophyll conductance. using PhotoGEA, encouraged copy example others use base scripts; work smarter, harder!","code":"# Load required packages library(PhotoGEA) library(lattice)  # Define a vector of paths to the files we wish to load file_paths <- c(   system.file('extdata', 'c3_aci_1.xlsx', package = 'PhotoGEA'),   system.file('extdata', 'c3_aci_2.xlsx', package = 'PhotoGEA') )  # Load the data from each file licor_exdf_list <- lapply(file_paths, function(fpath) {   read_gasex_file(fpath, 'time') })  # Get the names of all columns that are present in all of the Licor files columns_to_keep <- do.call(identify_common_columns, licor_exdf_list)  # Extract just these columns licor_exdf_list <- lapply(licor_exdf_list, function(x) {   x[ , columns_to_keep, TRUE] })  # Combine the data from all the files licor_data <- do.call(rbind, licor_exdf_list)  # Define a new column that uniquely identifies each curve licor_data[, 'curve_id'] <-   paste(licor_data[, 'species'], '-', licor_data[, 'plot'] )  # Organize the data licor_data <- organize_response_curve_data(     licor_data,     'curve_id',     c(9, 10, 16),     'CO2_r_sp' )  # Specify separate mesophyll conductance values for each species licor_data <- set_variable(   licor_data, 'gmc', 'mol m^(-2) s^(-1) bar^(-1)',   id_column = 'species',   value_table = list(soybean = 0.9, tobacco = 1.1) )  # Calculate the total pressure licor_data <- calculate_total_pressure(licor_data)  # Calculate Cc licor_data <- apply_gm(licor_data)  # Calculate temperature-dependent values of C3 photosynthetic parameters licor_data <- calculate_arrhenius(licor_data, c3_arrhenius_bernacchi)  # Fit all curves in the data set aci_results <- consolidate(by(   licor_data,   licor_data[, 'curve_id'],   fit_c3_aci )) #>    user  system elapsed  #>   1.316   0.024   1.342"},{"path":"https://eloch216.github.io/PhotoGEA/articles/PhotoGEA.html","id":"viewing-the-results","dir":"Articles","previous_headings":"An Example: C3 CO2 Response Curves","what":"Viewing the Results","title":"Getting Started With PhotoGEA","text":"fit response curves, also possible view fits extracted parameters. example, can plot measured values net assimilation (), fitted values net assimilation (A_fit), limiting assimilation rates calculated fitting procedure: rubisco-limited rate (Ac) electron-transport-limited rate (Aj).  Another way check quality fits plot residuals, randomly distributed:  also possible plot one fitting parameters averaged across species bar chart error bars; plot values Vcmax 25 degrees C.","code":"xyplot(   A + Ac + Aj + A_fit ~ Ci | curve_id,   data = aci_results$fits$main_data,   type = 'l',   auto.key = list(space = 'right'),   grid = TRUE,   xlab = paste0('Intercellular CO2 concentration (', aci_results$fits$units$Ci, ')'),   ylab = paste0('Assimilation rate (', aci_results$fits$units$A, ')'),   par.settings = list(     superpose.line = list(col = multi_curve_colors()),     superpose.symbol = list(col = multi_curve_colors())   ) ) xyplot(   A_residuals ~ Ci | curve_id,   data = aci_results$fits$main_data,   type = 'b',   pch = 16,   grid = TRUE,   xlab = paste0('Intercellular CO2 concentration (', aci_results$fits$units$Ci, ')'),   ylab = paste0('Assimilation rate residual (measured - fitted)\\n(', aci_results$fits$units$A, ')'), ) barchart_with_errorbars(   aci_results$parameters[, 'Vcmax_at_25'],   aci_results$parameters[, 'species'],   xlab = 'Species',   ylab = paste0('Vcmax at 25 degrees C (', aci_results$parameters$units$Vcmax_at_25, ')'),   ylim = c(0, 200) )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/PhotoGEA.html","id":"learning-more","dir":"Articles","previous_headings":"","what":"Learning More","title":"Getting Started With PhotoGEA","text":"PhotoGEA package includes extensive documentation, articles added time: Developing Data Analysis Pipeline: Discusses PhotoGEA provides functionality parts data analysis pipeline, including loading validating data – can help save time improve reproducibility data analysis! Working Extended Data Frames: Discusses work extended data frames, critical part PhotoGEA. Analyzing C3 -Ci Curves (example detailed analysis demonstrated .) Analyzing C4 -Ci Curves Analyzing Ball-Berry Data Analyzing TDL Data Creating Processing Tools: Discusses create functions compatible PhotoGEA apply new types processing. Combining PhotoGEA Packages: Discusses create wrappers functions packages extend processing capabilities PhotoGEA.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Analyzing Ball-Berry Data","text":"vignette, give example showing analyze Ball-Berry data using PhotoGEA package. commands vignette can used initialize script, described Customizing Script.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"the-model","dir":"Articles","previous_headings":"Background","what":"The Model","title":"Analyzing Ball-Berry Data","text":"Ball-Berry model simple way describe response leaf’s stomata assimilation rate local environmental conditions. Specifically, predicts stomatal conductance water vapor using following equation: \\[ g_{sw} = b_0 + b_1 * A_n * h_s / C_s \\] \\(g_{sw}\\) stomatal conductance, \\(A_n\\) net assimilation rate, \\(h_s\\) relative humidity leaf surface, \\(C_s\\) CO2 concentration leaf surface. term \\(A_n * h_s / C_s\\) commonly referred Ball-Berry index, model can described predicting linear relationship stomatal conductance Ball-Berry index. intercept (\\(b_0\\)) slope (\\(b_1\\)) linear relationship referred Ball-Berry parameters, describe leaf’s stomatal response. Although model certainly oversimplification, encode important stomatal responses. example, humidity low, stomata real plant tend close, reducing stomatal conductance. Likewise, CO2 concentration around leaf depleted, stomata real plant tend open, increasing somatal conductance. information model possible alternatives, see following papers: Ball, Woodrow, Berry (1987) Tardieu Davies (1993) Leuning (1995) Dewar (2002)","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"the-data","dir":"Articles","previous_headings":"Background","what":"The Data","title":"Analyzing Ball-Berry Data","text":"Ball-Berry parameters typically determined measuring Ball-Berry curve, one environmental factors influence Ball-Berry index systematically varied across range values. value, care taken \\(A_n\\) \\(g_{sw}\\) reached steady-state values, \\(A_n\\), \\(g_{sw}\\), key pieces information recorded. Finally, linear fit experimentally observed \\(g_{sw}\\) function Ball-Berry index performed extract values Ball-Berry intercept slope. photosynthetic gas exchange measurements commonly performed using Licor portable photosynthesis system Li-6400 Li-6800. machines record values \\(A_n\\), \\(g_{sw}\\), many important quantities. produce two types output files: plain-text Microsoft Excel. often convenient work Excel files since entries can easily modified (example, remove extraneous row add new column). hand, can difficult access file contents using pieces software R. However, PhotoGEA package reduces barrier including tools reading Licor Excel files R, demonstrated following section.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"loading-packages","dir":"Articles","previous_headings":"","what":"Loading Packages","title":"Analyzing Ball-Berry Data","text":"always, first step load packages using. addition PhotoGEA, also use lattice package generating plots. lattice package installed R setup, can install typing install.packages('lattice').","code":"# Load required packages library(PhotoGEA) library(lattice)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"loading-licor-data","dir":"Articles","previous_headings":"","what":"Loading Licor Data","title":"Analyzing Ball-Berry Data","text":"PhotoGEA package includes two files representing Ball-Berry data measured using two Li-6800 instruments. data stored Microsoft Excel files, includes curves measured two different crop species (tobacco soybean) several different plots . curve seven-point light response curve; words, incident light intensity varied change \\(A_n\\) hence Ball-Berry index. Although two files based real data, noise added since unpublished, files used examples. files stored computer somewhere R package installation directory, full paths files can obtained system.file: actually read data files store R objects, use read_gasex_file function PhotoGEA. Since multiple files read, call function file using lapply: result command R list “extended data frames” (abbreviated exdf objects). exdf class special data structure defined PhotoGEA package. many ways, exdf object equivalent data frame, major difference exdf object includes units column. information, type ?exdf R terminal access built-help menu entry, check Working Extended Data Frames vignette. Generally, convenient work single exdf object rather list , next step combine objects list. action can accomplished using rbind function, combines table-like objects rows; words, stacks two tables vertically. action makes sense tables columns, combine exdf objects, make sure case. PhotoGEA package includes function called identify_common_columns can used get names columns present Licor files. , can extract just columns, combine exdf objects single one. Now single R object called licor_data includes data several Licor Excel files. information consolidating information multiple files, see Common Patterns section Working Extended Data Frames vignette.","code":"# Define a vector of paths to the files we wish to load file_paths <- c(   system.file('extdata', 'ball_berry_1.xlsx', package = 'PhotoGEA'),   system.file('extdata', 'ball_berry_2.xlsx', package = 'PhotoGEA') ) # Load each file, storing the result in a list licor_exdf_list <- lapply(file_paths, function(fpath) {   read_gasex_file(fpath, 'time') }) # Get the names of all columns that are present in all of the Licor files columns_to_keep <- do.call(identify_common_columns, licor_exdf_list)  # Extract just these columns licor_exdf_list <- lapply(licor_exdf_list, function(x) {   x[ , columns_to_keep, TRUE] })  # Use `rbind` to combine all the data licor_data <- do.call(rbind, licor_exdf_list)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"checking-licor-data","dir":"Articles","previous_headings":"","what":"Checking Licor Data","title":"Analyzing Ball-Berry Data","text":"extracting Ball-Berry parameters, good idea basic checks data ensure organized properly measured properly.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"basic-checks","dir":"Articles","previous_headings":"Checking Licor Data","what":"Basic Checks","title":"Analyzing Ball-Berry Data","text":"First, make sure column data whose value uniquely identifies curve. particular data set, several “user constants” defined making measurements help identify curve: instrument, species, plot. However, neither columns alone sufficient uniquely identify curve. can solve issue creating new column combines values : next step make sure column correctly identifies response curve. , can use check_licor_data function PhotoGEA. supply name column uniquely identify response curve (curve_identifier), expected number points curve (7), name “driving” column follow sequence curve (Qin), tolerance values driving column (1.0 mol / m^2 / s). data passes checks, function output produce messages. (information, see built-help menu entry typing ?check_licor_data.) However, check_licor_data detects issue, print helpful message R terminal. example, specified wrong number points, wrong identifier column, unrealistic tolerance, get error messages:","code":"# Create a new identifier column formatted like `instrument - species - plot` licor_data[ , 'curve_identifier'] <-   paste(licor_data[ , 'instrument'], '-', licor_data[ , 'species'], '-', licor_data[ , 'plot']) # Make sure the data meets basic requirements check_licor_data(licor_data, 'curve_identifier', 7, 'Qin', 1.0) check_licor_data(licor_data, 'curve_identifier', 8) #>       curve_identifier npts #> 1 ripe4 - soybean - 1a    7 #> 2 ripe4 - soybean - 1b    7 #> 3  ripe4 - soybean - 5    7 #> 4  ripe4 - tobacco - 2    7 #> 5  ripe5 - soybean - 1    7 #> 6 ripe5 - soybean - 5a    7 #> 7 ripe5 - soybean - 5c    7 #> 8  ripe5 - tobacco - 5    7 #> Error in check_licor_data(licor_data, \"curve_identifier\", 8): One or more curves does not have the expected number of points.  check_licor_data(licor_data, 'species', 7) #>   species npts #> 1 soybean   42 #> 2 tobacco   14 #> Error in check_licor_data(licor_data, \"species\", 7): One or more curves does not have the expected number of points.  check_licor_data(licor_data, 'curve_identifier', 7, 'Qin', 0.1) #> Error in check_licor_data(licor_data, \"curve_identifier\", 7, \"Qin\", 0.1): Point 1 from curve `ripe5 - soybean - 5a` has value `Qin = 2000.14`, but the average value for this point across all curves is `Qin = 2000` #>   Point 1 from curve `ripe5 - soybean - 5c` has value `Qin = 2000.12`, but the average value for this point across all curves is `Qin = 2000`"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"qualitative-checks","dir":"Articles","previous_headings":"Checking Licor Data","what":"Qualitative Checks","title":"Analyzing Ball-Berry Data","text":"Since data passed basic checks, can now take look make sure seems reasonable. Sometimes Licor override temperature humidity controls making measurements; case, conditions inside measurement chamber may stable, curves may accurately reflect plant’s true steady-state stomatal response. can check types issues making plots. situation, lattice library makes simple include curve separate subplot figure. following sections, generate several different plots check curve quality.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"humidity-control","dir":"Articles","previous_headings":"Checking Licor Data > Qualitative Checks","what":"Humidity Control","title":"Analyzing Ball-Berry Data","text":", Humidifier_% Desiccant_% represent flow humidifier desiccant columns, value 0 indicates valve column fully closed value 100 indicates valve column fully opened. RHcham represents relative humidity inside chamber percentage (words, value 0 100). Qin incident photosynthetically active flux density (PPFD). curves measured, chamber humidity setpoint specified. , looking plot, check relative humidity fairly constant curve. Typically, accompanied relatively smooth changes valve percentages accomodate changes ambient humidity leaf photosynthesis. plot, data looks good.","code":"# Make a plot to check humidity control xyplot(   RHcham + `Humidifier_%` + `Desiccant_%` ~ Qin | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(0, 100),   xlim = c(0, 2200),   xlab = paste0('Incident PPFD (', licor_data$units$Qin, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"temperature-control","dir":"Articles","previous_headings":"Checking Licor Data > Qualitative Checks","what":"Temperature Control","title":"Analyzing Ball-Berry Data","text":", TleafCnd leaf temperature measured using thermocouple, Txchg temperature heat exhanger used control air temperature measurement instrument. curves measured, exchanger setpoint specified. , looking plot, check Txchg constant curve leaf temperature vary erratic way. plot, data looks good.","code":"# Make a plot to check temperature control xyplot(   TleafCnd + Txchg ~ Qin | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(25, 40),   xlim = c(0, 2200),   xlab = paste0('Incident PPFD (', licor_data$units$Qin, ')'),   ylab = paste0('Temperature (', licor_data$units$TleafCnd, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"co2-control","dir":"Articles","previous_headings":"Checking Licor Data > Qualitative Checks","what":"CO2 Control","title":"Analyzing Ball-Berry Data","text":", CO2_s CO2 concentration sample cell CO2_r CO2 concentration reference cell. curves measured, sample cell CO2 concentration setpoint supplied. , looking plot, check CO2_s constant curve. , looks like ripe5 instrument controlling CO2 expected several curves; CO2_s constant ripe5 - soybean - 1, ripe5 - soybean - 5c, ripe5 - soybean - 5. However, CO2_r relatively constant curves, changes CO2_s smooth, reasonable expect measurements represent true steady-state values. Considering , curves acceptable based CO2 plots.","code":"# Make a plot to check CO2 control xyplot(   CO2_s + CO2_r ~ Qin | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(360, 480),   xlim = c(0, 2200),   xlab = paste0('Incident PPFD (', licor_data$units$Qin, ')'),   ylab = paste0('CO2 concentration (', licor_data$units$CO2_r, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"stability","dir":"Articles","previous_headings":"Checking Licor Data > Qualitative Checks","what":"Stability","title":"Analyzing Ball-Berry Data","text":"measuring response curves Licor, possible specify stability criteria point addition minimum maximum wait times. words, set point driving variable changed, machine waits stability criteria met; minimum waiting period, also maximum prevent machine waiting long. stability criteria especially important Ball-Berry curves, since stomata may take long time reach steady state. curves measured, stability criteria supplied net assimilation rate stomatal conductance gsw. stability status stored log file appropriate logging option stability set. Now, point, possible check whether stability achieved whether point logged maximum waiting period met. maximum waiting period reached plant still stabilized, data point may unreliable, important check information. plot, :OK indicates whether stable (0 , 1 yes), gsw:OK indicates whether gsw stable (0 , 1 yes), Stable indicates total number stability conditions met. , looking points Stable 2. Otherwise, can check traces see whether gsw unstable. looks like many high light points stable, may good idea remove proceeding Ball-Berry fitting.","code":"xyplot(   `A:OK` + `gsw:OK` + Stable ~ Qin | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlim = c(0, 2200),   xlab = paste0('Incident PPFD (', licor_data$units$Qin, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"light-response-curves","dir":"Articles","previous_headings":"Checking Licor Data > Qualitative Checks","what":"Light-Response Curves","title":"Analyzing Ball-Berry Data","text":"simply looking reasonable light-response curve shape, assimilation low light low, assimilation roughly linear response initial increases light intensity, finally reaches plateau. strong deviations expected shape may indicate plant stressed otherwise behaving abnormally, might want use curve Ball-Berry analysis. plot, three curves look like normal C3 light response curves: ripe4 - soybean - 1a, ripe4 - soybean - 1b, ripe4 - soybean - 5. strange curves likely byproduct noise intentionally added true measured data (see Data). Nevertheless, may good idea remove proceeding Ball-Berry fitting.","code":"# Make a plot to check light-response curves xyplot(   A ~ Qin | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(-5, 50),   xlim = c(0, 2200),   xlab = paste0('Incident PPFD (', licor_data$units$Qin, ')'),   ylab = paste0('Net assimilation (', licor_data$units$A, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"cleaning-the-licor-data","dir":"Articles","previous_headings":"Checking Licor Data","what":"Cleaning the Licor Data","title":"Analyzing Ball-Berry Data","text":"checking plots Qualitative Checks, two issues noticed: (1) points logged stability achieved (2) curves look abnormal. section, demonstrate remove unstable points weird curves. following command keep points Stable exactly 2; condition means stability criteria satisfied. Sometimes, following procedure, curve stable points remaining; usually good idea automatically exclude curve fewer three stable points. Since identified curves may acceptable Ball-Berry fitting, can remove via remove_points function PhotoGEA: Note remove_points can also used exclude individual points instead entire curves; see help entry typing ?remove_points information.","code":"# Only keep points where stability was achieved licor_data <- licor_data[licor_data[, 'Stable'] == 2, , TRUE]  # Remove any curves that have fewer than three remaining points npts <- by(licor_data, licor_data[, 'curve_identifier'], nrow) ids_to_keep <- names(npts[npts > 2]) licor_data <- licor_data[licor_data[, 'curve_identifier'] %in% ids_to_keep, , TRUE] # Define a list of curves to remove from the data set curves_to_remove <- c(   'ripe4 - soybean - 1a',   'ripe4 - soybean - 1b',   'ripe4 - soybean - 5' )  # Remove them licor_data <-   remove_points(licor_data, list(curve_identifier = curves_to_remove))"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"fitting-licor-data","dir":"Articles","previous_headings":"","what":"Fitting Licor Data","title":"Analyzing Ball-Berry Data","text":"Now checked data quality, ready perform fitting. produced instruments, Licor data files include values Ball-Berry index; fact, even include values \\(h_s\\) \\(C_s\\) required calculate Ball-Berry index. However, PhotoGEA package includes three functions help calculations: calculate_total_pressure, calculate_gas_properties, calculate_ball_berry_index. requires exdf object containing Licor data. units required column checked attempt avoid unit-related errors. information functions can obtained built-help system typing ?calculate_total_pressure, ?calculate_gas_properties, ?calculate_ball_berry_index. use sequentially calculate values Ball-Berry index: Together, functions add several new columns licor_data, including one called bb_index, includes values Ball-Berry index. information, now ready perform fitting procedure. operation, can use fit_ball_berry function PhotoGEA package, fits single Ball-Berry curve extract Ball-Berry parameters. apply function curve larger data set consolidate results, can use conjunction consolidate, also part PhotoGEA. (information functions, see built-help menu entries typing ?fit_ball_berry, ?.exdf, ?consolidate, check Common Patterns section Working Extended Data Frames vignette.) Together, functions split apart main data using curve identifier column defined (Basic Checks), make linear fit \\(g_{sw}\\) Ball-Berry index, return resulting parameters fits:","code":"# Calculate the total pressure in the Licor chamber licor_data <- calculate_total_pressure(licor_data)  # Calculate additional gas properties, including `RHleaf` and `Csurface` licor_data <- calculate_gas_properties(licor_data)  # Calculate the Ball-Berry index licor_data <- calculate_ball_berry_index(licor_data) # Fit a linear model to the Ball-Berry data ball_berry_results <- consolidate(by(   licor_data,                       # The `exdf` object containing the curves   licor_data[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_ball_berry                    # The function to apply to each chunk of `licor_data` ))"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"viewing-the-fitted-curves","dir":"Articles","previous_headings":"Fitting Licor Data","what":"Viewing the Fitted Curves","title":"Analyzing Ball-Berry Data","text":"made fits, now good idea visually check , making sure look reasonable. , can use xyplot lattice library quickly make plots fits, stored ball_berry_results$fits, exdf object:  fits look good!","code":"# Plot the Ball-Berry fits xyplot(   gsw + gsw_fit ~ bb_index | curve_identifier,   data = ball_berry_results$fits$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste0('Ball-Berry index (', ball_berry_results$fits$units$bb_index, ')'),   ylab = paste0('Stomatal conductance to H2O (', ball_berry_results$fits$units$gsw, ')'),   ylim = c(0, 0.8),   xlim = c(0, 0.1) )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"viewing-the-fitted-parameter-values","dir":"Articles","previous_headings":"Fitting Licor Data","what":"Viewing the Fitted Parameter Values","title":"Analyzing Ball-Berry Data","text":"can also take look fitted Ball-Berry parameter values, stored ball_berry_results$parameters, another exdf object. object includes many columns care . can view follows:","code":"# View the Ball-Berry parameters columns_for_viewing <-   c('instrument', 'species', 'plot', 'bb_intercept', 'bb_slope', 'r_squared')  ball_berry_parameters <-   ball_berry_results$parameters[ , columns_for_viewing, TRUE]  print(ball_berry_parameters) #>   instrument [UserDefCon] (NA) species [UserDefCon] (NA) plot [UserDefCon] (NA) #> 1                        ripe4                   tobacco                      2 #> 2                        ripe5                   soybean                      1 #> 3                        ripe5                   soybean                     5a #> 4                        ripe5                   soybean                     5c #> 5                        ripe5                   tobacco                      5 #>   bb_intercept [fit_ball_berry] (mol m^(-2) s^(-1)) #> 1                                        0.08778255 #> 2                                        0.21437406 #> 3                                        0.10722148 #> 4                                        0.11118324 #> 5                                        0.13565311 #>   bb_slope [fit_ball_berry] (dimensionless) r_squared [fit_ball_berry] () #> 1                                  3.864316                     0.6452714 #> 2                                  4.462244                     0.9004803 #> 3                                  4.823671                     0.8866346 #> 4                                  4.750743                     0.7726284 #> 5                                  4.097481                     0.9849869"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"extracting-average-values","dir":"Articles","previous_headings":"Fitting Licor Data","what":"Extracting Average Values","title":"Analyzing Ball-Berry Data","text":"Finally, can extract average values Ball-Berry parameters species using basic_stats function PhotoGEA:","code":"# Compute the average and standard error for the Ball-Berry slope and intercept # for each species ball_berry_averages <- basic_stats(   ball_berry_results$parameters,   'species' )  # View the averages and errors columns_to_view <- c(   'species',   'bb_intercept_avg', 'bb_intercept_stderr',   'bb_slope_avg', 'bb_slope_stderr' ) print(ball_berry_averages[ , columns_to_view, TRUE]) #>   species [UserDefCon] (NA) #> 1                   soybean #> 2                   tobacco #>   bb_intercept_avg [fit_ball_berry] (mol m^(-2) s^(-1)) #> 1                                             0.1442596 #> 2                                             0.1117178 #>   bb_intercept_stderr [fit_ball_berry] (mol m^(-2) s^(-1)) #> 1                                               0.03507588 #> 2                                               0.02393528 #>   bb_slope_avg [fit_ball_berry] (dimensionless) #> 1                                      4.678886 #> 2                                      3.980898 #>   bb_slope_stderr [fit_ball_berry] (dimensionless) #> 1                                        0.1103477 #> 2                                        0.1165826"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"customizing-your-script","dir":"Articles","previous_headings":"","what":"Customizing Your Script","title":"Analyzing Ball-Berry Data","text":"Note commands vignette written general way can used basis Ball-Berry analysis script (see Commands Document). order use script, following changes may required. may also others specifically mentioned .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"input-files","dir":"Articles","previous_headings":"Customizing Your Script","what":"Input Files","title":"Analyzing Ball-Berry Data","text":"file paths specified file_paths need modified point Licor files. script, may want consider using choose_input_licor_files function PhotoGEA; function create pop-browser window can interactively select set Excel files. Sometimes convenient writing full file paths. example, replace previous definition file_paths one: Unfortunately, choose_input_licor_files available interactive R sessions running Microsoft Windows, also platform-independent option: choose_input_files. See Translation section Developing Data Analysis Pipeline vignette details.","code":"# Interactively define a vector of paths to the files we wish to load file_paths <- choose_input_licor_files()"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"curve-identifier","dir":"Articles","previous_headings":"Customizing Your Script","what":"Curve Identifier","title":"Analyzing Ball-Berry Data","text":"Depending user constants defined Licor Excel files, may need modify definition curve_identifier column.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"excluded-curves","dir":"Articles","previous_headings":"Customizing Your Script","what":"Excluded Curves","title":"Analyzing Ball-Berry Data","text":"Depending qualitative data checks, may need change definition curves_to_remove vector.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"averages-and-standard-errors","dir":"Articles","previous_headings":"Customizing Your Script","what":"Averages and Standard Errors","title":"Analyzing Ball-Berry Data","text":"Depending data organized, may want change column used divide data calculating averages standard errors.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"plots","dir":"Articles","previous_headings":"Customizing Your Script","what":"Plots","title":"Analyzing Ball-Berry Data","text":"may need change axis limits plots. Alternatively, can remove , allowing xyplot automatically choose .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"saving-results","dir":"Articles","previous_headings":"Customizing Your Script","what":"Saving Results","title":"Analyzing Ball-Berry Data","text":"may want use write.csv save fitting results csv files. example, following commands allow interactively choose output filenames resulting csv files:","code":"write.csv(ball_berry_results$fits, file.choose(), row.names = FALSE) write.csv(ball_berry_results$parameters, file.choose(), row.names = FALSE) write.csv(ball_berry_averages, file.choose(), row.names = FALSE)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"commands-from-this-document","dir":"Articles","previous_headings":"","what":"Commands From This Document","title":"Analyzing Ball-Berry Data","text":"following code chunk includes central commands used throughout document. compiled make easy copy/paste text file initialize script. Annotation also added clearly indicate four steps involved data analysis, described Developing Data Analysis Pipeline vignette.","code":"### ### PRELIMINARIES: ### Loading packages, defining constants, creating helping functions, etc. ###  # Load required packages library(PhotoGEA) library(lattice)  ### ### TRANSLATION: ### Creating convenient R objects from raw data files ###  # Define a vector of paths to the files we wish to load file_paths <- c(   system.file('extdata', 'ball_berry_1.xlsx', package = 'PhotoGEA'),   system.file('extdata', 'ball_berry_2.xlsx', package = 'PhotoGEA') )  # Load each file, storing the result in a list licor_exdf_list <- lapply(file_paths, function(fpath) {   read_gasex_file(fpath, 'time') })  # Get the names of all columns that are present in all of the Licor files columns_to_keep <- do.call(identify_common_columns, licor_exdf_list)  # Extract just these columns licor_exdf_list <- lapply(licor_exdf_list, function(x) {   x[ , columns_to_keep, TRUE] })  # Use `rbind` to combine all the data licor_data <- do.call(rbind, licor_exdf_list)  ### ### VALIDATION: ### Organizing the data, checking its consistency and quality, cleaning it ###  # Create a new identifier column formatted like `instrument - species - plot` licor_data[ , 'curve_identifier'] <-   paste(licor_data[ , 'instrument'], '-', licor_data[ , 'species'], '-', licor_data[ , 'plot'])  # Make sure the data meets basic requirements check_licor_data(licor_data, 'curve_identifier', 7, 'Qin', 1.0)  # Make a plot to check humidity control xyplot(   RHcham + `Humidifier_%` + `Desiccant_%` ~ Qin | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(0, 100),   xlim = c(0, 2200),   xlab = paste0('Incident PPFD (', licor_data$units$Qin, ')') )  # Make a plot to check temperature control xyplot(   TleafCnd + Txchg ~ Qin | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(25, 40),   xlim = c(0, 2200),   xlab = paste0('Incident PPFD (', licor_data$units$Qin, ')'),   ylab = paste0('Temperature (', licor_data$units$TleafCnd, ')') )  # Make a plot to check CO2 control xyplot(   CO2_s + CO2_r ~ Qin | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(360, 480),   xlim = c(0, 2200),   xlab = paste0('Incident PPFD (', licor_data$units$Qin, ')'),   ylab = paste0('CO2 concentration (', licor_data$units$CO2_r, ')') )  xyplot(   `A:OK` + `gsw:OK` + Stable ~ Qin | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlim = c(0, 2200),   xlab = paste0('Incident PPFD (', licor_data$units$Qin, ')') )  # Make a plot to check light-response curves xyplot(   A ~ Qin | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(-5, 50),   xlim = c(0, 2200),   xlab = paste0('Incident PPFD (', licor_data$units$Qin, ')'),   ylab = paste0('Net assimilation (', licor_data$units$A, ')') )  # Only keep points where stability was achieved licor_data <- licor_data[licor_data[, 'Stable'] == 2, , TRUE]  # Remove any curves that have fewer than three remaining points npts <- by(licor_data, licor_data[, 'curve_identifier'], nrow) ids_to_keep <- names(npts[npts > 2]) licor_data <- licor_data[licor_data[, 'curve_identifier'] %in% ids_to_keep, , TRUE]  # Define a list of curves to remove from the data set curves_to_remove <- c(   'ripe4 - soybean - 1a',   'ripe4 - soybean - 1b',   'ripe4 - soybean - 5' )  # Remove them licor_data <-   remove_points(licor_data, list(curve_identifier = curves_to_remove))  ### ### PROCESSING: ### Extracting new pieces of information from the data ###  # Calculate the total pressure in the Licor chamber licor_data <- calculate_total_pressure(licor_data)  # Calculate additional gas properties, including `RHleaf` and `Csurface` licor_data <- calculate_gas_properties(licor_data)  # Calculate the Ball-Berry index licor_data <- calculate_ball_berry_index(licor_data)  # Fit a linear model to the Ball-Berry data ball_berry_results <- consolidate(by(   licor_data,                       # The `exdf` object containing the curves   licor_data[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_ball_berry                    # The function to apply to each chunk of `licor_data` ))  # Plot the Ball-Berry fits xyplot(   gsw + gsw_fit ~ bb_index | curve_identifier,   data = ball_berry_results$fits$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste0('Ball-Berry index (', ball_berry_results$fits$units$bb_index, ')'),   ylab = paste0('Stomatal conductance to H2O (', ball_berry_results$fits$units$gsw, ')'),   ylim = c(0, 0.8),   xlim = c(0, 0.1) )  # View the Ball-Berry parameters columns_for_viewing <-   c('instrument', 'species', 'plot', 'bb_intercept', 'bb_slope', 'r_squared')  ball_berry_parameters <-   ball_berry_results$parameters[ , columns_for_viewing, TRUE]  print(ball_berry_parameters)  ### ### SYNTHESIS: ### Using plots and statistics to help draw conclusions from the data ###  # Compute the average and standard error for the Ball-Berry slope and intercept # for each species ball_berry_averages <- basic_stats(   ball_berry_results$parameters,   'species' )  # View the averages and errors columns_to_view <- c(   'species',   'bb_intercept_avg', 'bb_intercept_stderr',   'bb_slope_avg', 'bb_slope_stderr' ) print(ball_berry_averages[ , columns_to_view, TRUE])"},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c3_aci_curves.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Analyzing C3 A-Ci Curves","text":"vignette, give example showing analyze C3 -Ci data using PhotoGEA package. commands vignette can used initialize script, described Customizing Script.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c3_aci_curves.html","id":"understanding-c3-a-ci-curves","dir":"Articles","previous_headings":"Background","what":"Understanding C3 A-Ci Curves","title":"Analyzing C3 A-Ci Curves","text":"-Ci curve (CO2 response curve) particular type gas exchange measurement living leaf exposed varying concentrations CO2. CO2 concentration sequence, net assimilation rate \\(A_n\\), stomatal conductance H2O (\\(g_{sw}\\)), important quantities measured recorded. Typically, environmental variables temperature, humidity, incident photosynthetically-active photon flux density held constant measurement sequence changes photosynthesis can attributed CO2 alone. different cell structures biochemical pathways, C3 C4 plants different responses CO2. , discussing C3 plants. full C3 photosynthetic pathway quite complicated, consisting least two hundred individual reactions, may impact measured -Ci curve. However, simplified models photosynthesis available much easier understand work . models tend based around Rubisco kinetics, describing net assimilation rate responds amount CO2 available chloroplast. widely-used model typically referred Farquhar-von-Caemmerer-Berry model (often shortened FvCB model Farquhar model) three scientists originally developed . excellent description model can found Biochemical Models Leaf Photosynthesis (Caemmerer 2000), subject additional considerations discussed Lochocki McGrath (preparation). model provides framework understanding changes \\(A_n\\) occur C3 plant exposed successively higher concentrations CO2. Overall, photosynthetic response CO2 high light conditions can divided three separate ranges: low levels CO2 chloroplast, CO2 assimilation primarily limited Rubisco activity. intermediate levels CO2 chloroplast, CO2 assimilation primarily limited RuBP regeneration. high levels CO2 chloroplast, CO2 assimilation primarily limited triose phosphate utilization. specifically, model provides equations potential RuBP carboxylation rates limited one three important processes: Rubisco-limited carboxylation rate (\\(W_c\\)). RuBP-regeneration-limited carboxylation rate (\\(W_j\\)). triose-phosphate-utilization-limited carboxylation rate (\\(W_p\\)). rates depend CO2 concentration chloroplast factors incident light intensity. actual RuBP carboxylation rate \\(V_c\\) particular set conditions taken smallest three potential rates. , net CO2 assimilation rate \\(A_n\\) can calculated \\(V_c\\) including carbon losses due photorespiration day respiration. also possible calculate potential assimilation rates corresponding potential carboxylation rate: \\(A_c\\), \\(A_j\\), \\(A_p\\). Using equations compose model, possible calculate plots like one , illustrates three different assimilation ranges observed typical high-light -Ci curve.  (Note: figure generated using calculate_c3_assimilation function PhotoGEA package, represents photosynethetic response C3 leaf according FvCB model TPU = 18 micromol m^(-2) s^(-1), J = 200 micromol m^(-2) s^(-1), Rd = 1.8 micromol m^(-2) s^(-1), Vcmax = 125 micromol m^(-2) s^(-1), leaf temperature 30 degrees C. Arrhenius temperature response parameters taken Sharkey et al. (2007).) Thus, one common reasons measure -Ci curve interpret context model. words, fitting model’s equations measured curve, possible estimate values TPU, J, Rd, Vcmax. See documentation calculate_c3_assimilation information important quantities. One complication related fitting FvCB model calculates assimilation level single chloroplast; however, experimental gas exchange measurements made averaging behavior many different chloroplasts across piece leaf, may different concentrations CO2. Thus, sharp transitions Rubisco-limited, RuBP-regeneration-limited, triose-phosphate-utilization-limited assimilation predicted model rarely observed practice, instead regions co-limited assimilation. can represented mathematically via two empirical “curvature” parameters, discussed documentation calculate_c3_assimilation. following figure shows CO2 response curve calculated curvatures set 0.99 parameters identical ones used generate previous figure.  Note calculated curvature < 1 generally lower curvature = 1 due presence co-limitation; can seen comparing figure previous one (curvature = 1).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c3_aci_curves.html","id":"practicalities","dir":"Articles","previous_headings":"Background","what":"Practicalities","title":"Analyzing C3 A-Ci Curves","text":"important practicalities keep mind thinking CO2 response curves. One point photosynthesis models generally predict response assimilation CO2 concentration chloroplast (\\(C_c\\)), gas exchange measurements can determine CO2 concentration leaf’s intercellular spaces (\\(C_i\\)). Thus, extra step required interpreting -Ci curves. mesophyll conductance \\(g_{mc}\\) CO2 known, possible calculate values \\(C_c\\) \\(A_n\\), \\(C_i\\), \\(g_{mc}\\). Otherwise, typical assume infinite mesophyll conductance; case, \\(C_c = C_i\\), estimated values Vcmax parameters can considered “effective values” describing plant’s response intercellular CO2 rather true enzyme response chloroplastic CO2. Another important point plants generally appreciate starved CO2, usually possible start response curve low CO2 proceed upwards. typical approach : Begin ambient atmospheric CO2 levels. Decrease towards low value. Return ambient levels wait plant reacclimate; waiting period usually accomplished logging several points ambient CO2 levels. Increase higher values. taking approach, therefore becomes necessary remove extra points measured ambient CO2 levels reorder points according CO2 values plotting analyzing .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c3_aci_curves.html","id":"the-data","dir":"Articles","previous_headings":"Background","what":"The Data","title":"Analyzing C3 A-Ci Curves","text":"-Ci curves commonly measured using Licor portable photosynthesis system Li-6400 Li-6800. machines record values \\(A_n\\), \\(g_{sw}\\), many important quantities. produce two types output files: plain-text Microsoft Excel. often convenient work Excel files since entries can easily modified (example, remove extraneous row add new column). hand, can difficult access file contents using pieces software R. However, PhotoGEA package reduces barrier including tools reading Licor Excel files R, demonstrated following section.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c3_aci_curves.html","id":"loading-packages","dir":"Articles","previous_headings":"","what":"Loading Packages","title":"Analyzing C3 A-Ci Curves","text":"always, first step load packages using. addition PhotoGEA, also use lattice package generating plots. lattice package installed R setup, can install typing install.packages('lattice').","code":"# Load required packages library(PhotoGEA) library(lattice)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c3_aci_curves.html","id":"loading-licor-data","dir":"Articles","previous_headings":"","what":"Loading Licor Data","title":"Analyzing C3 A-Ci Curves","text":"PhotoGEA package includes two files representing -Ci curves measured using two Li-6800 instruments. data stored Microsoft Excel files, includes curves measured two different crop species (tobacco soybean) several different plots . curve sixteen-point CO2 response curve; words, CO2 concentration air surrounding leaf varied, \\(A_n\\) (among variables) measured CO2 setpoint. Although two files based real data, noise added since unpublished, files used examples. files stored computer somewhere R package installation directory, full paths files can obtained system.file: actually read data files store R objects, use read_gasex_file function PhotoGEA. Since multiple files read, call function file using lapply: result command R list “extended data frames” (abbreviated exdf objects). exdf class special data structure defined PhotoGEA package. many ways, exdf object equivalent data frame, major difference exdf object includes units column. information, type ?exdf R terminal access built-help menu entry, check Working Extended Data Frames vignette. Generally, convenient work single exdf object rather list , next step combine objects list. action can accomplished using rbind function, combines table-like objects rows; words, stacks two tables vertically. action makes sense tables columns, combine exdf objects, make sure case. PhotoGEA package includes function called identify_common_columns can used get names columns present Licor files. , can extract just columns, combine exdf objects single one. Now single R object called licor_data includes data several Licor Excel files. information consolidating information multiple files, see Common Patterns section Working Extended Data Frames vignette.","code":"# Define a vector of paths to the files we wish to load file_paths <- c(   system.file('extdata', 'c3_aci_1.xlsx', package = 'PhotoGEA'),   system.file('extdata', 'c3_aci_2.xlsx', package = 'PhotoGEA') ) # Load each file, storing the result in a list licor_exdf_list <- lapply(file_paths, function(fpath) {   read_gasex_file(fpath, 'time') }) # Get the names of all columns that are present in all of the Licor files columns_to_keep <- do.call(identify_common_columns, licor_exdf_list)  # Extract just these columns licor_exdf_list <- lapply(licor_exdf_list, function(x) {   x[ , columns_to_keep, TRUE] })  # Use `rbind` to combine all the data licor_data <- do.call(rbind, licor_exdf_list)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c3_aci_curves.html","id":"validating-the-data","dir":"Articles","previous_headings":"","what":"Validating the Data","title":"Analyzing C3 A-Ci Curves","text":"attempting fit curves, good idea basic checks data ensure organized properly measured properly.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c3_aci_curves.html","id":"basic-checks","dir":"Articles","previous_headings":"Validating the Data","what":"Basic Checks","title":"Analyzing C3 A-Ci Curves","text":"First, make sure column data whose value uniquely identifies curve. particular data set, several “user constants” defined making measurements help identify curve: instrument, species, plot. However, neither columns alone sufficient uniquely identify curve. can solve issue creating new column combines values : next step make sure column correctly identifies response curve. , can use check_licor_data function PhotoGEA. supply name column uniquely identify response curve (curve_identifier), expected number points curve (16), name “driving” column follow sequence curve (CO2_r_sp). data passes checks, function output produce messages. (information, see built-help menu entry typing ?check_licor_data.) However, check_licor_data detects issue, print helpful message R terminal. example, specified wrong number points wrong identifier column, get error messages:","code":"# Create a new identifier column formatted like `instrument - species - plot` licor_data[ , 'curve_identifier'] <-   paste(licor_data[ , 'instrument'], '-', licor_data[ , 'species'], '-', licor_data[ , 'plot']) # Make sure the data meets basic requirements check_licor_data(licor_data, 'curve_identifier', 16, 'CO2_r_sp') check_licor_data(licor_data, 'curve_identifier', 15) #>       curve_identifier npts #> 1 ripe1 - soybean - 5a   16 #> 2  ripe1 - tobacco - 1   16 #> 3  ripe1 - tobacco - 2   16 #> 4  ripe2 - soybean - 1   16 #> 5 ripe2 - soybean - 5b   16 #> 6  ripe2 - tobacco - 4   16 #> Error in check_licor_data(licor_data, \"curve_identifier\", 15): One or more curves does not have the expected number of points.  check_licor_data(licor_data, 'species', 16) #>   species npts #> 1 soybean   48 #> 2 tobacco   48 #> Error in check_licor_data(licor_data, \"species\", 16): One or more curves does not have the expected number of points.  check_licor_data(licor_data, 'curve_identifier', 16, 'Ci') #> Error in check_licor_data(licor_data, \"curve_identifier\", 16, \"Ci\"): Point 1 from curve `ripe1 - tobacco - 1` has value `Ci = 251.525996944688`, but the average value for this point across all curves is `Ci = 237.742020686325` #>   Point 1 from curve `ripe1 - tobacco - 2` has value `Ci = 261.420818849899`, but the average value for this point across all curves is `Ci = 237.742020686325` #>   Point 1 from curve `ripe2 - tobacco - 4` has value `Ci = 268.023119478639`, but the average value for this point across all curves is `Ci = 237.742020686325`"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c3_aci_curves.html","id":"plotting-the-a-ci-curves","dir":"Articles","previous_headings":"Validating the Data","what":"Plotting the A-Ci Curves","title":"Analyzing C3 A-Ci Curves","text":"One qualitative way check data simply create plot -Ci curves. situation, lattice library makes simple include curve separate subplot figure. example:  Whoops! curves look strange? Well, issues related sequence CO2 values used measuring curves. discussed Practicalities, several repeated points logged CO2 concentration, points logged order ascending descending concentration. fact, sequence CO2 setpoints follows: Ideally, like remove ninth tenth points (setpoint reset 400 allow leaf reacclimate ambient CO2 levels), reorder data arranged low high values Ci. can done using organize_response_curve function PhotoGEA: Now can plot :  still look bit strange. related noise intentionally added data. Nevertheless, points probably exclude attempting fit curves. One issue model never predicts decrease \\(\\) \\(Ci\\) increases. , usually good idea exclude points high \\(Ci\\) \\(\\) observed decrease. dropoff assimilation due one processes captured model, fits unreliable. remove points later, made several data quality checks.","code":"# Plot all A-Ci curves in the data set xyplot(   A ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']'),   ylab = paste('Net CO2 assimilation rate [', licor_data$units$A, ']') ) licor_data[licor_data[, 'curve_identifier'] == 'ripe2 - soybean - 1', 'CO2_r_sp'] #>  [1]  400  300  200  150  100   75   50   20  400  400  600  800 1000 1200 1500 #> [16] 1800 # Remove points with duplicated `CO2_r_sp` values and order by `Ci` licor_data <- organize_response_curve_data(     licor_data,     'curve_identifier',     c(9, 10),     'Ci' ) # Plot all A-Ci curves in the data set xyplot(   A ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']'),   ylab = paste('Net CO2 assimilation rate [', licor_data$units$A, ']') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c3_aci_curves.html","id":"additional-plots-for-qualitative-validation","dir":"Articles","previous_headings":"Validating the Data","what":"Additional Plots for Qualitative Validation","title":"Analyzing C3 A-Ci Curves","text":"Sometimes Licor override temperature humidity controls making measurements; case, conditions inside measurement chamber may stable, may wish exclude points. can check types issues making plots. following sections, generate several different plots check curve quality.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c3_aci_curves.html","id":"humidity-control","dir":"Articles","previous_headings":"Validating the Data > Additional Plots for Qualitative Validation","what":"Humidity Control","title":"Analyzing C3 A-Ci Curves","text":", Humidifier_% Desiccant_% represent flow humidifier desiccant columns, value 0 indicates valve column fully closed value 100 indicates valve column fully opened. RHcham represents relative humidity inside chamber percentage (words, value 0 100). curves measured, chamber humidity setpoint specified. , looking plot, check relative humidity fairly constant curve. Typically, accompanied relatively smooth changes valve percentages accomodate changes ambient humidity leaf photosynthesis. plot, data looks good.","code":"# Make a plot to check humidity control xyplot(   RHcham + `Humidifier_%` + `Desiccant_%` ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(0, 100),   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c3_aci_curves.html","id":"temperature-control","dir":"Articles","previous_headings":"Validating the Data > Additional Plots for Qualitative Validation","what":"Temperature Control","title":"Analyzing C3 A-Ci Curves","text":", TleafCnd leaf temperature measured using thermocouple, Txchg temperature heat exhanger used control air temperature measurement instrument. curves measured, exchanger setpoint specified. , looking plot, check Txchg constant curve leaf temperature vary erratic way. plot, data looks good.","code":"# Make a plot to check temperature control xyplot(   TleafCnd + Txchg ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(25, 40),   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']'),   ylab = paste0('Temperature (', licor_data$units$TleafCnd, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c3_aci_curves.html","id":"co2-control","dir":"Articles","previous_headings":"Validating the Data > Additional Plots for Qualitative Validation","what":"CO2 Control","title":"Analyzing C3 A-Ci Curves","text":", CO2_s CO2 concentration sample cell, CO2_r CO2 concentration reference cell, CO2_r_sp setpoint CO2_r. curves measured, sequence CO2_r values specified, , looking plot, check CO2_r close CO2_r_sp. also expect CO2_s bit lower CO2_r leaf sample chamber assimilating CO2, reduce concentration surrounding air. (exception rule occurs low values CO2_r_sp, since case enough carbon available assimilate, leaf actually releases CO2 due respiration.) plot, data looks good.","code":"# Make a plot to check CO2 control xyplot(   CO2_s + CO2_r + CO2_r_sp ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']'),   ylab = paste0('CO2 concentration (', licor_data$units$CO2_r, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c3_aci_curves.html","id":"stability","dir":"Articles","previous_headings":"Validating the Data > Additional Plots for Qualitative Validation","what":"Stability","title":"Analyzing C3 A-Ci Curves","text":"measuring response curves Licor, possible specify stability criteria point addition minimum maximum wait times. words, set point driving variable changed, machine waits stability criteria met; minimum waiting period, also maximum prevent machine waiting long. curves measured, stability criteria supplied net assimilation rate stomatal conductance gsw. stability status stored log file appropriate logging option stability set. Now, point, possible check whether stability achieved whether point logged maximum waiting period met. maximum waiting period reached plant still stabilized, data point may unreliable, can helpful check information. plot, :OK indicates whether stable (0 , 1 yes), gsw:OK indicates whether gsw stable (0 , 1 yes), Stable indicates total number stability conditions met. , looking points Stable 2. Otherwise, can check traces see whether gsw unstable. Comparing plots ones Plotting -Ci Curves, seems unstable points correspond “odd-looking” points -Ci curves, probably good idea remove fitting data.","code":"# Make a plot to check stability criteria xyplot(   `A:OK` + `gsw:OK` + Stable ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c3_aci_curves.html","id":"cleaning-the-licor-data","dir":"Articles","previous_headings":"Validating the Data","what":"Cleaning the Licor Data","title":"Analyzing C3 A-Ci Curves","text":"checking plots previous sections, two issues noticed: (1) points logged stability achieved (2) curves exhibit decrease \\(\\) high values \\(C_i\\). section, demonstrate remove unstable unusual points. following command keep points Stable exactly 2; condition means stability criteria satisfied. Sometimes, following procedure, curve stable points remaining; usually good idea automatically exclude curve fewer three stable points. Next, can use remove_points function PhotoGEA exclude points decrease \\(\\) high \\(C_i\\). just happens points measured ripe1 instrument occur highest CO2 setpoint value, easy specify :","code":"# Only keep points where stability was achieved licor_data <- licor_data[licor_data[, 'Stable'] == 2, , TRUE]  # Remove any curves that have fewer than three remaining points npts <- by(licor_data, licor_data[, 'curve_identifier'], nrow) ids_to_keep <- names(npts[npts > 2]) licor_data <- licor_data[licor_data[, 'curve_identifier'] %in% ids_to_keep, , TRUE] # Remove points where `instrument` is `ripe1` and `CO2_r_sp` is 1800 licor_data <- remove_points(   licor_data,   list(instrument = 'ripe1', CO2_r_sp = 1800) )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c3_aci_curves.html","id":"fitting-licor-data","dir":"Articles","previous_headings":"","what":"Fitting Licor Data","title":"Analyzing C3 A-Ci Curves","text":"Now checked data quality, ready perform fitting. order fit curves, several required pieces information included Licor data files produced instrument: values total pressure, values chloroplast CO2 concentration \\(C_c\\), temperature-dependent values important photosynthetic parameters \\(\\Gamma^*\\). However, PhotoGEA package includes three functions help calculations: calculate_total_pressure, apply_gm, calculate_arrhenius. requires exdf object containing Licor data. units required column checked attempt avoid unit-related errors. information functions can obtained built-help system typing ?calculate_total_pressure, ?apply_gm, ?calculate_arrhenius. Another important consideration apply_gm requires values mesophyll conductance CO2. Values mesophyll conductance can specified using set_variable function PhotoGEA. set gmc = 1.0 mol / m^2 / s / bar tobacco gmc = Inf soybean; case, soybean parameters determined fitting process “effective” parameters. calculate values \\(C_c\\), use Arrhenius parameters Sharkey et al. (2007) calculate temperature-dependent inputs: Together, functions add several new columns licor_data, including gmc, ‘Cc’, ‘Gamma_star’, others. information, now ready perform fitting procedure. operation, can use fit_c3_aci function PhotoGEA package, fits single response curve extract values key photosynthetic parameters. apply function curve larger data set consolidate results, can use conjunction consolidate, also part PhotoGEA. (information functions, see built-help menu entries typing ?fit_c3_aci, ?.exdf, ?consolidate, check Common Patterns section Working Extended Data Frames vignette.) Together, functions split apart main data using curve identifier column defined (Basic Checks), fit -Ci curve using FvCB model discussed Understanding C3 -Ci Curves, return resulting parameters fits: Note command, specified fixed = c(NA, NA, NA, NA) calling fit_c3_aci. , choosing vary four key photosynthetic parameters: TPU, J, Rd, Vcmax. fixed specified, take default value: c(Inf, NA, NA, NA). case, TPU fixed high value essentially disables triose-phosphate-utilization-limited assimilation, J, Rd, Vcmax varied.","code":"# Calculate total pressure in the Licor chamber licor_data <- calculate_total_pressure(licor_data)  # Specify separate mesophyll conductance values for each species licor_data <- set_variable(   licor_data, 'gmc', 'mol m^(-2) s^(-1) bar^(-1)',   id_column = 'species',   value_table = list(tobacco = 1.0, soybean = Inf) )  # Calculate Cc licor_data <- apply_gm(licor_data)  # Calculate temperature-dependent values of C3 photosynthetic parameters licor_data <- calculate_arrhenius(licor_data, c3_arrhenius_sharkey) # Fit the C3 A-Ci curves c3_aci_results <- consolidate(by(   licor_data,                       # The `exdf` object containing the curves   licor_data[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_c3_aci,                       # The function to apply to each chunk of `licor_data`   fixed = c(NA, NA, NA, NA)         # Additional argument passed to `fit_c3_aci` ))"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c3_aci_curves.html","id":"viewing-the-fitted-curves","dir":"Articles","previous_headings":"Fitting Licor Data","what":"Viewing the Fitted Curves","title":"Analyzing C3 A-Ci Curves","text":"made fits, now good idea visually check , making sure look reasonable. , can use xyplot lattice library quickly make plots fits, stored c3_aci_results$fits, exdf object:  Note addition fitted values , output also includes values potential limiting rates Ac, Aj, Ap. can also take look , although make plots bit busy. can also choose plot assimilation Cc rather Ci:  Considering two plots, can see although model able reproduce observed values fairly well, output parameters may less reliable others. example, triose-phosphate-utilization-limited rate Ap determined TPU parameter; curves, assimilation rate never limited Ap, resulting “best-fit” values TPU may meaningful curves. also one curve (ripe2 - soybean - 1) optimizer possibly overestimating J, Aj never limiting factor. address , possible force optimizer allow fits Aj less Ac certain threshold value Cc; essentially, way constrain crossover Rubisco-limited carboxylation RuBP-regeneration-limited carboxylation limited range Cc values. Adding restriction can sometimes produce reasonable fits.  can see Aj now significantly lower fit ripe2 - soybean - 1; however, fitted assimilation values still never limited Aj. may something pathological curve prevent us ever getting reasonable value J. situations, approach may successful. can also notice fit ripe1 - soybean - 5a little strange. Based values Ci Cc, seems plant’s stomata fully open measurement, almost fully restricting measured assimilation values Rubisco-limited range; nothing can done . also apparent TPU issue remains, curves never triose-phosphate-utilization-limited; , nothing can really done address besides measuring -Ci curves. Checking residuals also powerful way gauge quality fit. output fit_c3_aci includes residuals (calculated - A_fit) output, easy plot :  good fit produce small randomly-distributed residuals; clear pattern residuals, model able reproduce measured values well.","code":"# Plot the C3 A-Ci fits xyplot(   A + A_fit ~ Ci | curve_identifier,   data = c3_aci_results$fits$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste0('Intercellular CO2 concentration (', c3_aci_results$fits$units$Ci, ')'),   ylab = paste0('Net CO2 assimilation rate (', c3_aci_results$fits$units$A, ')') ) # Plot the C3 A-Cc fits (including limiting rates) xyplot(   A + Ac + Aj + Ap + A_fit ~ Cc | curve_identifier,   data = c3_aci_results$fits$main_data,   type = 'l',   auto.key = list(space = 'right'),   grid = TRUE,   xlab = paste0('Chloroplast CO2 concentration (', c3_aci_results$fits$units$Ci, ')'),   ylab = paste0('Net CO2 assimilation rate (', c3_aci_results$fits$units$A, ')'),   par.settings = list(     superpose.line = list(col = multi_curve_colors()),     superpose.symbol = list(col = multi_curve_colors())   ) ) # Fit the C3 A-Ci curves c3_aci_results <- consolidate(by(   licor_data,                       # The `exdf` object containing the curves   licor_data[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_c3_aci,                       # The function to apply to each chunk of `licor_data`   fixed = c(NA, NA, NA, NA),        # Additional argument passed to `fit_c3_aci`   cj_crossover_min = 100,           # Wj must be > Wc when Cc < 100 ppm   cj_crossover_max = 550            # Wj must be < Wc when Cc > 550 ppm ))  # Plot the C3 A-Cc fits (including limiting rates) xyplot(   A + Ac + Aj + Ap + A_fit ~ Cc | curve_identifier,   data = c3_aci_results$fits$main_data,   type = 'l',   auto.key = list(space = 'right'),   grid = TRUE,   xlab = paste0('Chloroplast CO2 concentration (', c3_aci_results$fits$units$Ci, ')'),   ylab = paste0('Net CO2 assimilation rate (', c3_aci_results$fits$units$A, ')'),   par.settings = list(     superpose.line = list(col = multi_curve_colors()),     superpose.symbol = list(col = multi_curve_colors())   ) ) # Plot the residuals xyplot(   A_residuals ~ Ci | curve_identifier,   data = c3_aci_results$fits$main_data,   type = 'b',   pch = 16,   grid = TRUE,   xlab = paste0('Intercellular CO2 concentration (', c3_aci_results$fits$units$Ci, ')'),   ylab = paste0('Assimilation rate residual (measured - fitted)\\n(', c3_aci_results$fits$units$A, ')') )"},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c3_aci_curves.html","id":"visualizing-average-fit-parameters","dir":"Articles","previous_headings":"Examining the Results","what":"Visualizing Average Fit Parameters","title":"Analyzing C3 A-Ci Curves","text":"performed fits, can now take look fitted parameter values, stored c3_aci_results$parameters, another exdf object. One way using barchart_with_errorbars function PhotoGEA create barcharts average values species, following example showing fitted values Vcmax:  Another option create box-whisper plots using bwplot function lattice package. use function show values J:","code":"# Make a barchart showing average Vcmax values barchart_with_errorbars(   c3_aci_results$parameters[, 'Vcmax_at_25'],   c3_aci_results$parameters[, 'species'],   ylim = c(0, 180),   xlab = 'Species',   ylab = paste0('Vcmax at 25 degrees C (', c3_aci_results$parameters$units$Vcmax_at_25, ')') ) # Make a boxplot showing the distribution of J values bwplot(   J_at_25 ~ species,   data = c3_aci_results$parameters$main_data,   ylim = c(0, 300),   xlab = 'Species',   ylab = paste0('J at 25 degrees C (', c3_aci_results$parameters$units$J_at_25, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c3_aci_curves.html","id":"accessing-raw-and-average-values-of-fit-parameters","dir":"Articles","previous_headings":"Examining the Results","what":"Accessing Raw and Average Values of Fit Parameters","title":"Analyzing C3 A-Ci Curves","text":"can also take look raw numbers fitted parameters average values. c3_aci_results$parameters object contains many columns care . can view follows: Alternatively, can extract average values parameters species using basic_stats function PhotoGEA: course, advanced statistical tests check differences groups can also performed within R using packages onewaytests DescTools. Alternatively, parameter values can exported comma-separated-value (CSV) file analyzed another software environment like jmp.","code":"# View the C3 parameters columns_for_viewing <-   c('instrument', 'species', 'plot', 'Vcmax_at_25', 'J_at_25', 'Rd_at_25', 'TPU')  c3_aci_parameters <-   c3_aci_results$parameters[ , columns_for_viewing, TRUE]  print(c3_aci_parameters) #>   instrument [UserDefCon] (NA) species [UserDefCon] (NA) plot [UserDefCon] (NA) #> 1                        ripe1                   soybean                     5a #> 2                        ripe1                   tobacco                      1 #> 3                        ripe1                   tobacco                      2 #> 4                        ripe2                   soybean                      1 #> 5                        ripe2                   soybean                     5b #> 6                        ripe2                   tobacco                      4 #>   Vcmax_at_25 [fit_c3_aci] (micromol m^(-2) s^(-1)) #> 1                                         131.07955 #> 2                                         152.62464 #> 3                                         127.00819 #> 4                                         106.53575 #> 5                                         121.02817 #> 6                                          94.34416 #>   J_at_25 [fit_c3_aci] (micromol m^(-2) s^(-1)) #> 1                                      189.7304 #> 2                                      240.4423 #> 3                                      211.5295 #> 4                                      168.7631 #> 5                                      160.3583 #> 6                                      188.6700 #>   Rd_at_25 [fit_c3_aci] (micromol m^(-2) s^(-1)) #> 1                                       3.254662 #> 2                                       3.216083 #> 3                                       2.761860 #> 4                                       2.775662 #> 5                                       3.879665 #> 6                                       2.252303 #>   TPU [fit_c3_aci] (micromol m^(-2) s^(-1)) #> 1                                  22.41905 #> 2                                  23.72679 #> 3                                  21.88365 #> 4                                  13.26002 #> 5                                  24.86546 #> 6                                  15.34649 # Compute the average and standard error of each parameter for each species c3_aci_averages <- basic_stats(c3_aci_results$parameters, 'species')  # View the averages and errors columns_to_view <- c(   'species',   'Vcmax_at_25_avg', 'Vcmax_at_25_stderr',   'J_at_25_avg', 'J_at_25_stderr',   'Rd_at_25_avg', 'Rd_at_25_stderr',   'TPU_avg', 'TPU_stderr' ) print(c3_aci_averages[ , columns_to_view, TRUE]) #>   species [UserDefCon] (NA) #> 1                   soybean #> 2                   tobacco #>   Vcmax_at_25_avg [fit_c3_aci] (micromol m^(-2) s^(-1)) #> 1                                              119.5478 #> 2                                              124.6590 #>   Vcmax_at_25_stderr [fit_c3_aci] (micromol m^(-2) s^(-1)) #> 1                                                 7.123745 #> 2                                                16.865078 #>   J_at_25_avg [fit_c3_aci] (micromol m^(-2) s^(-1)) #> 1                                          172.9506 #> 2                                          213.5473 #>   J_at_25_stderr [fit_c3_aci] (micromol m^(-2) s^(-1)) #> 1                                             8.733683 #> 2                                            14.979403 #>   Rd_at_25_avg [fit_c3_aci] (micromol m^(-2) s^(-1)) #> 1                                           3.303330 #> 2                                           2.743415 #>   Rd_at_25_stderr [fit_c3_aci] (micromol m^(-2) s^(-1)) #> 1                                             0.3196257 #> 2                                             0.2783724 #>   TPU_avg [fit_c3_aci] (micromol m^(-2) s^(-1)) #> 1                                      20.18151 #> 2                                      20.31897 #>   TPU_stderr [fit_c3_aci] (micromol m^(-2) s^(-1)) #> 1                                         3.532067 #> 2                                         2.542540"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c3_aci_curves.html","id":"customizing-your-script","dir":"Articles","previous_headings":"","what":"Customizing Your Script","title":"Analyzing C3 A-Ci Curves","text":"Note commands vignette written general way can used basis analysis script (see Commands Document). order use script, following changes may required. may also others specifically mentioned .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c3_aci_curves.html","id":"input-files","dir":"Articles","previous_headings":"Customizing Your Script","what":"Input Files","title":"Analyzing C3 A-Ci Curves","text":"file paths specified file_paths need modified point Licor files. script, may want consider using choose_input_licor_files function PhotoGEA; function create pop-browser window can interactively select set Licor files. Sometimes convenient writing full file paths. example, replace previous definition file_paths one: Unfortunately, choose_input_licor_files available interactive R sessions running Microsoft Windows, also platform-independent option: choose_input_files. See Translation section Developing Data Analysis Pipeline vignette details.","code":"# Interactively define a vector of paths to the files we wish to load file_paths <- choose_input_licor_files()"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c3_aci_curves.html","id":"curve-identifier","dir":"Articles","previous_headings":"Customizing Your Script","what":"Curve Identifier","title":"Analyzing C3 A-Ci Curves","text":"Depending user constants defined Licor Excel files, may need modify definition curve_identifier column.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c3_aci_curves.html","id":"data-cleaning","dir":"Articles","previous_headings":"Customizing Your Script","what":"Data Cleaning","title":"Analyzing C3 A-Ci Curves","text":"Depending qualitative data checks, may need change input arguments remove_points. might also necessary remove unstable points performing fits. Often, helpful perform data cleaning first, remove problematic points seem cause problems fits.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c3_aci_curves.html","id":"tpu-limitations","dir":"Articles","previous_headings":"Customizing Your Script","what":"TPU Limitations","title":"Analyzing C3 A-Ci Curves","text":"example, consider triose phosphate utilization factor may possibly limit assimilation. However, discussed Fitting Licor Data, also possible remove potential limitation model fixing TPU high value fitting J, Rd, Vcmax. Often wise first try fitting set curves without TPU limitations, consider allowing TPU limitations resulting fits good.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c3_aci_curves.html","id":"averages-and-standard-errors","dir":"Articles","previous_headings":"Customizing Your Script","what":"Averages and Standard Errors","title":"Analyzing C3 A-Ci Curves","text":"Depending data organized, may want change column used divide data calculating averages standard errors.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c3_aci_curves.html","id":"plots","dir":"Articles","previous_headings":"Customizing Your Script","what":"Plots","title":"Analyzing C3 A-Ci Curves","text":"may need change axis limits plots. Alternatively, can remove , allowing xyplot automatically choose .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c3_aci_curves.html","id":"saving-results","dir":"Articles","previous_headings":"Customizing Your Script","what":"Saving Results","title":"Analyzing C3 A-Ci Curves","text":"may want use write.csv save fitting results csv files. example, following commands allow interactively choose output filenames resulting csv files:","code":"write.csv(c3_aci_results$fits, file.choose(), row.names = FALSE) write.csv(c3_aci_results$parameters, file.choose(), row.names = FALSE) write.csv(c3_aci_averages, file.choose(), row.names = FALSE)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c3_aci_curves.html","id":"commands-from-this-document","dir":"Articles","previous_headings":"","what":"Commands From This Document","title":"Analyzing C3 A-Ci Curves","text":"following code chunk includes central commands used throughout document. compiled make easy copy/paste text file initialize script. Annotation also added clearly indicate four steps involved data analysis, described Developing Data Analysis Pipeline vignette.","code":"### ### PRELIMINARIES: ### Loading packages, defining constants, creating helping functions, etc. ###  # Load required packages library(PhotoGEA) library(lattice)  ### ### TRANSLATION: ### Creating convenient R objects from raw data files ###  # Define a vector of paths to the files we wish to load file_paths <- c(   system.file('extdata', 'c3_aci_1.xlsx', package = 'PhotoGEA'),   system.file('extdata', 'c3_aci_2.xlsx', package = 'PhotoGEA') )  # Load each file, storing the result in a list licor_exdf_list <- lapply(file_paths, function(fpath) {   read_gasex_file(fpath, 'time') })  # Get the names of all columns that are present in all of the Licor files columns_to_keep <- do.call(identify_common_columns, licor_exdf_list)  # Extract just these columns licor_exdf_list <- lapply(licor_exdf_list, function(x) {   x[ , columns_to_keep, TRUE] })  # Use `rbind` to combine all the data licor_data <- do.call(rbind, licor_exdf_list)  ### ### VALIDATION: ### Organizing the data, checking its consistency and quality, cleaning it ###  # Create a new identifier column formatted like `instrument - species - plot` licor_data[ , 'curve_identifier'] <-   paste(licor_data[ , 'instrument'], '-', licor_data[ , 'species'], '-', licor_data[ , 'plot'])  # Make sure the data meets basic requirements check_licor_data(licor_data, 'curve_identifier', 16, 'CO2_r_sp')  # Remove points with duplicated `CO2_r_sp` values and order by `Ci` licor_data <- organize_response_curve_data(     licor_data,     'curve_identifier',     c(9, 10),     'Ci' )  # Plot all A-Ci curves in the data set xyplot(   A ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']'),   ylab = paste('Net CO2 assimilation rate [', licor_data$units$A, ']') )  # Make a plot to check humidity control xyplot(   RHcham + `Humidifier_%` + `Desiccant_%` ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(0, 100),   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']') )  # Make a plot to check temperature control xyplot(   TleafCnd + Txchg ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(25, 40),   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']'),   ylab = paste0('Temperature (', licor_data$units$TleafCnd, ')') )  # Make a plot to check CO2 control xyplot(   CO2_s + CO2_r + CO2_r_sp ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']'),   ylab = paste0('CO2 concentration (', licor_data$units$CO2_r, ')') )  # Make a plot to check stability criteria xyplot(   `A:OK` + `gsw:OK` + Stable ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']') )  # Only keep points where stability was achieved licor_data <- licor_data[licor_data[, 'Stable'] == 2, , TRUE]  # Remove any curves that have fewer than three remaining points npts <- by(licor_data, licor_data[, 'curve_identifier'], nrow) ids_to_keep <- names(npts[npts > 2]) licor_data <- licor_data[licor_data[, 'curve_identifier'] %in% ids_to_keep, , TRUE]  # Remove points where `instrument` is `ripe1` and `CO2_r_sp` is 1800 licor_data <- remove_points(   licor_data,   list(instrument = 'ripe1', CO2_r_sp = 1800) )  ### ### PROCESSING: ### Extracting new pieces of information from the data ###  # Calculate total pressure in the Licor chamber licor_data <- calculate_total_pressure(licor_data)  # Specify separate mesophyll conductance values for each species licor_data <- set_variable(   licor_data, 'gmc', 'mol m^(-2) s^(-1) bar^(-1)',   id_column = 'species',   value_table = list(tobacco = 1.0, soybean = Inf) )  # Calculate Cc licor_data <- apply_gm(licor_data)  # Calculate temperature-dependent values of C3 photosynthetic parameters licor_data <- calculate_arrhenius(licor_data, c3_arrhenius_sharkey)  # Fit the C3 A-Ci curves c3_aci_results <- consolidate(by(   licor_data,                       # The `exdf` object containing the curves   licor_data[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_c3_aci,                       # The function to apply to each chunk of `licor_data`   fixed = c(NA, NA, NA, NA),        # Additional argument passed to `fit_c3_aci`   cj_crossover_min = 100,           # Wj must be > Wc when Cc < 100 ppm   cj_crossover_max = 550            # Wj must be < Wc when Cc > 550 ppm ))  # Plot the C3 A-Cc fits (including limiting rates) xyplot(   A + Ac + Aj + Ap + A_fit ~ Cc | curve_identifier,   data = c3_aci_results$fits$main_data,   type = 'l',   auto.key = list(space = 'right'),   grid = TRUE,   xlab = paste0('Chloroplast CO2 concentration (', c3_aci_results$fits$units$Ci, ')'),   ylab = paste0('Net CO2 assimilation rate (', c3_aci_results$fits$units$A, ')'),   par.settings = list(     superpose.line = list(col = multi_curve_colors()),     superpose.symbol = list(col = multi_curve_colors())   ) )  # Plot the C3 A-Ci fits xyplot(   A + A_fit ~ Ci | curve_identifier,   data = c3_aci_results$fits$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste0('Intercellular CO2 concentration (', c3_aci_results$fits$units$Ci, ')'),   ylab = paste0('Net CO2 assimilation rate (', c3_aci_results$fits$units$A, ')') )  # Plot the residuals xyplot(   A_residuals ~ Ci | curve_identifier,   data = c3_aci_results$fits$main_data,   type = 'b',   pch = 16,   grid = TRUE,   xlab = paste0('Intercellular CO2 concentration (', c3_aci_results$fits$units$Ci, ')'),   ylab = paste0('Assimilation rate residual (measured - fitted)\\n(', c3_aci_results$fits$units$A, ')') )  ### ### SYNTHESIS: ### Using plots and statistics to help draw conclusions from the data ###  # Make a barchart showing average Vcmax values barchart_with_errorbars(   c3_aci_results$parameters[, 'Vcmax_at_25'],   c3_aci_results$parameters[, 'species'],   ylim = c(0, 180),   xlab = 'Species',   ylab = paste0('Vcmax at 25 degrees C (', c3_aci_results$parameters$units$Vcmax_at_25, ')') )  # Make a boxplot showing the distribution of J values bwplot(   J_at_25 ~ species,   data = c3_aci_results$parameters$main_data,   ylim = c(0, 300),   xlab = 'Species',   ylab = paste0('J at 25 degrees C (', c3_aci_results$parameters$units$J_at_25, ')') )  # View the C3 parameters columns_for_viewing <-   c('instrument', 'species', 'plot', 'Vcmax_at_25', 'J_at_25', 'Rd_at_25', 'TPU')  c3_aci_parameters <-   c3_aci_results$parameters[ , columns_for_viewing, TRUE]  print(c3_aci_parameters)  # Compute the average and standard error of each parameter for each species c3_aci_averages <- basic_stats(c3_aci_results$parameters, 'species')  # View the averages and errors columns_to_view <- c(   'species',   'Vcmax_at_25_avg', 'Vcmax_at_25_stderr',   'J_at_25_avg', 'J_at_25_stderr',   'Rd_at_25_avg', 'Rd_at_25_stderr',   'TPU_avg', 'TPU_stderr' ) print(c3_aci_averages[ , columns_to_view, TRUE])"},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c4_aci_curves.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Analyzing C4 A-Ci Curves","text":"vignette, give example showing analyze C4 -Ci data using PhotoGEA package. commands vignette can used initialize script, described Customizing Script.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c4_aci_curves.html","id":"understanding-c4-a-ci-curves","dir":"Articles","previous_headings":"Background","what":"Understanding C4 A-Ci Curves","title":"Analyzing C4 A-Ci Curves","text":"-Ci curve (CO2 response curve) particular type gas exchange measurement living leaf exposed varying concentrations CO2. CO2 concentration sequence, net assimilation rate \\(A_n\\), stomatal conductance H2O (\\(g_{sw}\\)), important quantities measured recorded. Typically, environmental variables temperature, humidity, incident photosynthetically-active photon flux density held constant measurement sequence changes photosynthesis can attributed CO2 alone. different cell structures biochemical pathways, C3 C4 plants different responses CO2. , discussing C4 plants. full C4 photosynthetic pathway quite complicated, consisting least two hundred individual reactions, may impact measured -Ci curve. However, simplified models photosynthesis available much easier understand work . models tend based around PEP carboxylase rubisco kinetics, describing net assimilation rate responds partial pressure CO2 mesophyll bundle sheath cells. widely-used model described Biochemical Models Leaf Photosynthesis (S. von Caemmerer 2000). model provides framework understanding changes \\(A_n\\) occur C4 plant exposed successively higher concentrations CO2. Overall, photosynthetic response CO2 high light conditions can divided two separate ranges: low levels CO2, CO2 assimilation primarily limited PEP carboxylation mesophyll cells. high levels CO2, CO2 assimilation primarily limited rubisco activity bundle sheath cells (possibly rate PEP carboxylase regeneration). specifically, model provides equations calculate net assimilation rate \\(A_n\\) maximumum rate PEP carboxylation (\\(V_{p,max}\\)), maximum rate PEP carboxylase regeneration (\\(V_{p,r}\\)), maximum rate rubisco activity (\\(V_{c,max}\\)), total rate mitochondrial respiration mesophyll bundle sheath cells (\\(R_d\\)), partial pressure CO2 mesophyll (\\(P_{cm}\\)), several parameters. full equations quite complicated, can approximated simpler version \\(A_n\\) given minimum three separate enzyme-limited assimilation rates: PEP-carboxylation-limited rate (\\(A_{pc}\\)). rubisco-limited rate (\\(A_r\\)). PEP-regeneration-limited rate (\\(A_{pr}\\)). Using equations compose model, possible calculate plots like one , illustrates three different limiting rates overall net assimilation rate calculated using full equations. two distinct ranges can identified initial part curve (roughly linear increase \\(A_n\\) \\(P_{cm}\\)) later part (\\(A_n\\) nearly flat little dependence \\(P_{cm}\\)).  (Note: figure generated using calculate_c4_assimilation function PhotoGEA package, represents photosynethetic response C4 leaf according model Rd = 1 micromol m^(-2) s^(-1), Vpmax = 150 micromol m^(-2) s^(-1), Vcmax = 30 micromol m^(-2) s^(-1), Vpr = 80 micromol m^(-2) s^(-1), leaf temperature 30 degrees C. Arrhenius temperature response parameters taken S. von Caemmerer (2021).) Thus, one common reasons measure -Ci curve interpret context model. words, fitting model’s equations measured curve, possible estimate values Rd, Vpmax, Vcmax, Vpr. See documentation calculate_c4_assimilation information important quantities. evident figure , rubisco activity PEP regeneration limitations actually produce similar end result, \\(A_n\\) becomes essentially flat \\(P_{cm}\\) increases. reason, practically impossible distinguish two types limiting rates analyzing C4 -Ci curve; limitations considered simultaneously, usually possible optimization algorithm determine unique solution. , common set either Vpr Vcmax high value fitting (never becomes limiting factor), allow vary. rest document, setting Vpr = 800 allowing Vcmax vary performing fits; default behavior fit_c4_aci function PhotoGEA package, discussed later.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c4_aci_curves.html","id":"practicalities","dir":"Articles","previous_headings":"Background","what":"Practicalities","title":"Analyzing C4 A-Ci Curves","text":"important practicalities keep mind thinking CO2 response curves. One point C4 photosynthesis models generally predict response assimilation partial pressure CO2 mesophyll (\\(P_{cm}\\)), gas exchange measurements can determine CO2 concentration leaf’s intercellular spaces (\\(C_i\\)). Thus, extra step required interpreting -Ci curves. mesophyll conductance CO2 (\\(g_{mc}\\)) total pressure (\\(P\\)) known, possible calculate values \\(P_{cm}\\) \\(A_n\\), \\(C_i\\), \\(P\\), \\(g_{mc}\\). Otherwise, also possible assume infinite mesophyll conductance; case, \\(C_m = C_i\\), estimated values Vcmax parameters can considered “effective values” describing plant’s response intercellular CO2. Another important point plants generally appreciate starved CO2, usually possible start response curve low CO2 proceed upwards. typical approach : Begin ambient atmospheric CO2 levels. Decrease towards low value. Return ambient levels wait plant reacclimate; waiting period usually accomplished logging several points ambient CO2 levels. Increase higher values. taking approach, therefore becomes necessary remove extra points measured ambient CO2 levels reorder points according CO2 values plotting analyzing .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c4_aci_curves.html","id":"the-data","dir":"Articles","previous_headings":"Background","what":"The Data","title":"Analyzing C4 A-Ci Curves","text":"-Ci curves commonly measured using Licor portable photosynthesis system Li-6400 Li-6800. machines record values \\(A_n\\), \\(g_{sw}\\), many important quantities. produce two types output files: plain-text Microsoft Excel. often convenient work Excel files since entries can easily modified (example, remove extraneous row add new column). hand, can difficult access file contents using pieces software R. However, PhotoGEA package reduces barrier including tools reading Licor Excel files R, demonstrated following section.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c4_aci_curves.html","id":"loading-packages","dir":"Articles","previous_headings":"","what":"Loading Packages","title":"Analyzing C4 A-Ci Curves","text":"always, first step load packages using. addition PhotoGEA, also use lattice package generating plots. lattice package installed R setup, can install typing install.packages('lattice').","code":"# Load required packages library(PhotoGEA) library(lattice)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c4_aci_curves.html","id":"loading-licor-data","dir":"Articles","previous_headings":"","what":"Loading Licor Data","title":"Analyzing C4 A-Ci Curves","text":"PhotoGEA package includes two files representing -Ci curves measured using two Li-6800 instruments. data stored Microsoft Excel files, includes curves measured two different crop species (tobacco soybean) several different plots . curve sixteen-point CO2 response curve; words, CO2 concentration air surrounding leaf varied, \\(A_n\\) (among variables) measured CO2 setpoint. Although two files based real data, noise added since unpublished, files used examples. files stored computer somewhere R package installation directory, full paths files can obtained system.file: actually read data files store R objects, use read_gasex_file function PhotoGEA. Since multiple files read, call function file using lapply: result command R list “extended data frames” (abbreviated exdf objects). exdf class special data structure defined PhotoGEA package. many ways, exdf object equivalent data frame, major difference exdf object includes units column. information, type ?exdf R terminal access built-help menu entry, check Working Extended Data Frames vignette. Generally, convenient work single exdf object rather list , next step combine objects list. action can accomplished using rbind function, combines table-like objects rows; words, stacks two tables vertically. action makes sense tables columns, combine exdf objects, make sure case. PhotoGEA package includes function called identify_common_columns can used get names columns present Licor files. , can extract just columns, combine exdf objects single one. Now single R object called licor_data includes data several Licor Excel files. information consolidating information multiple files, see Common Patterns section Working Extended Data Frames vignette.","code":"# Define a vector of paths to the files we wish to load file_paths <- c(   system.file('extdata', 'c4_aci_1.xlsx', package = 'PhotoGEA'),   system.file('extdata', 'c4_aci_2.xlsx', package = 'PhotoGEA') ) # Load each file, storing the result in a list licor_exdf_list <- lapply(file_paths, function(fpath) {   read_gasex_file(fpath, 'time') }) # Get the names of all columns that are present in all of the Licor files columns_to_keep <- do.call(identify_common_columns, licor_exdf_list)  # Extract just these columns licor_exdf_list <- lapply(licor_exdf_list, function(x) {   x[ , columns_to_keep, TRUE] })  # Use `rbind` to combine all the data licor_data <- do.call(rbind, licor_exdf_list)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c4_aci_curves.html","id":"validating-the-data","dir":"Articles","previous_headings":"","what":"Validating the Data","title":"Analyzing C4 A-Ci Curves","text":"attempting fit curves, good idea basic checks data ensure organized properly measured properly.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c4_aci_curves.html","id":"basic-checks","dir":"Articles","previous_headings":"Validating the Data","what":"Basic Checks","title":"Analyzing C4 A-Ci Curves","text":"First, make sure column data whose value uniquely identifies curve. particular data set, several “user constants” defined making measurements help identify curve: instrument, species, plot. However, neither columns alone sufficient uniquely identify curve. can solve issue creating new column combines values : next step make sure column correctly identifies response curve. , can use check_licor_data function PhotoGEA. supply name column uniquely identify response curve (curve_identifier), expected number points curve (16), name “driving” column follow sequence curve (CO2_r_sp). data passes checks, function output produce messages. (information, see built-help menu entry typing ?check_licor_data.) However, check_licor_data detects issue, print helpful message R terminal. example, specified wrong number points wrong identifier column, get error messages:","code":"# Create a new identifier column formatted like `instrument - species - plot` licor_data[ , 'curve_identifier'] <-   paste(licor_data[ , 'instrument'], '-', licor_data[ , 'species'], '-', licor_data[ , 'plot']) # Make sure the data meets basic requirements check_licor_data(licor_data, 'curve_identifier', 16, 'CO2_r_sp') check_licor_data(licor_data, 'curve_identifier', 15) #>      curve_identifier npts #> 1   ripe1 - maize - 5   16 #> 2 ripe1 - sorghum - 2   16 #> 3 ripe1 - sorghum - 3   16 #> 4   ripe2 - maize - 2   16 #> 5 ripe2 - sorghum - 3   16 #> Error in check_licor_data(licor_data, \"curve_identifier\", 15): One or more curves does not have the expected number of points.  check_licor_data(licor_data, 'species', 16) #>   species npts #> 1   maize   32 #> 2 sorghum   48 #> Error in check_licor_data(licor_data, \"species\", 16): One or more curves does not have the expected number of points.  check_licor_data(licor_data, 'curve_identifier', 16, 'Ci') #> Error in check_licor_data(licor_data, \"curve_identifier\", 16, \"Ci\"): Point 1 from curve `ripe1 - maize - 5` has value `Ci = 95.1988547749169`, but the average value for this point across all curves is `Ci = 90.7350174923248` #>   Point 1 from curve `ripe2 - maize - 2` has value `Ci = 112.053645568057`, but the average value for this point across all curves is `Ci = 90.7350174923248`"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c4_aci_curves.html","id":"plotting-the-a-ci-curves","dir":"Articles","previous_headings":"Validating the Data","what":"Plotting the A-Ci Curves","title":"Analyzing C4 A-Ci Curves","text":"One qualitative way check data simply create plot -Ci curves. situation, lattice library makes simple include curve separate subplot figure. example:  Whoops! curves look strange? Well, issues related sequence CO2 values used measuring curves. discussed Practicalities, several repeated points logged CO2 concentration, points logged order ascending descending concentration. fact, sequence CO2 setpoints follows: Ideally, like remove ninth tenth points (setpoint reset 400 allow leaf reacclimate ambient CO2 levels), reorder data arranged low high values Ci. can done using organize_response_curve function PhotoGEA: Now can plot :  still look bit strange. related noise intentionally added data. Nevertheless, points probably exclude attempting fit curves. One issue model never predicts decrease \\(\\) \\(Ci\\) increases. , usually good idea exclude points high \\(Ci\\) \\(\\) observed decrease. dropoff assimilation due one processes captured model, fits unreliable. remove points later, made several data quality checks.","code":"# Plot all A-Ci curves in the data set xyplot(   A ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']'),   ylab = paste('Net CO2 assimilation rate [', licor_data$units$A, ']') ) licor_data[licor_data[, 'curve_identifier'] == 'ripe2 - maize - 2', 'CO2_r_sp'] #>  [1]  400  300  200  150  100   75   50   20  400  400  600  800 1000 1200 1500 #> [16] 1800 # Remove points with duplicated `CO2_r_sp` values and order by `Ci` licor_data <- organize_response_curve_data(     licor_data,     'curve_identifier',     c(9, 10),     'Ci' ) # Plot all A-Ci curves in the data set xyplot(   A ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']'),   ylab = paste('Net CO2 assimilation rate [', licor_data$units$A, ']') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c4_aci_curves.html","id":"additional-plots-for-qualitative-validation","dir":"Articles","previous_headings":"Validating the Data","what":"Additional Plots for Qualitative Validation","title":"Analyzing C4 A-Ci Curves","text":"Sometimes Licor override temperature humidity controls making measurements; case, conditions inside measurement chamber may stable, may wish exclude points. can check types issues making plots. following sections, generate several different plots check curve quality.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c4_aci_curves.html","id":"humidity-control","dir":"Articles","previous_headings":"Validating the Data > Additional Plots for Qualitative Validation","what":"Humidity Control","title":"Analyzing C4 A-Ci Curves","text":", Humidifier_% Desiccant_% represent flow humidifier desiccant columns, value 0 indicates valve column fully closed value 100 indicates valve column fully opened. RHcham represents relative humidity inside chamber percentage (words, value 0 100). curves measured, chamber humidity setpoint specified. , looking plot, check relative humidity fairly constant curve. Typically, accompanied relatively smooth changes valve percentages accomodate changes ambient humidity leaf photosynthesis. plot, data looks good.","code":"# Make a plot to check humidity control xyplot(   RHcham + `Humidifier_%` + `Desiccant_%` ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(0, 100),   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c4_aci_curves.html","id":"temperature-control","dir":"Articles","previous_headings":"Validating the Data > Additional Plots for Qualitative Validation","what":"Temperature Control","title":"Analyzing C4 A-Ci Curves","text":", TleafCnd leaf temperature measured using thermocouple, Txchg temperature heat exhanger used control air temperature measurement instrument. curves measured, exchanger setpoint specified. , looking plot, check Txchg constant curve leaf temperature vary erratic way. plot, data looks good.","code":"# Make a plot to check temperature control xyplot(   TleafCnd + Txchg ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(25, 40),   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']'),   ylab = paste0('Temperature (', licor_data$units$TleafCnd, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c4_aci_curves.html","id":"co2-control","dir":"Articles","previous_headings":"Validating the Data > Additional Plots for Qualitative Validation","what":"CO2 Control","title":"Analyzing C4 A-Ci Curves","text":", CO2_s CO2 concentration sample cell, CO2_r CO2 concentration reference cell, CO2_r_sp setpoint CO2_r. curves measured, sequence CO2_r values specified, , looking plot, check CO2_r close CO2_r_sp. also expect CO2_s bit lower CO2_r leaf sample chamber assimilating CO2, reduce concentration surrounding air. (exception rule occurs low values CO2_r_sp, since case enough carbon available assimilate, leaf actually releases CO2 due respiration.) plot, data looks good.","code":"# Make a plot to check CO2 control xyplot(   CO2_s + CO2_r + CO2_r_sp ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']'),   ylab = paste0('CO2 concentration (', licor_data$units$CO2_r, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c4_aci_curves.html","id":"stability","dir":"Articles","previous_headings":"Validating the Data > Additional Plots for Qualitative Validation","what":"Stability","title":"Analyzing C4 A-Ci Curves","text":"measuring response curves Licor, possible specify stability criteria point addition minimum maximum wait times. words, set point driving variable changed, machine waits stability criteria met; minimum waiting period, also maximum prevent machine waiting long. curves measured, stability criteria supplied net assimilation rate stomatal conductance gsw. stability status stored log file appropriate logging option stability set. Now, point, possible check whether stability achieved whether point logged maximum waiting period met. maximum waiting period reached plant still stabilized, data point may unreliable, can helpful check information. plot, :OK indicates whether stable (0 , 1 yes), gsw:OK indicates whether gsw stable (0 , 1 yes), Stable indicates total number stability conditions met. , looking points Stable 2. Otherwise, can check traces see whether gsw unstable. Comparing plots ones Plotting -Ci Curves, seems unstable points correspond “odd-looking” points -Ci curves, probably good idea remove fitting data.","code":"# Make a plot to check stability criteria xyplot(   `A:OK` + `gsw:OK` + Stable ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c4_aci_curves.html","id":"cleaning-the-licor-data","dir":"Articles","previous_headings":"Validating the Data","what":"Cleaning the Licor Data","title":"Analyzing C4 A-Ci Curves","text":"checking plots previous sections, two issues noticed: (1) points logged stability achieved (2) curves exhibit decrease \\(\\) high values \\(C_i\\). section, demonstrate remove unstable unusual points. following command keep points Stable exactly 2; condition means stability criteria satisfied. Sometimes, following procedure, curve stable points remaining; usually good idea automatically exclude curve fewer three stable points. Next, can use remove_points function PhotoGEA exclude points decrease \\(\\) high \\(C_i\\). just happens points measured ripe1 instrument occur highest CO2 setpoint value, easy specify :","code":"# Only keep points where stability was achieved licor_data <- licor_data[licor_data[, 'Stable'] == 2, , TRUE]  # Remove any curves that have fewer than three remaining points npts <- by(licor_data, licor_data[, 'curve_identifier'], nrow) ids_to_keep <- names(npts[npts > 2]) licor_data <- licor_data[licor_data[, 'curve_identifier'] %in% ids_to_keep, , TRUE] # Remove points where `instrument` is `ripe1` and `CO2_r_sp` is 1800 licor_data <- remove_points(   licor_data,   list(instrument = 'ripe1', CO2_r_sp = 1800) )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c4_aci_curves.html","id":"fitting-licor-data","dir":"Articles","previous_headings":"","what":"Fitting Licor Data","title":"Analyzing C4 A-Ci Curves","text":"Now checked data quality, ready perform fitting. order fit curves, several required pieces information included Licor data files produced instrument: temperature-dependent values important photosynthetic parameters \\(\\gamma^*\\), values total pressure, values partial pressure CO2 mesophyll \\(P_{cm}\\). However, PhotoGEA package includes three functions help calculations: calculate_arrhenius, calculate_total_pressure, apply_gm. requires exdf object containing Licor data. units required column checked attempt avoid unit-related errors. information functions can obtained built-help system typing ?calculate_arrhenius, ?calculate_total_pressure, ?apply_gm. First, can use calculate_arrhenius: simple command, used leaf temperature Licor file calculate values several key C4 photosynthetic parameters (Vcmax_norm, Vpmax_norm, Rd_norm, Kc, Ko, Kp, gamma_star, ao, gmc) according Arrhenius activation energies specified S. von Caemmerer (2021). Notice command calculated values mesophyll conductance CO2 (gmc) units mol m\\(^{-2}\\) s\\(^{-1}\\) bar\\(^{-1}\\). values estmated Setaria viridis may appropriate C4 plants. can easily overwritten another value; set gmc = 3.0 mol / m^2 / s / bar maize gmc = Inf sorghum; case, sorghum parameters determined fitting process “effective” parameters. Now can use calculate_total_pressure apply_gm calculate PCm: Together, functions added several new columns licor_data, including gmc, ‘PCm’, ‘gamma_star’, others. information, now ready perform fitting procedure. operation, can use fit_c4_aci function PhotoGEA package, fits single response curve extract values key photosynthetic parameters. apply function curve larger data set consolidate results, can use conjunction consolidate, also part PhotoGEA. (information functions, see built-help menu entries typing ?fit_c4_aci, ?.exdf, ?consolidate, check Common Patterns section Working Extended Data Frames vignette.) Together, functions split apart main data using curve identifier column defined (Basic Checks), fit -Ci curve using model discussed Understanding C4 -Ci Curves, return resulting parameters fits:","code":"# Calculate temperature-dependent values of C4 photosynthetic parameters licor_data <- calculate_arrhenius(licor_data, c4_arrhenius_von_caemmerer) # Override default mesophyll conductance and specify different values for each # species licor_data <- set_variable(   licor_data, 'gmc',   id_column = 'species',   value_table = list(maize = 3.0, sorghum = Inf) ) # Calculate the total pressure in the Licor chamber licor_data <- calculate_total_pressure(licor_data)  # Calculate PCm licor_data <- apply_gm(   licor_data,   'C4' # Indicate C4 photosynthesis ) # Fit the C4 A-Ci curves c4_aci_results <- consolidate(by(   licor_data,                       # The `exdf` object containing the curves   licor_data[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_c4_aci                        # The function to apply to each chunk of `licor_data` ))"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c4_aci_curves.html","id":"viewing-the-fitted-curves","dir":"Articles","previous_headings":"Fitting Licor Data","what":"Viewing the Fitted Curves","title":"Analyzing C4 A-Ci Curves","text":"made fits, now good idea visually check , making sure look reasonable. , can use xyplot lattice library quickly make plots fits, stored c4_aci_results$fits, exdf object:  Note addition fitted values , output also includes values individual limiting rates Apc Ar. can also take look , although make plots bit busy. can also choose plot assimilation PCm rather Ci:  Checking residuals also powerful way gauge quality fit. output fit_c4_aci includes residuals (calculated - A_fit) output, easy plot :  good fit produce small randomly-distributed residuals; clear pattern residuals, model able reproduce measured values fairly well.","code":"# Plot the C4 A-Ci fits xyplot(   A + A_fit ~ Ci | curve_identifier,   data = c4_aci_results$fits$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', c4_aci_results$fits$units$Ci, ']'),   ylab = paste('Net CO2 assimilation rate [', c4_aci_results$fits$units$A, ']') ) # Plot the C4 A-PCm fits (including limiting rates) xyplot(   A + Apc + Ar + A_fit ~ PCm | curve_identifier,   data = c4_aci_results$fits$main_data,   type = 'l',   auto.key = list(space = 'right'),   grid = TRUE,   xlab = paste('Mesophyll CO2 pressure [', c4_aci_results$fits$units$PCm, ']'),   ylab = paste('Net CO2 assimilation rate [', c4_aci_results$fits$units$A, ']'),   par.settings = list(     superpose.line = list(col = multi_curve_colors()),     superpose.symbol = list(col = multi_curve_colors())   ) ) # Plot the residuals xyplot(   A_residuals ~ Ci | curve_identifier,   data = c4_aci_results$fits$main_data,   type = 'b',   pch = 16,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', c4_aci_results$fits$units$Ci, ']'),   ylab = paste('Assimilation rate residual (measured - fitted)\\n[', c4_aci_results$fits$units$A, ']') )"},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c4_aci_curves.html","id":"visualizing-average-fit-parameters","dir":"Articles","previous_headings":"Examining the Results","what":"Visualizing Average Fit Parameters","title":"Analyzing C4 A-Ci Curves","text":"performed fits, can now take look fitted parameter values, stored c4_aci_results$parameters, another exdf object. One way using barchart_with_errorbars function PhotoGEA create barcharts average values species, following example showing fitted values Vpmax:  Another option create box-whisper plots using bwplot function lattice package. use function show values Vcmax:","code":"# Make a barchart showing average Vpmax values barchart_with_errorbars(   c4_aci_results$parameters[, 'Vpmax_at_25'],   c4_aci_results$parameters[, 'species'],   ylim = c(0, 150),   xlab = 'Species',   ylab = paste('Vpmax at 25 degrees C [', c4_aci_results$parameters$units$Vpmax_at_25, ']') ) # Make a boxplot showing the distribution of Vcmax values bwplot(   Vcmax_at_25 ~ species,   data = c4_aci_results$parameters$main_data,   ylim = c(0, 60),   xlab = 'Species',   ylab = paste('Vcmax at 25 degrees C [', c4_aci_results$parameters$units$Vcmax_at_25, ']') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c4_aci_curves.html","id":"accessing-raw-and-average-values-of-fit-parameters","dir":"Articles","previous_headings":"Examining the Results","what":"Accessing Raw and Average Values of Fit Parameters","title":"Analyzing C4 A-Ci Curves","text":"can also take look raw numbers fitted parameters average values. c4_aci_results$parameters object contains many columns care . can view follows: Alternatively, can extract average values parameters species using basic_stats function PhotoGEA: course, advanced statistical tests check differences groups can also performed within R using packages onewaytests DescTools. Alternatively, parameter values can exported comma-separated-value (CSV) file analyzed another software environment like jmp.","code":"# View the C4 parameters columns_for_viewing <-   c('instrument', 'species', 'plot', 'Rd_at_25', 'Vcmax_at_25', 'Vpmax_at_25')  c4_aci_parameters <-   c4_aci_results$parameters[ , columns_for_viewing, TRUE]  print(c4_aci_parameters) #>   instrument [UserDefCon] (NA) species [UserDefCon] (NA) plot [UserDefCon] (NA) #> 1                        ripe1                     maize                      5 #> 2                        ripe1                   sorghum                      2 #> 3                        ripe1                   sorghum                      3 #> 4                        ripe2                     maize                      2 #> 5                        ripe2                   sorghum                      3 #>   Rd_at_25 [fit_c4_aci] (micromol m^(-2) s^(-1)) #> 1                                       1.284540 #> 2                                       5.049738 #> 3                                       1.524589 #> 4                                       5.209604 #> 5                                       5.190008 #>   Vcmax_at_25 [fit_c4_aci] (micromol m^(-2) s^(-1)) #> 1                                          39.35481 #> 2                                          51.39206 #> 3                                          46.39016 #> 4                                          42.73374 #> 5                                          43.57417 #>   Vpmax_at_25 [fit_c4_aci] (micromol m^(-2) s^(-1)) #> 1                                         129.16466 #> 2                                         103.81965 #> 3                                          90.54414 #> 4                                         127.75304 #> 5                                         102.95831 # Compute the average and standard error of each parameter for each species c4_aci_averages <- basic_stats(c4_aci_results$parameters, 'species')  # View the averages and errors columns_to_view <- c(   'species',   'Rd_at_25_avg', 'Rd_at_25_stderr',   'Vcmax_at_25_avg', 'Vcmax_at_25_stderr',   'Vpmax_at_25_avg', 'Vpmax_at_25_stderr' ) print(c4_aci_averages[ , columns_to_view, TRUE]) #>   species [UserDefCon] (NA) Rd_at_25_avg [fit_c4_aci] (micromol m^(-2) s^(-1)) #> 1                     maize                                           3.247072 #> 2                   sorghum                                           3.921445 #>   Rd_at_25_stderr [fit_c4_aci] (micromol m^(-2) s^(-1)) #> 1                                              1.962532 #> 2                                              1.199112 #>   Vcmax_at_25_avg [fit_c4_aci] (micromol m^(-2) s^(-1)) #> 1                                              41.04428 #> 2                                              47.11880 #>   Vcmax_at_25_stderr [fit_c4_aci] (micromol m^(-2) s^(-1)) #> 1                                                 1.689461 #> 2                                                 2.286047 #>   Vpmax_at_25_avg [fit_c4_aci] (micromol m^(-2) s^(-1)) #> 1                                             128.45885 #> 2                                              99.10737 #>   Vpmax_at_25_stderr [fit_c4_aci] (micromol m^(-2) s^(-1)) #> 1                                                0.7058116 #> 2                                                4.2888289"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c4_aci_curves.html","id":"customizing-your-script","dir":"Articles","previous_headings":"","what":"Customizing Your Script","title":"Analyzing C4 A-Ci Curves","text":"Note commands vignette written general way can used basis analysis script (see Commands Document). order use script, following changes may required. may also others specifically mentioned .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c4_aci_curves.html","id":"input-files","dir":"Articles","previous_headings":"Customizing Your Script","what":"Input Files","title":"Analyzing C4 A-Ci Curves","text":"file paths specified file_paths need modified point Licor files. script, may want consider using choose_input_licor_files function PhotoGEA; function create pop-browser window can interactively select set Licor files. Sometimes convenient writing full file paths. example, replace previous definition file_paths one: Unfortunately, choose_input_licor_files available interactive R sessions running Microsoft Windows, also platform-independent option: choose_input_files. See Translation section Developing Data Analysis Pipeline vignette details.","code":"# Interactively define a vector of paths to the files we wish to load file_paths <- choose_input_licor_files()"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c4_aci_curves.html","id":"curve-identifier","dir":"Articles","previous_headings":"Customizing Your Script","what":"Curve Identifier","title":"Analyzing C4 A-Ci Curves","text":"Depending user constants defined Licor Excel files, may need modify definition curve_identifier column.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c4_aci_curves.html","id":"data-cleaning","dir":"Articles","previous_headings":"Customizing Your Script","what":"Data Cleaning","title":"Analyzing C4 A-Ci Curves","text":"Depending qualitative data checks, may need change input arguments remove_points. might also necessary remove unstable points performing fits. Often, helpful perform data cleaning first, remove problematic points seem cause problems fits.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c4_aci_curves.html","id":"averages-and-standard-errors","dir":"Articles","previous_headings":"Customizing Your Script","what":"Averages and Standard Errors","title":"Analyzing C4 A-Ci Curves","text":"Depending data organized, may want change column used divide data calculating averages standard errors.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c4_aci_curves.html","id":"plots","dir":"Articles","previous_headings":"Customizing Your Script","what":"Plots","title":"Analyzing C4 A-Ci Curves","text":"may need change axis limits plots. Alternatively, can remove , allowing xyplot automatically choose .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c4_aci_curves.html","id":"saving-results","dir":"Articles","previous_headings":"Customizing Your Script","what":"Saving Results","title":"Analyzing C4 A-Ci Curves","text":"may want use write.csv save fitting results csv files. example, following commands allow interactively choose output filenames resulting csv files:","code":"write.csv(c4_aci_results$fits, file.choose(), row.names = FALSE) write.csv(c4_aci_results$parameters, file.choose(), row.names = FALSE) write.csv(c4_aci_averages, file.choose(), row.names = FALSE)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_c4_aci_curves.html","id":"commands-from-this-document","dir":"Articles","previous_headings":"","what":"Commands From This Document","title":"Analyzing C4 A-Ci Curves","text":"following code chunk includes central commands used throughout document. compiled make easy copy/paste text file initialize script. Annotation also added clearly indicate four steps involved data analysis, described Developing Data Analysis Pipeline vignette.","code":"### ### PRELIMINARIES: ### Loading packages, defining constants, creating helping functions, etc. ###  # Load required packages library(PhotoGEA) library(lattice)  ### ### TRANSLATION: ### Creating convenient R objects from raw data files ###  # Define a vector of paths to the files we wish to load file_paths <- c(   system.file('extdata', 'c4_aci_1.xlsx', package = 'PhotoGEA'),   system.file('extdata', 'c4_aci_2.xlsx', package = 'PhotoGEA') )  # Load each file, storing the result in a list licor_exdf_list <- lapply(file_paths, function(fpath) {   read_gasex_file(fpath, 'time') })  # Get the names of all columns that are present in all of the Licor files columns_to_keep <- do.call(identify_common_columns, licor_exdf_list)  # Extract just these columns licor_exdf_list <- lapply(licor_exdf_list, function(x) {   x[ , columns_to_keep, TRUE] })  # Use `rbind` to combine all the data licor_data <- do.call(rbind, licor_exdf_list)  ### ### VALIDATION: ### Organizing the data, checking its consistency and quality, cleaning it ###  # Create a new identifier column formatted like `instrument - species - plot` licor_data[ , 'curve_identifier'] <-   paste(licor_data[ , 'instrument'], '-', licor_data[ , 'species'], '-', licor_data[ , 'plot'])  # Make sure the data meets basic requirements check_licor_data(licor_data, 'curve_identifier', 16, 'CO2_r_sp')  # Remove points with duplicated `CO2_r_sp` values and order by `Ci` licor_data <- organize_response_curve_data(     licor_data,     'curve_identifier',     c(9, 10),     'Ci' )  # Plot all A-Ci curves in the data set xyplot(   A ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']'),   ylab = paste('Net CO2 assimilation rate [', licor_data$units$A, ']') )  # Make a plot to check humidity control xyplot(   RHcham + `Humidifier_%` + `Desiccant_%` ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(0, 100),   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']') )  # Make a plot to check temperature control xyplot(   TleafCnd + Txchg ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(25, 40),   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']'),   ylab = paste0('Temperature (', licor_data$units$TleafCnd, ')') )  # Make a plot to check CO2 control xyplot(   CO2_s + CO2_r + CO2_r_sp ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']'),   ylab = paste0('CO2 concentration (', licor_data$units$CO2_r, ')') )  # Make a plot to check stability criteria xyplot(   `A:OK` + `gsw:OK` + Stable ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']') )  # Only keep points where stability was achieved licor_data <- licor_data[licor_data[, 'Stable'] == 2, , TRUE]  # Remove any curves that have fewer than three remaining points npts <- by(licor_data, licor_data[, 'curve_identifier'], nrow) ids_to_keep <- names(npts[npts > 2]) licor_data <- licor_data[licor_data[, 'curve_identifier'] %in% ids_to_keep, , TRUE]  # Remove points where `instrument` is `ripe1` and `CO2_r_sp` is 1800 licor_data <- remove_points(   licor_data,   list(instrument = 'ripe1', CO2_r_sp = 1800) )  ### ### PROCESSING: ### Extracting new pieces of information from the data ###  # Calculate temperature-dependent values of C4 photosynthetic parameters licor_data <- calculate_arrhenius(licor_data, c4_arrhenius_von_caemmerer)  # Override default mesophyll conductance and specify different values for each # species licor_data <- set_variable(   licor_data, 'gmc',   id_column = 'species',   value_table = list(maize = 3.0, sorghum = Inf) )  # Calculate the total pressure in the Licor chamber licor_data <- calculate_total_pressure(licor_data)  # Calculate PCm licor_data <- apply_gm(   licor_data,   'C4' # Indicate C4 photosynthesis )  # Fit the C4 A-Ci curves c4_aci_results <- consolidate(by(   licor_data,                       # The `exdf` object containing the curves   licor_data[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_c4_aci                        # The function to apply to each chunk of `licor_data` ))  # Plot the C4 A-Ci fits xyplot(   A + A_fit ~ Ci | curve_identifier,   data = c4_aci_results$fits$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', c4_aci_results$fits$units$Ci, ']'),   ylab = paste('Net CO2 assimilation rate [', c4_aci_results$fits$units$A, ']') )  # Plot the C4 A-PCm fits (including limiting rates) xyplot(   A + Apc + Ar + A_fit ~ PCm | curve_identifier,   data = c4_aci_results$fits$main_data,   type = 'l',   auto.key = list(space = 'right'),   grid = TRUE,   xlab = paste('Mesophyll CO2 pressure [', c4_aci_results$fits$units$PCm, ']'),   ylab = paste('Net CO2 assimilation rate [', c4_aci_results$fits$units$A, ']'),   par.settings = list(     superpose.line = list(col = multi_curve_colors()),     superpose.symbol = list(col = multi_curve_colors())   ) )  # Plot the residuals xyplot(   A_residuals ~ Ci | curve_identifier,   data = c4_aci_results$fits$main_data,   type = 'b',   pch = 16,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', c4_aci_results$fits$units$Ci, ']'),   ylab = paste('Assimilation rate residual (measured - fitted)\\n[', c4_aci_results$fits$units$A, ']') )  ### ### SYNTHESIS: ### Using plots and statistics to help draw conclusions from the data ###  # Make a barchart showing average Vpmax values barchart_with_errorbars(   c4_aci_results$parameters[, 'Vpmax_at_25'],   c4_aci_results$parameters[, 'species'],   ylim = c(0, 150),   xlab = 'Species',   ylab = paste('Vpmax at 25 degrees C [', c4_aci_results$parameters$units$Vpmax_at_25, ']') )  # Make a boxplot showing the distribution of Vcmax values bwplot(   Vcmax_at_25 ~ species,   data = c4_aci_results$parameters$main_data,   ylim = c(0, 60),   xlab = 'Species',   ylab = paste('Vcmax at 25 degrees C [', c4_aci_results$parameters$units$Vcmax_at_25, ']') )  # View the C4 parameters columns_for_viewing <-   c('instrument', 'species', 'plot', 'Rd_at_25', 'Vcmax_at_25', 'Vpmax_at_25')  c4_aci_parameters <-   c4_aci_results$parameters[ , columns_for_viewing, TRUE]  print(c4_aci_parameters)  # Compute the average and standard error of each parameter for each species c4_aci_averages <- basic_stats(c4_aci_results$parameters, 'species')  # View the averages and errors columns_to_view <- c(   'species',   'Rd_at_25_avg', 'Rd_at_25_stderr',   'Vcmax_at_25_avg', 'Vcmax_at_25_stderr',   'Vpmax_at_25_avg', 'Vpmax_at_25_stderr' ) print(c4_aci_averages[ , columns_to_view, TRUE])"},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Analyzing TDL Data","text":"vignette, give example showing analyze data tunable diode laser (TDL) using PhotoGEA package. commands vignette can used initialize script, described Customizing Script.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Analyzing TDL Data","text":"process photosynthesis tends preferentially assimilate 12C often rarer heavier stable isotope 13C, carbon isotope discrimination measurements proven incredibly useful fields plant biology climate science (Evans Caemmerer 2013). Although several methods available measuring relative concentrations 12C 13C gas mixtures, tunable diode laser (TDL) absorption spectroscopy emerged one popular due high sensitivity relatively short measurement times. technique, emission wavelength laser tuned characteristic absorption lines species present gas, resulting decrease light transmission can used determine gas concentration even properties temperature. information general technique, please see Wikipedia page. gas concentrations reported directly TDL measurement system tend influenced electrical noise subtle changes air properties within measurement room. reason, usually necessary make frequent measurements gas mixtures known concentrations output signals can calibrated. fact, TDL systems used plant biology include gas handling system multiple valves can attached various gas sources, including calibration tanks well lines gas whose isotopic makeup determined. measurement, gas handling system periodically cycles valve succession, data logger used record TDL output signal valve. “TDL cycles” basic unit TDL measurement. typical output file TDL used carbon isotope discrimination measurements therefore includes following columns (minimum): time stamp, valve number, raw 12C concentration, raw 13C concentration. analyze data set, necessary identify individual TDL cycles within entire set use calibration valves determine accurate gas concentrations valves. Additional operations may also required, removing cycles seem unreliable smoothing data calibration decrease noise. vignette, demonstrate several tools PhotoGEA package can help streamline operations R environment.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"loading-packages","dir":"Articles","previous_headings":"","what":"Loading Packages","title":"Analyzing TDL Data","text":"always, first step load packages using. addition PhotoGEA, also use lattice package generating plots. lattice package installed R setup, can install typing install.packages('lattice').","code":"# Load required packages library(PhotoGEA) library(lattice)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"loading-tdl-data","dir":"Articles","previous_headings":"","what":"Loading TDL Data","title":"Analyzing TDL Data","text":"PhotoGEA package includes two files representing TDL data recorded Campbell Scientific CR3000 data logger two consecutive days. Although two files based real data, noise added since unpublished, files used examples. files stored computer somewhere R package installation directory, full paths files can obtained system.file: actually read data files store R objects, use read_gasex_file function PhotoGEA. Since multiple files read, call function file using lapply: result command R list “extended data frames” (abbreviated exdf objects). exdf class special data structure defined PhotoGEA package. many ways, exdf object equivalent data frame, major difference exdf object includes units column. information, type ?exdf R terminal access built-help menu entry, check Working Extended Data Frames vignette. Generally, convenient work single exdf object rather list , next step combine objects list. action can accomplished using rbind function, combines table-like objects rows; words, stacks two tables vertically. action makes sense tables columns, combine exdf objects, make sure case. PhotoGEA package includes function called identify_common_columns can used get names columns present TDL files. , can extract just columns, combine exdf objects single one. Now single R object called tdl_files includes data several TDL data files. information consolidating information multiple files, see Common Patterns section Working Extended Data Frames vignette.","code":"# Define a vector of paths to the files we wish to load file_paths <- c(   system.file('extdata', 'tdl_sampling_1.dat', package = 'PhotoGEA'),   system.file('extdata', 'tdl_sampling_2.dat', package = 'PhotoGEA') ) # Load each file, storing the result in a list tdl_exdf_list <- lapply(file_paths, function(fpath) {   read_gasex_file(fpath, 'TIMESTAMP') }) # Get the names of all columns that are present in all of the TDL files columns_to_keep <- do.call(identify_common_columns, tdl_exdf_list)  # Extract just these columns tdl_exdf_list <- lapply(tdl_exdf_list, function(x) {   x[ , columns_to_keep, TRUE] })  # Use `rbind` to combine all the data tdl_files <- do.call(rbind, tdl_exdf_list)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"identifying-tdl-cycles","dir":"Articles","previous_headings":"","what":"Identifying TDL Cycles","title":"Analyzing TDL Data","text":"first step analyzing TDL data identify “TDL cycles” present within . , need know following information: name column TDL data indicates valve measured. valve number marks beginning new cycle. many valves measured cycle. name column TDL data indicates time measurement made. amount time take cycle valves. information usually known beforehand settings specified operating TDL; alternatively, isn’t known already, can often determined taking look data via View(tdl_files). information obtained, identify_tdl_cycles function PhotoGEA package can used automatically assign number measurement cycle: Now tdl_files object two new columns: one called cycle_num specifies TDL cycle, called elapsed_time indicates elapsed time start cycle.","code":"# Assign numbers to all full cycles in the data set tdl_files <- identify_tdl_cycles(   tdl_files,   valve_column_name = 'valve_number',   cycle_start_valve = 20,   expected_cycle_length_minutes = 2.7,   expected_cycle_num_valves = 9,   timestamp_colname = 'TIMESTAMP' )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"processing-tdl-cycles","dir":"Articles","previous_headings":"","what":"Processing TDL Cycles","title":"Analyzing TDL Data","text":"Now individual cycles identified, next step use reference valves calibrate TDL readings. general, procedure depend strongly individual TDL system, since one may different types reference tanks. data used vignette measured using TDL Carl Bernacchi’s lab Edward R. Madigan Laboratory University Illinois, Urbana-Champaign. includes five reference tanks can broken three types: One certified tank whose total CO2 concentration carbon isotope ratio supplied NOAA. One nitrogen tank carbon . final type reference another CO2 tank whose isotype ratio measured UIUC using different method; tank mixed nitrogen three different ratios provide range carbon concentrations. full procedure using references calibrate TDL signal somewhat complicated. Fortunately, easy determine apply calibrations single TDL cycle using process_tdl_cycle_erml function PhotoGEA. apply function TDL cycle larger data set consolidate results, can use conjunction consolidate, also part PhotoGEA. (information functions, see built-help menu entries typing ?process_tdl_cycle_erml, ?.exdf, ?consolidate, check Common Patterns section Working Extended Data Frames vignette.) previous function, many inputs (noaa_cylinder_isotope_ratio) must obtained whoever managing TDL system used: output function – processed_tdl – list several exdf objects include calibrated TDL readings valve information calibration parameters determined processing data.","code":"# Use the data from the calibration valves to determine calibrated carbon # concentrations from all valves in each TDL cycle processed_tdl <- consolidate(by(   tdl_files,   tdl_files[, 'cycle_num'],   process_tdl_cycle_erml,   valve_column_name = 'valve_number',   noaa_valve = 2,   calibration_0_valve = 20,   calibration_1_valve = 21,   calibration_2_valve = 23,   calibration_3_valve = 26,   raw_12c_colname = 'Conc12C_Avg',   raw_13c_colname = 'Conc13C_Avg',   noaa_cylinder_co2_concentration = 294.996,   noaa_cylinder_isotope_ratio = -8.40,   calibration_isotope_ratio = -11.505,   f_other = 0.00474,   R_VPDB = 0.0111797 ))"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"checking-the-calibrated-data","dir":"Articles","previous_headings":"Processing TDL Cycles","what":"Checking the Calibrated Data","title":"Analyzing TDL Data","text":"Typically good idea check raw data, calibrated data, calibration constants issues might affect reliability results. Since many valves involved calibration involves several different steps (see ?process_tdl_cycle_erml), also many possible things check. full check data might require creating viewing many different plots. first take look raw calibrated values 12C valve. information stored tdl_data element processed_tdl. lattice library makes simple include valve separate subplot figure, raw calibrated values separate traces. goal simply keep eye anythign looks unusual data.  figure, apparent valves 23 26 large spikes, surprising since calibration valves; gas flowing TDL valves expected fairly constant carbon concentration. possible view just one valve time detailed analysis. take look 12C concentration valve 26, exhibits spike.  graph, can see calibrated 12C concentration large deviation raw values near large spike, although calibrated raw values generally similar rest data. fact, can see valve 12 (one valves whose composition trying determine), also large deviation raw calibrated 12C signals near spike.  Finally, can also see traces anomaly calibration constants determined TDL cycle processing. plot, 12C gain factor nearly constant times exception cycles also spike 12C signal valve 26.","code":"# Plot the 12C concentration data from all the valves xyplot(   Conc12C_Avg + calibrated_12c ~ cycle_num | factor(valve_number),   data = processed_tdl$tdl_data$main_data,   type = 'p',   pch = 20,   auto = TRUE,   grid = TRUE,   xlab = paste0('Elapsed time (', processed_tdl$tdl_data$units$cycle_num, ')'),   ylab = paste0('12C concentration (', processed_tdl$tdl_data$units$Conc12C_Avg, ')'),   main = '12C concentrations' ) # Specify a single valve to plot valve_to_plot <- 26  # Get the processed data from the single valve single_valve <-   processed_tdl$tdl_data[processed_tdl$tdl_data[, 'valve_number'] == valve_to_plot, , TRUE]  # Plot the 12C concentration data from the single valve xyplot(   Conc12C_Avg + calibrated_12c ~ cycle_num,   data = single_valve$main_data,   type = 'b',   pch = 20,   auto = TRUE,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('12C concentration (', single_valve$units$Conc12C_Avg, ')'),   main = paste('12C concentrations from valve', valve_to_plot) ) # Plot the 12C gain factor determined during the calibration process xyplot(   gain_12CO2 ~ cycle_num,   data = processed_tdl$calibration_12CO2$main_data,   type = 'b',   pch = 16,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('12C gain factor (', processed_tdl$calibration_12CO2$units$gain_12CO2, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"processing-tdl-cycles-with-removal-and-smoothing","dir":"Articles","previous_headings":"","what":"Processing TDL Cycles (With Removal and Smoothing)","title":"Analyzing TDL Data","text":"Processing TDL Cycles, processed full contents raw TDL file. However, typical remove unreliable cycles apply smoothing functions valves processing data. section, demonstrate .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"removing-problematic-cycles","dir":"Articles","previous_headings":"Processing TDL Cycles (With Removal and Smoothing)","what":"Removing Problematic Cycles","title":"Analyzing TDL Data","text":"Checking Calibrated Data, located spike measured 12C concentration valve 26, one calibration values. Since presence spike indicates something unexpected happened TDL system, evidence calibration may compromised spike, probably good idea remove TDL cycles 12C signal valve 26 suddenly becomes large. Fortunately, simple using remove_points function PhotoGEA. following illustrates “clean” data removing unreliable TDL cycles; , actually remove two regions data appear suspicious:","code":"# Define a vector of cycle numbers that should be removed tdl_cycles_to_remove <- c(   145:150, # The big spike in valve 26   103:107  # A smaller spike in valve 26 )  # Remove them tdl_files_clean <-   remove_points(tdl_files, list(cycle_num = tdl_cycles_to_remove))"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"smoothing-the-tdl-data","dir":"Articles","previous_headings":"Processing TDL Cycles (With Removal and Smoothing)","what":"Smoothing the TDL Data","title":"Analyzing TDL Data","text":"Since TDL signals susceptible several types noise composition gas calibration tanks expected relatively constant, safe assume high-frequency variations calibration valve signals due noise. reason, may helpful smooth data calibration valves processing TDL cycles. may reduce noise calibrated values “unknown” valves. many possible strategies smoothing time series values measured valve, PhotoGEA package attempt provide smoothing algorithms. Instead, PhotoGEA provides general function called smooth_tdl_data can apply smoothing function data one valve. use function, user must specify smoothing method. (information, see help menu entry typing ?smooth_tdl_data.) show spline smoothing function base R package can used smooth 12C 13C signals calibration valves:","code":"# Define a spline smoothing function spline_smoothing_function <- function(Y, X) {     ss <- smooth.spline(X, Y)     return(ss$y) }  # Specify the valves that should be smoothed valves_to_smooth <- c(2, 20, 21, 23, 26)  # Initialize a smoothed copy of the data tdl_files_smooth <- tdl_files_clean  # Apply the smoothing function to the 12C and 13C signal from each valve for (valve in valves_to_smooth) {   for (column in c('Conc12C_Avg', 'Conc13C_Avg')) {     tdl_files_smooth <-       smooth_tdl_data(tdl_files_smooth, column, 'valve_number', valve, spline_smoothing_function)   } }"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"checking-the-data-after-cleaning-and-smoothing","dir":"Articles","previous_headings":"Processing TDL Cycles (With Removal and Smoothing)","what":"Checking the Data After Cleaning and Smoothing","title":"Analyzing TDL Data","text":"Now removed problematic cycles applied spline smoothing function calibration valves, can process TDL cycles using command Processing TDL Cycles; difference operating smoothed data: important confirm smoothing procedure produced reasonable outputs. create plot comparing raw smoothed 12C signal valves:  Although clear successfully removed spikes valve 26, may helpful display just valve take closer look:  graph can see spike indeed removed smoothed data good job following raw data valve. another check, can also see smoothed data altered calibration process. look valve 12, Checking Calibrated Data:  see cleaning smoothing data, calibrated data “unknown” valve slightly different raw data across cycles. Finally, can also plot 12C gain factor Checking Calibrated Data:  , sudden spikes remaining gain factor, indicating good job cleaning smoothing data.","code":"# Use the data from the calibration valves to determine calibrated carbon # concentrations from all valves in each TDL cycle processed_smooth_tdl <- consolidate(by(   tdl_files_smooth,   tdl_files_smooth[, 'cycle_num'],   process_tdl_cycle_erml,   valve_column_name = 'valve_number',   noaa_valve = 2,   calibration_0_valve = 20,   calibration_1_valve = 21,   calibration_2_valve = 23,   calibration_3_valve = 26,   raw_12c_colname = 'Conc12C_Avg',   raw_13c_colname = 'Conc13C_Avg',   noaa_cylinder_co2_concentration = 294.996,   noaa_cylinder_isotope_ratio = -8.40,   calibration_isotope_ratio = -11.505,   f_other = 0.00474,   R_VPDB = 0.0111797 )) # Add columns indicating which which operations have been applied to each exdf tdl_files[ , 'data_type'] <- '01 raw data' tdl_files_clean[ , 'data_type'] <- '02 cleaned data' tdl_files_smooth[ , 'data_type'] <- '03 cleaned smoothed data'  # Make a big exdf object with the raw and smoothed data tdl_compare <- rbind(tdl_files, tdl_files_clean, tdl_files_smooth)  # Keep only the valves that were smoothed tdl_compare <-   tdl_compare[tdl_compare[ , 'valve_number'] %in% valves_to_smooth, , TRUE]  # Plot the uncalibrated 12C concentration data from all the valves xyplot(   Conc12C_Avg ~ cycle_num | factor(valve_number),   group = data_type,   data = tdl_compare$main_data,   type = 'b',   pch = 20,   auto = TRUE,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('Uncalibrated 12C concentration (', tdl_compare$tdl_data$units$Conc12C_Avg, ')'),   main = 'Uncalibrated 12C concentrations' ) # Specify a single valve to plot valve_to_compare <- 26  # Get the comparison data from the single valve single_valve_compare <-   tdl_compare[tdl_compare[, 'valve_number'] == valve_to_compare, , TRUE]  # Plot the 12C concentration data from the single valve xyplot(   Conc12C_Avg ~ cycle_num,   group = data_type,   data = single_valve_compare$main_data,   type = 'b',   pch = 20,   auto = TRUE,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('Uncalibrated 12C concentration (', single_valve_compare$units$Conc12C_Avg, ')'),   main = paste('Uncalibrated 12C concentrations from valve', valve_to_compare) ) # Specify a single valve to plot valve_to_plot <- 12  # Get the processed data from the single valve single_valve_smooth <- processed_smooth_tdl$tdl_data[   processed_smooth_tdl$tdl_data[, 'valve_number'] == valve_to_plot, , TRUE]  # Plot the 12C concentration data from the single valve xyplot(   Conc12C_Avg + calibrated_12c ~ cycle_num,   data = single_valve_smooth$main_data,   type = 'b',   pch = 20,   auto = TRUE,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('12C concentration (', single_valve_smooth$units$Conc12C_Avg, ')'),   main = paste('12C concentrations from valve', valve_to_plot) ) # Plot the 12C gain factor determined during the calibration process xyplot(   gain_12CO2 ~ cycle_num,   data = processed_smooth_tdl$calibration_12CO2$main_data,   type = 'b',   pch = 16,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('12C gain factor (', processed_smooth_tdl$calibration_12CO2$units$gain_12CO2, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next steps","title":"Analyzing TDL Data","text":"cleaned, smoothed, visually checked data, can now confident calibrated 12C 13C values accurate can . next step analysis interpret data valves whose composition unknown determined. depend particular application, give general advice !","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"customizing-your-script","dir":"Articles","previous_headings":"","what":"Customizing Your Script","title":"Analyzing TDL Data","text":"Note commands vignette written general way can used basis TDL analysis script (see Commands Document). order use script, following changes may required. may also others specifically mentioned .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"input-files","dir":"Articles","previous_headings":"Customizing Your Script","what":"Input Files","title":"Analyzing TDL Data","text":"file paths specified file_paths need modified point TDL data files. script, may want consider using choose_input_tdl_files function PhotoGEA; function create pop-browser window can interactively select set .dat files. Sometimes convenient writing full file paths. example, replace previous definition file_paths one: Unfortunately, choose_input_tdl_files available interactive R sessions running Microsoft Windows, also platform-independent option: choose_input_files. See Translation section Developing Data Analysis Pipeline vignette details.","code":"# Interactively define a vector of paths to the files we wish to load file_paths <- choose_input_tdl_files()"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"plots-for-checking","dir":"Articles","previous_headings":"Customizing Your Script","what":"Plots for Checking","title":"Analyzing TDL Data","text":"keep vignette shorter, skipped many possible plots may want view. addition ones generated , may also helpful make following plots: Plots 13C signals addition plots 12C. Individual plots raw, cleaned, smoothed data valve. Plots 13C calibration constants. Plots 13C calibration fits. plots can created making small modifications commands document.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"cycles-to-remove","dir":"Articles","previous_headings":"Customizing Your Script","what":"Cycles to Remove","title":"Analyzing TDL Data","text":"beginning analyze new data set, advisable remove TDL cycles; can accomplished defining tdl_cycles_to_remove following command place one used : viewing data, unreliable cycles removed can identified.","code":"tdl_cycles_to_remove <- c()"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"smoothing-function","dir":"Articles","previous_headings":"Customizing Your Script","what":"Smoothing Function","title":"Analyzing TDL Data","text":"beginning analyze new data set, advisable disable smoothing. can done definining “null” smoothing function; words, function actually perform smoothing: , function passed smooth_tdl_data place spline_smoothing_function.","code":"# Define a null smoothing function null_smoothing_function <- function(Y, X) {return(Y)}"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"commands-from-this-document","dir":"Articles","previous_headings":"","what":"Commands From This Document","title":"Analyzing TDL Data","text":"following code chunk includes central commands used throughout document. compiled make easy copy/paste text file initialize script. Annotation also added clearly indicate four steps involved data analysis, described Developing Data Analysis Pipeline vignette.","code":"### ### PRELIMINARIES: ### Loading packages, defining constants, creating helping functions, etc. ###  # Load required packages library(PhotoGEA) library(lattice)  ### ### TRANSLATION: ### Creating convenient R objects from raw data files ###  # Define a vector of paths to the files we wish to load file_paths <- c(   system.file('extdata', 'tdl_sampling_1.dat', package = 'PhotoGEA'),   system.file('extdata', 'tdl_sampling_2.dat', package = 'PhotoGEA') )  # Load each file, storing the result in a list tdl_exdf_list <- lapply(file_paths, function(fpath) {   read_gasex_file(fpath, 'TIMESTAMP') })  # Get the names of all columns that are present in all of the TDL files columns_to_keep <- do.call(identify_common_columns, tdl_exdf_list)  # Extract just these columns tdl_exdf_list <- lapply(tdl_exdf_list, function(x) {   x[ , columns_to_keep, TRUE] })  # Use `rbind` to combine all the data tdl_files <- do.call(rbind, tdl_exdf_list)  ### ### VALIDATION: ### Organizing the data, checking its consistency and quality, cleaning it ###  # Assign numbers to all full cycles in the data set tdl_files <- identify_tdl_cycles(   tdl_files,   valve_column_name = 'valve_number',   cycle_start_valve = 20,   expected_cycle_length_minutes = 2.7,   expected_cycle_num_valves = 9,   timestamp_colname = 'TIMESTAMP' )  # Define a vector of cycle numbers that should be removed tdl_cycles_to_remove <- c(   145:150, # The big spike in valve 26   103:107  # A smaller spike in valve 26 )  # Remove them tdl_files_clean <-   remove_points(tdl_files, list(cycle_num = tdl_cycles_to_remove))  # Define a spline smoothing function spline_smoothing_function <- function(Y, X) {     ss <- smooth.spline(X, Y)     return(ss$y) }  # Specify the valves that should be smoothed valves_to_smooth <- c(2, 20, 21, 23, 26)  # Initialize a smoothed copy of the data tdl_files_smooth <- tdl_files_clean  # Apply the smoothing function to the 12C and 13C signal from each valve for (valve in valves_to_smooth) {   for (column in c('Conc12C_Avg', 'Conc13C_Avg')) {     tdl_files_smooth <-       smooth_tdl_data(tdl_files_smooth, column, 'valve_number', valve, spline_smoothing_function)   } }  ### ### PROCESSING: ### Extracting new pieces of information from the data ###  # Use the data from the calibration valves to determine calibrated carbon # concentrations from all valves in each TDL cycle processed_smooth_tdl <- consolidate(by(   tdl_files_smooth,   tdl_files_smooth[, 'cycle_num'],   process_tdl_cycle_erml,   valve_column_name = 'valve_number',   noaa_valve = 2,   calibration_0_valve = 20,   calibration_1_valve = 21,   calibration_2_valve = 23,   calibration_3_valve = 26,   raw_12c_colname = 'Conc12C_Avg',   raw_13c_colname = 'Conc13C_Avg',   noaa_cylinder_co2_concentration = 294.996,   noaa_cylinder_isotope_ratio = -8.40,   calibration_isotope_ratio = -11.505,   f_other = 0.00474,   R_VPDB = 0.0111797 ))  ### ### SYNTHESIS: ### Using plots and statistics to help draw conclusions from the data ###  # Add columns indicating which which operations have been applied to each exdf tdl_files[ , 'data_type'] <- '01 raw data' tdl_files_clean[ , 'data_type'] <- '02 cleaned data' tdl_files_smooth[ , 'data_type'] <- '03 cleaned smoothed data'  # Make a big exdf object with the raw and smoothed data tdl_compare <- rbind(tdl_files, tdl_files_clean, tdl_files_smooth)  # Keep only the valves that were smoothed tdl_compare <-   tdl_compare[tdl_compare[ , 'valve_number'] %in% valves_to_smooth, , TRUE]  # Plot the uncalibrated 12C concentration data from all the valves xyplot(   Conc12C_Avg ~ cycle_num | factor(valve_number),   group = data_type,   data = tdl_compare$main_data,   type = 'b',   pch = 20,   auto = TRUE,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('Uncalibrated 12C concentration (', tdl_compare$tdl_data$units$Conc12C_Avg, ')'),   main = 'Uncalibrated 12C concentrations' )  # Specify a single valve to plot valve_to_compare <- 26  # Get the comparison data from the single valve single_valve_compare <-   tdl_compare[tdl_compare[, 'valve_number'] == valve_to_compare, , TRUE]  # Plot the 12C concentration data from the single valve xyplot(   Conc12C_Avg ~ cycle_num,   group = data_type,   data = single_valve_compare$main_data,   type = 'b',   pch = 20,   auto = TRUE,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('Uncalibrated 12C concentration (', single_valve_compare$units$Conc12C_Avg, ')'),   main = paste('Uncalibrated 12C concentrations from valve', valve_to_compare) )  # Specify a single valve to plot valve_to_plot <- 12  # Get the processed data from the single valve single_valve_smooth <- processed_smooth_tdl$tdl_data[   processed_smooth_tdl$tdl_data[, 'valve_number'] == valve_to_plot, , TRUE]  # Plot the 12C concentration data from the single valve xyplot(   Conc12C_Avg + calibrated_12c ~ cycle_num,   data = single_valve_smooth$main_data,   type = 'b',   pch = 20,   auto = TRUE,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('12C concentration (', single_valve_smooth$units$Conc12C_Avg, ')'),   main = paste('12C concentrations from valve', valve_to_plot) )  # Plot the 12C gain factor determined during the calibration process xyplot(   gain_12CO2 ~ cycle_num,   data = processed_smooth_tdl$calibration_12CO2$main_data,   type = 'b',   pch = 16,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('12C gain factor (', processed_smooth_tdl$calibration_12CO2$units$gain_12CO2, ')') )"},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/articles/combining_with_other_packages.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Combining PhotoGEA With Other Packages","text":"many approaches fitting otherwise processing pieces gas exchange data, several R packages (plantecophys, plantecowrap, photosynthesis) written implement methods. R packages excellent resources provide access well-tested peer-reviewed fitting methods. hand, generally provide tools full data analysis pipeline. Instead, packages assume user already solved problems data translation validation; words, assume user already appropriately validated data set available one R data structures. address issue, possible use functions packages within context PhotoGEA. case, PhotoGEA can used load data, validate , apply functions subsets data, collect results, described Developing Data Analysis Pipeline vignette. key combining another package PhotoGEA create “wrappers” package’s functions. wrapper type function whose main purpose call another function making minimal calculations . Wrappers can created many different purposes, discussed Wikipedia. context, wrappers used reformat inputs outputs function another package become compatible functions PhotoGEA. example, vignette demonstrate create two wrappers varying complexity fitaci function plantecophys package. general ideas introduced can also used create wrappers functions, although details creating wrapper heavily dependent details function wrapped. Note creating wrapper fitting function another package essentially special case designing customized processing function, topic also covered Creating Processing Tools vignette.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/combining_with_other_packages.html","id":"loading-packages","dir":"Articles","previous_headings":"","what":"Loading Packages","title":"Combining PhotoGEA With Other Packages","text":"always, first step load packages using. addition PhotoGEA, also use plantecophys lattice packages. plantecophys lattice packages installed R setup, can install typing install.packages('plantecophys') /install.packages('lattice').","code":"# Load required packages library(PhotoGEA) library(plantecophys) library(lattice)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/combining_with_other_packages.html","id":"loading-and-validating-data","dir":"Articles","previous_headings":"","what":"Loading and Validating Data","title":"Combining PhotoGEA With Other Packages","text":"example, load set C3 -Ci curves used Analyzing C3 -Ci Curves vignette, perform steps organizing cleaning data. See vignette details steps. brevity, commands included , can found end vignette Commands Document.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/combining_with_other_packages.html","id":"creating-a-minimal-wrapper","dir":"Articles","previous_headings":"","what":"Creating a Minimal Wrapper","title":"Combining PhotoGEA With Other Packages","text":"fitaci function plantecophys package tool fitting single C3 CO2 response curve, can thought alternative fit_c3_aci function PhotoGEA. Analyzing C3 -Ci Curves vignette, following command used apply fit_c3_aci response curves data set consolidate results curve convenient list tables: Ideally, like able use similar command apply plantecophys::fitaci curves. However, plantecophys::fitaci different type input data table (uses data frame fit_c3_aci uses exdf) produces different type output (returns acifit object fit_c3_aci returns list exdf objects). (also differences discussed later.) situation, discussed previously, can use wrapper function make plantecophys::fitaci behave like PhotoGEA::fit_c3_aci can used way. one way create wrapper: Much code fit_c3_aci_plantecophys devoted converting replicate_exdf input exdf object data.frame returning list data.frame objects created return value fitaci. One subtelty code use identifier_columns function. default, output fitaci includes important information like modeled assimilation rates values key C3 parameters. However, include “identifying” information essential keeping results organized. (case, values species plot columns.) identifier_columns function PhotoGEA provides simple way retrieve information replicate_exdf input. accomplish , determines columns single value returns singular values columns. Using identifier_columns rather directly accessing values species plot makes fit_c3_aci_plantecophys function flexible. fact, fitting functions PhotoGEA package make use identifier_columns keep track important pieces “metadata.” Another important point “regularized” fitting results always including TPU, even fitted. general, easier work functions always produce output quantities. Now can apply function curves data set. Note need specify value varnames input argument plantecophys::fitaci columns different names default ones. can accomplished following command, makes use .exdf consolidate Analyzing C3 -Ci Curves vignette: results can now examined using commands similar ones used Analyzing C3 -Ci Curves vignette:  things notice commands resulting outputs: plotting command , subtract Rd Ac, Aj, Ap plantecophys::fitaci uses different definitions rates equivalent Ac + Rd, Aj + Rd, Ap + Rd notation. results, TPU Ap NA fitTPU argument plantecophys::fitaci left default value FALSE. attempt include Ap plot, lattice::xyplot simply plot anything values NA.","code":"c3_aci_results <- consolidate(by(   licor_data,                       # The `exdf` object containing the curves   licor_data[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_c3_aci,                       # The function to apply to each chunk of `licor_data`   fixed = c(NA, NA, NA, NA),        # Additional argument passed to `fit_c3_aci`   cj_crossover_min = 100,           # Wj must be > Wc when Cc < 100 ppm   cj_crossover_max = 550            # Wj must be < Wc when Cc > 550 ppm )) # Make a minimal wrapper for `plantecophys::fitaci` fit_c3_aci_plantecophys <- function(   replicate_exdf, # an `exdf` object representing a single A-Ci curve   ...             # additional named arguments to be passed to `fitaci` ) {   # Call `plantecophys::fitaci` by passing the `replicate_exdf$main_data`   # data frame as the `data` input argument   fit_res <- plantecophys::fitaci(replicate_exdf$main_data, ...)    # Get the identifier columns from the original exdf object as a data frame   replicate_identifiers <- identifier_columns(replicate_exdf$main_data)    # Get a data frame with the fitted values of assimilation and append the   # identifier columns   fits <- fit_res$df   fits <- cbind(replicate_identifiers, fits)    # `plantecophys::fitaci` returns absurdly high values of `Ap` when it cannot   # get a good estimate for `TPU`. These can cause problems when plotting the   # results, so we replace any `Ap` values above 500 micromol / m^2 / s with   # NA.   fits[fits$Ap > 500, 'Ap'] <- NA    # Create a data frame with the parameter values   parameters <- data.frame(     Vcmax          = fit_res$par[1, 1],     Jmax           = fit_res$par[2, 1],     Rd             = fit_res$par[3, 1]   )    parameters$TPU <- if (fit_res$fitTPU) {     fit_res$par[4, 1]   } else {     NA   }    parameters <- cbind(replicate_identifiers, parameters)    # Return a list of two data frames: `fits` and `parameters`   return(list(     fits = fits,     parameters = parameters   )) } # Fit each curve c3_aci_results <- consolidate(by(   licor_data,                       # The `exdf` object containing the curves   licor_data[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_c3_aci_plantecophys,          # The function to apply to each chunk of `licor_data`   varnames = list(                  # Additional argument to `fit_c3_aci_plantecophys`     ALEAF = 'A',     Tleaf = 'TleafCnd',     Ci = 'Ci',     PPFD = 'Qin',     Rd = 'Rd'   ) )) # Plot each fit xyplot(   Ameas + (Ac - Rd) + (Aj - Rd) + (Ap - Rd) + Amodel ~ Ci_original | curve_identifier,   data = c3_aci_results$fits,   type = 'l',   auto.key = list(space = 'right'),   grid = TRUE,   xlab = 'Intercellular CO2 concentration (ppm)',   ylab = 'Assimilation rate (micromol / m^2 / s)',   par.settings = list(     superpose.line = list(col = multi_curve_colors()),     superpose.symbol = list(col = multi_curve_colors())   ) ) # View the parameter values columns_for_viewing <-   c('instrument', 'species', 'plot', 'Vcmax', 'Jmax', 'Rd', 'TPU')  c3_aci_parameters <-   c3_aci_results$parameters[ , columns_for_viewing]  print(c3_aci_parameters) #>   instrument species plot     Vcmax     Jmax        Rd TPU #> 1      ripe1 soybean   5a 126.61881 229.5225 0.8502715  NA #> 2      ripe1 tobacco    1 128.90040 272.3661 0.5237341  NA #> 3      ripe1 tobacco    2 109.78883 244.9742 0.6525276  NA #> 4      ripe2 soybean    1  99.85103 158.7873 0.3908914  NA #> 5      ripe2 soybean   5b 115.84216 189.9087 1.6311794  NA #> 6      ripe2 tobacco    4  83.51227 178.1061 0.3925865  NA"},{"path":"https://eloch216.github.io/PhotoGEA/articles/combining_with_other_packages.html","id":"creating-a-fancier-wrapper","dir":"Articles","previous_headings":"","what":"Creating a Fancier Wrapper","title":"Combining PhotoGEA With Other Packages","text":"wrapper quite useful allows us easily apply fitaci many response curves full data set automatically combine results using consolidate functions. However, improved making changes : Provide better default values column names. Check units important columns. Include outputs calculated fitaci. Return list exdf objects rather list data frames. Return net assimilation rates. example complex wrapper bit user-friendly previous one. wrapper, explicitly break code several sections devoted checking inputs, calling fitaci appropriate units, collecting outputs: code wrapper now gotten significantly longer, several new benefits user, following: units input columns checked. wrapper returns exdf objects include units. assimilation rates also standardized net rates. fit residuals included output. writing wrapper used often, may worth taking time add nicer features like ones. wrapper, can fit curves dataset examine results using following code, simpler previous version:  ’s also easy plot residuals now:","code":"# Make a better wrapper for `plantecophys::fitaci` fit_c3_aci_plantecophys <- function(   replicate_exdf, # an `exdf` object representing a single A-Ci curve   a_column_name = 'A',   tleaf_column_name = 'TleafCnd',   ci_column_name = 'Ci',   qin_column_name = 'Qin',   rd_column_name = 'Rd',   useRd = FALSE,   ... # additional named arguments to be passed to `fitaci` ) {   ### Check inputs    if (!is.exdf(replicate_exdf)) {       stop('fit_c3_aci_plantecophys requires an exdf object')   }    # Make sure the required variables are defined and have the correct units   required_variables <- list()   required_variables[[a_column_name]] <- 'micromol m^(-2) s^(-1)'   required_variables[[tleaf_column_name]] <- \"degrees C\"   required_variables[[ci_column_name]] <- 'micromol mol^(-1)'   required_variables[[qin_column_name]] <- 'micromol m^(-2) s^(-1)'    if (useRd) {     # Only check the existence and units of the `Rd` column if it will be used     required_variables[[rd_column_name]] <- 'micromol m^(-2) s^(-1)'   }    check_required_variables(replicate_exdf, required_variables)    # Make sure the user didn't supply their own `varnames` because we will   # automatically define it from the other column name inputs   if ('varnames' %in% names(list(...))) {     stop('do not supply `varnames` when calling fit_c3_aci_plantecophys')   }    ### Call function from external packge with appropriate units    fit_res <- plantecophys::fitaci(     replicate_exdf$main_data,     varnames = list(         ALEAF = a_column_name,         Tleaf = tleaf_column_name,         Ci = ci_column_name,         PPFD = qin_column_name,         Rd = rd_column_name     ),     useRd = useRd,     ...   )    ### Collect outputs    # Get the identifier columns from the original exdf object   replicate_identifiers <- identifier_columns(replicate_exdf)    # Get a data frame with the fitted values of assimilation and convert it to an   # `exdf` object, setting the category to `fit_c3_aci_plantecophys` and   # specifying the units for each column   fits <- exdf(fit_res$df)    fits <- document_variables(     fits,     c('fit_c3_aci_plantecophys', 'Ci',          'micromol mol^(-1)'),     c('fit_c3_aci_plantecophys', 'Ameas',       'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Amodel',      'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Ac',          'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Aj',          'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Ap',          'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Rd',          'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'VPD',         'kPa'),     c('fit_c3_aci_plantecophys', 'Tleaf',       'degrees C'),     c('fit_c3_aci_plantecophys', 'Cc',          'micromol mol^(-1)'),     c('fit_c3_aci_plantecophys', 'PPFD',        'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Patm',        'kPa'),     c('fit_c3_aci_plantecophys', 'Ci_original', 'micromol mol^(-1)')   )    # Append the identifier columns to the fits   fits <- cbind(replicate_identifiers, fits)    # `plantecophys::fitaci` returns absurdly high values of `Ap` when it cannot   # get a good estimate for `TPU`. These can cause problems when plotting the   # results, so we replace any `Ap` values above 500 micromol / m^2 / s with   # NA.   fits[fits[, 'Ap'] > 500, 'Ap'] <- NA    # Convert `plantecophys::fitaci` outputs to net CO2 assimilation rates for   # consistency with `fit_c3_aci`.   fits[, 'Ac'] <- fits[, 'Ac'] - fits[, 'Rd']   fits[, 'Aj'] <- fits[, 'Aj'] - fits[, 'Rd']   fits[, 'Ap'] <- fits[, 'Ap'] - fits[, 'Rd']    # Add a column for the residuals   fits <- set_variable(     fits,     'A_residuals',     'micromol m^(-2) s^(-1)',     'fit_c3_aci_plantecophys',     fits[, 'Ameas'] - fits[, 'Amodel']   )    # Create an exdf object with the parameter values that are included in the   # fitting result. Note that we do not include RMSE because it is not   # calculated correctly.   parameters <- exdf(data.frame(     Ci_transition  = as.numeric(fit_res$Ci_transition),     Ci_transition2 = as.numeric(fit_res$Ci_transition2),     Tcorrect       = fit_res$Tcorrect,     Rd_measured    = fit_res$Rd_measured,     GammaStar      = fit_res$GammaStar,     Km             = fit_res$Km,     kminput        = fit_res$kminput,     gstarinput     = fit_res$gstarinput,     fitmethod      = fit_res$fitmethod,     citransition   = fit_res$citransition,     gmeso          = fit_res$gmeso,     fitTPU         = fit_res$fitTPU,     alphag         = fit_res$alphag,     Vcmax          = fit_res$par[1, 1],     Vcmax_err      = fit_res$par[1, 2],     Jmax           = fit_res$par[2, 1],     Jmax_err       = fit_res$par[2, 2],     Rd             = fit_res$par[3, 1],     Rd_err         = fit_res$par[3, 2],     ci_star        = fit_res$Ci(0),     A_transition   = fit_res$Photosyn(Ci=fit_res$Ci_transition)$ALEAF   ))    # The value of `TPU` and its error will depend on `fitTPU`   parameters[, 'TPU'] <- if (fit_res$fitTPU) {     fit_res$par[4, 1]   } else {     NA   }    parameters[, 'TPU_err'] <- if (fit_res$fitTPU) {     fit_res$par[4, 2]   } else {     NA   }    # Document the parameter units   parameters <- document_variables(     parameters,     c('fit_c3_aci_plantecophys', 'Ci_transition',  'micromol mol^(-1)'),     c('fit_c3_aci_plantecophys', 'Ci_transition2', 'micromol mol^(-1)'),     c('fit_c3_aci_plantecophys', 'Tcorrect',       ''),     c('fit_c3_aci_plantecophys', 'Rd_measured',    ''),     c('fit_c3_aci_plantecophys', 'GammaStar',      'micromol mol^(-1)'),     c('fit_c3_aci_plantecophys', 'Km',             'micromol mol^(-1)'),     c('fit_c3_aci_plantecophys', 'kminput',        ''),     c('fit_c3_aci_plantecophys', 'gstarinput',     ''),     c('fit_c3_aci_plantecophys', 'fitmethod',      ''),     c('fit_c3_aci_plantecophys', 'citransition',   'micromol mol^(-1)'),     c('fit_c3_aci_plantecophys', 'gmeso',          'mol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'fitTPU',         ''),     c('fit_c3_aci_plantecophys', 'alphag',         'dimensionless'),     c('fit_c3_aci_plantecophys', 'Vcmax',          'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Vcmax_err',      'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Jmax',           'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Jmax_err',       'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Rd',             'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Rd_err',         'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'TPU',            'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'TPU_err',        'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'ci_star',        'micromol mol^(-1)'),     c('fit_c3_aci_plantecophys', 'A_transition',   'micromol m^(-2) s^(-1)')   )    # Append the identifier columns to the parameters   parameters <- cbind(replicate_identifiers, parameters)    # Return a list of two data frames: `fits` and `parameters`   return(list(       fits = fits,       parameters = parameters   )) } # Fit each curve c3_aci_results <- consolidate(by(   licor_data,                       # The `exdf` object containing the curves   licor_data[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_c3_aci_plantecophys           # The function to apply to each chunk of `licor_data` ))  # Plot each fit xyplot(   Ameas + Ac + Aj + Ap + Amodel ~ Ci_original | curve_identifier,   data = c3_aci_results$fits$main_data,   type = 'l',   auto.key = list(space = 'right'),   grid = TRUE,   xlab = 'Intercellular CO2 concentration (ppm)',   ylab = 'Assimilation rate (micromol / m^2 / s)',   par.settings = list(     superpose.line = list(col = multi_curve_colors()),     superpose.symbol = list(col = multi_curve_colors())   ) ) # View the parameter values columns_for_viewing <-   c('instrument', 'species', 'plot', 'Vcmax', 'Jmax', 'Rd', 'TPU')  c3_aci_parameters <-   c3_aci_results$parameters[ , columns_for_viewing, TRUE]  print(c3_aci_parameters) #>   instrument [UserDefCon] (NA) species [UserDefCon] (NA) plot [UserDefCon] (NA) #> 1                        ripe1                   soybean                     5a #> 2                        ripe1                   tobacco                      1 #> 3                        ripe1                   tobacco                      2 #> 4                        ripe2                   soybean                      1 #> 5                        ripe2                   soybean                     5b #> 6                        ripe2                   tobacco                      4 #>   Vcmax [fit_c3_aci_plantecophys] (micromol m^(-2) s^(-1)) #> 1                                                126.61881 #> 2                                                128.90040 #> 3                                                109.78883 #> 4                                                 99.85103 #> 5                                                115.84216 #> 6                                                 83.51227 #>   Jmax [fit_c3_aci_plantecophys] (micromol m^(-2) s^(-1)) #> 1                                                229.5225 #> 2                                                272.3661 #> 3                                                244.9742 #> 4                                                158.7873 #> 5                                                189.9087 #> 6                                                178.1061 #>   Rd [fit_c3_aci_plantecophys] (micromol m^(-2) s^(-1)) #> 1                                             0.8502715 #> 2                                             0.5237341 #> 3                                             0.6525276 #> 4                                             0.3908914 #> 5                                             1.6311794 #> 6                                             0.3925865 #>   TPU [fit_c3_aci_plantecophys] (micromol m^(-2) s^(-1)) #> 1                                                     NA #> 2                                                     NA #> 3                                                     NA #> 4                                                     NA #> 5                                                     NA #> 6                                                     NA # Plot the residuals xyplot(   A_residuals ~ Ci_original | curve_identifier,   data = c3_aci_results$fits$main_data,   type = 'b',   pch = 16,   grid = TRUE,   xlab = paste0('Intercellular CO2 concentration (',     c3_aci_results$fits$units$Ci_original, ')'),   ylab = paste0('Assimilation rate residual (measured - fitted)\\n(',     c3_aci_results$fits$units$A_residuals, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/combining_with_other_packages.html","id":"commands-from-this-document","dir":"Articles","previous_headings":"","what":"Commands From This Document","title":"Combining PhotoGEA With Other Packages","text":"following code chunk includes central commands used throughout document. compiled make easy copy/paste text file initialize script.","code":"# Load required packages library(PhotoGEA) library(plantecophys) library(lattice)  # Define a vector of paths to the files we wish to load file_paths <- c(   system.file('extdata', 'c3_aci_1.xlsx', package = 'PhotoGEA'),   system.file('extdata', 'c3_aci_2.xlsx', package = 'PhotoGEA') )  # Load each file, storing the result in a list licor_exdf_list <- lapply(file_paths, function(fpath) {   read_gasex_file(fpath, 'time') })  # Get the names of all columns that are present in all of the Licor files columns_to_keep <- do.call(identify_common_columns, licor_exdf_list)  # Extract just these columns licor_exdf_list <- lapply(licor_exdf_list, function(x) {   x[ , columns_to_keep, TRUE] })  # Use `rbind` to combine all the data licor_data <- do.call(rbind, licor_exdf_list)  # Create a new identifier column formatted like `instrument - species - plot` licor_data[ , 'curve_identifier'] <-   paste(licor_data[ , 'instrument'], '-', licor_data[ , 'species'], '-', licor_data[ , 'plot'])  # Make sure the data meets basic requirements check_licor_data(licor_data, 'curve_identifier', 16, 'CO2_r_sp')  # Remove points with duplicated `CO2_r_sp` values and order by `Ci` licor_data <- organize_response_curve_data(     licor_data,     'curve_identifier',     c(9, 10),     'Ci' )  # Only keep points where stability was achieved licor_data <- licor_data[licor_data[, 'Stable'] == 2, , TRUE]  # Remove any curves that have fewer than three remaining points npts <- by(licor_data, licor_data[, 'curve_identifier'], nrow) ids_to_keep <- names(npts[npts > 2]) licor_data <- licor_data[licor_data[, 'curve_identifier'] %in% ids_to_keep, , TRUE]  # Remove points where `instrument` is `ripe1` and `CO2_r_sp` is 1800 licor_data <- remove_points(   licor_data,   list(instrument = 'ripe1', CO2_r_sp = 1800) )  # Make a better wrapper for `plantecophys::fitaci` fit_c3_aci_plantecophys <- function(   replicate_exdf, # an `exdf` object representing a single A-Ci curve   a_column_name = 'A',   tleaf_column_name = 'TleafCnd',   ci_column_name = 'Ci',   qin_column_name = 'Qin',   rd_column_name = 'Rd',   useRd = FALSE,   ... # additional named arguments to be passed to `fitaci` ) {   ### Check inputs    if (!is.exdf(replicate_exdf)) {       stop('fit_c3_aci_plantecophys requires an exdf object')   }    # Make sure the required variables are defined and have the correct units   required_variables <- list()   required_variables[[a_column_name]] <- 'micromol m^(-2) s^(-1)'   required_variables[[tleaf_column_name]] <- \"degrees C\"   required_variables[[ci_column_name]] <- 'micromol mol^(-1)'   required_variables[[qin_column_name]] <- 'micromol m^(-2) s^(-1)'    if (useRd) {     # Only check the existence and units of the `Rd` column if it will be used     required_variables[[rd_column_name]] <- 'micromol m^(-2) s^(-1)'   }    check_required_variables(replicate_exdf, required_variables)    # Make sure the user didn't supply their own `varnames` because we will   # automatically define it from the other column name inputs   if ('varnames' %in% names(list(...))) {     stop('do not supply `varnames` when calling fit_c3_aci_plantecophys')   }    ### Call function from external packge with appropriate units    fit_res <- plantecophys::fitaci(     replicate_exdf$main_data,     varnames = list(         ALEAF = a_column_name,         Tleaf = tleaf_column_name,         Ci = ci_column_name,         PPFD = qin_column_name,         Rd = rd_column_name     ),     useRd = useRd,     ...   )    ### Collect outputs    # Get the identifier columns from the original exdf object   replicate_identifiers <- identifier_columns(replicate_exdf)    # Get a data frame with the fitted values of assimilation and convert it to an   # `exdf` object, setting the category to `fit_c3_aci_plantecophys` and   # specifying the units for each column   fits <- exdf(fit_res$df)    fits <- document_variables(     fits,     c('fit_c3_aci_plantecophys', 'Ci',          'micromol mol^(-1)'),     c('fit_c3_aci_plantecophys', 'Ameas',       'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Amodel',      'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Ac',          'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Aj',          'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Ap',          'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Rd',          'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'VPD',         'kPa'),     c('fit_c3_aci_plantecophys', 'Tleaf',       'degrees C'),     c('fit_c3_aci_plantecophys', 'Cc',          'micromol mol^(-1)'),     c('fit_c3_aci_plantecophys', 'PPFD',        'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Patm',        'kPa'),     c('fit_c3_aci_plantecophys', 'Ci_original', 'micromol mol^(-1)')   )    # Append the identifier columns to the fits   fits <- cbind(replicate_identifiers, fits)    # `plantecophys::fitaci` returns absurdly high values of `Ap` when it cannot   # get a good estimate for `TPU`. These can cause problems when plotting the   # results, so we replace any `Ap` values above 500 micromol / m^2 / s with   # NA.   fits[fits[, 'Ap'] > 500, 'Ap'] <- NA    # Convert `plantecophys::fitaci` outputs to net CO2 assimilation rates for   # consistency with `fit_c3_aci`.   fits[, 'Ac'] <- fits[, 'Ac'] - fits[, 'Rd']   fits[, 'Aj'] <- fits[, 'Aj'] - fits[, 'Rd']   fits[, 'Ap'] <- fits[, 'Ap'] - fits[, 'Rd']    # Add a column for the residuals   fits <- set_variable(     fits,     'A_residuals',     'micromol m^(-2) s^(-1)',     'fit_c3_aci_plantecophys',     fits[, 'Ameas'] - fits[, 'Amodel']   )    # Create an exdf object with the parameter values that are included in the   # fitting result. Note that we do not include RMSE because it is not   # calculated correctly.   parameters <- exdf(data.frame(     Ci_transition  = as.numeric(fit_res$Ci_transition),     Ci_transition2 = as.numeric(fit_res$Ci_transition2),     Tcorrect       = fit_res$Tcorrect,     Rd_measured    = fit_res$Rd_measured,     GammaStar      = fit_res$GammaStar,     Km             = fit_res$Km,     kminput        = fit_res$kminput,     gstarinput     = fit_res$gstarinput,     fitmethod      = fit_res$fitmethod,     citransition   = fit_res$citransition,     gmeso          = fit_res$gmeso,     fitTPU         = fit_res$fitTPU,     alphag         = fit_res$alphag,     Vcmax          = fit_res$par[1, 1],     Vcmax_err      = fit_res$par[1, 2],     Jmax           = fit_res$par[2, 1],     Jmax_err       = fit_res$par[2, 2],     Rd             = fit_res$par[3, 1],     Rd_err         = fit_res$par[3, 2],     ci_star        = fit_res$Ci(0),     A_transition   = fit_res$Photosyn(Ci=fit_res$Ci_transition)$ALEAF   ))    # The value of `TPU` and its error will depend on `fitTPU`   parameters[, 'TPU'] <- if (fit_res$fitTPU) {     fit_res$par[4, 1]   } else {     NA   }    parameters[, 'TPU_err'] <- if (fit_res$fitTPU) {     fit_res$par[4, 2]   } else {     NA   }    # Document the parameter units   parameters <- document_variables(     parameters,     c('fit_c3_aci_plantecophys', 'Ci_transition',  'micromol mol^(-1)'),     c('fit_c3_aci_plantecophys', 'Ci_transition2', 'micromol mol^(-1)'),     c('fit_c3_aci_plantecophys', 'Tcorrect',       ''),     c('fit_c3_aci_plantecophys', 'Rd_measured',    ''),     c('fit_c3_aci_plantecophys', 'GammaStar',      'micromol mol^(-1)'),     c('fit_c3_aci_plantecophys', 'Km',             'micromol mol^(-1)'),     c('fit_c3_aci_plantecophys', 'kminput',        ''),     c('fit_c3_aci_plantecophys', 'gstarinput',     ''),     c('fit_c3_aci_plantecophys', 'fitmethod',      ''),     c('fit_c3_aci_plantecophys', 'citransition',   'micromol mol^(-1)'),     c('fit_c3_aci_plantecophys', 'gmeso',          'mol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'fitTPU',         ''),     c('fit_c3_aci_plantecophys', 'alphag',         'dimensionless'),     c('fit_c3_aci_plantecophys', 'Vcmax',          'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Vcmax_err',      'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Jmax',           'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Jmax_err',       'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Rd',             'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Rd_err',         'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'TPU',            'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'TPU_err',        'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'ci_star',        'micromol mol^(-1)'),     c('fit_c3_aci_plantecophys', 'A_transition',   'micromol m^(-2) s^(-1)')   )    # Append the identifier columns to the parameters   parameters <- cbind(replicate_identifiers, parameters)    # Return a list of two data frames: `fits` and `parameters`   return(list(       fits = fits,       parameters = parameters   )) }  # Fit each curve c3_aci_results <- consolidate(by(   licor_data,                       # The `exdf` object containing the curves   licor_data[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_c3_aci_plantecophys           # The function to apply to each chunk of `licor_data` ))  # Plot each fit xyplot(   Ameas + Ac + Aj + Ap + Amodel ~ Ci_original | curve_identifier,   data = c3_aci_results$fits$main_data,   type = 'l',   auto.key = list(space = 'right'),   grid = TRUE,   xlab = 'Intercellular CO2 concentration (ppm)',   ylab = 'Assimilation rate (micromol / m^2 / s)',   par.settings = list(     superpose.line = list(col = multi_curve_colors()),     superpose.symbol = list(col = multi_curve_colors())   ) )  # View the parameter values columns_for_viewing <-   c('instrument', 'species', 'plot', 'Vcmax', 'Jmax', 'Rd', 'TPU')  c3_aci_parameters <-   c3_aci_results$parameters[ , columns_for_viewing, TRUE]  print(c3_aci_parameters)  # Plot the residuals xyplot(   A_residuals ~ Ci_original | curve_identifier,   data = c3_aci_results$fits$main_data,   type = 'b',   pch = 16,   grid = TRUE,   xlab = paste0('Intercellular CO2 concentration (',     c3_aci_results$fits$units$Ci_original, ')'),   ylab = paste0('Assimilation rate residual (measured - fitted)\\n(',     c3_aci_results$fits$units$A_residuals, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/creating_your_own_processing_tools.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Creating Your Own Processing Tools","text":"PhotoGEA package contains many functions processing gas exchange data, apply_gm fit_c3_aci. (complete list available Developing Data Analysis Pipeline vignette.) However, may wish perform kind processing already available PhotoGEA. case, possible create processing tools compatible functions PhotoGEA help loading data, validating data, processing sets multiple reponse curves, analyzing results. vignette, provide example showing best practices creating processing tools. create tool may useful others like share , contact PhotoGEA package maintainer adding function package.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/creating_your_own_processing_tools.html","id":"loading-packages","dir":"Articles","previous_headings":"","what":"Loading Packages","title":"Creating Your Own Processing Tools","text":"always, first step load packages using. addition PhotoGEA, also use lattice package. lattice package installed R setup, can install typing install.packages('lattice').","code":"# Load required packages library(PhotoGEA) library(lattice)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/creating_your_own_processing_tools.html","id":"loading-and-validating-data","dir":"Articles","previous_headings":"","what":"Loading and Validating Data","title":"Creating Your Own Processing Tools","text":"example, load set C3 -Ci curves used Analyzing C3 -Ci Curves vignette, perform steps organizing cleaning data. See vignette details steps. brevity, commands included , can found end vignette Commands Document.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/creating_your_own_processing_tools.html","id":"choosing-a-model-to-use","dir":"Articles","previous_headings":"","what":"Choosing a Model To Use","title":"Creating Your Own Processing Tools","text":"example, develop function fits rectangular hyperbola -Ci curve. rectangular hyperbola equation form f(x) = y_max * x / (x + x_half). can understand great deal type equation examining form: x large, x + x_half can approximated x, case, function reduces y_max * x / x = y_max. words, function reaches constant value y_max x large. x x_half, function’s value y_max * x_half / (x_half +   x_half) = y_max / 2. words, x_half value x function reaches half maximum value. x small, x + x_half can approximated x_half. case, function reduces y_max * x / x_half. words, function straight line slope y_max / x_half x small. x exactly zero, function also zero. mind, can see rectangular hyperbola begins linear portion flattens constant value. generally similar shape -Ci curve, might reasonable use equation fitting. type model characterized “empirical” model (contrast mechanistic process-based model) underlying explanation equation good fit. Thus, considered simpler alternative Farquhar-von-Caemmerer-Berry model used fit_c3_aci function. applying -Ci curve, want replace independent variable x Ci calculated value net assimilation . One caveat generally negative Ci zero low, rectangular hyperbola never returns negative values. get better fit, helpful include respiration constant value subtracted hyperbola: = A_max * Ci / (Ci + Ci_half) - Rd.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/creating_your_own_processing_tools.html","id":"general-suggestions-for-photogea-fitting-functions","dir":"Articles","previous_headings":"","what":"General Suggestions for PhotoGEA Fitting Functions","title":"Creating Your Own Processing Tools","text":"creating PhotoGEA fitting function, good idea follow rules, ensure function compatible + consolidate similar inputs outputs fitting functions: first input argument exdf object represents one “unit” data; case, single -Ci curve. argument often called replicate_exdf reminder represents type object . first argument checked make sure exdf; can done using .exdf. name important column exdf object passed input argument default value. function check make sure important column exdf object expected units; check can accomplished check_required_variables function PhotoGEA. function return list named exdf objects outputs; fitting functions return exdf objects called fits parameters. fits return object copy original data additional columns fitted values fit residuals. columns include identifying information curve species event; information can obtained identifier_columns function PhotoGEA. columns include statistics describe quality fit, root mean squared error; information can obtained residual_stats function PhotoGEA. columns include best-fit values model’s parameters information may important user. exdf objects returned function fully documented units relevant column. category exdf column created function set name provide record column calculated. problems detected checking inputs cause errors. fit fails, function return NA results rather causing error. Otherwise, cause problems fitting many curves , since process disrupted errors thrown. general, structure output (e.g. number exdf objects list, names exdf objects list, columns exdf object) always , matter function’s inputs matter fitting results . outputs relevant particular fit just set NA. Provide default values many input arguments possible. (default provided replicate_exdf, course.) next section, create fitting function meets criteria.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/creating_your_own_processing_tools.html","id":"writing-a-fitting-function","dir":"Articles","previous_headings":"","what":"Writing A Fitting Function","title":"Creating Your Own Processing Tools","text":"write function fits rectangular hyperbola -Ci curve follows suggestions outlined : split code three main sections corresponding main steps taken processing function: Check inputs: check type replicate_exdf units columns accessed subsequent processing. Perform processing operations: actually perform fit get results default form. Collect document outputs: reorganize fit results two exdf objects corresponding fits parameters, make sure units documented. section ends returning results list named exdf objects. make fit, chosen use nls, function base R performs nonlinear least-squares fitting. function fairly straightforward use, quite popular. requires initial guess values model’s parameters, initial_guess input argument included fit_hyperbola allowing user specify starting guess. One issue nls throw error fit successful. Dealing possible errors necessitates extra code. First, wrap call nls tryCatch, later decide return fit failure; just return NA variables normally determined fitting procedure. One improvement made provide way generate better initial guess starting parameter values, left brevity.","code":"# Define a custom fitting function fit_hyperbola <- function(   replicate_exdf,   a_column_name = 'A',   ci_column_name = 'Ci',   initial_guess = list(A_max = 40, Ci_half = 100, Rd = 1) ) {   ### Check inputs    if (!is.exdf(replicate_exdf)) {       stop(\"fit_hyperbola requires an exdf object\")   }    # Make sure the required variables are defined and have the correct units   required_variables <- list()   required_variables[[a_column_name]] <- \"micromol m^(-2) s^(-1)\"   required_variables[[ci_column_name]] <- \"micromol mol^(-1)\"    check_required_variables(replicate_exdf, required_variables)    # Extract the values of several important columns   A <- replicate_exdf[, a_column_name]   Ci <- replicate_exdf[, ci_column_name]    ### Perform processing operations    # Wrap `stats::nls` in a `tryCatch` block so we can indicate fit failures by   # setting `aci_fit` to `NULL`.   aci_fit <- tryCatch(     {       stats::nls(A ~ A_max * Ci / (Ci + Ci_half) - Rd, start = initial_guess)     },     error = function(cond) {       print('Having trouble fitting an A-Ci curve:')       print(identifier_columns(replicate_exdf))       print('Giving up on the fit :(')       print(cond)       return(NULL)     },     warning = function(cond) {       print('Having trouble fitting an A-Ci curve:')       print(identifier_columns(replicate_exdf))       print('Giving up on the fit :(')       print(cond)       return(NULL)     }   )    ### Collect and document outputs    # Extract the fit results and add the fits and residuals to the exdf object     if (is.null(aci_fit)) {         A_max <- NA         A_max_err <- NA         Ci_half <- NA         Ci_half_err <- NA         Rd <- NA         Rd_err <- NA         replicate_exdf[, paste0(a_column_name, '_fit')] <- NA         replicate_exdf[, paste0(a_column_name, '_residuals')] <- NA     } else {         fit_summary <- summary(aci_fit)         A_max <- fit_summary$coefficients[1,1]         A_max_err <- fit_summary$coefficients[1,2]         Ci_half <- fit_summary$coefficients[2,1]         Ci_half_err <- fit_summary$coefficients[2,2]         Rd <- fit_summary$coefficients[3,1]         Rd_err <- fit_summary$coefficients[3,2]          replicate_exdf[, paste0(a_column_name, '_fit')] <-           A_max * Ci / (Ci + Ci_half) - Rd          replicate_exdf[, paste0(a_column_name, '_residuals')] <-           fit_summary$residuals     }      # Document the columns that were added to the replicate exdf     replicate_exdf <- document_variables(         replicate_exdf,         c('fit_hyperbola', paste0(a_column_name, '_fit'),       'micromol m^(-2) s^(-1)'),         c('fit_hyperbola', paste0(a_column_name, '_residuals'), 'micromol m^(-2) s^(-1)')     )      # Get the replicate identifier columns     replicate_identifiers <- identifier_columns(replicate_exdf)      # Attach the residual stats to the identifiers     replicate_identifiers <- cbind(         replicate_identifiers,         residual_stats(             replicate_exdf[, paste0(a_column_name, '_residuals')],             replicate_exdf$units[[a_column_name]],             3         )     )      # Add the values of the fitted parameters     replicate_identifiers[, 'A_max'] <- A_max     replicate_identifiers[, 'A_max_err'] <- A_max_err     replicate_identifiers[, 'Ci_half'] <- Ci_half     replicate_identifiers[, 'Ci_half_err'] <- Ci_half_err     replicate_identifiers[, 'Rd'] <- Rd     replicate_identifiers[, 'Rd_err'] <- Rd_err      # Document the columns that were added     replicate_identifiers <- document_variables(         replicate_identifiers,         c('fit_hyperbola', 'A_max',       'micromol m^(-2) s^(-1)'),         c('fit_hyperbola', 'A_max_err',   'micromol m^(-2) s^(-1)'),         c('fit_hyperbola', 'Ci_half',     'micromol mol^(-1)'),         c('fit_hyperbola', 'Ci_half_err', 'micromol mol^(-1)'),         c('fit_hyperbola', 'Rd',          'micromol m^(-2) s^(-1)'),         c('fit_hyperbola', 'Rd_err',      'micromol m^(-2) s^(-1)')     )      return(list(       fits = replicate_exdf,       parameters = replicate_identifiers     )) }"},{"path":"https://eloch216.github.io/PhotoGEA/articles/creating_your_own_processing_tools.html","id":"using-the-fitting-function","dir":"Articles","previous_headings":"","what":"Using the Fitting Function","title":"Creating Your Own Processing Tools","text":"Now can use new fitting just use processing function PhotoGEA. use fit response curves example data set, examine results plotting fits, plotting residuals, viewing parameter values. commands nearly identical ones Analyzing C3 -Ci Curves vignette.","code":"# Fit each curve c3_aci_results <- consolidate(by(   licor_data,                       # The `exdf` object containing the curves   licor_data[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_hyperbola                     # The function to apply to each chunk of `licor_data` ))  # Plot each fit xyplot(   A + A_fit ~ Ci | curve_identifier,   data = c3_aci_results$fits$main_data,   type = 'l',   auto.key = list(space = 'right'),   grid = TRUE,   xlab = 'Intercellular CO2 concentration (ppm)',   ylab = 'Assimilation rate (micromol / m^2 / s)',   par.settings = list(     superpose.line = list(col = multi_curve_colors()),     superpose.symbol = list(col = multi_curve_colors())   ) ) # Plot the residuals xyplot(   A_residuals ~ Ci | curve_identifier,   data = c3_aci_results$fits$main_data,   type = 'b',   pch = 16,   grid = TRUE,   xlab = paste0('Intercellular CO2 concentration (',     c3_aci_results$fits$units$Ci, ')'),   ylab = paste0('Assimilation rate residual (measured - fitted)\\n(',     c3_aci_results$fits$units$A_residuals, ')') ) # View the parameter values columns_for_viewing <-   c('instrument', 'species', 'plot', 'A_max', 'Ci_half', 'Rd', 'RMSE')  c3_aci_parameters <-   c3_aci_results$parameters[ , columns_for_viewing, TRUE]  print(c3_aci_parameters) #>   instrument [UserDefCon] (NA) species [UserDefCon] (NA) plot [UserDefCon] (NA) #> 1                        ripe1                   soybean                     5a #> 2                        ripe1                   tobacco                      1 #> 3                        ripe1                   tobacco                      2 #> 4                        ripe2                   soybean                      1 #> 5                        ripe2                   soybean                     5b #> 6                        ripe2                   tobacco                      4 #>   A_max [fit_hyperbola] (micromol m^(-2) s^(-1)) #> 1                                      128.99658 #> 2                                      115.27665 #> 3                                      108.00753 #> 4                                       67.50371 #> 5                                       82.51852 #> 6                                       74.40789 #>   Ci_half [fit_hyperbola] (micromol mol^(-1)) #> 1                                    560.2505 #> 2                                    286.3507 #> 3                                    380.7208 #> 4                                    146.5151 #> 5                                    303.7394 #> 6                                    211.0452 #>   Rd [fit_hyperbola] (micromol m^(-2) s^(-1)) #> 1                                    11.89748 #> 2                                    20.57574 #> 3                                    14.89457 #> 4                                    19.17675 #> 5                                    13.73897 #> 6                                    17.46451 #>   RMSE [residual_stats] (micromol m^(-2) s^(-1)) #> 1                                       2.857247 #> 2                                       1.753694 #> 3                                       1.578398 #> 4                                       4.260341 #> 5                                       2.815101 #> 6                                       3.040083"},{"path":"https://eloch216.github.io/PhotoGEA/articles/creating_your_own_processing_tools.html","id":"more-examples","dir":"Articles","previous_headings":"","what":"More Examples","title":"Creating Your Own Processing Tools","text":"Another example can found Combining PhotoGEA Packages vignette, discusses write wrappers functions packages. Essentially, specialized case ideas discussed vignette. Additional examples can found accessing source code built-processing functions provided PhotoGEA. One way see code simply type name function R terminal; example, fit_ball_berry. Although method convenient, downside comments original code included. alternate way view code GitHub, comments retained. example, source code fit_ball_berry can found accessing PhotoGEA GitHub page navigating R/fit_ball_berry.R.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/creating_your_own_processing_tools.html","id":"commands-from-this-document","dir":"Articles","previous_headings":"","what":"Commands From This Document","title":"Creating Your Own Processing Tools","text":"following code chunk includes central commands used throughout document. compiled make easy copy/paste text file initialize script.","code":"# Load required packages library(PhotoGEA) library(lattice)  # Define a vector of paths to the files we wish to load file_paths <- c(   system.file('extdata', 'c3_aci_1.xlsx', package = 'PhotoGEA'),   system.file('extdata', 'c3_aci_2.xlsx', package = 'PhotoGEA') )  # Load each file, storing the result in a list licor_exdf_list <- lapply(file_paths, function(fpath) {   read_gasex_file(fpath, 'time') })  # Get the names of all columns that are present in all of the Licor files columns_to_keep <- do.call(identify_common_columns, licor_exdf_list)  # Extract just these columns licor_exdf_list <- lapply(licor_exdf_list, function(x) {   x[ , columns_to_keep, TRUE] })  # Use `rbind` to combine all the data licor_data <- do.call(rbind, licor_exdf_list)  # Create a new identifier column formatted like `instrument - species - plot` licor_data[ , 'curve_identifier'] <-   paste(licor_data[ , 'instrument'], '-', licor_data[ , 'species'], '-', licor_data[ , 'plot'])  # Make sure the data meets basic requirements check_licor_data(licor_data, 'curve_identifier', 16, 'CO2_r_sp')  # Remove points with duplicated `CO2_r_sp` values and order by `Ci` licor_data <- organize_response_curve_data(     licor_data,     'curve_identifier',     c(9, 10),     'Ci' )  # Only keep points where stability was achieved licor_data <- licor_data[licor_data[, 'Stable'] == 2, , TRUE]  # Remove any curves that have fewer than three remaining points npts <- by(licor_data, licor_data[, 'curve_identifier'], nrow) ids_to_keep <- names(npts[npts > 2]) licor_data <- licor_data[licor_data[, 'curve_identifier'] %in% ids_to_keep, , TRUE]  # Remove points where `instrument` is `ripe1` and `CO2_r_sp` is 1800 licor_data <- remove_points(   licor_data,   list(instrument = 'ripe1', CO2_r_sp = 1800) )  # Define a custom fitting function fit_hyperbola <- function(   replicate_exdf,   a_column_name = 'A',   ci_column_name = 'Ci',   initial_guess = list(A_max = 40, Ci_half = 100, Rd = 1) ) {   ### Check inputs    if (!is.exdf(replicate_exdf)) {       stop(\"fit_hyperbola requires an exdf object\")   }    # Make sure the required variables are defined and have the correct units   required_variables <- list()   required_variables[[a_column_name]] <- \"micromol m^(-2) s^(-1)\"   required_variables[[ci_column_name]] <- \"micromol mol^(-1)\"    check_required_variables(replicate_exdf, required_variables)    # Extract the values of several important columns   A <- replicate_exdf[, a_column_name]   Ci <- replicate_exdf[, ci_column_name]    ### Perform processing operations    # Wrap `stats::nls` in a `tryCatch` block so we can indicate fit failures by   # setting `aci_fit` to `NULL`.   aci_fit <- tryCatch(     {       stats::nls(A ~ A_max * Ci / (Ci + Ci_half) - Rd, start = initial_guess)     },     error = function(cond) {       print('Having trouble fitting an A-Ci curve:')       print(identifier_columns(replicate_exdf))       print('Giving up on the fit :(')       print(cond)       return(NULL)     },     warning = function(cond) {       print('Having trouble fitting an A-Ci curve:')       print(identifier_columns(replicate_exdf))       print('Giving up on the fit :(')       print(cond)       return(NULL)     }   )    ### Collect and document outputs    # Extract the fit results and add the fits and residuals to the exdf object     if (is.null(aci_fit)) {         A_max <- NA         A_max_err <- NA         Ci_half <- NA         Ci_half_err <- NA         Rd <- NA         Rd_err <- NA         replicate_exdf[, paste0(a_column_name, '_fit')] <- NA         replicate_exdf[, paste0(a_column_name, '_residuals')] <- NA     } else {         fit_summary <- summary(aci_fit)         A_max <- fit_summary$coefficients[1,1]         A_max_err <- fit_summary$coefficients[1,2]         Ci_half <- fit_summary$coefficients[2,1]         Ci_half_err <- fit_summary$coefficients[2,2]         Rd <- fit_summary$coefficients[3,1]         Rd_err <- fit_summary$coefficients[3,2]          replicate_exdf[, paste0(a_column_name, '_fit')] <-           A_max * Ci / (Ci + Ci_half) - Rd          replicate_exdf[, paste0(a_column_name, '_residuals')] <-           fit_summary$residuals     }      # Document the columns that were added to the replicate exdf     replicate_exdf <- document_variables(         replicate_exdf,         c('fit_hyperbola', paste0(a_column_name, '_fit'),       'micromol m^(-2) s^(-1)'),         c('fit_hyperbola', paste0(a_column_name, '_residuals'), 'micromol m^(-2) s^(-1)')     )      # Get the replicate identifier columns     replicate_identifiers <- identifier_columns(replicate_exdf)      # Attach the residual stats to the identifiers     replicate_identifiers <- cbind(         replicate_identifiers,         residual_stats(             replicate_exdf[, paste0(a_column_name, '_residuals')],             replicate_exdf$units[[a_column_name]],             3         )     )      # Add the values of the fitted parameters     replicate_identifiers[, 'A_max'] <- A_max     replicate_identifiers[, 'A_max_err'] <- A_max_err     replicate_identifiers[, 'Ci_half'] <- Ci_half     replicate_identifiers[, 'Ci_half_err'] <- Ci_half_err     replicate_identifiers[, 'Rd'] <- Rd     replicate_identifiers[, 'Rd_err'] <- Rd_err      # Document the columns that were added     replicate_identifiers <- document_variables(         replicate_identifiers,         c('fit_hyperbola', 'A_max',       'micromol m^(-2) s^(-1)'),         c('fit_hyperbola', 'A_max_err',   'micromol m^(-2) s^(-1)'),         c('fit_hyperbola', 'Ci_half',     'micromol mol^(-1)'),         c('fit_hyperbola', 'Ci_half_err', 'micromol mol^(-1)'),         c('fit_hyperbola', 'Rd',          'micromol m^(-2) s^(-1)'),         c('fit_hyperbola', 'Rd_err',      'micromol m^(-2) s^(-1)')     )      return(list(       fits = replicate_exdf,       parameters = replicate_identifiers     )) }  # Fit each curve c3_aci_results <- consolidate(by(   licor_data,                       # The `exdf` object containing the curves   licor_data[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_hyperbola                     # The function to apply to each chunk of `licor_data` ))  # Plot each fit xyplot(   A + A_fit ~ Ci | curve_identifier,   data = c3_aci_results$fits$main_data,   type = 'l',   auto.key = list(space = 'right'),   grid = TRUE,   xlab = 'Intercellular CO2 concentration (ppm)',   ylab = 'Assimilation rate (micromol / m^2 / s)',   par.settings = list(     superpose.line = list(col = multi_curve_colors()),     superpose.symbol = list(col = multi_curve_colors())   ) )  # Plot the residuals xyplot(   A_residuals ~ Ci | curve_identifier,   data = c3_aci_results$fits$main_data,   type = 'b',   pch = 16,   grid = TRUE,   xlab = paste0('Intercellular CO2 concentration (',     c3_aci_results$fits$units$Ci, ')'),   ylab = paste0('Assimilation rate residual (measured - fitted)\\n(',     c3_aci_results$fits$units$A_residuals, ')') )  # View the parameter values columns_for_viewing <-   c('instrument', 'species', 'plot', 'A_max', 'Ci_half', 'Rd', 'RMSE')  c3_aci_parameters <-   c3_aci_results$parameters[ , columns_for_viewing, TRUE]  print(c3_aci_parameters)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/developing_a_data_analysis_pipeline.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Developing a Data Analysis Pipeline","text":"main purpose PhotoGEA package provide tools creating “data analysis pipeline” photosynthetic gas exchange data. Although base version R coupled popular packages like lattice ggplot2 provides excellent set general tools data analysis, specialized gas exchange data, using purpose can sometimes tedious usually requires writing various customized functions. PhotoGEA designed address gaps providing several specialized functions related photosynthetic gas exchange data. using functions, can spend time extracting important information data less time writing code. vignette, describe important functions PhotoGEA relate general data workflow “pipeline.” description given general, detailed examples can found vignettes Analyzing Ball-Berry Data. also discuss general strategies writing scripts customized data preferences.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/developing_a_data_analysis_pipeline.html","id":"key-steps-in-analyzing-data","dir":"Articles","previous_headings":"","what":"Key Steps in Analyzing Data","title":"Developing a Data Analysis Pipeline","text":"convenient break process “data analysis” four key steps: Translation: Converting data original state convenient format can understood piece analysis software. Validation: Ensuring data meets basic requirements quality consistency. Processing: Performing operations extract new information data calculating values new quantities fitting curves. Synthesis: Drawing conclusions data, commonly done applying statistical operations computing averages across groups determining whether observed differences groups significant. “data analysis pipeline” refers relatively simple repeatable way perform steps set data. following sections, explain PhotoGEA package, conjunction base R popular packages, can used accomplish steps. Note: Documentation function mentioned vignette can obtained R’s built-help system, can accessed using ? command. example, get information read_gasex_file function, type ?read_gasex_file R terminal.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/developing_a_data_analysis_pipeline.html","id":"translation","dir":"Articles","previous_headings":"Key Steps in Analyzing Data","what":"Translation","title":"Developing a Data Analysis Pipeline","text":"Since working exclusively R, translation refers process creating R objects instrument log files. PhotoGEA currently includes one core function related translation: read_gasex_file: Creates R data object log file created gas exchange measurement system Licor LI-6800 tunable diode laser. function produces “extended data frame” (exdf) objects R. exdf class similar regular data frame, main difference exdf object keeps track units associated column. data structure provides several key benefits analyzing gas exchange data, information available Working Extended Data Frames vignette. often case full data set spread across multiple files. , translating data R often involves combining multiple exdf objects (one file) together one object holds data. help , PhotoGEA package provides several functions can used select files via dialog windows: choose_input_files choose_input_licor_files (available Microsoft Windows) choose_input_tdl_files (available Microsoft Windows) also provides identify_common_columns function, can used along rbind easily combine set exdf objects. operation described Combining Data Several Files section Working Extended Data Frames vignette. process translation “sets stage” validation, processing, synthesis steps sense determines structure data. words, translation functions produce exdf objects, many functions used remaining data analysis steps also designed work exdf objects.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/developing_a_data_analysis_pipeline.html","id":"validation","dir":"Articles","previous_headings":"Key Steps in Analyzing Data","what":"Validation","title":"Developing a Data Analysis Pipeline","text":"phrase originated computer science applies many human endeavors, including data analysis: “Garbage , garbage .” context can understand mean processing synthesis apply data produce meaningless results data meet certain requirements quality consistency. example, try fitting straight line set curved data:  case, fitting procedure report errors, even returns fairly high value R2 (0.7540145), clear linear model applicable data. words, case “garbage ,” produced set “garbage .” goal data validation ensure subsequent processing appropriate; words, avoid “garbage ” scenario. Validation often consists three parts: Ensuring data set properly organized subsets (applicable). Identifying problematic points data set. “Cleaning” data set removing points. many ways validate data, methods can broadly categorized automated vs. manual objective vs. subjective. examples: Plotting raw data locate abnormal points example manual subjective form validation, since requires visually take look. Removing points raw data Li-6800’s stability criteria met example automated objective validation, since can proceed without judegement human. Typically, best results achieved using mix multiple forms validation. PhotoGEA package includes several functions help data validation: check_licor_data: data set represents multiple “response curves” measured Licor, function can used make sure response curve can properly located curves follow sequence “driving” variable values. organize_response_curve_data: , data set represents multiple “response curves” measured Licor, function can used remove certain points curve reorder data convenient way plotting. identify_tdl_cycles: data set represents measurements tunable diode laser, function can used identify complete cycles within data gas handling system periodically measures gas multiple lines. remove_points: function simplifies process removing individual points even entire response curves data set found unreliable. exclude_outliers: function can used remove points measurement conditions unusual; example, leaf temperature value recorded Li-6800 significantly different recorded temperatures points response curve. addition functions, basic operations subsetting plotting can used help validation; see Working Extended Data Frames vignette details subsetting plotting data exdf objects.","code":"# Generate some data using a cubic function X <- seq(from = 0, to = 10, length.out = 21) Y <- (X - 3) * (X - 5) * (X - 7)  # Fit a linear model to the data linear_fit <- lm(Y ~ X)  # Plot the fit results xyplot(   linear_fit$fitted.values + linear_fit$model$Y ~ linear_fit$model$X,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/developing_a_data_analysis_pipeline.html","id":"processing","dir":"Articles","previous_headings":"Key Steps in Analyzing Data","what":"Processing","title":"Developing a Data Analysis Pipeline","text":"processing step, new information extracted raw data data set. PhotoGEA package includes many functions specialized processing photosynthetic gas exchange data. Broadly, fall two types: Functions calculate values new variables values ones already included data set. Functions apply fitting procedure single response curves within full data set. general, “processing” step require several functions, depend strongly type measurements made; example, -Ci curves measured C3 plants require different type processing -Ci curves measured C4 plants. functions designed applied exdf objects. case, exdf objects provide large advantage regular data frames include information units; fact, functions check units required variables proceeding make sure results correct.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/developing_a_data_analysis_pipeline.html","id":"functions-for-calculating-new-variable-values","dir":"Articles","previous_headings":"Key Steps in Analyzing Data > Processing","what":"Functions for Calculating New Variable Values","title":"Developing a Data Analysis Pipeline","text":"PhotoGEA package includes following functions calculating values new variables values variables already exist data set: calculate_arrhenius: Calculates temperature-dependent values photosynthetic parameters using Arrhenius exponents. calculate_ball_berry_index: Calculates Ball-Berry index values net assimilation, relative humidity leaf surface, CO2 concentration leaf surface. calculate_c3_assimilation: Calculates assimilation rates using Farquhar-von-Caemmerer-Berry model C3 photosynthesis. calculate_c4_assimilation: Calculate assimilation rates using S. von Caemmerer’s model C4 photosynthesis. apply_gm: Calculates values chloroplast mesophyll CO2 concentration. calculate_gas_properties: Calculates gas properties included default Licor log files, H2O concentration leaf surface stomatal conductance CO2. calculate_total_pressure: Calculates total pressure Licor measurement chamber. (list exhaustive; instead, includes functions documentation written.) functions generally treat row exdf object independent observation, can applied objects include data many plants response curves.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/developing_a_data_analysis_pipeline.html","id":"functions-for-fitting-response-curves","dir":"Articles","previous_headings":"Key Steps in Analyzing Data > Processing","what":"Functions for Fitting Response Curves","title":"Developing a Data Analysis Pipeline","text":"PhotoGEA package includes following functions fitting individual response curves: fit_ball_berry: Calculates linear fit stomatal conductance H2O vs. Ball-Berry index. fit_c3_aci: Calculates nonlinear fit net CO2 assimilation vs. chloroplastic CO2 concentration. fit_c4_aci: Calculates nonlinear fit net CO2 assimilation vs. partial pressure CO2 mesophyll. (list exhaustive; instead, includes functions documentation written.) functions generally assume input exdf object represents single response curve, return optimized parameter values fitted values measured varaibles; example, fit_ball_berry performs fit single Ball-Berry curve returns Ball-Berry intercept, Ball-Berry slope, fitted values stomatal conductance. functions applied directly exdf object contains full set multiple response curves, assume input single response curve. However, can used conjunction consolidate functions automatically split large exdf individual curves, apply fitting function curve, combine results fit; see Processing Multiple Pieces Extended Data Frame section Working Extended Data Frames vignette details .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/developing_a_data_analysis_pipeline.html","id":"functions-for-calibrating-tdl-data","dir":"Articles","previous_headings":"Key Steps in Analyzing Data > Processing","what":"Functions for Calibrating TDL Data","title":"Developing a Data Analysis Pipeline","text":"PhotoGEA package includes following functions calibrating TDL data: process_tdl_cycle_erml: Designed TDL ERML. process_tdl_cycle_polynomial: Applies correction based polynomial fit readings two reference tanks. fitting functions , functions generally assume input exdf object represents data single TDL cycle, must used along consolidate processing full TDL data set.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/developing_a_data_analysis_pipeline.html","id":"developing-custom-processing-functions","dir":"Articles","previous_headings":"Key Steps in Analyzing Data > Processing","what":"Developing Custom Processing Functions","title":"Developing a Data Analysis Pipeline","text":"PhotoGEA package also includes several tools can helpful developing custom processing functions: check_required_variables: Can used make sure exdf object contains certain columns columns expected units. identifier_columns: Can used identify columns exdf object whose values constant. residual_stats: Calculates several key statistics residuals fit. functions used extensively within PhotoGEA package’s built-processing tools. also two vignettes discussing use : Creating Processing Tools Combining PhotoGEA Packages.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/developing_a_data_analysis_pipeline.html","id":"synthesis","dir":"Articles","previous_headings":"Key Steps in Analyzing Data","what":"Synthesis","title":"Developing a Data Analysis Pipeline","text":"synthesis step, statistical operations used draw conclusions data, visualizations generated make easier understand. PhotoGEA package includes tools basic operations: exclude_outliers: function splits exdf object subsets according values one identifier columns, determines rows subset value certain column outlier, removes rows. example, function used “clean” output Ball-Berry fitting procedure excluding curves species Ball-Berry slope outlier. basic_stats: function splits exdf object subsets according values one identifier columns, calculates mean standard deviation applicable column object. example, function used calculate average value Ball-Berry slope intercept species present data set. barchart_with_errorbars: function can used create barchart height bar average value set measurements error bars determined standard error. xyplot_avg_rc: function can used plot average response curves created averaging individual curves measured multiple plants. complex statistical operations can performed functions R packages onewaytests DescTools.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/developing_a_data_analysis_pipeline.html","id":"creating-data-analysis-scripts","dir":"Articles","previous_headings":"","what":"Creating Data Analysis Scripts","title":"Developing a Data Analysis Pipeline","text":"R script essentially just collection R commands stored plain-text document, usually .R extension. commands script can copied pasted R terminal run code, code can executed automatically using source function. Writing scripts can save lot time making code reusable, can serve record exact steps used analyzing data. PhotoGEA package includes several vignettes go detailed examples data analysis, end vignettes includes collection code used vignette. code designed start script. encouraged copy make necessary modifications might required apply data. great way get started analyzing data R. general, two types scripts might consider making: General-purpose scripts can apply many different data sets. Narrow scripts apply one particular data set.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/developing_a_data_analysis_pipeline.html","id":"general-purpose-scripts","dir":"Articles","previous_headings":"Creating Data Analysis Scripts","what":"General-Purpose Scripts","title":"Developing a Data Analysis Pipeline","text":"general-purpose script script designed apply particular type data (example, C3 CO2 response curves) particular set data. kind script include minimal data validation process “cleaning” data often specific particular data set. kind script avoid hard-coding particular file names; instead, make use choose_input_files, choose_input_licor_files, choose_input_tdl_files functions can flexibly applied different groups data files. main reason use script like take quick first look new set data. script well-written always include “identifying” user constants Licor files (e.g. species, event, replicate, etc), possible basic investigation data just minutes. begin analyze different types data, may develop collection general purpose scripts. recommended store dedicated directory include data files.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/developing_a_data_analysis_pipeline.html","id":"narrow-scripts","dir":"Articles","previous_headings":"Creating Data Analysis Scripts","what":"Narrow Scripts","title":"Developing a Data Analysis Pipeline","text":"narrow script designed apply particular set data. kind script include data cleaning steps apply one set data. kind script use hard-coded file names clarify files used , typically stored directory corresponding data files. Often, narrow script can formed copying general-purpose script modifying hard-code file names include data cleaning steps. main reason use script like create reproducible record exact steps took analyze data. way, never forget . need make change analysis, simple just modify part script. Trust : save lot time future self. addition saving time, kind script let easily share analysis researchers. fact, dedicated analysis script specifies versions package uses can later included data publish, making simple fulfill requirements “open science.” great deal research showing papers easily reproducible analysis (facilitated availability data scripts) cited often. example, see following: Piwowar, Day, Fridsma (2007) Bueno de Mesquita et al. (2003) Dorch, Drachen, Ellegaard (2015) Henneken Accomazzi (2011) Popkin (2019)","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/articles/working_with_extended_data_frames.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Working With Extended Data Frames","text":"extended data frame (abbreviated exdf) class special data structure defined PhotoGEA package. many ways, exdf object equivalent data frame, major difference exdf object includes units “category” column. exdf class originally created way represent contents Licor Excel file R structure. Licor Excel files, data arranged table column name, units, category; example, column values net assimilation rate called , units micromol / m^2 / s, categorized GasEx variable. Illustration comparing data frames (left) extended data frames (right). exdf objects keep track units column, functions acting exdf objects able check important variables correct units, ensuring output produce correct. Additionally, category column can used store important information , function used calculate values. example, calculate_ball_berry_index function takes exdf object input (1) checks whether net assimilation, relative humidity, CO2 concentration columns object expected units, (2) adds new column containing values Ball-Berry index, (3) uses category new column indicate calculated calculate_ball_berry_index. Thus, exdf objects provide clear method ensuring requirements units met making calculations retaining record values new columns calculated. important properties, nearly functions PhotoGEA package create modify exdf objects rather regular data frames. following sections, vignette demonstrate create exdf objects, extract information , modify contents. Note: , assume basic familiarity common R data structures like lists, vectors, data frames. unfamiliar , may helpful consult another online guide tutorial Data Structures chapter Advanced R.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/working_with_extended_data_frames.html","id":"loading-packages","dir":"Articles","previous_headings":"","what":"Loading Packages","title":"Working With Extended Data Frames","text":"always, first step load packages using. addition PhotoGEA, also use lattice package generating plots. lattice package installed R setup, can install typing install.packages('lattice').","code":"# Load required packages library(PhotoGEA) library(lattice)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/working_with_extended_data_frames.html","id":"basic-properties-of-an-extended-data-frame","dir":"Articles","previous_headings":"","what":"Basic Properties of an Extended Data Frame","title":"Working With Extended Data Frames","text":"technical point view, exdf object simply R list following properties: must contain elements named main_data, units, categories. required elements must data frame. required elements must column names, can thought column names exdf object whole. units data frame must contain just one row, whose values specify units column. categories element must one row containing category column. main_data data frame can number rows contains main data exdf object. function .exdf can used check whether R object extended data frame. default, performs simple check information returned class function, also option perform detailed check requirement listed . information, type ?.exdf R terminal access help menu entry .exdf. Besides three required elements, also possible exdf object additional entries filename stores name file used create exdf. restrictions types “extra” elements; numeric values, strings, vectors, data frames, lists, etc. course, named main_data, units, categories.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/working_with_extended_data_frames.html","id":"creating-extended-data-frames","dir":"Articles","previous_headings":"","what":"Creating Extended Data Frames","title":"Working With Extended Data Frames","text":"three main ways create exdf object: three separate data frames specifying main data, units, categories new exdf object. single data frame representing main data new exdf object; case, units categories initialized NA. data file Licor Excel file tunable diode laser (TDL) output file. following sections, demonstrate methods.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/working_with_extended_data_frames.html","id":"specifying-main-data-units-and-categories","dir":"Articles","previous_headings":"Creating Extended Data Frames","what":"Specifying Main Data, Units, and Categories","title":"Working With Extended Data Frames","text":"example first method, create extended data frame called exdf_1 two columns named B. two columns units m s categories Cat1 Cat2, respectively. can view nicely-formatted version object using print command: Notice column descriptor printed version formatted name [category] (units).","code":"exdf_1 <- exdf(   data.frame(A = c(3, 2, 7, 9), B = c(4, 5, 1, 8)),   data.frame(A = 'm', B = 's'),   data.frame(A = 'Cat1', B = 'Cat2') ) print(exdf_1) #>   A [Cat1] (m) B [Cat2] (s) #> 1            3            4 #> 2            2            5 #> 3            7            1 #> 4            9            8"},{"path":"https://eloch216.github.io/PhotoGEA/articles/working_with_extended_data_frames.html","id":"initializing-with-default-units-and-categories","dir":"Articles","previous_headings":"Creating Extended Data Frames","what":"Initializing with Default Units and Categories","title":"Working With Extended Data Frames","text":"example second method, create extended data frame called exdf_2 two columns named B, won’t specify units categories. , can print data frame: units categories initialized default values NA, can supply new units categories using document_variables function: Now exdf_2 identical exdf_1: Sometimes method convenient previous one.","code":"exdf_2 <- exdf(data.frame(A = c(3, 2, 7, 9), B = c(4, 5, 1, 8))) print(exdf_2) #>   A [NA] (NA) B [NA] (NA) #> 1           3           4 #> 2           2           5 #> 3           7           1 #> 4           9           8 exdf_2 <- document_variables(exdf_2, c('Cat1', 'A', 'm'), c('Cat2', 'B', 's')) identical(exdf_1, exdf_2) #> [1] TRUE"},{"path":"https://eloch216.github.io/PhotoGEA/articles/working_with_extended_data_frames.html","id":"reading-from-a-file","dir":"Articles","previous_headings":"Creating Extended Data Frames","what":"Reading From a File","title":"Working With Extended Data Frames","text":"example third method, create extended data frame Microsoft Excel file containing Licor measurements. new object many columns rows, won’t print . However, can confirm indeed properly-defined exdf object:","code":"exdf_3 <- read_gasex_file(   system.file(\"extdata\", \"ball_berry_1.xlsx\", package = \"PhotoGEA\") ) is.exdf(exdf_3, TRUE) #> [1] TRUE"},{"path":"https://eloch216.github.io/PhotoGEA/articles/working_with_extended_data_frames.html","id":"extracting-information-from-extended-data-frames","dir":"Articles","previous_headings":"","what":"Extracting Information from Extended Data Frames","title":"Working With Extended Data Frames","text":"three main ways extract information extended data frame: “top-level” elements main_data units can directly accessed. Columns subsets main_data element can accessed. extended data frame subset original data can obtained. following sections, demonstrate possibilities. also described help page can accessed within R typing ?extract.exdf.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/working_with_extended_data_frames.html","id":"accessing-top-level-elements","dir":"Articles","previous_headings":"Extracting Information from Extended Data Frames","what":"Accessing Top-Level Elements","title":"Working With Extended Data Frames","text":"extended data frame technically just list, “top-level” elements can viewed using names, $, [[. example, top-level elements can retrieved using names: see exdf objects three required elements: main_data, units, categories. exdf_3 “extra” elements automatically created read_gasex_file function. top-level elements accessed name using $ [[ operators:","code":"names(exdf_1) #> [1] \"main_data\"  \"units\"      \"categories\"  names(exdf_3) #> [1] \"main_data\"         \"units\"             \"categories\"        #> [4] \"preamble\"          \"data_row\"          \"file_name\"         #> [7] \"file_type\"         \"instrument_type\"   \"timestamp_colname\" exdf_1$units #>   A B #> 1 m s  exdf_3[['file_name']] #> [1] \"/home/runner/work/_temp/Library/PhotoGEA/extdata/ball_berry_1.xlsx\""},{"path":"https://eloch216.github.io/PhotoGEA/articles/working_with_extended_data_frames.html","id":"accessing-the-main-data-frame","dir":"Articles","previous_headings":"Extracting Information from Extended Data Frames","what":"Accessing The Main Data Frame","title":"Working With Extended Data Frames","text":"colnames [ operator applied exdf object, act directly object’s main_data element. example, following commands equivalent ways access column names exdf_1: Likewise, following commands equivalent ways extract column exdf_1 vector: usually preferable apply functions exdf object rather main_data element since resulting code cleaner.","code":"colnames(exdf_1) #> [1] \"A\" \"B\"  colnames(exdf_1$main_data) #> [1] \"A\" \"B\" exdf_1[, 'A'] #> [1] 3 2 7 9  exdf_1$main_data[, 'A'] #> [1] 3 2 7 9  exdf_1$main_data$A #> [1] 3 2 7 9"},{"path":"https://eloch216.github.io/PhotoGEA/articles/working_with_extended_data_frames.html","id":"creating-a-subset","dir":"Articles","previous_headings":"Extracting Information from Extended Data Frames","what":"Creating a Subset","title":"Working With Extended Data Frames","text":"Sometimes necessary extract subset exdf object. example, may wish extract just rows exdf_1 value column greater 5, keeping columns. can accomplished follows, using syntax nearly identical syntax extracting subset data frame: critical specify return_exdf = TRUE; otherwise, command instead return subset exdf object’s main_data element, discussed Accessing Main Data Frame:","code":"exdf_1[exdf_1[, 'A'] > 5, , return_exdf = TRUE] #>   A [Cat1] (m) B [Cat2] (s) #> 3            7            1 #> 4            9            8 is.exdf(exdf_1[exdf_1[, 'A'] > 5, , TRUE]) #> [1] TRUE  is.data.frame(exdf_1[exdf_1[, 'A'] > 5, ]) #> [1] TRUE"},{"path":"https://eloch216.github.io/PhotoGEA/articles/working_with_extended_data_frames.html","id":"modifying-extended-data-frames","dir":"Articles","previous_headings":"","what":"Modifying Extended Data Frames","title":"Working With Extended Data Frames","text":"case extracting information, possible modify “top-level” elements exdf object well contents main_data. following sections provide examples types operations.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/working_with_extended_data_frames.html","id":"modifying-top-level-elements","dir":"Articles","previous_headings":"Modifying Extended Data Frames","what":"Modifying Top-Level Elements","title":"Working With Extended Data Frames","text":"Top-level elements can added modified using [[<- $<- list. example, change file_name element exdf_3 add new top-level element: can confirm changes:","code":"exdf_3$file_name <- 'new_file_name.xlsx'  exdf_3[['new_element']] <- 5 exdf_3$file_name #> [1] \"new_file_name.xlsx\"  exdf_3$new_element #> [1] 5"},{"path":"https://eloch216.github.io/PhotoGEA/articles/working_with_extended_data_frames.html","id":"modifying-the-main-data","dir":"Articles","previous_headings":"Modifying Extended Data Frames","what":"Modifying the Main Data","title":"Working With Extended Data Frames","text":"contents main_data exdf object can modified using [<- operator. example, add 1 value column exdf_2: also add new column called C: case, units category new column initialized NA: units category new column can modified later document_variables Initializing Default Units Categories. Alternatively, set_variable function can used set value, units, category column extended data frame one step. use function add new column called D units kg category cat4 whose value 20: set_variable function also advanced abilities set separate values column different subsets extended data frame; information, see help menu entry typing ?set_variable. Important note: generally bad idea directly modify main_data can cause problems. example, try adding another new column called E using following code: Now, exdf_2 longer properly defined exdf object E column exdf_2$main_data present exdf_2$units exdf_2$categories. may prevent functions working properly; example, print properly display E column. subtle problem can detected using .exdf consistency_check set TRUE:","code":"exdf_2[, 'A'] <- exdf_2[, 'A'] + 1 exdf_2[, 'C'] <- 7 print(exdf_2) #>   A [Cat1] (m) B [Cat2] (s) C [NA] (NA) #> 1            4            4           7 #> 2            3            5           7 #> 3            8            1           7 #> 4           10            8           7 exdf_2 <- set_variable(exdf_2, 'D', 'kg', 'cat4', 20)  print(exdf_2) #>   A [Cat1] (m) B [Cat2] (s) C [NA] (NA) D [cat4] (kg) #> 1            4            4           7            20 #> 2            3            5           7            20 #> 3            8            1           7            20 #> 4           10            8           7            20 exdf_2$main_data$E <- 17 print(exdf_2) #>   A [Cat1] (m) B [Cat2] (s) C [NA] (NA) D [cat4] (kg) NA #> 1            4            4           7            20 17 #> 2            3            5           7            20 17 #> 3            8            1           7            20 17 #> 4           10            8           7            20 17  is.exdf(exdf_2) #> [1] TRUE  is.exdf(exdf_2, TRUE) #> Warning in is.exdf(exdf_2, TRUE): `x$main_data`, `x$units`, and `x$categories` #> must have the same column names #> [1] FALSE"},{"path":"https://eloch216.github.io/PhotoGEA/articles/working_with_extended_data_frames.html","id":"common-patterns","dir":"Articles","previous_headings":"","what":"Common Patterns","title":"Working With Extended Data Frames","text":"explain common ways exdf objects created, modified, otherwise used.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/working_with_extended_data_frames.html","id":"combining-data-from-several-files","dir":"Articles","previous_headings":"Common Patterns","what":"Combining Data From Several Files","title":"Working With Extended Data Frames","text":"quite common one data set spread across multiple data files; example, multiple Licors used measure response curves set plants, one data file machine. hand, data much easier process analyze stored single exdf object. Thus, common take following steps script: Define vector file names identify files loaded. Use lapply read_gasex_file load file, producing list exdf objects. Identify common columns using identify_common_columns; words, determine columns present exdf objects. Limit exdf object just common columns using [ operator return_exdf set TRUE. Use rbind combine exdf objects single exdf containing data files. process, steps 3 4 required exdf objects combined rbind different columns. way combining can visualized stacking tables top vertically, makes sense columns. common Licor files differences columns, steps usually necessary. Even files columns, taking steps cause issues, ’s harm always . following image illustrates process visually set three files. Illustration combining multiple tables using identify_common_columns rbind. example, YY ZZ columns present tables, removed tables vertically stacked. following example code accomplishes steps: pattern (files loaded, truncated common columns, combined) found analysis scripts, one Analyzing Ball-Berry Data vignette. Now data files combined one exdf object, ’s easy perform calculations . example, can calculate total pressure, additional gas properties, Ball-Berry index: example, vector files load defined manually typing file names; files can also selected interactively using choose_input_files, choose_input_licor_files, choose_input_tdl_files functions.","code":"# Define a vector of paths to the files we wish to load file_paths <- c(   system.file('extdata', 'ball_berry_1.xlsx', package = 'PhotoGEA'),   system.file('extdata', 'ball_berry_2.xlsx', package = 'PhotoGEA') )  # Load each file, storing the result in a list licor_exdf_list <- lapply(file_paths, function(fpath) {read_gasex_file(fpath)})  # Get the names of all columns that are present in all of the Licor files columns_to_keep <- do.call(identify_common_columns, licor_exdf_list)  # Extract just these columns licor_exdf_list <- lapply(licor_exdf_list, function(x) {   x[ , columns_to_keep, TRUE] })  # Use `rbind` to combine all the data licor_data <- do.call(rbind, licor_exdf_list) # Calculate the total pressure in the Licor chamber licor_data <- calculate_total_pressure(licor_data)  # Calculate additional gas properties, including `RHleaf` and `Csurface` licor_data <- calculate_gas_properties(licor_data)  # Calculate the Ball-Berry index licor_data <- calculate_ball_berry_index(licor_data)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/working_with_extended_data_frames.html","id":"processing-multiple-pieces-of-an-extended-data-frame","dir":"Articles","previous_headings":"Common Patterns","what":"Processing Multiple Pieces of an Extended Data Frame","title":"Working With Extended Data Frames","text":"common exdf object contain data represents multiple “chunks,” response curves, can located using value one “identifier” columns like event, replicate, species, etc. scenario, often desirable apply function, fitting function, chunk data set. concrete example, licor_data exdf created Combining Data Several Files contains several Ball-Berry curves, fit_ball_berry function applies fitting procedure one curve determine values Ball-Berry parameters. can apply fit_ball_berry curve data simple way? Often easiest route use function. function requires four inputs: exdf object containing multiple “chunks” data. One vectors whose values can used split exdf chunks. function appled chunk. additional arguments passed function. information, split exdf object chunks apply function one. return value list, list element output one function call, applied one chunk. information, access built-help system entry typing ?.exdf. show can used apply Ball-Berry fitting procedure curve licor_data: fit_ball_berry function returns list two exdf objects named fits parameters, return value complicated object: list lists exdf objects; words, nested list. can see structure follows: much easier work information reorganized separately combining fits parameters elements. Fortunately, can easily done consolidate function. function collect second-level elements names combine using rbind: can now see instead nested list, list two exdf objects: common apply consolidate functions line make code concise. Afterwards, elements resulting list can separated make additional analysis easier: pattern (function applied multiple curves using consolidate ) found analysis scripts, one Analyzing Ball-Berry Data vignette. following image illustrates process visually. Illustration processing multiple parts table using consolidate. id column either 1 2, processing function returns list two tables called fits parameters.","code":"by_result <- by(   licor_data,                                          # exdf object   list(licor_data[, 'species'], licor_data[, 'plot']), # identifier columns   fit_ball_berry                                       # function to apply to chunks ) str(by_result, max.level = 2) #> List of 8 #>  $ soybean.1 :List of 2 #>   ..$ parameters:'data.frame':   1 obs. of  74 variables: #>   ..$ fits      :'data.frame':   7 obs. of  250 variables: #>  $ soybean.1a:List of 2 #>   ..$ parameters:'data.frame':   1 obs. of  73 variables: #>   ..$ fits      :'data.frame':   7 obs. of  250 variables: #>  $ soybean.1b:List of 2 #>   ..$ parameters:'data.frame':   1 obs. of  71 variables: #>   ..$ fits      :'data.frame':   7 obs. of  250 variables: #>  $ tobacco.2 :List of 2 #>   ..$ parameters:'data.frame':   1 obs. of  71 variables: #>   ..$ fits      :'data.frame':   7 obs. of  250 variables: #>  $ soybean.5 :List of 2 #>   ..$ parameters:'data.frame':   1 obs. of  71 variables: #>   ..$ fits      :'data.frame':   7 obs. of  250 variables: #>  $ tobacco.5 :List of 2 #>   ..$ parameters:'data.frame':   1 obs. of  73 variables: #>   ..$ fits      :'data.frame':   7 obs. of  250 variables: #>  $ soybean.5a:List of 2 #>   ..$ parameters:'data.frame':   1 obs. of  75 variables: #>   ..$ fits      :'data.frame':   7 obs. of  250 variables: #>  $ soybean.5c:List of 2 #>   ..$ parameters:'data.frame':   1 obs. of  75 variables: #>   ..$ fits      :'data.frame':   7 obs. of  250 variables: consolidate_by_result <- consolidate(by_result) str(consolidate_by_result, max.level = 1) #> List of 2 #>  $ parameters:'data.frame':  8 obs. of  70 variables: #>  $ fits      :'data.frame':  56 obs. of  250 variables: ball_berry_result <- consolidate(by(   licor_data,   list(licor_data[, 'species'], licor_data[, 'plot']),   fit_ball_berry,   'gsw', 'bb_index' ))  ball_berry_fits <- ball_berry_result$fits ball_berry_parameters <- ball_berry_result$parameters"},{"path":"https://eloch216.github.io/PhotoGEA/articles/working_with_extended_data_frames.html","id":"plotting-data-from-an-extended-data-frame","dir":"Articles","previous_headings":"Common Patterns","what":"Plotting Data From an Extended Data Frame","title":"Working With Extended Data Frames","text":"exdf object contains multiple curves, often convenient plot using xyplot function lattice package. plotting tool makes easy put curve panel, group curves identifier event species. case, common pass main_data element exdf object data argument lattice::xyplot since works data frames:  exdf objects include units column, also possible add axis labels. can accomplished using paste0 function, can create character strings values variables. example, create string describing gsw column follows: labels can included plot :  pattern (main_data element exdf object passed lattice::xyplot units element used create informative axis labels) found analysis scripts, one Analyzing Ball-Berry Data vignette.","code":"xyplot(   gsw ~ bb_index | species,   group = plot,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto.key = list(space = 'right'),   grid = TRUE ) paste0('Stomatal conductance to H2O (', licor_data$units$gsw, ')') #> [1] \"Stomatal conductance to H2O (mol m^(-2) s^(-1))\" xyplot(   gsw ~ bb_index | species,   group = plot,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto.key = list(space = 'right'),   grid = TRUE,   xlab = paste0('Ball-Berry index (', licor_data$units$bb_index, ')'),   ylab = paste0('Stomatal conductance to H2O (', licor_data$units$gsw, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/working_with_extended_data_frames.html","id":"how-to-find-more-information","dir":"Articles","previous_headings":"","what":"How To Find More Information","title":"Working With Extended Data Frames","text":"S3 methods defined exdf class can viewed using methods function: However, include functions related exdf class. Others can identified typing ??exdf within R environment. Finally, vignettes PhotoGEA package include many examples exdf objects can created used analyzing photosynthetic gas exchange data.","code":"methods(class = 'exdf') #>  [1] [                        [<-                      as.data.frame            #>  [4] by                       cbind                    check_required_variables #>  [7] consolidate              dim                      dimnames                 #> [10] dimnames<-               exclude_outliers         identifier_columns       #> [13] identify_common_columns  length                   print                    #> [16] rbind                    split                    str                      #> see '?methods' for accessing help and source code"},{"path":"https://eloch216.github.io/PhotoGEA/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edward B. Lochocki. Maintainer, author. Coralie E. Salesse-Smith. Contributor. PhotoGEA authors. Copyright holder.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lochocki E (2023). PhotoGEA: Photosynthetic Gas Exchange Analysis. https://github.com/eloch216/PhotoGEA, https://eloch216.github.io/PhotoGEA/.","code":"@Manual{,   title = {PhotoGEA: Photosynthetic Gas Exchange Analysis},   author = {Edward B. Lochocki},   year = {2023},   note = {https://github.com/eloch216/PhotoGEA, https://eloch216.github.io/PhotoGEA/}, }"},{"path":"https://eloch216.github.io/PhotoGEA/index.html","id":"photogea","dir":"","previous_headings":"","what":"PhotoGEA","title":"Photosynthetic Gas Exchange Analysis","text":"PhotoGEA (short photosynthetic gas exchange analysis) R package provides suite tools loading, processing, analyzing photosynthetic gas exchange data. package work progress yet fully documented. documentation proceeds, functions subject modification removal without notice.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/index.html","id":"installing-the-r-package","dir":"","previous_headings":"PhotoGEA","what":"Installing the R Package","title":"Photosynthetic Gas Exchange Analysis","text":"easiest way install PhotoGEA type following within R terminal: Note method requires remotes package, can installed within R typing install.packages('remotes').","code":"remotes::install_github('eloch216/PhotoGEA')"},{"path":"https://eloch216.github.io/PhotoGEA/index.html","id":"learning-to-use-photogea","dir":"","previous_headings":"PhotoGEA","what":"Learning to Use PhotoGEA","title":"Photosynthetic Gas Exchange Analysis","text":"best way learn using PhotoGEA visit PhotoGEA website click Get started link top menu bar. website includes documentation functions data sets included package, well articles describe general features several important use cases.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/index.html","id":"example-scripts","dir":"","previous_headings":"PhotoGEA","what":"Example Scripts","title":"Photosynthetic Gas Exchange Analysis","text":"Several example scripts provided example_scripts directory source code repository. run one scripts, set working directory folder contains local copy script use source command execute code script. guarantees made scripts run machine compatible data, may useful source ideas.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/index.html","id":"license","dir":"","previous_headings":"PhotoGEA","what":"License","title":"Photosynthetic Gas Exchange Analysis","text":"PhotoGEA R package, documentation, associated example scripts licensed MIT license.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/apply_gm.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate CO2 concentration in the chloroplast or mesophyll — apply_gm","title":"Calculate CO2 concentration in the chloroplast or mesophyll — apply_gm","text":"Calculates CO2 concentration chloroplast mesophyll, CO2 drawdown   across stomata, CO2 drawdown across mesophyll. function   can accomodate alternative column names variables taken Licor   file case change point future. function also   checks units required column produce error   units incorrect.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/apply_gm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate CO2 concentration in the chloroplast or mesophyll — apply_gm","text":"","code":"apply_gm(     licor_exdf,     photosynthesis_type = 'C3',     calculate_drawdown = TRUE,     a_column_name = 'A',     ca_column_name = 'Ca',     ci_column_name = 'Ci',     gmc_column_name = 'gmc',     total_pressure_column_name = 'total_pressure'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/apply_gm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate CO2 concentration in the chloroplast or mesophyll — apply_gm","text":"licor_exdf exdf object representing data Licor gas exchange     measurement system. photosynthesis_type string indicating type photosynthesis considered (either     'C3' 'C4'). calculate_drawdown logical value indicating whether calculate drawdown values. a_column_name name column licor_exdf contains net     assimilation micromol m^(-2) s^(-1). ca_column_name name column licor_exdf contains ambient CO2     concentration chamber micromol mol^(-1). ci_column_name name column licor_exdf contains intercellular     CO2 concentration micromol mol^(-1). gmc_column_name name column licor_exdf contains mesophyll     conductance CO2 mol m^(-2) s^(-1) bar^(-1). total_pressure_column_name name column licor_exdf contains total pressure     bar.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/apply_gm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate CO2 concentration in the chloroplast or mesophyll — apply_gm","text":"C3 plant, mesophyll conductance CO2 (gmc) said   conductance satisfying following one-dimensional flux-conductance   equation: (1) = gmc * (PCi - PCc) net CO2 assimilation rate, PCi partial   pressure CO2 intercellular spaces, PCc partial   pressure CO2 chloroplast.  key underlying assumption   equation flow CO2 reached steady state; case,   flow across stomata equal flow across mesophyll. equation can rearranged calculate PCc: (2) PCc = PCi - / gmc version equation can found many places, example,   Equation 4 Sharkey et al. \"Fitting photosynthetic carbon dioxide response   curves C3 leaves\" Plant, Cell & Environment 30, 1035–1040 (2007)   [doi:10.1111/j.1365-3040.2007.01710.x ]. common express partial pressures microbar   assimilation rate micromol m^(-2) s^(-1); case, units   mesophyll conductance become mol m^(-2) s^(-1) bar^(-1). Licor measurement systems provide CO2 levels relative concentrations   units parts per million (ppm), equivalently,   micromol mol^(-1). Concentrations partial pressures related   total gas pressure according : (3) partial_pressure = total_pressure * relative_concentration Thus, also possible calculate CO2 concentration   choloroplast (Cc) using following equation: (4) Cc = Ci - / (gmc * P) Ci intercellular CO2 concentration P   total pressure. function, Equation (4) used calculate Cc,   total pressure given sum atmospheric pressure   chamber overpressure. plant photosynthesizing, draws CO2 chloroplasts,   flow driven concentration gradient. words, CO2 flows   ambient air across stomata intercellular spaces   across mesophyll chloroplast, decrease CO2   concentration step. Sometimes useful calculate changes,   usually referred \"CO2 drawdown\" values. , addition   Ci, function (optionally) calculates drawdown across   stomata (drawndown_s = Ca - Ci) drawdown across mesophyll   (drawdown_m = Ci - Cc). _Note_: mesophyll conductance specified typical Licor files,   usually must added using set_variable calling   apply_gm. C4 plant, mesophyll conductance instead refers conductance   associated flow CO2 intercellular spaces   mesophyll (rather chloroplast). case, equations   just require small modification Pcc Cc   replaced PCm Cm, partial pressure concentration   CO2 mesophyll.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/apply_gm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate CO2 concentration in the chloroplast or mesophyll — apply_gm","text":"exdf object based licor_exdf includes following   additional columns, calculated described : Pci Ci (C3 plants) PCm Cm (C4 plants),  drawndown_s, drawdown_m. category new   columns apply_gm indicate created using   function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/apply_gm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate CO2 concentration in the chloroplast or mesophyll — apply_gm","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   system.file(\"extdata\", \"ball_berry_1.xlsx\", package = \"PhotoGEA\") )  # Calculate the total pressure in the Licor chamber licor_file <- calculate_total_pressure(licor_file)  # Set the mesophyll conductance to 1 mol / m^2 / s / bar licor_file <-   set_variable(licor_file, 'gmc', 'mol m^(-2) s^(-1) bar^(-1)', value = 1.0)  # Calculate Cc and drawdowns licor_file <- apply_gm(licor_file)  licor_file$units$Cc      # View the units of the new `Cc` column #> [1] \"micromol mol^(-1)\" licor_file$categories$Cc # View the category of the new `Cc` column #> [1] \"apply_gm\" licor_file[, 'Cc']       # View the values of the new `Cc` column #>  [1] 216.5128 257.7110 231.1340 208.2051 261.8719 286.6935 346.7131 266.8860 #>  [9] 276.4449 273.5312 316.1661 287.6186 307.7915 340.4040 236.9847 283.9512 #> [17] 293.8102 284.9079 322.5466 242.3728 323.0196 206.8106 219.7376 236.6592 #> [25] 270.8341 306.0797 299.8268 247.3581"},{"path":"https://eloch216.github.io/PhotoGEA/reference/as.data.frame.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an exdf object to a data frame — as.data.frame.exdf","title":"Convert an exdf object to a data frame — as.data.frame.exdf","text":"Converts exdf object data frame appending units   categories top column exdf object's   main_data data frame. Typically function used displaying   contents exdf object; fact, used internally   View, write.csv, functions. main_data   exdf object x can accessed directly (without including   units categories first row) via x[['main_data']]   list element.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/as.data.frame.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an exdf object to a data frame — as.data.frame.exdf","text":"","code":"# S3 method for exdf as.data.frame(x, ...)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/as.data.frame.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an exdf object to a data frame — as.data.frame.exdf","text":"x exdf object. ... Unused.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/as.data.frame.exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an exdf object to a data frame — as.data.frame.exdf","text":"data frame formed x.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/as.data.frame.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an exdf object to a data frame — as.data.frame.exdf","text":"","code":"simple_exdf <- exdf(data.frame(A = 1), data.frame(A = 'u'), data.frame(A = 'c')) as.data.frame(simple_exdf) # Includes units and categories in the first rows #>   A #> 1 c #> 2 u #> 3 1 simple_exdf[['main_data']] # Just returns the main data #>   A #> 1 1"},{"path":"https://eloch216.github.io/PhotoGEA/reference/barchart_with_errorbars.html","id":null,"dir":"Reference","previous_headings":"","what":"Barcharts with error bars — barchart_with_errorbars","title":"Barcharts with error bars — barchart_with_errorbars","text":"barchart_with_errorbars wrapper lattice::barchart   includes error bars chart, bwplot_wrapper simple   wrapper lattice::bwplot gives function signature   barchart_with_errorbars.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/barchart_with_errorbars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Barcharts with error bars — barchart_with_errorbars","text":"","code":"barchart_with_errorbars(     Y,     X,     eb_width = 0.2,     eb_lwd = 1,     eb_col = 'black',     ...   )    bwplot_wrapper(Y, X, ...)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/barchart_with_errorbars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Barcharts with error bars — barchart_with_errorbars","text":"Y numeric vector. X vector length Y can used factor     split Y one distinct subsets. eb_width width error bars. eb_lwd line width (thickness) error bars. eb_col color error bars. ... Additional arguments passed lattice::barchart     lattice::bwplot.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/barchart_with_errorbars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Barcharts with error bars — barchart_with_errorbars","text":"barchart_with_errorbars function uses tapply   calculate mean standard error subset Y   determined values X. words, means <-   tapply(Y, X, mean), similar standard errors. mean values   represented bars final plot, standard error used   create error bars located mean +/- standard_error. bwplot_wrapper function simple wrapper   lattice::bwplot gives input arguments   barchart_with_errorbars. words, X Y   vectors can used create barchart using barchart_with_errorbars   box-whisker plot bwplot_wrapper.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/barchart_with_errorbars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Barcharts with error bars — barchart_with_errorbars","text":"trellis object created lattice::barchart  lattice::bwplot.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/barchart_with_errorbars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Barcharts with error bars — barchart_with_errorbars","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   system.file(\"extdata\", \"ball_berry_1.xlsx\", package = \"PhotoGEA\") )  # Plot the average assimilation value for each species. (Note: this is not a # meaningful calculation since we are combining assimilation values measured # at different PPFD.) barchart_with_errorbars(   licor_file[, 'A'],   licor_file[, 'species'],   ylim = c(0, 50),   xlab = 'Species',   ylab = paste0('Net assimilation (', licor_file$units$A, ')') )   # Make a box-whisker plot using the same data. (Note: this is not a meaningful # plot since we are combining assimilation values measured at different PPFD.) bwplot_wrapper(   licor_file[, 'A'],   licor_file[, 'species'],   ylim = c(0, 50),   xlab = 'Species',   ylab = paste0('Net assimilation (', licor_file$units$A, ')') )   # Another way to create the plots. This method illustrates the utility of the # bwplot_wrapper function. plot_parameters <- list(   Y = licor_file[, 'A'],   X = licor_file[, 'species'],   ylim = c(0, 50),   xlab = 'Species',   ylab = paste0('Net assimilation (', licor_file$units$A, ')') ) do.call(barchart_with_errorbars, plot_parameters)  do.call(bwplot_wrapper, plot_parameters)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/basic_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate basic stats (mean and standard error) — basic_stats","title":"Calculate basic stats (mean and standard error) — basic_stats","text":"Calculates basic stats (mean standard error) applicable column   exdf object split according values one   identifier columns.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/basic_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate basic stats (mean and standard error) — basic_stats","text":"","code":"basic_stats(     exdf_obj,     identifier_columns   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/basic_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate basic stats (mean and standard error) — basic_stats","text":"exdf_obj exdf object. identifier_columns name(s) one columns vector list can used     split exdf_obj chunks.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/basic_stats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate basic stats (mean and standard error) — basic_stats","text":"function first splits exdf_obj chunks according   values identifier_columns. chunk, columns   single unique value identified excluded statistical   calculations. remaining numeric columns, mean standard error   calculated.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/basic_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate basic stats (mean and standard error) — basic_stats","text":"exdf object including mean standard error   applicable column, row represents one value  identifier_columns. column names determined appending  '_avg' '_stderr' original names.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/basic_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate basic stats (mean and standard error) — basic_stats","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   system.file(\"extdata\", \"ball_berry_1.xlsx\", package = \"PhotoGEA\") )  # Calculate the average assimilation and stomatal conductance values for each # species. (Note: this is not a meaningful calculation!) basic_stats(   licor_file[ , c('species', 'K', 'A', 'gsw'), TRUE],   'species' ) #>   species [UserDefCon] (NA) K [Const] (NA) #> 1                   soybean            0.5 #> 2                   tobacco            0.5 #>   A_avg [GasEx] (micromol m^(-2) s^(-1)) #> 1                               23.82305 #> 2                               17.95311 #>   A_stderr [GasEx] (micromol m^(-2) s^(-1)) gsw_avg [GasEx] (mol m^(-2) s^(-1)) #> 1                                  2.470260                           0.4043737 #> 2                                  3.026751                           0.2192409 #>   gsw_stderr [GasEx] (mol m^(-2) s^(-1)) #> 1                             0.04320554 #> 2                             0.02502419"},{"path":"https://eloch216.github.io/PhotoGEA/reference/by.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to an exdf object split by one or more factors — by.exdf","title":"Apply a function to an exdf object split by one or more factors — by.exdf","text":"Divides exdf object groups defined one factors   applies function group.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/by.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to an exdf object split by one or more factors — by.exdf","text":"","code":"# S3 method for exdf by(data, INDICES, FUN, ...)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/by.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function to an exdf object split by one or more factors — by.exdf","text":"data exdf object. INDICES factor list factors. FUN function whose first input argument exdf object. ... Additional arguments passed FUN.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/by.exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function to an exdf object split by one or more factors — by.exdf","text":"Splits data chunks x values INDICES calls FUN(x, ...) chunk; returns list   element output call FUN.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/by.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function to an exdf object split by one or more factors — by.exdf","text":"","code":"# Read a Licor file, split it into chunks according to the `species` column, # and count the number of measurements for each species licor_file <- read_gasex_file(   system.file(\"extdata\", \"ball_berry_1.xlsx\", package = \"PhotoGEA\") )  by(licor_file, licor_file[, 'species'], nrow) #> $soybean #> [1] 21 #>  #> $tobacco #> [1] 7 #>"},{"path":"https://eloch216.github.io/PhotoGEA/reference/c3_arrhenius_bernacchi.html","id":null,"dir":"Reference","previous_headings":"","what":"C3 Arrhenius parameters from Bernacchi et al. — c3_arrhenius_bernacchi","title":"C3 Arrhenius parameters from Bernacchi et al. — c3_arrhenius_bernacchi","text":"Arrhenius parameters describing temperature response important C3   photosynthetic parameters, intended passed   calculate_arrhenius function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/c3_arrhenius_bernacchi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"C3 Arrhenius parameters from Bernacchi et al. — c3_arrhenius_bernacchi","text":"","code":"c3_arrhenius_bernacchi"},{"path":"https://eloch216.github.io/PhotoGEA/reference/c3_arrhenius_bernacchi.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"C3 Arrhenius parameters from Bernacchi et al. — c3_arrhenius_bernacchi","text":"List 7 named elements represent variable whose   temperature-dependent value can calculated using Arrhenius equation: Rd_norm: respiration rate (Rd) normalized           value 25 degrees C. Vcmax_norm: maximum rate rubisco carboxylation           (Vcmax) normalized value 25 degrees C. Vomax_norm: maximum rate rubisco oxygenation           (Vomax) normalized value 25 degrees C. Gamma_star: value CO2 partial pressure           chloroplast assimilation occurs absence           respiration. Kc: Michaelis-Menten constant rubisco carboxylation. Ko: Michaelis-Menten constant rubisco oxygenation. J_norm: electron transport rate (J) normalized           value 25 degrees C. turn, elements list 3 named elements: c: (dimensionless) Arrhenius scaling factor. Ea: activation energy kJ / mol. units: units corresponding variable.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/c3_arrhenius_bernacchi.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"C3 Arrhenius parameters from Bernacchi et al. — c3_arrhenius_bernacchi","text":"parameters (Rd, Vcmax, J)   normalized values 25 degrees C. Vomax normalized   value Vcmax 25 degrees C. variables include _norm   names indicate . remaining parameters (Gamma_star, Kc, Ko)   normalized assumed vary significantly species. Arrhenius parameters J obtained Bernacchi et al. (2003).   , use values determined chlorophyll fluorescence measured   plants grown 25 degrees C (Table 1). Although Bernacchi et al. (2003)   reports values Jmax, assume Jmax   light-dependent values J follow temperature response   function refer J compatibility   c3_arrhenius_sharkey. Arrhenius parameters variables obtained Bernacchi   et al. (2001). References:  Bernacchi, C. J., Singsaas, E. L., Pimentel, C., Jr, . R. P. & Long,     S. P. \"Improved temperature response functions models Rubisco-limited     photosynthesis\" Plant, Cell & Environment 24, 253–259 (2001)     [doi:10.1111/j.1365-3040.2001.00668.x ]. Bernacchi, C. J., Pimentel, C. & Long, S. P. \"vivo temperature     response functions parameters required model RuBP-limited     photosynthesis\" Plant, Cell & Environment 26, 1419–1430 (2003)     [doi:10.1046/j.0016-8025.2003.01050.x ].","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/c3_arrhenius_no_temp.html","id":null,"dir":"Reference","previous_headings":"","what":"C3 Arrhenius parameters with no temperature dependence — c3_arrhenius_no_temp","title":"C3 Arrhenius parameters with no temperature dependence — c3_arrhenius_no_temp","text":"Arrhenius parameters specify flat temperature response (words,   dependence temperature) important C3 photosynthetic parameters,   intended passed calculate_arrhenius function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/c3_arrhenius_no_temp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"C3 Arrhenius parameters with no temperature dependence — c3_arrhenius_no_temp","text":"","code":"c3_arrhenius_no_temp"},{"path":"https://eloch216.github.io/PhotoGEA/reference/c3_arrhenius_no_temp.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"C3 Arrhenius parameters with no temperature dependence — c3_arrhenius_no_temp","text":"List 6 named elements represent variable whose   temperature-dependent value can calculated using Arrhenius equation: Kc: Michaelis-Menten constant rubisco carboxylation. Ko: Michaelis-Menten constant rubisco oxygenation. Gamma_star: value CO2 partial pressure           chloroplast assimilation occurs absence           respiration. Vcmax_norm: maximum rate rubisco carboxylation           (Vcmax) normalized value 25 degrees C. J_norm: electron transport rate (J) normalized           value 25 degrees C. Rd_norm: respiration rate (Rd) normalized           value 25 degrees C. turn, elements list 3 named elements: c: (dimensionless) Arrhenius scaling factor. Ea: activation energy kJ / mol. units: units corresponding variable.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/c3_arrhenius_no_temp.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"C3 Arrhenius parameters with no temperature dependence — c3_arrhenius_no_temp","text":"parameters (Rd, Vcmax, J)   normalized values 25 degrees C. variables include   _norm names indicate . remaining parameters (Gamma_star, Kc, Ko)   normalized assumed vary significantly species. , activation energy values (Ea) set 0, means   values depend temperature. Arrhenius scaling factors   c chosen reproduce parameter values 25 degrees C   specified Sharkey et al. (2007). (See c3_arrhenius_sharkey.) References:  Sharkey, T. D., Bernacchi, C. J., Farquhar, G. D. & Singsaas, E. L.           \"Fitting photosynthetic carbon dioxide response curves C3 leaves\"           Plant, Cell & Environment 30, 1035–1040 (2007)           [doi:10.1111/j.1365-3040.2007.01710.x ].","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/c3_arrhenius_sharkey.html","id":null,"dir":"Reference","previous_headings":"","what":"C3 Arrhenius parameters from Sharkey et al. — c3_arrhenius_sharkey","title":"C3 Arrhenius parameters from Sharkey et al. — c3_arrhenius_sharkey","text":"Arrhenius parameters describing temperature response important C3   photosynthetic parameters, intended passed   calculate_arrhenius function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/c3_arrhenius_sharkey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"C3 Arrhenius parameters from Sharkey et al. — c3_arrhenius_sharkey","text":"","code":"c3_arrhenius_sharkey"},{"path":"https://eloch216.github.io/PhotoGEA/reference/c3_arrhenius_sharkey.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"C3 Arrhenius parameters from Sharkey et al. — c3_arrhenius_sharkey","text":"List 6 named elements represent variable whose   temperature-dependent value can calculated using Arrhenius equation: Kc: Michaelis-Menten constant rubisco carboxylation. Ko: Michaelis-Menten constant rubisco oxygenation. Gamma_star: value CO2 partial pressure           chloroplast assimilation occurs absence           respiration. Vcmax_norm: maximum rate rubisco carboxylation           (Vcmax) normalized value 25 degrees C. J_norm: electron transport rate (J) normalized           value 25 degrees C. Rd_norm: respiration rate (Rd) normalized           value 25 degrees C. turn, elements list 3 named elements: c: (dimensionless) Arrhenius scaling factor. Ea: activation energy kJ / mol. units: units corresponding variable.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/c3_arrhenius_sharkey.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"C3 Arrhenius parameters from Sharkey et al. — c3_arrhenius_sharkey","text":"parameters (Rd, Vcmax, J)   normalized values 25 degrees C. variables include   _norm names indicate . remaining parameters (Gamma_star, Kc, Ko)   normalized assumed vary significantly species. Arrhenius parameters obtained Sharkey et al. (2007).   publication, gas concentrations expressed partial pressures (  Pa kPa) rather mole fractions (micromol / mol   mmol / mol). However, consistency   c3_arrhenius_bernacchi, prefer use mole fractions. convert concentration expressed partial pressure (P;   Pa) concentration expressed mole fraction (C;   micromol / mol), need value atmospheric pressure; use   typical value 101325 Pa. C = P / 101325 * 1e6   C = P * cf, cf = 1e6 / 101325 conversion factor.   correction can used convert kPa mmol / mol.   value cf can accessed using PhotoGEA:::c_pa_to_ppm. References:  Sharkey, T. D., Bernacchi, C. J., Farquhar, G. D. & Singsaas, E. L.           \"Fitting photosynthetic carbon dioxide response curves C3 leaves\"           Plant, Cell & Environment 30, 1035–1040 (2007)           [doi:10.1111/j.1365-3040.2007.01710.x ].","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/c4_arrhenius_no_temp.html","id":null,"dir":"Reference","previous_headings":"","what":"C4 Arrhenius parameters with no temperature dependence — c4_arrhenius_no_temp","title":"C4 Arrhenius parameters with no temperature dependence — c4_arrhenius_no_temp","text":"Arrhenius parameters specify flat temperature response (words,   dependence temperature) important C4 photosynthetic parameters,   intended passed calculate_arrhenius function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/c4_arrhenius_no_temp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"C4 Arrhenius parameters with no temperature dependence — c4_arrhenius_no_temp","text":"","code":"c4_arrhenius_no_temp"},{"path":"https://eloch216.github.io/PhotoGEA/reference/c4_arrhenius_no_temp.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"C4 Arrhenius parameters with no temperature dependence — c4_arrhenius_no_temp","text":"List 9 named elements represent variable whose   temperature-dependent value can calculated using Arrhenius equation: Vcmax_norm: maximum rate rubisco carboxylation           (Vcmax) normalized value 25 degrees C. Vpmax_norm: maximum rate PEP carboxylase activity           (Vpmax) normalized value 25 degrees C. Rd_norm: respiration rate (Rd) normalized           value Vcmax 25 degrees C. Kc: Michaelis-Menten constant rubisco carboxylation. Ko: Michaelis-Menten constant rubisco oxygenation. Kp: Michaelis-Menten constant PEP carboxylase. gamma_star: Half reciprocal rubisco specificity. ao: ratio solubility diffusivity O2 CO2. gmc: mesophyll conductance CO2 diffusion. turn, elements list 3 named elements: c: (dimensionless) Arrhenius scaling factor. Ea: activation energy kJ / mol. units: units corresponding variable.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/c4_arrhenius_no_temp.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"C4 Arrhenius parameters with no temperature dependence — c4_arrhenius_no_temp","text":"parameters (Vcmax, Vpmax, Rd)   normalized values 25 degrees C. variables include   _norm names indicate . remaining parameters (Kc, Ko, Kp, gamma_star,   ao, gmc) normalized assumed   vary significantly species. , activation energy values (Ea) set 0, means   values depend temperature. Arrhenius scaling factors   c chosen reproduce parameter values 25 degrees C   specified von Caemmerer (2021).   (See c4_arrhenius_von_caemmerer.) References:  von Caemmerer, S. \"Updating steady-state model C4           photosynthesis\" Journal Experimental Botany 72, 6003–6017 (2021)           [doi:10.1093/jxb/erab266 ].","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/c4_arrhenius_von_caemmerer.html","id":null,"dir":"Reference","previous_headings":"","what":"C4 Arrhenius parameters from von Caemmerer — c4_arrhenius_von_caemmerer","title":"C4 Arrhenius parameters from von Caemmerer — c4_arrhenius_von_caemmerer","text":"Arrhenius parameters describing temperature response important C4   photosynthetic parameters, intended passed   calculate_arrhenius function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/c4_arrhenius_von_caemmerer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"C4 Arrhenius parameters from von Caemmerer — c4_arrhenius_von_caemmerer","text":"","code":"c4_arrhenius_von_caemmerer"},{"path":"https://eloch216.github.io/PhotoGEA/reference/c4_arrhenius_von_caemmerer.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"C4 Arrhenius parameters from von Caemmerer — c4_arrhenius_von_caemmerer","text":"List 9 named elements represent variable whose   temperature-dependent value can calculated using Arrhenius equation: Vcmax_norm: maximum rate rubisco carboxylation           (Vcmax) normalized value 25 degrees C. Vpmax_norm: maximum rate PEP carboxylase activity           (Vpmax) normalized value 25 degrees C. Rd_norm: respiration rate (Rd) normalized           value Vcmax 25 degrees C. Kc: Michaelis-Menten constant rubisco carboxylation. Ko: Michaelis-Menten constant rubisco oxygenation. Kp: Michaelis-Menten constant PEP carboxylase. gamma_star: Half reciprocal rubisco specificity. ao: ratio solubility diffusivity O2 CO2. gmc: mesophyll conductance CO2 diffusion. turn, elements list 3 named elements: c: (dimensionless) Arrhenius scaling factor. Ea: activation energy kJ / mol. units: units corresponding variable.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/c4_arrhenius_von_caemmerer.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"C4 Arrhenius parameters from von Caemmerer — c4_arrhenius_von_caemmerer","text":"parameters (Vcmax, Vpmax, Rd)   normalized values 25 degrees C. variables include   _norm names indicate . remaining parameters (Kc, Ko, Kp, gamma_star,   ao, gmc) normalized assumed   vary significantly species. , Arrhenius scaling factors (c; dimensionless) activation   energy values (Ea; kJ / mol) obtained von Caemmerer (2021).   publication, overall scaling parameter specified   value 25 degrees C; scaling factors determined   information described documentation   calculate_arrhenius. References:  von Caemmerer, S. \"Updating steady-state model C4           photosynthesis\" Journal Experimental Botany 72, 6003–6017 (2021)           [doi:10.1093/jxb/erab266 ].","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_arrhenius.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate temperature-dependent values using Arrhenius equations — calculate_arrhenius","title":"Calculate temperature-dependent values using Arrhenius equations — calculate_arrhenius","text":"Calculate leaf-temperature-dependent values various parameters using   Arrhenius equations. function can accomodate alternative names   leaf temperature column. also checks units leaf temperature   column produce error units correct.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_arrhenius.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate temperature-dependent values using Arrhenius equations — calculate_arrhenius","text":"","code":"calculate_arrhenius(     exdf_obj,     arrhenius_parameters,     tleaf_column_name = 'TleafCnd'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_arrhenius.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate temperature-dependent values using Arrhenius equations — calculate_arrhenius","text":"exdf_obj exdf object representing data Licor gas exchange     measurement system. arrhenius_parameters list named lists. list element describe Arrhenius     scaling factor (c), activation energy kJ / mol (Ea),     units (units) variable follows Arrhenius     temperature dependence. name list element     corresponding name variable. tleaf_column_name name column exdf_obj contains leaf temperature     units degrees C.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_arrhenius.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate temperature-dependent values using Arrhenius equations — calculate_arrhenius","text":"Arrhenius equation often used calculate temperature dependence   rate chemical reaction. often stated follows: (1) rate = * exp(-Ea / (R * T)) \"pre-exponential factor\" sets overall scaling,   Ea activation energy, R ideal gas constant,   T temperature Kelvin. See, example,   Wikipedia page equation. photosynthesis research, common use alternative form   equation, pre-exponential factor rewritten   exponent = exp(c), c \"scaling factor\" whose value   can calculated according c = ln()).   formulation, equation becomes: (2) rate = exp(c) * exp(-Ea / (R * T)) = exp(c - Ea / (R * T)) calculate_arrhenius, scaling factor (c), activation   energy (Ea), units (units) variable must specified   elements list, named element   arrhenius_parameters. example, variable called Kc   c = 38.05, Ea = 79.43, units micromol mol^(-1),   arrhenius_parameters argument specified follows:   list(Kc = list(c = 38.05, Ea = 79.43, units = 'micromol mol^(-1)')).   rare directly specify Arrhenius parameters; instead,   typical use one pre-set values   c3_arrhenius_sharkey. Sometimes publication specify value variable 25 degrees C   instead Arrhenius scaling factor c. case,   \"trick\" determining value c. example, Arrhenius   exponent X 25 degrees C, following:   X = exp(c - Ea / (R * (25 + 273.15))), can solve algebraically   c follows: c = ln(X) + Ea / f,   f = R * (25 + 273.15). special case, parameters normalized   1 25 degrees C, c = Ea / f. value f can   accessed PhotoGEA:::f. Another common scenario may wish convert units variable   defined Arrhenius exponents. example, say Y determined   Arrhenius exponent, .e., Y = exp(c - Ea / (R * T)),   want convert Y different units via multiplicative conversion   factor cf. , new units, Y becomes   Y_new = cf * Y = cf * exp(c - (R * T)). algebra, possible   combine cf original value c   c_new = c + ln(cf). can continue calculating Y_new using   Arrhenius factor Y_new = exp(c_new - Ea / (R * T)).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_arrhenius.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate temperature-dependent values using Arrhenius equations — calculate_arrhenius","text":"exdf object based exdf_obj includes one new column   element arrhenius_parameters,   temperature-dependent values new columns determined using   temperature values specified tleaf_column_name column.   category new columns calculate_arrhenius   indicate created using function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_arrhenius.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate temperature-dependent values using Arrhenius equations — calculate_arrhenius","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   system.file(\"extdata\", \"ball_berry_1.xlsx\", package = \"PhotoGEA\") )  licor_file <- calculate_arrhenius(licor_file, c3_arrhenius_sharkey)  licor_file$units$Kc      # View the units of the new `Kc` column #> [1] \"micromol mol^(-1)\" licor_file$categories$Kc # View the category of the new `Kc` column #> [1] \"calculate_arrhenius\" licor_file[,'Kc']        # View the values of the new `Kc` column #>  [1] 514.4424 476.5148 451.6481 443.3365 443.2988 438.5837 427.3056 603.5290 #>  [9] 557.2026 557.8568 543.9679 557.8977 557.3369 559.3194 655.1498 617.2999 #> [17] 595.9931 593.0777 591.0264 562.0319 583.4480 680.0888 631.4699 599.4342 #> [25] 585.5236 591.0018 561.7495 559.9348"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_ball_berry_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Ball-Berry index — calculate_ball_berry_index","title":"Calculate the Ball-Berry index — calculate_ball_berry_index","text":"Calculates Ball-Berry index. function can accomodate alternative   column names variables taken Licor file case change   point future. function also checks units   required column produce error units incorrect.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_ball_berry_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Ball-Berry index — calculate_ball_berry_index","text":"","code":"calculate_ball_berry_index(     licor_exdf,     a_column_name = 'A',     rhleaf_column_name = 'RHleaf',     csurface_column_name = 'Csurface'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_ball_berry_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Ball-Berry index — calculate_ball_berry_index","text":"licor_exdf exdf object representing data Licor gas exchange     measurement system. a_column_name name column licor_exdf contains net     assimilation micromol m^(-2) s^(-1). rhleaf_column_name name column licor_exdf contains relative     humidity leaf surface %. csurface_column_name name column licor_exdf contains CO2     concentration leaf surface micromol mol^(-1).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_ball_berry_index.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the Ball-Berry index — calculate_ball_berry_index","text":"Ball-Berry index defined * h_s / c_s,   net assimilation rate, h_s relative humidity   leaf surface, c_s CO2 concentration leaf   surface. variable key part Ball-Berry model, assumes   stomatal conductance linearly related Ball-Berry index.   information, please see original publication describing model:   Ball, J. T., Woodrow, . E. Berry, J. . \"Model Predicting Stomatal   Conductance Contribution Control Photosynthesis   Different Environmental Conditions.\" \"Progress Photosynthesis Research:   Volume 4\" (1986) [doi:10.1007/978-94-017-0519-6_48 ]. Typically, relative humidity CO2 concentration leaf surface   included Licor output files. Instead, output files include   relative humidity CO2 concentration sample chamber, conditions   leaf surface may slightly different. required inputs can   calculated using calculate_gas_properties function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_ball_berry_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Ball-Berry index — calculate_ball_berry_index","text":"exdf object based licor_exdf includes Ball-Berry   index new column called bb_index. category new column   calculate_ball_berry_index indicate created using   function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_ball_berry_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Ball-Berry index — calculate_ball_berry_index","text":"","code":"# Read an example Licor file included in the PhotoGEA package, calculate the # total pressure, calculate additional gas properties, and finally calculate the # Ball-Berry index. licor_file <- read_gasex_file(   system.file(\"extdata\", \"ball_berry_1.xlsx\", package = \"PhotoGEA\") )  licor_file <- calculate_total_pressure(licor_file)  licor_file <- calculate_gas_properties(licor_file)  licor_file <- calculate_ball_berry_index(licor_file)  licor_file$units$bb_index      # View the units of the new `bb_index` column #> [1] \"mol m^(-2) s^(-1)\" licor_file$categories$bb_index # View the category of the new `bb_index` column #> [1] \"calculate_ball_berry_index\" licor_file[,'bb_index']        # View the values of the new `bb_index` column #>  [1] 0.06487443 0.04217299 0.04717440 0.04230129 0.02995968 0.02208180 #>  [7] 0.01020448 0.09725402 0.07554299 0.06709379 0.04710046 0.04354188 #> [13] 0.03356910 0.02099952 0.09939125 0.06184597 0.05190328 0.05356902 #> [19] 0.03397142 0.02811785 0.01762407 0.05661131 0.04955238 0.04342732 #> [25] 0.03150718 0.02329131 0.02336237 0.01465243"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c3_assimilation.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate C3 assimilation rates — calculate_c3_assimilation","title":"Calculate C3 assimilation rates — calculate_c3_assimilation","text":"Calculates C3 assimilation rates based Farquhar-von-Caemmerer-Berry   model. function can accomodate alternative colum names variables   taken Licor files case change point future.   function also checks units required column produce   error units incorrect.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c3_assimilation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate C3 assimilation rates — calculate_c3_assimilation","text":"","code":"calculate_c3_assimilation(     exdf_obj,     TPU,     J,     Rd,     Vcmax,     POc = 210000,     atp_use = 4.0,     nadph_use = 8.0,     alpha = 0.0,     curvature_cj = 1.0,     curvature_cjp = 1.0,     cc_column_name = 'Cc',     total_pressure_column_name = 'total_pressure',     kc_column_name = 'Kc',     ko_column_name = 'Ko',     gamma_star_column_name = 'Gamma_star',     vcmax_norm_column_name = 'Vcmax_norm',     rd_norm_column_name = 'Rd_norm',     j_norm_column_name = 'J_norm',     perform_checks = TRUE,     return_exdf = TRUE   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c3_assimilation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate C3 assimilation rates — calculate_c3_assimilation","text":"exdf_obj exdf object. TPU maximum rate triphosphate utilization, expressed     micromol m^(-2) s^(-1). J electron transport rate 25 degrees C, expressed     micromol m^(-2) s^(-1). Note _not_ Jmax,     general depend incident photosynthetically active flux density. Rd respiration rate 25 degrees C, expressed     micromol m^(-2) s^(-1). Vcmax maximum rate rubisco carboxylation 25 degrees C, expressed     micromol m^(-2) s^(-1). POc partial pressure O2 chloroplast, expressed microbar.     often assumed ambient value. air measurements,     21 percent O2, 210000 microbar standard     atmospheric pressure. low oxygen measurements, 2 percent     O2, 20000 microbar. atp_use number ATP molecules used per C3 cycle. nadph_use number NADPH molecules used per C3 cycle. alpha dimensionless parameter greater equal 0 less equal     1 represents fraction glycolate carbon returned     chloroplast. curvature_cj dimensionless quadratic curvature parameter greater equal 0     less equal 1 sets degree co-limitation     Wc Wj. value 1 indicates co-limitation. curvature_cjp dimensionless quadratic curvature parameter greater equal 0     less equal 1 sets degree co-limitation     Wcj Wp. value 1 indicates co-limitation. cc_column_name name column exdf_obj contains     chloroplastic CO2 concentration micromol mol^(-1). total_pressure_column_name name column exdf_obj contains total pressure     bar. kc_column_name name column exdf_obj contains     Michaelis-Menten constant rubisco carboxylation     micromol mol^(-1). ko_column_name name column exdf_obj contains     Michaelis-Menten constant rubisco oxygenation     mmol mol^(-1). gamma_star_column_name name column exdf_obj contains     Gamma_star values micromol mol^(-1). vcmax_norm_column_name name column exdf_obj contains normalized     Vcmax values (units     normalized Vcmax 25 degrees C). rd_norm_column_name name column exdf_obj contains normalized     Rd values (units normalized Rd 25 degrees C). j_norm_column_name name column exdf_obj contains normalized     J values (units normalized J 25 degrees C). perform_checks logical value indicating whether check units required columns.     almost always TRUE. option disable checks     intended used fit_c3_aci calls     function, since performing checks many times repeatedly slows     fitting procedure. return_exdf logical value indicating whether return exdf object.     almost always TRUE. option return vector mainly     intended used  fit_c3_aci calls function,     since creating exdf object return slow fitting     procedure.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c3_assimilation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate C3 assimilation rates — calculate_c3_assimilation","text":"function generally follows Farquhar-von-Caemmerer-Berry model   described Lochocki McGrath (preparation). formulation,   steady-state net CO2 assimilation rate calculated according = (1 - Gamma_star / PCc) * Vc - Rd, Gamma_star CO2 compensation point absence day   respiration, PCc partial pressure CO2 chloroplast,   Vc RuBP carboxylation rate, Rd rate day   respiration. model considers three potential values Vc correspond   limitations set three different processes: Rubisco activity, RuBP   regeneration, triose phopsphate utilization (TPU). Rubisco-limited   carboxylation rate Wc given Wc = PCc * Vcmax / (PCc + Kc * (1.0 + POc / Ko)), Vcmax maximum rate Rubisco carboxylation, Kc   Michaelis-Menten constant CO2, Ko Michaelis-Menten   constant O2, POc partial pressure O2   chloroplast. RuBP-regeneration-limited carboxylation rate Wj given Wj = PCc * J / (atp_use * PCc + nadph_use * Gamma_star), J RuBP regeneration rate. allowed   atp_use nadph_use variables rather taking fixed   values (many sources). necessary   descriptions FvCB model use values. TPU-limited carboxylation rate given Wp = PCc * 3 * TPU / (PCc - Gamma_star * (1 + 3 * alpha)), TPU maximum rate triose phosphate utilization   0 <= alpha <= 1 fraction glycolate carbon returned   chloroplast. equation applies   PCc > Gamma_star * (1 + 3 * alpha); smaller values PCc,   TPU limit RuBP carboxylation rate Wp = Inf. actual carboxylation rate often chosen smallest three   potential rates: Vc = min{Wc, Wj, Wp}. However, also possible allow co-limitation processes   using quadratic mixing equations. words, carboxylation rate   co-limitated Rubisco activity RuBP regeneration Wcj given   smaller root following quadratic equation: curvature_cj * Wcj^2 - Wcj * (Wc + Wj) + Wc * Wj = 0, curvature_cj described \"curvature\" mixing;   curvature_cj 1, equivalent Wcj = min{Wc, Wj};   curvature_cj 0, Wcj geometric mean Wc   Wj. value 1 produce smooth curve rather   abrupt transitions occur choosing simple minimum. Likewise,   carboxylation rate co-limited Wcj Wp (called Wcjp;   words, rate co-limited three processes) given   smaller root curvature_cjp * Wcjp^2 - Wcjp * (Wcj + Wp) + Wcj * Wp = 0. , Wcjp used place Vc calculating net CO2   assimilation rate. information quadratic mixing technique,   see Collatz et al. (1990) Collatz et al. (1991). equations , several variables depend leaf   temperature. particular, leaf-temperature-adjusted values   Vcmax, J, Rd determined base values   25 degrees C temperature-dependent multiplicative factor. Also note PCc calculated chloroplastic CO2   concentration Cc using total pressure (ambient pressure + chamber   overpressure). addition carboxylation assimilation rates already mentioned,   also possible calculate net CO2 assimilation rates determined   Rubisco activity, RuBP regeneration, TPU follows: Ac = (1 - Gamma_star / PCc) * Wc - Rd Aj = (1 - Gamma_star / PCc) * Wj - Rd Ap = (1 - Gamma_star / PCc) * Wp - Rd References: von Caemmerer, S. \"Biochemical Models Leaf Photosynthesis\" (CSIRO           Publishing, 2000) [doi:10.1071/9780643103405 ]. Collatz, G. J., Ball, J. T., Grivet, C. & Berry, J. . \"Physiological           environmental regulation stomatal conductance, photosynthesis           transpiration: model includes laminar boundary layer.\"           Agricultural Forest Meteorology 54, 107–136 (1991)           [doi:10.1016/0168-1923(91)90002-8 ]. Collatz, G. J., Berry, J. ., Farquhar, G. D. & Pierce, J. \"          relationship Rubisco reaction mechanism models           photosynthesis.\" Plant, Cell & Environment 13, 219–225 (1990)           [doi:10.1111/j.1365-3040.1990.tb01306.x ].","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c3_assimilation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate C3 assimilation rates — calculate_c3_assimilation","text":"return value depends value return_exdf:  return_exdf TRUE, return value           exdf object following columns, calculated described           : TPU, Vcmax_tl, Rd_tl, J_tl,           Ac, Aj, Ap, , Vc.           category new columns           calculate_c3_assimilation indicate created           using function. return_exdf FALSE, return value list           following named elements: , Ac, Aj,           Ap. element numeric vector.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c3_assimilation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate C3 assimilation rates — calculate_c3_assimilation","text":"","code":"# Simulate a C3 A-Cc curve with specified leaf temperature and photosynthetic # parameters and plot the net assimilation rate along with the different # enzyme-limited rates inputs <- exdf(data.frame(   Cc = seq(1, 601, by = 6),   Tleaf = 30,   total_pressure = 1 ))  inputs <- document_variables(   inputs,   c('', 'Cc',             'micromol mol^(-1)'),   c('', 'Tleaf',          'degrees C'),   c('', 'total_pressure', 'bar') )  inputs <- calculate_arrhenius(inputs, c3_arrhenius_sharkey, 'Tleaf')  assim <- calculate_c3_assimilation(inputs, 12, 150, 1, 120)  lattice::xyplot(   Ac + Aj + Ap + An ~ Cc,   data = cbind(inputs, assim)$main_data,   type = 'l',   grid = TRUE,   auto = TRUE,   xlab = paste0('Chloroplast CO2 concentration (', inputs$units$Cc, ')'),   ylab = paste0('Assimilation rate (', assim$units$An, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c4_assimilation.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate C4 assimilation rates — calculate_c4_assimilation","title":"Calculate C4 assimilation rates — calculate_c4_assimilation","text":"Calculates C4 assimilation rates based Farquhar-von-Caemmerer-Berry   model. function can accomodate alternative colum names variables   taken Licor files case change point future.   function also checks units required column produce   error units incorrect.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c4_assimilation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate C4 assimilation rates — calculate_c4_assimilation","text":"","code":"calculate_c4_assimilation(     exdf_obj,     Rd,     Vcmax,     Vpmax,     Vpr,     POm = 210000,     gbs = 0.003,     Rm_frac = 0.5,     alpha = 0,     pcm_column_name = 'PCm',     kc_column_name = 'Kc',     ko_column_name = 'Ko',     kp_column_name = 'Kp',     gamma_star_column_name = 'gamma_star',     ao_column_name = 'ao',     vcmax_norm_column_name = 'Vcmax_norm',     vpmax_norm_column_name = 'Vpmax_norm',     rd_norm_column_name = 'Rd_norm',     perform_checks = TRUE,     return_exdf = TRUE   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c4_assimilation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate C4 assimilation rates — calculate_c4_assimilation","text":"exdf_obj exdf object. Rd total rate mitochondrial respiration across mesophyll bundle     sheath 25 degrees C, expressed micromol m^(-2) s^(-1). Vpmax maximum rate PEP carboxylase activity 25 degrees C, expressed     micromol m^(-2) s^(-1). Vcmax maximum rate rubisco carboxylation 25 degrees C, expressed     micromol m^(-2) s^(-1). Vpr rate PEP carboxylase regeneration, expressed     micromol m^(-2) s^(-1). POm partial pressure O2 mesophyll, expressed microbar.     often assumed ambient value. air measurements,     21 percent O2, 210000 microbar standard     atmospheric pressure. low oxygen measurements, 2 percent     O2, 20000 microbar. gbs bundle sheath conductance CO2 mol m^(-2) s^(-1) bar^(-1). Rm_frac fraction total mitochondrial respiration occurs     mesophyll. alpha fraction photosystem II activity bundle sheath. pcm_column_name name column exdf_obj contains partial pressure     CO2 mesophyll, expressed microbar. kc_column_name name column exdf_obj contains Michaelis-Menten     constant rubisco carboxylation microbar. ko_column_name name column exdf_obj contains Michaelis-Menten     constant rubisco oxygenation mbar. kp_column_name name column exdf_obj contains Michaelis-Menten     constant PEP carboxylase carboxylation microbar. gamma_star_column_name name column exdf_obj contains dimensionless     gamma_star values. ao_column_name name column exdf_obj contains dimensionless     ratio solubility diffusivity O2 CO2. vcmax_norm_column_name name column exdf_obj contains normalized     Vcmax values (units     normalized Vcmax 25 degrees C). vpmax_norm_column_name name column exdf_obj contains normalized     Vpmax values (units     normalized Vpmax 25 degrees C). rd_norm_column_name name column exdf_obj contains normalized     Rd values (units normalized Rd 25 degrees C). perform_checks logical value indicating whether check units required columns.     almost always TRUE. option disable checks     intended used fit_c4_aci calls     function, since performing checks many times repeatedly slows     fitting procedure. return_exdf logical value indicating whether return exdf object.     almost always TRUE. option return vector mainly     intended used  fit_c4_aci calls function,     since creating exdf object return slow fitting     procedure.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c4_assimilation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate C4 assimilation rates — calculate_c4_assimilation","text":"General Description Model function generally follows Section 4.2.1 S. von Caemmerer (2000),   provides equations calculating enzyme-limited net assimilation   rate C4 leaf. (equations also reproduced S. von   Caemmerer (2021), although use equation numbers 2000 textbook   .) net assimilation rate model calculated according   Equation 4.21: = (-b - sqrt(b^2 - 4 * * c)) / (2 * ) parameters , b, c determined   Equations 4.22, 4.23, 4.24, respectively. equations fairly long,   reproduce . Approximation Full Equations complicated equations can approximiated simpler one   (Equation 4.25): = min(Vp + gbs * PCm - Rm, Vcmax - Rd) Vp rate PEP carboxylation, gbs bundle   sheath conductance CO2, PCm partial pressure CO2   mesophyll, Rm rate mitochondrial respiration occuring   mesophyll, Vcmax maximum rate Rubisco carboxylation,   Rd rate mitochondrial respiration occurring bundle   sheath mesophyll. Essentially, first term equation   (Vp + gbs * PCm - Rm) can thought PEP-carboxylase-limited   assimilation rate Ap, second term (Vcmax - Rd)   Rubisco-limited rate Ar. PEP carboxylation rate Vp calculated according Equation 4.19: Vp = min(Pcm * Vpmax / (PCm + Kp), Vpr) Vpmax maximum rate PEP carboxylation, Kp   Michaelis-Menten constant PEP carboxylation, Vpr   carboxylation rate PEP carboxylase activity limited regeneration   rather carbon availability. Thus, can see approximation   actually calculates net assimilation rate smaller three separate   assimilation rates: = min(Apc, Apr, Ar) Apc = Pcm * Vpmax / (PCm + Kp) + gbs * PCm - Rm rate due   carbon-limited PEP carboxylation, Apr = Vpr + gbs * PCm - Rm   rate due regeneration-limited PEP carboxylation, Ar = Vcmax - Rd   rate due Rubisco-limited assimilation. example end documentation page, compare Apc,   Apr, Ar calculated Equation 4.21.   example, clear approximation = min(Apc, Apr, Ar)   quite accurate low values PCm, introduces significant   errors PCm increases. Thus, approximation can helpful   gaining intuitive understanding C4 photosynthesis,   used realistic calculations. precise, approximation reliable Vcmax   much larger gbs * Kc * (1 + POm / Ko), rarely case;   otherwise, limiting value high PCm smaller   Ar = Vcmax - Rd. Conversely, gbs alpha   set zero, approximation exact. Limiting Cases Approximate Equation bundle sheath conductance gbs generally small can   ignored simple analysis equations. case,   Pcm high, approximate equation simplifies   : = min(Vpmax - Rm, Vpr - Rm, Vcmax - Rd) Since respiration costs also generally much smaller maximum   enzyme activity regeneration rates, assimilation rate high levels   CO2 therefore determined smaller Vpmax, Vpr,   Vcmax. shown Table 4.1 textbook, Vpmax typically   much larger two rates, high CO2 assimilation C4 leaves   usually limited either Vpr Vcmax. exact limiting   factor can depend many possible variables, temperature.   example, see Wang (2008). lower values PCm, net assimilation determined CO2-limited   PEP carboxylation according : = PCm * Vpmax / Kp - Rm approximated gbs * PCm = 0 PCm + Kp = Kp,   appropriate small values Pcm. Thus, can see low CO2   levels, assimilation linearly related PCm slope   Vpmax / Kp intercept -Rm. Respiration Table 4.1 von Caemmerer (2000) suggests Rd = 0.01 * Vcmax   Rm = 0.5 * Rd. allow flexibility, allow Rd   specified independently Vcmax, also consider ratio   Rm / Rd = Rm_frac variable (Rm calculated   Rd according Rm = Rm_frac * Rd). Rm_frac   set 1, distinction Rd Rm. References  von Caemmerer, S. \"Biochemical Models Leaf Photosynthesis\" (CSIRO           Publishing, 2000) [doi:10.1071/9780643103405 ]. von Caemmerer, S. \"Updating steady-state model C4           photosynthesis.\" Journal Experimental Botany 72, 6003–6017 (2021)           [doi:10.1093/jxb/erab266 ]. Wang, D., Portis, . R., Jr., Moose, S. P. & Long, S. P. \"Cool C4           Photosynthesis: Pyruvate Pi Dikinase Expression Activity           Corresponds Exceptional Cold Tolerance Carbon Assimilation           Miscanthus × giganteus.\" Plant Physiology 148, 557–567 (2008)           [doi:10.1104/pp.108.120709 ].","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c4_assimilation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate C4 assimilation rates — calculate_c4_assimilation","text":"return value depends value return_exdf:  return_exdf TRUE, return value           exdf object following columns, calculated described           : Vcmax_tl, Vpmax_tl, Rd_tl, Rm_tl,           Vp, Apc, Apr, Ap, Ar,           . category new columns           calculate_c4_assimilation indicate created           using function. return_exdf FALSE, return value numeric           vector containing calculated values .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c4_assimilation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate C4 assimilation rates — calculate_c4_assimilation","text":"","code":"# Simulate a C4 A-Cm curve with specified leaf temperature and photosynthetic # parameters and plot the net assimilation rate. npts <- 101  inputs <- exdf(data.frame(   PCm = seq(0, 500, length.out = npts),   Tleaf = 25 ))  inputs <- document_variables(   inputs,   c('', 'PCm',   'microbar'),   c('', 'Tleaf', 'degrees C') )  inputs <- calculate_arrhenius(inputs, c4_arrhenius_von_caemmerer, 'Tleaf')  assim <- calculate_c4_assimilation(inputs, 1, 40, 200, 80)  # Now we can plot An, Apr, Apc, and Ar. From this plot, we can see that # replacing the complicated quadratic equation with a simple minimum yields # very different results. Although this approximation is helpful for # understanding C4 photosythesis, it should not be used for calculations. lattice::xyplot(   Apr + Apc + Ar + An ~ PCm,   data = cbind(inputs, assim)$main_data,   type = 'l',   grid = TRUE,   auto = TRUE,   xlab = paste0('Partial pressure of CO2 in the mesophyll (', inputs$units$PCm, ')'),   ylab = paste0('Net CO2 assimilation rate (', assim$units$An, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gas_properties.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate gas properties that are typically not included in Licor files — calculate_gas_properties","title":"Calculate gas properties that are typically not included in Licor files — calculate_gas_properties","text":"Calculates gas properties typically included Licor files.   function can accomodate alternative column names variables taken   Licor file case change point future. function   also checks units required column produce error   units incorrect.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gas_properties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate gas properties that are typically not included in Licor files — calculate_gas_properties","text":"","code":"calculate_gas_properties(     licor_exdf,     a_column_name = 'A',     ca_column_name = 'Ca',     total_pressure_column_name = 'total_pressure',     e_column_name = 'E',     gbw_column_name = 'gbw',     gsw_column_name = 'gsw',     h2o_s_column_name = 'H2O_s',     tleaf_column_name = 'TleafCnd'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gas_properties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate gas properties that are typically not included in Licor files — calculate_gas_properties","text":"licor_exdf exdf object representing data Licor gas exchange     measurement system. a_column_name name column licor_exdf contains net     assimilation micromol m^(-2) s^(-1). ca_column_name name column licor_exdf contains ambient CO2     concentration chamber micromol mol^(-1). total_pressure_column_name name column licor_exdf contains total pressure     bar. e_column_name name column licor_exdf contains transpiration     rate mol m^(-2) s^(-1). gbw_column_name name column licor_exdf contains boundary layer     conductance water vapor mol m^(-2) s^(-1). gsw_column_name name column licor_exdf contains stomatal     conductance water vapor mol m^(-2) s^(-1). h2o_s_column_name name column licor_exdf contains sample cell     H2O concentration mmol mol^(-1). tleaf_column_name name column licor_exdf contains leaf     temperature degrees C.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gas_properties.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate gas properties that are typically not included in Licor files — calculate_gas_properties","text":"default, Licor file provides following gas concentrations   conductances: Water vapor conductance diffusion stomata (gsw). Water vapor conductance diffusion boundary layer           (gbw). Water vapor conductance diffusion leaf's intercellular           spaces ambient air; words, total conductance           water vapor (gtw). Water vapor concentration sample cell (H2O_s). CO2 conductance diffusion leaf's intercellular spaces           ambient air; words, total conductance CO2           (gtc). CO2 concentration sample cell, corrected chamber leaks          (Ca). CO2 concentration leaf's intercellular spaces (Ci). However, sometimes helpful know \"missing\" conductances   concentrations, example, calculating mesophyll conductances   Ball-Berry parameters. function adds missing values, along   related water vapor properties: Water vapor concentration sample surface (H2O_surf). Water vapor concentration leaf's intercellular spaces           (H2O_i). Saturation water vapor pressure leaf temperature           (SVPleaf). Relative humidity leaf surface (RHleaf). CO2 conductance diffusion stomata (gsc). CO2 conductance diffusion boundary layer (gbc). CO2 concentration leaf surface (Cs). Equations used calculations equations used calculate quantities can found Licor   Li-6800 manual (Appendix C), relies heavily Appendix 2   following paper: von Caemmerer, S. & Farquhar, G. D. \"relationships   biochemistry photosynthesis gas exchange leaves\"   Planta 153, 376–387 (1981) [doi:10.1007/BF00384257 ] Equation C-79 Licor manual describes total flow water vapor   leaf interior ambient air using gtw, H2O_i,   H2O_s, transpiration rate E: (1) gtw = E * (1000 - (H2O_i + H2O_s) / 2) / (H2O_i - H2O_s) steady-state conditions, flux H2O molecules across portion   gas flow identical E, can also apply equation   flow water vapor leaf surface ambient air: (2) gbw = E * (1000 - (H2O_surf + H2O_s) / 2) / (H2O_surf - H2O_s) Equation (2) can solved H2O_surf: (3) H2O_surf = (E * (1000 - H2O_s / 2) + gbw * H2O_s) / (gbw + E / 2) Equation C-70 Licor manual describes calculate saturation water   vapor pressure air temperature. leaf surface, air temperature   leaf temperature (Tleaf; degrees C),   can determine SVPleaf using Equation C-70 follows: (4) SVPleaf = 0.6135 * e^((17.502 * Tleaf) / (240.97 + Tleaf)) gas exchange measurements, assume water vapor saturated   leaf's intecellular spaces, can determine H2O_i   SVPleaf relationship partial pressure molar gas   concentration: (5) H2O_i = SVPleaf / Pcham = SVPleaf / (Pa + deltaPcham) Pcham th total pressure sample chamber, Pa   atmospheric pressure, deltaPcham chamber overpressure.   related Pcham = Pa + deltaPcham. relative humidity leaf surface RHleaf can determined   H2O_surf SVPleaf using definitions relative humidity   partial pressure: (6) RHleaf = Pwl / SVPleaf = H2O_surf * (Pa + deltaPcham) / SVPleaf Pwl, partial pressure H2O leaf surface, given   H2O_surf * Pcham. CO2 conductances stomata boundary layer can determined   corresponding H2O conductances using ratios molecular   diffusivities two molecules, explained vicinty Equation   C-106 Licor manual: (7) gsc = gsw / 1.6 (8) gbc = gbw / 1.37 Equation C-105 Licor manual describes flow CO2 ambient   air intercellular spaces: (9) C_i = ((gtc - E / 2) * Ca - ) / (gtc + E / 2) replaced C_s (CO2 concentration sample   chamber) Ca clarity. steady state conditions, flows   H2O CO2 identical E , respectively, can   also apply equation flow CO2 ambient air leaf   surface: (10) Csurface = ((gbc - E / 2) * Ca - ) / (gbc + E / 2) function uses Equations (3)-(8) (10) calculate desired values.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gas_properties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate gas properties that are typically not included in Licor files — calculate_gas_properties","text":"exdf object based licor_exdf includes following   additional columns, calculated described : H2O_surf,  SVPleaf, H2O_i, RHleaf, gsc, gbc,  Csurface. category new columns  calculate_gas_properties indicate created using   function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gas_properties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate gas properties that are typically not included in Licor files — calculate_gas_properties","text":"","code":"# Read an example Licor file included in the PhotoGEA package, calculate the # total pressure, and calculate additional gas properties. licor_file <- read_gasex_file(   system.file(\"extdata\", \"ball_berry_1.xlsx\", package = \"PhotoGEA\") )  licor_file <- calculate_total_pressure(licor_file)  licor_file <- calculate_gas_properties(licor_file)  licor_file$units$RHleaf      # View the units of the new `RHleaf` column #> [1] \"%\" licor_file$categories$RHleaf # View the category of the new `RHleaf` column #> [1] \"calculate_gas_properties\" licor_file[,'RHleaf']        # View the values of the new `RHleaf` column #>  [1] 72.82992 73.97870 74.65520 73.30259 73.32851 73.76332 74.02142 83.24810 #>  [9] 82.76472 81.59332 82.83944 79.67378 79.80127 79.81986 81.01622 81.70109 #> [17] 81.91860 81.55661 81.12870 78.16409 77.93890 76.56099 78.22673 78.97098 #> [25] 78.41431 78.65405 79.31713 76.73647"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_total_pressure.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the total pressure in bar — calculate_total_pressure","title":"Calculate the total pressure in bar — calculate_total_pressure","text":"Calculates total pressure bar. Licor gas exchange measurement   systems report abient air pressure (Pa) chamber   overpressure (DeltaPcham) kPa; total pressure   chamber therefore given sum two columns. function can   accomodate alternative column names variables taken Licor log   files case change point future. function also   checks units required column produce error   units incorrect.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_total_pressure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the total pressure in bar — calculate_total_pressure","text":"","code":"calculate_total_pressure(     exdf_obj,     pa_column_name = 'Pa',     deltapcham_column_name = 'DeltaPcham'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_total_pressure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the total pressure in bar — calculate_total_pressure","text":"exdf_obj exdf object contains pressure measurements. pa_column_name name column exdf_obj contains ambient air     pressure kPa. deltapcham_column_name name column exdf_obj contains chamber     overpressure kPa.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_total_pressure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the total pressure in bar — calculate_total_pressure","text":"deltapcham_column_name NA, function simply   convert values pa_column_name units bar.   Otherwise, values pa_column_name   deltapcham_column_name columns added together converted   bar.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_total_pressure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the total pressure in bar — calculate_total_pressure","text":"exdf object based exdf_obj includes total   pressure values new column called total_pressure. category   new column calculate_total_pressure indicate   created using function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_total_pressure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the total pressure in bar — calculate_total_pressure","text":"","code":"# Read an example Licor file included in the PhotoGEA package and calculate the # total pressure. licor_file <- read_gasex_file(   system.file(\"extdata\", \"ball_berry_1.xlsx\", package = \"PhotoGEA\") )  licor_file <- calculate_total_pressure(licor_file)  licor_file$units$total_pressure      # View the units of the new `total_pressure` column #> [1] \"bar\" licor_file$categories$total_pressure # View the category of the new `total_pressure` column #> [1] \"calculate_total_pressure\" licor_file[, 'total_pressure']       # View the values of the new `total_pressure` column #>  [1] 0.9925101 0.9925749 0.9926076 0.9926272 0.9924095 0.9924228 0.9924457 #>  [8] 0.9925986 0.9926574 0.9928725 0.9929653 0.9929991 0.9928978 0.9929064 #> [15] 0.9929203 0.9929226 0.9929827 0.9929333 0.9929934 0.9926874 0.9926688 #> [22] 0.9923497 0.9924241 0.9923444 0.9923882 0.9923838 0.9923927 0.9921658"},{"path":"https://eloch216.github.io/PhotoGEA/reference/cbind.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine exdf objects by columns or rows — cbind.exdf","title":"Combine exdf objects by columns or rows — cbind.exdf","text":"Combines one exdf objects columns rows   main_data. rbind, errors occur column names   exdf objects, units categories   identical.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/cbind.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine exdf objects by columns or rows — cbind.exdf","text":"","code":"# S3 method for exdf cbind(..., deparse.level = 1)    # S3 method for exdf rbind(     ...,     deparse.level = 1,     make.row.names = TRUE,     stringsAsFactors = FALSE,     factor.exclude = TRUE   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/cbind.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine exdf objects by columns or rows — cbind.exdf","text":"... Two exdf objects. deparse.level See associated documentation generic versions cbind     rbind. make.row.names See associated documentation generic version rbind. stringsAsFactors See associated documentation generic version rbind. factor.exclude See associated documentation generic version rbind.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/cbind.exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine exdf objects by columns or rows — cbind.exdf","text":"Returns new exdf object.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/cbind.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine exdf objects by columns or rows — cbind.exdf","text":"","code":"# Make some simple exdf objects. 1 and 2 have the same number of rows but # different columns, while 1 and 3 have the same columns but different rows. simple_exdf_1 <- exdf(data.frame(A = 1), data.frame(A = 'au'), data.frame(A = 'ac')) simple_exdf_2 <- exdf(data.frame(B = 2), data.frame(B = 'bu'), data.frame(B = 'bc')) simple_exdf_3 <- exdf(data.frame(A = 2), data.frame(A = 'au'), data.frame(A = 'ac'))  cbind(simple_exdf_1) # will just return simple_exdf_1 #>   A [ac] (au) #> 1           1 cbind(simple_exdf_1, simple_exdf_2) #>   A [ac] (au) B [bc] (bu) #> 1           1           2  rbind(simple_exdf_1) # will just return simple_exdf_1 #>   A [ac] (au) #> 1           1 rbind(simple_exdf_1, simple_exdf_3) #>   A [ac] (au) #> 1           1 #> 2           2"},{"path":"https://eloch216.github.io/PhotoGEA/reference/check_licor_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Check response curve data for common issues — check_licor_data","title":"Check response curve data for common issues — check_licor_data","text":"Checks make sure exdf object representing response curve data   expected number rows contain infinite values.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/check_licor_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check response curve data for common issues — check_licor_data","text":"","code":"check_licor_data(     licor_exdf,     identifier_columns,     expected_npts = 0,     driving_column = NULL,     driving_column_tolerance = 1.0,     col_to_ignore_for_inf = 'gmc'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/check_licor_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check response curve data for common issues — check_licor_data","text":"licor_exdf exdf object representing data Licor gas exchange     measurement system. identifier_columns vector list strings representing names columns     licor_exdf , taken together, uniquely identify curve.     often includes names like plot, event, replicate, etc. expected_npts number points response curve.     expected_npts == 0, response curves expected     (unspecified) number points. expected_npts < 0,     check skipped. driving_column name column systematically varied produce curve;     example, light response curve, typically Qin.     driving_column NULL, check skipped. driving_column_tolerance absolute tolerance deviation value     driving_column away mean across curves;     driving_column_tolerance can set Inf disable     check. col_to_ignore_for_inf columns ignore checking infinite values. Mesophyll     conductance (gmc) often set infinity intentionally     ignored performing check. completely disable check, set     col_to_ignore_for_inf NULL.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/check_licor_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check response curve data for common issues — check_licor_data","text":"function makes basic checks ensure Licor data includes   expected information include mistakes. problem   detected, silent return value. perform   following checks, optional: col_to_ignore_for_inf NULL, numeric columns           licor_exdf infinite values, exception           columns designated col_to_ignore_for_inf. elements identifier_columns present columns           licor_exdf. driving_column NULL,           also present column licor_exdf. licor_exdf split chunks according values           identifier_columns. exdf file represents           response curves, chunk represent single curve           additional checks can performed: expected_npts >= 0, chunk                   number points. expected_npts > 0,                   chunk expected_npts points. driving_column NULL, code                   chunk sequence values column.                   allow small variations, nonzero                   driving_column_tolerance can specified.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/check_licor_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check response curve data for common issues — check_licor_data","text":"","code":"# Read an example Licor file included in the PhotoGEA package and check it. # This file includes several 7-point light-response curves that can be uniquely # identified by the values of its 'species' and 'plot' columns. Since these are # light-response curves, each one follows a pre-set sequence of `Qin` values. licor_file <- read_gasex_file(   system.file('extdata', 'ball_berry_1.xlsx', package = 'PhotoGEA') )  # Make sure there are no infinite values and that all curves have the same # number of points check_licor_data(licor_file, c('species', 'plot'))  # Make sure there are no inifinite values and that all curves have 7 points check_licor_data(licor_file, c('species', 'plot'), 7)  # Make sure there are no infinite values, that all curves have 7 points, and # that the values of the `Qin` column follow the same sequence in all curves # (to within 1.0 micromol / m^2 / s) check_licor_data(licor_file, c('species', 'plot'), 7, 'Qin', 1.0)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/check_required_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Make sure required variables exist — check_required_variables","title":"Make sure required variables exist — check_required_variables","text":"Checks whether input table required variables.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/check_required_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make sure required variables exist — check_required_variables","text":"","code":"check_required_variables(x, required_variables)    # S3 method for data.frame check_required_variables(x, required_variables)    # S3 method for exdf check_required_variables(x, required_variables)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/check_required_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make sure required variables exist — check_required_variables","text":"x table-like R object data frame exdf. required_variables set variables must included x columns.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/check_required_variables.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make sure required variables exist — check_required_variables","text":"check_required_variables generic, methods defined data   frames exdf objects. x data.frame, required_variables input   argument must character vector specifying names columns   included x. x exdf, required_variables input argument   must list named strings, name element specifies   name column must included x, value   column specifies corresponding units column. value   NA, unit checking performed. required variables missing, informative error thrown.   Otherwise, check_required_variables output produce   messages. function used internally many functions   PhotoGEA package check important columns make sure   correct units. example, see code apply_gm   typing PhotoGEA::apply_gm R terminal.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/check_required_variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make sure required variables exist — check_required_variables","text":"","code":"# Create a simple exdf object simple_exdf <- exdf(   data.frame(A = c(3, 2, 7, 9), B = c(4, 5, 1, 8)),   data.frame(A = 'm', B = 's'),   data.frame(A = 'Cat1', B = 'Cat2') )  # Confirm that columns named `A` and `B` are in the object, and that they have # units of `m` and `s`, respectively. check_required_variables(simple_exdf, list(A = 'm', B = 's'))  # Confirm that columns named `A` and `B` are in the object, but only check units # for the `A` column. check_required_variables(simple_exdf, list(A = 'm', B = NA))  # Use the data frame method on `simple_exdf$main_data` to confirm that columns # named `A` and `B` are present check_required_variables(simple_exdf$main_data, c('A', 'B'))"},{"path":"https://eloch216.github.io/PhotoGEA/reference/choose_input_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Choosing input files — choose_input_files","title":"Choosing input files — choose_input_files","text":"Tools choosing input files via dialog windows.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/choose_input_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choosing input files — choose_input_files","text":"","code":"choose_input_files()    choose_input_licor_files()    choose_input_tdl_files()"},{"path":"https://eloch216.github.io/PhotoGEA/reference/choose_input_files.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Choosing input files — choose_input_files","text":"functions available interactive sessions; moreover,   choose_input_licor_files choose_input_tdl_files   available Microsoft Windows. choose_input_files prompt user select single           file, return full file paths files           directory extension. choose_input_licor_files can used select one           Microsoft Excel files (extension *.xlsx) plaintext           files (extension). choose_input_tdl_files can used select one TDL           data files (extension *.dat). outputs functions typically passed   read_gasex_file via lapply.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/choose_input_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choosing input files — choose_input_files","text":"character vector full file paths.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/choose_input_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Choosing input files — choose_input_files","text":"","code":"# Interactively select a single file and get full file paths to all # other files in the same directory that have the same extension  if (FALSE) {  file_paths <- choose_input_files() }   # Interactively select one or more Licor Excel files and read each one to create # a list of exdf objects  if (FALSE) {  lapply(choose_input_licor_files(), function(fname) {   read_gasex_file(fname, 'time') }) }  # Interactively select one or more TDL data files and read each one to create a # list of exdf objects  if (FALSE) {  lapply(choose_input_tdl_files(), function(fname) {   read_gasex_file(fname, 'TIMESTAMP') }) }"},{"path":"https://eloch216.github.io/PhotoGEA/reference/consolidate.html","id":null,"dir":"Reference","previous_headings":"","what":"Consolidate a list of lists — consolidate","title":"Consolidate a list of lists — consolidate","text":"Consolidates list lists regular list combining like-named   elements.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/consolidate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Consolidate a list of lists — consolidate","text":"","code":"consolidate(x)    # S3 method for data.frame consolidate(x)    # S3 method for exdf consolidate(x)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/consolidate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Consolidate a list of lists — consolidate","text":"x list lists list_1, list_2, ..., list_N,   sub-list list_i elements named name_1,   name_2, ..., name_M.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/consolidate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Consolidate a list of lists — consolidate","text":"list elements named name_1, name_2, ..., name_M,   element created combining elements x   name using rbind; example, element name name_1 created calling rbind(list_1$name_1, list_2$name_1, ...,   list_N$name_1). calling rbind, element limited   columns common elements name.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/consolidate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Consolidate a list of lists — consolidate","text":"consolidate generic, methods defined nested   lists data frames exdf objects.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/consolidate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Consolidate a list of lists — consolidate","text":"","code":"# Example 1: Create a nested list of data frames and then consolidate them into # a regular list by combining the like-named elements nested_df_list <- list(   list_1 = list(     name_1 = data.frame(A = c(1, 2), B = c(0, 0)),     name_2 = data.frame(A = c(3, 4), B = c(0, 0)),     name_3 = data.frame(A = c(5, 6), B = c(0, 0))   ),   list_2 = list(     name_1 = data.frame(A = c(7, 8), B = c(0, 0)),     name_2 = data.frame(A = c(9, 10), B = c(0, 0)),     name_3 = data.frame(A = c(11, 12), B = c(0, 0))   ),   list_3 = list(     name_1 = data.frame(A = c(13, 14), B = c(0, 0)),     name_2 = data.frame(A = c(15, 16), B = c(0, 0)),     name_3 = data.frame(A = c(17, 18), B = c(0, 0))   ) )  str(nested_df_list) #> List of 3 #>  $ list_1:List of 3 #>   ..$ name_1:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A: num [1:2] 1 2 #>   .. ..$ B: num [1:2] 0 0 #>   ..$ name_2:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A: num [1:2] 3 4 #>   .. ..$ B: num [1:2] 0 0 #>   ..$ name_3:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A: num [1:2] 5 6 #>   .. ..$ B: num [1:2] 0 0 #>  $ list_2:List of 3 #>   ..$ name_1:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A: num [1:2] 7 8 #>   .. ..$ B: num [1:2] 0 0 #>   ..$ name_2:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A: num [1:2] 9 10 #>   .. ..$ B: num [1:2] 0 0 #>   ..$ name_3:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A: num [1:2] 11 12 #>   .. ..$ B: num [1:2] 0 0 #>  $ list_3:List of 3 #>   ..$ name_1:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A: num [1:2] 13 14 #>   .. ..$ B: num [1:2] 0 0 #>   ..$ name_2:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A: num [1:2] 15 16 #>   .. ..$ B: num [1:2] 0 0 #>   ..$ name_3:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A: num [1:2] 17 18 #>   .. ..$ B: num [1:2] 0 0  consolidated_df_list <- consolidate(nested_df_list)  str(consolidated_df_list) #> List of 3 #>  $ name_1:'data.frame':\t6 obs. of  2 variables: #>   ..$ A: num [1:6] 1 2 7 8 13 14 #>   ..$ B: num [1:6] 0 0 0 0 0 0 #>  $ name_2:'data.frame':\t6 obs. of  2 variables: #>   ..$ A: num [1:6] 3 4 9 10 15 16 #>   ..$ B: num [1:6] 0 0 0 0 0 0 #>  $ name_3:'data.frame':\t6 obs. of  2 variables: #>   ..$ A: num [1:6] 5 6 11 12 17 18 #>   ..$ B: num [1:6] 0 0 0 0 0 0  # Example 2: Create a nested list of `exdf` objects and then consolidate them # into a regular list by combining the like-named elements. Here, some of the # elements have columns not present in the others (for example, # `nested_exdf_list$list_3$name_1`). However, these \"extra\" columns are removed # before calling `rbind` and they do not appear in `consolidated_exdf_list`. nested_exdf_list <- list(   list_1 = list(     name_1 = exdf(data.frame(A = c(1, 2), B = c(0, 0))),     name_2 = exdf(data.frame(A = c(3, 4), B = c(0, 0))),     name_3 = exdf(data.frame(A = c(5, 6), B = c(0, 0)))   ),   list_2 = list(     name_1 = exdf(data.frame(A = c(7, 8), B = c(0, 0))),     name_2 = exdf(data.frame(A = c(9, 10), B = c(0, 0))),     name_3 = exdf(data.frame(A = c(11, 12), B = c(0, 0)))   ),   list_3 = list(     name_1 = exdf(data.frame(A = c(13, 14), B = c(0, 0), C = c(-1, -2))),     name_2 = exdf(data.frame(A = c(15, 16), B = c(0, 0), C = c(-1, -2))),     name_3 = exdf(data.frame(A = c(17, 18), B = c(0, 0), C = c(-1, -2)))   ) )  str(nested_exdf_list) #> List of 3 #>  $ list_1:List of 3 #>   ..$ name_1:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A [NA] (NA): num [1:2] 1 2 #>   .. ..$ B [NA] (NA): num [1:2] 0 0 #>   ..$ name_2:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A [NA] (NA): num [1:2] 3 4 #>   .. ..$ B [NA] (NA): num [1:2] 0 0 #>   ..$ name_3:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A [NA] (NA): num [1:2] 5 6 #>   .. ..$ B [NA] (NA): num [1:2] 0 0 #>  $ list_2:List of 3 #>   ..$ name_1:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A [NA] (NA): num [1:2] 7 8 #>   .. ..$ B [NA] (NA): num [1:2] 0 0 #>   ..$ name_2:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A [NA] (NA): num [1:2] 9 10 #>   .. ..$ B [NA] (NA): num [1:2] 0 0 #>   ..$ name_3:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A [NA] (NA): num [1:2] 11 12 #>   .. ..$ B [NA] (NA): num [1:2] 0 0 #>  $ list_3:List of 3 #>   ..$ name_1:'data.frame':\t2 obs. of  3 variables: #>   .. ..$ A [NA] (NA): num [1:2] 13 14 #>   .. ..$ B [NA] (NA): num [1:2] 0 0 #>   .. ..$ C [NA] (NA): num [1:2] -1 -2 #>   ..$ name_2:'data.frame':\t2 obs. of  3 variables: #>   .. ..$ A [NA] (NA): num [1:2] 15 16 #>   .. ..$ B [NA] (NA): num [1:2] 0 0 #>   .. ..$ C [NA] (NA): num [1:2] -1 -2 #>   ..$ name_3:'data.frame':\t2 obs. of  3 variables: #>   .. ..$ A [NA] (NA): num [1:2] 17 18 #>   .. ..$ B [NA] (NA): num [1:2] 0 0 #>   .. ..$ C [NA] (NA): num [1:2] -1 -2  consolidated_exdf_list <- consolidate(nested_exdf_list)  str(consolidated_exdf_list) #> List of 3 #>  $ name_1:'data.frame':\t6 obs. of  2 variables: #>   ..$ A [NA] (NA): num [1:6] 1 2 7 8 13 14 #>   ..$ B [NA] (NA): num [1:6] 0 0 0 0 0 0 #>  $ name_2:'data.frame':\t6 obs. of  2 variables: #>   ..$ A [NA] (NA): num [1:6] 3 4 9 10 15 16 #>   ..$ B [NA] (NA): num [1:6] 0 0 0 0 0 0 #>  $ name_3:'data.frame':\t6 obs. of  2 variables: #>   ..$ A [NA] (NA): num [1:6] 5 6 11 12 17 18 #>   ..$ B [NA] (NA): num [1:6] 0 0 0 0 0 0"},{"path":"https://eloch216.github.io/PhotoGEA/reference/default_optimizer.html","id":null,"dir":"Reference","previous_headings":"","what":"A default optimizer — default_optimizer","title":"A default optimizer — default_optimizer","text":"function returns optimizer meets requirements   OPTIM_FUN input argument fit_c3_aci fitting   functions. Essentially, wrapper dfoptim::nmkb.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/default_optimizer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A default optimizer — default_optimizer","text":"","code":"default_optimizer(tol = 1e-7, maxfeval = 2000, restarts.max = 10)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/default_optimizer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A default optimizer — default_optimizer","text":"tol convergence tolerance value; passed dfoptim::nmkb via     control input argument. maxfeval maximum value number function evaluations allow     optimization; passed dfoptim::nmkb via control     input argument. restarts.max maximum value number restarts allowed optimization;     passed dfoptim::nmkb via control input argument.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions — deprecated","title":"Deprecated functions — deprecated","text":"Deprecated functions fully removed future releases.   functions produce error called redirect user   suitable replacement.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions — deprecated","text":"","code":"read_tdl_file(...)    read_licor_file(...)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated functions — deprecated","text":"... Additional arguments; currently unused.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/dim.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the dimension of an exdf object — dim.exdf","title":"Retrieve the dimension of an exdf object — dim.exdf","text":"Returns dimensions exdf object's main_data. Also   enables nrow ncol exdf objects.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/dim.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the dimension of an exdf object — dim.exdf","text":"","code":"# S3 method for exdf dim(x)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/dim.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the dimension of an exdf object — dim.exdf","text":"x exdf object.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/dim.exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the dimension of an exdf object — dim.exdf","text":"Returns dim(x[['main_data']]).","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/dim.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the dimension of an exdf object — dim.exdf","text":"","code":"simple_exdf <- exdf(data.frame(A = 1), data.frame(A = 'u'), data.frame(A = 'c'))  dim(simple_exdf) #> [1] 1 1 dim(simple_exdf[['main_data']]) # An equivalent command #> [1] 1 1  nrow(simple_exdf) #> [1] 1 ncol(simple_exdf) #> [1] 1"},{"path":"https://eloch216.github.io/PhotoGEA/reference/dimnames.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve or set the dimension names of an exdf object — dimnames.exdf","title":"Retrieve or set the dimension names of an exdf object — dimnames.exdf","text":"Returns sets dimension names exdf object's   main_data. setting names, column names exdf   object's units categories also set. Also enables   colnames rownames exdf objects.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/dimnames.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve or set the dimension names of an exdf object — dimnames.exdf","text":"","code":"# S3 method for exdf dimnames(x)    # S3 method for exdf dimnames(x) <- value"},{"path":"https://eloch216.github.io/PhotoGEA/reference/dimnames.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve or set the dimension names of an exdf object — dimnames.exdf","text":"x exdf object. value possible value dimnames(x)","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/dimnames.exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve or set the dimension names of an exdf object — dimnames.exdf","text":"Returns dimnames(x[['main_data']]).","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/dimnames.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve or set the dimension names of an exdf object — dimnames.exdf","text":"","code":"simple_exdf <- exdf(data.frame(A = 1), data.frame(A = 'u'), data.frame(A = 'c'))  dimnames(simple_exdf) #> [[1]] #> [1] \"1\" #>  #> [[2]] #> [1] \"A\" #>  dimnames(simple_exdf[['main_data']]) # An equivalent command #> [[1]] #> [1] \"1\" #>  #> [[2]] #> [1] \"A\" #>   colnames(simple_exdf) <- \"B\" rownames(simple_exdf) <- 2  colnames(simple_exdf) #> [1] \"B\" rownames(simple_exdf) #> [1] \"2\""},{"path":"https://eloch216.github.io/PhotoGEA/reference/document_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Document exdf columns by specifying units and categories — document_variables","title":"Document exdf columns by specifying units and categories — document_variables","text":"Adds new columns exdf object modifies units categories   existing columns exdf object.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/document_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Document exdf columns by specifying units and categories — document_variables","text":"","code":"document_variables(exdf_obj, ...)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/document_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Document exdf columns by specifying units and categories — document_variables","text":"exdf_obj exdf object. ... optional argument character vector three elements     describe column, first element category, second     name, third units. example, c('GasEx', '',     'micromol m^(-2) s^(-1)') specifies category units     column GasEx micromol m^(-2) s^(-1),     respectively. column name exdf_obj,     added values initialized NA.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/document_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Document exdf columns by specifying units and categories — document_variables","text":"exdf object new /modified columns.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/document_variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Document exdf columns by specifying units and categories — document_variables","text":"","code":"# Create a simple exdf object with two columns (`A` and `B`) and default values # for its units and categories. simple_exdf <- exdf(data.frame(A = c(3, 2, 7, 9), B = c(4, 5, 1, 8)))  print(simple_exdf) #>   A [NA] (NA) B [NA] (NA) #> 1           3           4 #> 2           2           5 #> 3           7           1 #> 4           9           8  # Specify units and categories for the `A` and `B` columns, and add a new `C` # column. document_variables(   simple_exdf,   c('cat1', 'A', 'm'), # The category of `A` is `cat1` and its units are `m`   c('cat2', 'B', 's'), # The category of `B` is `cat2` and its units are `s`   c('cat3', 'C', 'g')  # The category of `C` is `cat3` and its units are `g` ) #>   A [cat1] (m) B [cat2] (s) C [cat3] (g) #> 1            3            4           NA #> 2            2            5           NA #> 3            7            1           NA #> 4            9            8           NA"},{"path":"https://eloch216.github.io/PhotoGEA/reference/example_data_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data files — example_data_files","title":"Example data files — example_data_files","text":"PhotoGEA package includes several data files can used   demonstrate different functions analysis techniques.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/example_data_files.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example data files — example_data_files","text":"following files included package: ball_berry_1.xlsx ball_berry_2.xlsx: Two log files           created Licor Li-6800 portable gas exchange measurement systems.           log files contain several Ball-Berry curves. Several user           constants defined logs can used identify           individual curves subsets curves: species, plot,           instrument. files used \"Analyzing           Ball-Berry Data\" vignette examples. c3_aci_1.xlsx c3_aci_2.xlsx: Two log files           created Licor Li-6800 portable gas exchange measurement systems.           log files contain several C3 CO2 response (-Ci) curves.           Several user constants defined logs can used           identify individual curves subsets curves: species,           plot, instrument. files used           \"Analyzing C3 -Ci Curves\" vignette examples. c4_aci_1.xlsx c4_aci_2.xlsx: Two log files           created Licor Li-6800 portable gas exchange measurement systems.           log files contain several C4 CO2 response (-Ci) curves.           Several user constants defined logs can used           identify individual curves subsets curves: species,           plot, instrument. files used           \"Analyzing C4 -Ci Curves\" vignette examples. tdl_sampling_1.dat tdl_sampling_2.dat: Two log files           created Campbell Scientific CR3000 data logger, representing data           tunable diode laser (TDL) system. files used           \"Analyzing TDL Data\" vignette examples. plaintext_licor_file: log file created Licor Li-6800           portable gas exchange measurement system. file contains several           CO2 response (-Ci) curves. Several user constants defined           log can used identify individual curves subsets           curves: species, plot, instrument. Since none data files published, noise added   original data. Thus, similar real measurements, useful   conclusions can drawn . installing `PhotoGEA`, copies files stored R   package directory (PhotoGEA/extdata subdirectory).   location unique computer, full paths files can   obtained using system.file function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/example_data_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example data files — example_data_files","text":"","code":"# Print full paths to the example files system.file('extdata', 'ball_berry_1.xlsx', package = 'PhotoGEA') #> [1] \"/home/runner/work/_temp/Library/PhotoGEA/extdata/ball_berry_1.xlsx\" system.file('extdata', 'ball_berry_2.xlsx', package = 'PhotoGEA') #> [1] \"/home/runner/work/_temp/Library/PhotoGEA/extdata/ball_berry_2.xlsx\" system.file('extdata', 'c3_aci_1.xlsx', package = 'PhotoGEA') #> [1] \"/home/runner/work/_temp/Library/PhotoGEA/extdata/c3_aci_1.xlsx\" system.file('extdata', 'c3_aci_2.xlsx', package = 'PhotoGEA') #> [1] \"/home/runner/work/_temp/Library/PhotoGEA/extdata/c3_aci_2.xlsx\" system.file('extdata', 'c4_aci_1.xlsx', package = 'PhotoGEA') #> [1] \"/home/runner/work/_temp/Library/PhotoGEA/extdata/c4_aci_1.xlsx\" system.file('extdata', 'c4_aci_2.xlsx', package = 'PhotoGEA') #> [1] \"/home/runner/work/_temp/Library/PhotoGEA/extdata/c4_aci_2.xlsx\" system.file('extdata', 'tdl_sampling_1.dat', package = 'PhotoGEA') #> [1] \"/home/runner/work/_temp/Library/PhotoGEA/extdata/tdl_sampling_1.dat\" system.file('extdata', 'tdl_sampling_2.dat', package = 'PhotoGEA') #> [1] \"/home/runner/work/_temp/Library/PhotoGEA/extdata/tdl_sampling_2.dat\" system.file('extdata', 'plaintext_licor_file', package = 'PhotoGEA') #> [1] \"/home/runner/work/_temp/Library/PhotoGEA/extdata/plaintext_licor_file\""},{"path":"https://eloch216.github.io/PhotoGEA/reference/exclude_outliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Exclude outliers from a data set — exclude_outliers","title":"Exclude outliers from a data set — exclude_outliers","text":"Excludes outliers data set using \"1.5 interquartile range\" rule.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/exclude_outliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exclude outliers from a data set — exclude_outliers","text":"","code":"exclude_outliers(x, col_for_analysis, INDICES)    # S3 method for data.frame exclude_outliers(x, col_for_analysis, INDICES)    # S3 method for exdf exclude_outliers(x, col_for_analysis, INDICES)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/exclude_outliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exclude outliers from a data set — exclude_outliers","text":"x data table col_for_analysis name column x used determine outliers. INDICES factor list factors nrow(x) elements.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/exclude_outliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exclude outliers from a data set — exclude_outliers","text":"copy X outliers removed.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/exclude_outliers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exclude outliers from a data set — exclude_outliers","text":"exclude_outliers generic, methods defined data frames   exdf objects. function uses simple rule detect outliers,   point deviates mean 1.5 * IQR,   IQR interquartile range, said outlier.   method also sometimes referred \"Tukey's Fences,\" seen   Wikipedia page outliers. data sets extreme outliers, may necessary exclude outliers   actually remove .","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/exclude_outliers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exclude outliers from a data set — exclude_outliers","text":"","code":"# Read a Licor file included with the PhotoGEA package; this file includes # several light response curves that can be identified by the 'species' and # 'plot' columns. licor_file <- read_gasex_file(   system.file(\"extdata\", \"ball_berry_1.xlsx\", package = \"PhotoGEA\") )  # Exclude points from each response curve in the data where the leaf temperature # is determined to be an outlier licor_file_clean <- exclude_outliers(   licor_file,   'TleafCnd',   list(licor_file[, 'species'], licor_file[, 'plot']) )  # Check to see how many points remain after removing outliers str(list('original' = nrow(licor_file), 'clean' = nrow(licor_file_clean))) #> List of 2 #>  $ original: int 28 #>  $ clean   : int 24"},{"path":"https://eloch216.github.io/PhotoGEA/reference/exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Extended data frame — exdf","title":"Extended data frame — exdf","text":"\"extended data frame\" (exdf) object similar data frame,   also contains information units categories   column.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extended data frame — exdf","text":"","code":"exdf(main_data, units = NULL, categories = NULL, ...)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extended data frame — exdf","text":"main_data data frame. units data frame columns main_data just one     row, entry describes units corresponding column     main_data. units NULL, initialized     NA column. categories data frame columns main_data just one     row, entry describes category corresponding column     main_data. categories NULL,     initialized NA column. ... additional properties include entries resulting exdf     object; must passed named arguments.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/exdf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extended data frame — exdf","text":"exdf class originally created way represent   contents Licor Excel file R structure. Licor Excel files,   column name, units, category; example, column values   net assimilation rate called , units micromol / m^2   / s, categorized GasEx variable. technical point view, exdf object simply list   three required elements: main_data, units,   categories. data frame column   names, described . also possible exdf object   additional entries filename stores name   file used create exdf. Several S3 methods defined exdf objects, following   general guidance   Advanced R S3 classes: .exdf .data.frame.exdf print.exdf str.exdf length.exdf dim.exdf dimnames.exdf [.exdf [<-.exdf rbind.exdf cbind.exdf split.exdf .exdf","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extended data frame — exdf","text":"exdf object described .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extended data frame — exdf","text":"","code":"# Example 1: Creating a simple exdf object with two columns (`A` and `B`) and # default values for its units and categories. There are four values of each # variable. exdf(data.frame(A = c(3, 2, 7, 9), B = c(4, 5, 1, 8))) #>   A [NA] (NA) B [NA] (NA) #> 1           3           4 #> 2           2           5 #> 3           7           1 #> 4           9           8  # Example 2: Creating a simple exdf object with two columns (`A` and `B`) that # have units of `m` and `s`, respectively, and categories of `Cat1` and `Cat2`, # respectively. There are four values of each variable. exdf(   data.frame(A = c(3, 2, 7, 9), B = c(4, 5, 1, 8)),   data.frame(A = 'm', B = 's'),   data.frame(A = 'Cat1', B = 'Cat2') ) #>   A [Cat1] (m) B [Cat2] (s) #> 1            3            4 #> 2            2            5 #> 3            7            1 #> 4            9            8"},{"path":"https://eloch216.github.io/PhotoGEA/reference/extract.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Access or modify exdf elements — extract.exdf","title":"Access or modify exdf elements — extract.exdf","text":"Returns sets values elements exdf object.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/extract.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access or modify exdf elements — extract.exdf","text":"","code":"# S3 method for exdf [(x, i, j, return_exdf = FALSE)    # S3 method for exdf [(x, i, j) <- value"},{"path":"https://eloch216.github.io/PhotoGEA/reference/extract.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access or modify exdf elements — extract.exdf","text":"x exdf object. , j Indices specifying elements extract replace. Indices     numeric character vectors empty (missing)     NULL. return_exdf logical value indicating whether return value exdf     object. value Typically array-like R object similar class x.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/extract.exdf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Access or modify exdf elements — extract.exdf","text":"Since exdf object actually list named elements,   elements can accessed using [[ $ operators, list   named elements can obtained calling names. Elements main_data data frame exdf object can   accessed set using [ [<- operators. applied   exdf object, operators essentially shortcuts calling   operators object's main_data data frame. create new exdf object subset data contained   another exdf object, [ operator   return_exdf = TRUE can used.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/extract.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access or modify exdf elements — extract.exdf","text":"","code":"# Create a small exdf object that includes an extra element in addition to the # required ones (`main_data`, `units`, and `categories`). small_exdf <- exdf(   data.frame(A = c(3, 2, 7, 9), B = c(4, 5, 1, 8)),   data.frame(A = 'm', B = 's'),   data.frame(A = 'Cat1', B = 'Cat2'),   extra_exdf_element = \"This is an example of an extra exdf element\" )  # Accessing elements of `small_exdf` names(small_exdf)     # Get the names of all elements of small_exdf #> [1] \"main_data\"          \"units\"              \"categories\"         #> [4] \"extra_exdf_element\" small_exdf[['units']] # View the units using the `[[` operator #>   A B #> 1 m s small_exdf$categories # View the categories using the `$` operator #>      A    B #> 1 Cat1 Cat2  # Accessing elements of `small_exdf$main_data` small_exdf[,1]   # Access the first column #> [1] 3 2 7 9 small_exdf[1,]   # Access the first row #>   A B #> 1 3 4 small_exdf[,'B'] # Access the column named 'B' #> [1] 4 5 1 8 small_exdf[1,2]  # Access element 1 of column 2 #> [1] 4  # Equivalent (but longer) commands for accessing elements of `small_exdf$main_data` small_exdf$main_data[,1]   # Access the first column #> [1] 3 2 7 9 small_exdf$main_data[1,]   # Access the first row #>   A B #> 1 3 4 small_exdf$main_data[,'B'] # Access the column named 'B' #> [1] 4 5 1 8 small_exdf$main_data[1,2]  # Access element 1 of column 2 #> [1] 4  # Replacing elements of `small_exdf$main_data` small_exdf[,'A'] <- seq_len(4)             # Replace column A with new values small_exdf[small_exdf[,'A'] > 2, 'B'] <- 0 # Replace some rows of column B with new values  # Creating a new exdf object with a subset of the data from small_exdf. Here we # specify `return_exdf = TRUE` so that the `[` operator returns an exdf object # instead of a data frame new_exdf <- small_exdf[small_exdf[,'A'] > 2, , TRUE] names(new_exdf) # Check that the `extra_exdf_element` is still present #> [1] \"main_data\"          \"units\"              \"categories\"         #> [4] \"extra_exdf_element\" print(new_exdf) # Check that only the rows with A > 2 are included #>   A [Cat1] (m) B [Cat2] (s) #> 3            3            0 #> 4            4            0"},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_ball_berry.html","id":null,"dir":"Reference","previous_headings":"","what":"Fits the Ball-Berry model to an experimental curve — fit_ball_berry","title":"Fits the Ball-Berry model to an experimental curve — fit_ball_berry","text":"Calculates linear fit stomatal conductance vs. Ball-Berry index using   data exdf object. function can accomodate alternative   column names variables taken Licor file case change   point future. function also checks units   required column produce error units incorrect.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_ball_berry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fits the Ball-Berry model to an experimental curve — fit_ball_berry","text":"","code":"fit_ball_berry(     replicate_exdf,     gsw_column_name = 'gsw',     bb_index_column_name = 'bb_index'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_ball_berry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fits the Ball-Berry model to an experimental curve — fit_ball_berry","text":"replicate_exdf exdf object representing one Ball-Berry curve. gsw_column_name name column replicate_exdf contains stomatal     conductance water vapor mol m^(-2) s^(-1). bb_index_column_name name column replicate_exdf contains Ball-Berry     index mol m^(-2) s^(-1).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_ball_berry.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fits the Ball-Berry model to an experimental curve — fit_ball_berry","text":"Ball-Berry model simple way describe response leaf's   stomata assimilation rate local environmental conditions.   Specifically, predicts stomatal conductance water vapor using   following equation: gsw = bb_0 + bb_1 * * h_s / C_s gsw stomatal conductance, net assimilation   rate, h_s relative humidity leaf surface, C_s   CO2 concentration leaf surface. term * h_s / C_s   commonly referred Ball-Berry index, intercept   (bb_0) slope (bb_1) linear relationship   Ball-Berry parameters describe stomatal response. Although model certainly oversimplification, encode   important stomatal responses. example, humidity low, stomata   close, reducing stomatal conductance. Likewise, CO2 concentration   around leaf depleted, stomata open allow CO2 diffuse   leaf's interior, increasing somatal conductance. information   model possible alternatives, see following papers: Ball, J. T., Woodrow, . E. Berry, J. . \"Model Predicting           Stomatal Conductance Contribution Control           Photosynthesis Different Environmental Conditions.\" \"Progress           Photosynthesis Research: Volume 4\" (1986)           [doi:10.1007/978-94-017-0519-6_48 ]. Tardieu, F. Davies, W. J. \"Integration hydraulic chemical           signalling control stomatal conductance water status           droughted plants.\" Plant, Cell & Environment 16, 341–349 (1993).           [doi:10.1111/j.1365-3040.1993.tb00880.x ]. Leuning, R. \"critical appraisal combined           stomatal-photosynthesis model C3 plants.\" Plant, Cell &           Environment 18, 339–355 (1995)           [doi:10.1111/j.1365-3040.1995.tb00370.x ]. Dewar, R. C. \"Ball–Berry–Leuning Tardieu–Davies stomatal           models: synthesis extension within spatially aggregated picture           guard cell function.\" Plant, Cell & Environment 25, 1383–1398 (2002).           [doi:10.1046/j.1365-3040.2002.00909.x ]. Ball-Berry parameters typically determined measuring Ball-Berry   curve, one factors influence Ball-Berry index   systematically varied across range values. value, care   taken net assimilation stomatal conductance reached   steady-state values, values recorded. , linear fit   experimentally observed stomatal conductances function   Ball-Berry index performed extract estimates Ball-Berry   intercept slope. function assumes replicate_exdf represents single   Ball-Berry curve. fit multiple curves , function often used   along .exdf consolidate.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_ball_berry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fits the Ball-Berry model to an experimental curve — fit_ball_berry","text":"list two elements:  fits: exdf object including measured values           fitted values stomatal conductance. fitted values           stored column whose name determined appending           '_fits' end gsw_column_name; typically,           'gsw_fits'. parameters: exdf object including fitting           parameters R-squared values Ball-Berry curve.           Ball-Berry intercept stored bb_intercept column,           Ball-Berry slope stored bb_slope column,           R-squared value fit stored r_squared column.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_ball_berry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fits the Ball-Berry model to an experimental curve — fit_ball_berry","text":"","code":"# Read an example Licor file included in the PhotoGEA package, calculate # additional gas properties, calculate the Ball-Berry index, define a new column # that uniquely identifies each curve, and then perform a fit to extract the # Ball-Berry parameters from each curve. licor_file <- read_gasex_file(   system.file(\"extdata\", \"ball_berry_1.xlsx\", package = \"PhotoGEA\") )  licor_file <- calculate_total_pressure(licor_file)  licor_file <- calculate_gas_properties(licor_file)  licor_file[,'species_plot'] <-   paste(licor_file[,'species'], '-', licor_file[,'plot'])  licor_file <- calculate_ball_berry_index(licor_file)  # Fit just one curve from the data set (it is rare to do this) one_result <- fit_ball_berry(   licor_file[licor_file[, 'species_plot'] == 'soybean - 1a', , TRUE] )  # Fit all curves in the data set (it is more common to do this) bb_results <- consolidate(by(   licor_file,   licor_file[, 'species_plot'],   fit_ball_berry ))  # View the fitting parameters for each species / plot col_to_keep <- c('species', 'plot', 'species_plot', 'bb_intercept', 'bb_slope', 'r_squared') bb_results$parameters[ , col_to_keep] #>   species plot species_plot bb_intercept bb_slope r_squared #> 1 soybean   1a soybean - 1a   0.10331765 3.995129 0.8469371 #> 2 soybean   1b soybean - 1b   0.10835188 6.492116 0.8394901 #> 3 soybean    5  soybean - 5   0.13085656 7.300232 0.9094708 #> 4 tobacco    2  tobacco - 2   0.09410874 3.613489 0.7186892  # View the fits for each species / plot lattice::xyplot(   gsw_fit + gsw ~ bb_index | species_plot,   data = bb_results$fit$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste0('Ball-Berry index (', licor_file$units$bb_index, ')'),   ylab = paste0('Stomatal conductance (', licor_file$units$gsw, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c3_aci.html","id":null,"dir":"Reference","previous_headings":"","what":"Fits a C3 assimilation model to an experimental curve — fit_c3_aci","title":"Fits a C3 assimilation model to an experimental curve — fit_c3_aci","text":"Fits model experimentally measured C3 CO2 response curve using   data exdf object along user-supplied   parameters. function can accomodate alternative column names   variables taken Licor file case change point   future. function also checks units required column   produce error units incorrect.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c3_aci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fits a C3 assimilation model to an experimental curve — fit_c3_aci","text":"","code":"fit_c3_aci(     replicate_exdf,     a_column_name = 'A',     cc_column_name = 'Cc',     total_pressure_column_name = 'total_pressure',     kc_column_name = 'Kc',     ko_column_name = 'Ko',     gamma_star_column_name = 'Gamma_star',     vcmax_norm_column_name = 'Vcmax_norm',     rd_norm_column_name = 'Rd_norm',     j_norm_column_name = 'J_norm',     POc = 210000,     atp_use = 4.0,     nadph_use = 8.0,     alpha = 0.0,     curvature_cj = 1.0,     curvature_cjp = 1.0,     OPTIM_FUN = default_optimizer(),     initial_guess_fun = initial_guess_c3_aci(         Oc = POc,         atp_use = atp_use,         nadph_use = nadph_use,         a_column_name = a_column_name,         cc_column_name = cc_column_name,         kc_column_name = kc_column_name,         ko_column_name = ko_column_name,         gamma_star_column_name = gamma_star_column_name,         vcmax_norm_column_name = vcmax_norm_column_name,         rd_norm_column_name = rd_norm_column_name,         j_norm_column_name = j_norm_column_name     ),     lower = c(0,  0,    0,   0),     upper = c(40, 1000, 100, 1000),     fixed = c(40, NA,   NA,  NA),     cj_crossover_min = NA,     cj_crossover_max = NA   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c3_aci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fits a C3 assimilation model to an experimental curve — fit_c3_aci","text":"replicate_exdf exdf object representing one CO2 response curve. a_column_name name column replicate_exdf contains net     assimilation micromol m^(-2) s^(-1). cc_column_name name column replicate_exdf contains     chloroplastic CO2 concentration micromol mol^(-1). total_pressure_column_name name column replicate_exdf contains total     pressure bar. kc_column_name name column replicate_exdf contains     Michaelis-Menten constant rubisco carboxylation     micromol mol^(-1). ko_column_name name column replicate_exdf contains     Michaelis-Menten constant rubisco oxygenation     mmol mol^(-1). gamma_star_column_name name column replicate_exdf contains     Gamma_star values micromol mol^(-1). vcmax_norm_column_name name column replicate_exdf contains normalized     Vcmax values (units     normalized Vcmax 25 degrees C). rd_norm_column_name name column replicate_exdf contains normalized     Rd values (units normalized Rd 25 degrees C). j_norm_column_name name column replicate_exdf contains normalized     J values (units normalized J 25 degrees C). POc partial pressure O2 chloroplast, expressed microbar.     often assumed ambient value. air measurements,     21 percent O2, 210000 microbar standard     atmospheric pressure. low oxygen measurements, 2 percent     O2, 20000 microbar. atp_use number ATP molecules used per C3 cycle. nadph_use number NADPH molecules used per C3 cycle. alpha dimensionless parameter greater equal 0 less equal     1 represents fraction glycolate carbon returned     chloroplast. curvature_cj dimensionless quadratic curvature parameter greater equal 0     less equal 1 sets degree co-limitation     Wc Wj. value 1 indicates co-limitation. curvature_cjp dimensionless quadratic curvature parameter greater equal 0     less equal 1 sets degree co-limitation     Wcj Wp. value 1 indicates co-limitation. OPTIM_FUN optimization function accepts following input arguments:     initial guess, error function, lower bounds, upper bounds.     return list following elements: par, convergence,     value, (optionally) message. bounded optimizers     dfoptim package meet requirements. base function     optim L-BFGS-B method can also used. initial_guess_fun function estimates values TPU, J, Rd,     Vcmax; initial_guess_fun one input argument (    exdf object representing single response curve return     vector estimated values (25 degrees C) order . lower numeric vector containing lower bounds values TPU,     J, Rd, Vcmax, order. upper numeric vector containing upper bounds values TPU,     J, Rd, Vcmax, order. fixed numeric vector specifying fixed values TPU, J, Rd,     Vcmax, order. Values NA indicate     corresponding parameter fixed varied     optimization procedure. default value argument fixes TPU     upper limit (net assimilation never limited phosphate     utilization) allows parameters vary. vary     parameters, set fixed c(NA, NA, NA, NA). cj_crossover_min minimum value Cc (ppm) Aj allowed become     overall rate-limiting factor. cj_crossover_min set     NA, restriction applied. cj_crossover_max maximum value Cc (ppm) Aj allowed     smaller Ac. cj_crossover_max set NA,     restriction applied.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c3_aci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fits a C3 assimilation model to an experimental curve — fit_c3_aci","text":"function calls calculate_c3_assimilation calculate   values net assimilation. user-supplied optimization function used   vary values TPU, J, Rd, Vcmax find   ones best reproduce experimentally measured values net   assimilation. photosynthesis model represented calculate_c3_assimilation   smooth sense small changes input parameters   necessarily cause changes outputs. related final step   calculations, overall assimilation rate taken   minimum three enzyme-limited rates. example, assimilation rate   never phosphate-limited, modifying TPU change model's   outputs. reason, derivative-based optimizers tend struggle   fitting C3 -Ci curves. Best results obtained using derivative-free   methods. found dfoptim::nmkb often able find   good fit. Sometimes optimizer choose biologically unreasonable parameter values   nevertheless produce good fits supplied assimilation values.   common problem fit result may follow expected progression   Ac-limited -> Aj-limited -> Ap-limited assimilation Cc   increases. case, optional cj_crossover_min   cj_crossover_max can used constrain range Cc values   (ppm) Aj allowed overall rate limiting factor.   See _Analyzing C3 -Ci Curves_ vignette example   arguments can used improve quality fit. default, function use initial_guess_c3_aci make rough   estimates parameters use initial guess. However,   possible also use fixed initial guess using something like   following initial_guess_fun:   function(x){c(10, 100, 0.5, 90)}, set initial guess   TPU = 10, J = 100, Rd = 0.5, Vcmax = 90. default, function fixes TPU high value (40 micromol   m^(-2) s^(-1)) allows parameters fitted. behavior   determined value fixed input argument, value   TPU specified way override value returned   initial_guess_fun. function assumes replicate_exdf represents single   C3 -Ci curve. fit multiple curves , function often used   along .exdf consolidate.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c3_aci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fits a C3 assimilation model to an experimental curve — fit_c3_aci","text":"list two elements:  fits: exdf object including original contents           replicate_exdf along several new columns: fitted values net assimilation stored                   column whose name determined appending '_fit'                   end a_column_name; typically,                   'A_fit'. Residuals (measured - fitted) stored column whose                   name determined appending '_residuals' end                   a_column_name; typically,                   'A_residuals'. outputs calculate_c3_assimilation                   stored columns usual names: TPU,                   Vcmax_tl, Rd_tl, J_tl, Ac,                   Aj, Ap. parameters: exdf object including identifiers,           fitting parameters, convergence information -Ci curve: best-fit values stored TPU,                   J_at_25, Rd_at_25, Vcmax_at_25                   columns. parameters depend leaf temperature, average                   leaf-temperature-dependent values stored                   X_tl_avg columns: J_tl_avg, Rd_tl_avg,                   Vcmax_tl_avg. convergence column indicates whether fit                   successful (==0) optimizer encountered                   problem (!=0). feval column indicates many cost function                   evaluations required finding optimal parameter                   values. residual stats returned residual_stats                   included columns default names: dof,                   RSS, RMSE, etc.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c3_aci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fits a C3 assimilation model to an experimental curve — fit_c3_aci","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   system.file('extdata', 'c3_aci_1.xlsx', package = 'PhotoGEA') )  # Define a new column that uniquely identifies each curve licor_file[, 'species_plot'] <-   paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )  # Organize the data licor_file <- organize_response_curve_data(     licor_file,     'species_plot',     c(9, 10, 16),     'CO2_r_sp' )  # Specify an infinite mesophyll conductance (so `Cc` = `Ci`) licor_file <- set_variable(   licor_file,   'gmc', 'mol m^(-2) s^(-1) bar^(-1)', value = Inf )  # Calculate the total pressure in the Licor chamber licor_file <- calculate_total_pressure(licor_file)  # Calculate Cc licor_file <- apply_gm(licor_file)  # Calculate temperature-dependent values of C3 photosynthetic parameters licor_file <- calculate_arrhenius(licor_file, c3_arrhenius_bernacchi)  # Fit just one curve from the data set (it is rare to do this) one_result <- fit_c3_aci(   licor_file[licor_file[, 'species_plot'] == 'tobacco - 1', , TRUE] )  # Fit all curves in the data set (it is more common to do this) aci_results <- consolidate(by(   licor_file,   licor_file[, 'species_plot'],   fit_c3_aci ))  # View the fitting parameters for each species / plot col_to_keep <- c(   'species', 'plot',                                       # identifiers   'TPU', 'J_at_25', 'Rd_at_25', 'Vcmax_at_25',             # parameters scaled to 25 degrees C   'J_tl_avg', 'Rd_tl_avg', 'Vcmax_tl_avg',                 # average temperature-dependent values   'dof', 'RSS', 'MSE', 'RMSE', 'RSE',                      # residual stats   'convergence', 'convergence_msg', 'feval', 'optimum_val' # convergence info )  aci_results$parameters[ , col_to_keep, TRUE] #>   species [UserDefCon] (NA) plot [UserDefCon] (NA) #> 1                   soybean                     5a #> 2                   tobacco                      1 #> 3                   tobacco                      2 #>   TPU [fit_c3_aci] (micromol m^(-2) s^(-1)) #> 1                                        40 #> 2                                        40 #> 3                                        40 #>   J_at_25 [fit_c3_aci] (micromol m^(-2) s^(-1)) #> 1                                      201.6657 #> 2                                      232.7659 #> 3                                      206.5354 #>   Rd_at_25 [fit_c3_aci] (micromol m^(-2) s^(-1)) #> 1                                   1.992828e-08 #> 2                                   4.672514e-01 #> 3                                   5.529838e-01 #>   Vcmax_at_25 [fit_c3_aci] (micromol m^(-2) s^(-1)) #> 1                                          119.9155 #> 2                                          145.3634 #> 3                                          124.3802 #>   J_tl_avg [fit_c3_aci] (micromol m^(-2) s^(-1)) #> 1                                       283.2928 #> 2                                       320.6172 #> 3                                       285.9938 #>   Rd_tl_avg [fit_c3_aci] (micromol m^(-2) s^(-1)) #> 1                                    2.814329e-08 #> 2                                    6.461787e-01 #> 3                                    7.690592e-01 #>   Vcmax_tl_avg [fit_c3_aci] (micromol m^(-2) s^(-1)) dof [residual_stats] (NA) #> 1                                           192.4915                        10 #> 2                                           226.5546                        10 #> 3                                           195.3871                        10 #>   RSS [residual_stats] ((micromol m^(-2) s^(-1))^2) #> 1                                         141.57767 #> 2                                          39.04257 #> 3                                          49.64244 #>   MSE [residual_stats] ((micromol m^(-2) s^(-1))^2) #> 1                                         10.890590 #> 2                                          3.003274 #> 3                                          3.818649 #>   RMSE [residual_stats] (micromol m^(-2) s^(-1)) #> 1                                       3.300089 #> 2                                       1.732996 #> 3                                       1.954136 #>   RSE [residual_stats] (micromol m^(-2) s^(-1)) convergence [fit_c3_aci] () #> 1                                      3.762681                           0 #> 2                                      1.975919                           0 #> 3                                      2.228058                           0 #>   convergence_msg [fit_c3_aci] () feval [fit_c3_aci] () #> 1          Successful convergence                   248 #> 2          Successful convergence                   157 #> 3          Successful convergence                   201 #>   optimum_val [fit_c3_aci] () #> 1                   141.57767 #> 2                    39.04257 #> 3                    49.64244  # View the fits for each species / plot lattice::xyplot(   Ac + Aj + Ap + A_fit + A ~ Ci | species_plot,   data = aci_results$fits$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste0('Intercellular CO2 concentration (', aci_results$fits$units$Ci, ')'),   ylab = paste0('Assimilation rate (', aci_results$fits$units$A, ')') )   # View the residuals for each species / plot lattice::xyplot(   A_residuals ~ Ci | species_plot,   data = aci_results$fits$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste0('Intercellular CO2 concentration (', aci_results$fits$units$Ci, ')'),   ylab = paste0('Assimilation rate residuals (', aci_results$fits$units$A_residuals, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c4_aci.html","id":null,"dir":"Reference","previous_headings":"","what":"Fits a C4 assimilation model to an experimental curve — fit_c4_aci","title":"Fits a C4 assimilation model to an experimental curve — fit_c4_aci","text":"Fits model experimentally measured C4 CO2 response curve using   data exdf object along user-supplied   parameters. function can accomodate alternative column names   variables taken Licor file case change point   future. function also checks units required column   produce error units incorrect.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c4_aci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fits a C4 assimilation model to an experimental curve — fit_c4_aci","text":"","code":"fit_c4_aci(     replicate_exdf,     a_column_name = 'A',     pcm_column_name = 'PCm',     kc_column_name = 'Kc',     ko_column_name = 'Ko',     kp_column_name = 'Kp',     gamma_star_column_name = 'gamma_star',     ao_column_name = 'ao',     vcmax_norm_column_name = 'Vcmax_norm',     vpmax_norm_column_name = 'Vpmax_norm',     rd_norm_column_name = 'Rd_norm',     POm = 210000,     gbs = 0.003,     Rm_frac = 0.5,     alpha = 0,     OPTIM_FUN = default_optimizer(),     initial_guess_fun = initial_guess_c4_aci(       gbs = gbs,       Rm_frac = Rm_frac,       a_column_name = a_column_name,       pcm_column_name = pcm_column_name,       kp_column_name = kp_column_name,       rd_norm_column_name = rd_norm_column_name,       vcmax_norm_column_name = vcmax_norm_column_name,       vpmax_norm_column_name = vpmax_norm_column_name     ),     lower = c(0,   0,   0,    0),     upper = c(100, 100, 1000, 1000),     fixed = c(NA,  NA,  NA,   1000)   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c4_aci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fits a C4 assimilation model to an experimental curve — fit_c4_aci","text":"replicate_exdf exdf object representing one CO2 response curve. a_column_name name column replicate_exdf contains net     assimilation micromol m^(-2) s^(-1). pcm_column_name name column exdf_obj contains partial pressure     CO2 mesophyll, expressed microbar. kc_column_name name column exdf_obj contains Michaelis-Menten     constant rubisco carboxylation microbar. ko_column_name name column exdf_obj contains Michaelis-Menten     constant rubisco oxygenation mbar. kp_column_name name column exdf_obj contains Michaelis-Menten     constant PEP carboxylase carboxylation microbar. gamma_star_column_name name column exdf_obj contains dimensionless     gamma_star values. ao_column_name name column exdf_obj contains dimensionless     ratio solubility diffusivity O2 CO2. vcmax_norm_column_name name column exdf_obj contains normalized     Vcmax values (units     normalized Vcmax 25 degrees C). vpmax_norm_column_name name column exdf_obj contains normalized     Vpmax values (units     normalized Vpmax 25 degrees C). rd_norm_column_name name column exdf_obj contains normalized     Rd values (units normalized Rd 25 degrees C). POm partial pressure O2 mesophyll, expressed microbar.     often assumed ambient value. air measurements,     21 percent O2, 210000 microbar standard     atmospheric pressure. low oxygen measurements, 2 percent     O2, 20000 microbar. gbs bundle sheath conductance CO2 mol m^(-2) s^(-1) bar^(-1). Rm_frac fraction total mitochondrial respiration occurs     mesophyll. alpha fraction photosystem II activity bundle sheath. OPTIM_FUN optimization function accepts following input arguments:     initial guess, error function, lower bounds, upper bounds.     return list following elements: par, convergence,     value, (optionally) message. bounded optimizers     dfoptim package meet requirements. base function     optim L-BFGS-B method can also used. initial_guess_fun function estimates values Rd, Vcmax, Vpmax,     Vpr; initial_guess_fun one input argument (    exdf object representing single response curve return     vector estimated values (25 degrees C) order . lower numeric vector containing lower bounds values Rd,     Vcmax, Vpmax, Vpr, order. upper numeric vector containing upper bounds values Rd,     Vcmax, Vpmax, Vpr, order. fixed numeric vector specifying fixed values Rd, Vcmax,     Vpmax, Vpr, order. Values NA indicate     corresponding parameter fixed varied     optimization procedure. default value argument fixes     Vpr high value (net assimilation rarely limited PEP     carboxylase regeneration) allows parameters vary. vary     parameters, set fixed c(NA, NA, NA, NA).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c4_aci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fits a C4 assimilation model to an experimental curve — fit_c4_aci","text":"function calls calculate_c4_assimilation calculate   values net assimilation. user-supplied optimization function used   vary values Rd, Vcmax, Vpmax, Vpr   find ones best reproduce experimentally measured values net   assimilation. photosynthesis model represented calculate_c4_assimilation   smooth sense small changes input parameters   necessarily cause changes outputs. related calculation   PEP carboxylase activity Vp, taken minimum   Vpr Vpc. example, Vpr high Vp =   Vpc points along curve, modifying Vpr small amount   change model's outputs. reason, derivative-based   optimizers tend struggle fitting C4 -Ci curves. Best results   obtained using derivative-free methods. found   dfoptim::nmkb often able find good fit. default, function use initial_guess_c4_aci make rough   estimates parameters use initial guess. However,   possible also use fixed initial guess using something like   following initial_guess_fun:   function(x){c(1, 20, 60, 90)}, set initial guess   Rd = 1, Vcmax = 20, Vpmax = 60, Vpr = 90. default, function fixes Vpr high value (800 micromol   m^(-2) s^(-1)) allows parameters fitted. behavior   determined value fixed input argument, value   Vpr specified way override value returned   initial_guess_fun. function assumes replicate_exdf represents single   C4 -Ci curve. fit multiple curves , function often used   along .exdf consolidate.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c4_aci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fits a C4 assimilation model to an experimental curve — fit_c4_aci","text":"list two elements:  fits: exdf object including original contents           replicate_exdf along several new columns: fitted values net assimilation stored                   column whose name determined appending '_fit'                   end a_column_name; typically,                   'A_fit'. Residuals (measured - fitted) stored column whose                   name determined appending '_residuals' end                   a_column_name; typically,                   'A_residuals'. outputs calculate_c4_assimilation                   stored columns usual names:                   Vcmax_tl, Vpmax_tl, Rd_tl, Rm_tl,                   Vp, Apc, Apr, Ap, Ar. parameters: exdf object including identifiers,           fitting parameters, convergence information -Ci curve: best-fit values stored Rd_at_25,                   Vcmax_at_25, Vpmax_at_25, Vpr                   columns. parameters depend leaf temperature, average                   leaf-temperature-dependent values stored                   X_tl_avg columns: Rd_tl_avg,                   Vcmax_tl_avg, Vpmax_tl_avg. convergence column indicates whether fit                   successful (==0) optimizer encountered                   problem (!=0). feval column indicates many cost function                   evaluations required finding optimal parameter                   values. residual stats returned residual_stats                   included columns default names: dof,                   RSS, RMSE, etc.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c4_aci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fits a C4 assimilation model to an experimental curve — fit_c4_aci","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   system.file('extdata', 'c4_aci_1.xlsx', package = 'PhotoGEA') )  # Define a new column that uniquely identifies each curve licor_file[, 'species_plot'] <-   paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )  # Organize the data licor_file <- organize_response_curve_data(     licor_file,     'species_plot',     c(9, 10, 16),     'CO2_r_sp' )  # Calculate temperature-dependent values of C4 photosynthetic parameters licor_file <- calculate_arrhenius(licor_file, c4_arrhenius_von_caemmerer)  # Calculate the total pressure in the Licor chamber licor_file <- calculate_total_pressure(licor_file)  # Calculate PCm licor_file <- apply_gm(licor_file, 'C4')  # Fit just one curve from the data set (it is rare to do this) one_result <- fit_c4_aci(   licor_file[licor_file[, 'species_plot'] == 'maize - 5', , TRUE] )  # Fit all curves in the data set (it is more common to do this) aci_results <- consolidate(by(   licor_file,   licor_file[, 'species_plot'],   fit_c4_aci ))  # View the fitting parameters for each species / plot col_to_keep <- c(   'species', 'plot',                                       # identifiers   'Rd_at_25', 'Vcmax_at_25', 'Vpmax_at_25', 'Vpr',         # parameters scaled to 25 degrees C   'Rd_tl_avg', 'Vcmax_tl_avg', 'Vpmax_tl_avg',             # average temperature-dependent values   'dof', 'RSS', 'MSE', 'RMSE', 'RSE',                      # residual stats   'convergence', 'convergence_msg', 'feval', 'optimum_val' # convergence info )  aci_results$parameters[ , col_to_keep, TRUE] #>   species [UserDefCon] (NA) plot [UserDefCon] (NA) #> 1                     maize                      5 #> 2                   sorghum                      2 #> 3                   sorghum                      3 #>   Rd_at_25 [fit_c4_aci] (micromol m^(-2) s^(-1)) #> 1                                   3.186012e-08 #> 2                                   7.313382e-01 #> 3                                   6.980638e-10 #>   Vcmax_at_25 [fit_c4_aci] (micromol m^(-2) s^(-1)) #> 1                                          36.30228 #> 2                                          42.62241 #> 3                                          38.84480 #>   Vpmax_at_25 [fit_c4_aci] (micromol m^(-2) s^(-1)) #> 1                                          180.5114 #> 2                                          149.4698 #> 3                                          145.9849 #>   Vpr [fit_c4_aci] (micromol m^(-2) s^(-1)) #> 1                                      1000 #> 2                                      1000 #> 3                                      1000 #>   Rd_tl_avg [fit_c4_aci] (micromol m^(-2) s^(-1)) #> 1                                    5.091267e-08 #> 2                                    1.133561e+00 #> 3                                    1.118607e-09 #>   Vcmax_tl_avg [fit_c4_aci] (micromol m^(-2) s^(-1)) #> 1                                           62.96484 #> 2                                           71.32106 #> 3                                           67.59896 #>   Vpmax_tl_avg [fit_c4_aci] (micromol m^(-2) s^(-1)) dof [residual_stats] (NA) #> 1                                           257.0925                        10 #> 2                                           208.0441                        10 #> 3                                           208.3413                        10 #>   RSS [residual_stats] ((micromol m^(-2) s^(-1))^2) #> 1                                         230.39540 #> 2                                         448.93327 #> 3                                          70.77968 #>   MSE [residual_stats] ((micromol m^(-2) s^(-1))^2) #> 1                                         17.722723 #> 2                                         34.533328 #> 3                                          5.444591 #>   RMSE [residual_stats] (micromol m^(-2) s^(-1)) #> 1                                       4.209836 #> 2                                       5.876506 #> 3                                       2.333365 #>   RSE [residual_stats] (micromol m^(-2) s^(-1)) convergence [fit_c4_aci] () #> 1                                      4.799952                           0 #> 2                                      6.700248                           0 #> 3                                      2.660445                           0 #>   convergence_msg [fit_c4_aci] () feval [fit_c4_aci] () #> 1          Successful convergence                   194 #> 2          Successful convergence                   175 #> 3          Successful convergence                   249 #>   optimum_val [fit_c4_aci] () #> 1                   230.39540 #> 2                   448.93327 #> 3                    70.77968  # View the fits for each species / plot lattice::xyplot(   Ar + Apc + A_fit + A ~ Ci | species_plot,   data = aci_results$fits$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', aci_results$fits$units$Ci, ']'),   ylab = paste('Assimilation rate [', aci_results$fits$units$A, ']') )   # View the residuals for each species / plot lattice::xyplot(   A_residuals ~ Ci | species_plot,   data = aci_results$fits$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', aci_results$fits$units$Ci, ']'),   ylab = paste('Assimilation rate residuals [', aci_results$fits$units$A_residuals, ']') )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/identifier_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Make sure required variables exist — identifier_columns","title":"Make sure required variables exist — identifier_columns","text":"Identifies columns single value across rows returns .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identifier_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make sure required variables exist — identifier_columns","text":"","code":"identifier_columns(x)    # S3 method for data.frame identifier_columns(x)    # S3 method for exdf identifier_columns(x)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/identifier_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make sure required variables exist — identifier_columns","text":"x table-like R object data frame exdf.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identifier_columns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make sure required variables exist — identifier_columns","text":"identifier_columns generic, methods defined data   frames exdf objects. identifier_columns gets names values columns   table-like object single unique value. object represents   set data one replicate, special columns taken   \"identifiers\" describe replicate. function often used inside   fitting functions passed .exdf FUN   input argument. example, see code fit_ball_berry   typing PhotoGEA::fit_ball_berry R terminal.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/identifier_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make sure required variables exist — identifier_columns","text":"","code":"# Create a simple exdf object simple_exdf <- exdf(   data.frame(A = c(3, 2, 7, 9), species = c('a', 'a', 'a', 'a'), plot = c(1, 1, 1, 1)),   data.frame(A = 'm', species = '', plot = ''),   data.frame(A = 'Cat1', species = '', plot = '') )  # Find its identifier columns identifier_columns(simple_exdf) #>   species [] () plot [] () #> 1             a          1  # Apply the data frame method to the exdf object's main data frame identifier_columns(simple_exdf$main_data) #>   species plot #> 1       a    1"},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_common_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify columns that are common to multiple objects — identify_common_columns","title":"Identify columns that are common to multiple objects — identify_common_columns","text":"Checks whether input arguments columns","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_common_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify columns that are common to multiple objects — identify_common_columns","text":"","code":"identify_common_columns(...)    # S3 method for data.frame identify_common_columns(...)    # S3 method for exdf identify_common_columns(...)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_common_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify columns that are common to multiple objects — identify_common_columns","text":"... One R objects column names.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_common_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify columns that are common to multiple objects — identify_common_columns","text":"character vector column names common input   objects.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_common_columns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify columns that are common to multiple objects — identify_common_columns","text":"identify_common_columns generic, methods defined data   frames exdf objects. case exdf objects, column   considered common name, units, category   input objects.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_common_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify columns that are common to multiple objects — identify_common_columns","text":"","code":"# Here we create two exdf objects with the same column names and units, but # where the categories of one column are not the same in both objects exdf_1 <- exdf(   data.frame(A = c(3, 2, 7, 9), B = c(4, 5, 1, 8)),   data.frame(A = 'm', B = 's'),   data.frame(A = 'Cat1', B = 'Cat2') )  exdf_2 <- exdf(   data.frame(A = c(3, 2, 7, 9), B = c(4, 5, 1, 8)),   data.frame(A = 'm', B = 's'),   data.frame(A = 'Cat1', B = 'Cat3') )  # Calling `identify_common_columns` on the exdf objects will only identify one # common column (A) because the category for column B is not common to all the # exdf objects. identify_common_columns(exdf_1, exdf_2) #> [1] \"A\"  # Calling `identify_common_columns` on the main_data data frames will identify # two common columns because unit and category information will not be # considered here. identify_common_columns(exdf_1$main_data, exdf_2$main_data) #> [1] \"A\" \"B\""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_tdl_cycles.html","id":null,"dir":"Reference","previous_headings":"","what":"Identifying cycles in TDL data — identify_tdl_cycles","title":"Identifying cycles in TDL data — identify_tdl_cycles","text":"Tool identifying complete measurement cycles set tunable diode   laser (TDL) data.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_tdl_cycles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identifying cycles in TDL data — identify_tdl_cycles","text":"","code":"identify_tdl_cycles(     tdl_exdf,     valve_column_name,     cycle_start_valve,     expected_cycle_length_minutes,     expected_cycle_num_valves,     expected_cycle_num_time_pts = expected_cycle_num_valves,     timestamp_colname   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_tdl_cycles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identifying cycles in TDL data — identify_tdl_cycles","text":"tdl_exdf exdf object representing data TDL data logger. valve_column_name name column tdl_exdf contains valve number;     typically, 'valve_number'. cycle_start_valve value valve column indicates start new cycle. expected_cycle_length_minutes expected length full cycle (minutes); length     determined difference timestamp first last     measurements compose cycle. example, cycle consists 9     valves require 20 seconds measure, expected length     cycle minutes 8 * 20 / 60 = 2.7 minutes (approximately). expected_cycle_num_valves total number unique valves measured cycle.     example, cycle consists measuements valves 1, 3, 13, 6, 13,     expected_cycle_num_valves 4. expected_cycle_num_time_pts total number time points recorded cycle.     example, 10 measuements logged per second cycle 12 minutes     long, expected_cycle_num_time_pts     12 * 60 * 10 = 7200. timestamp_colname name column tdl_exdf contains timestamp     measurement; typically, 'TIMESTAMP'.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_tdl_cycles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identifying cycles in TDL data — identify_tdl_cycles","text":"Typically TDL system periodically cycles multiple gas lines   measurements. gas lines represent gas mixtures known   composition can used calibration, others \"unknown\"   mixtures whose composition measured. collection valves used   control gas line measured given time,   \"active\" valve recorded data point included measurement file. using calibration lines apply corrections measured data,   necessary first identify complete measurements cycles within data   set. , complete cycles identified using following criteria: cycle said begin value valve_column_name           cycle_start_valve. cycle ends expected_cycle_num_valves valves           measured. time difference first last points cycle           deviate expected_cycle_length_minutes           +/- 30 seconds. addition identifying valid measurement cycles within data,   identify_tdl_cycles also calculates elapsed time beginning   cycle (minutes).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_tdl_cycles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identifying cycles in TDL data — identify_tdl_cycles","text":"exdf object based tdl_exdf includes two new columns:   cycle_num column indicates measurement cycle corresponding   measurement, elapsed_time column indicates elapsed   time (minutes) start cycle. rows tdl_exdf   found part complete cycle included   return value.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_tdl_cycles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identifying cycles in TDL data — identify_tdl_cycles","text":"","code":"# Example: reading a TDL file that is included with the PhotoGEA package and # identifying its measurement cycles. tdl_file <- read_gasex_file(   system.file(\"extdata\", \"tdl_sampling_1.dat\", package = \"PhotoGEA\"),   'TIMESTAMP' )  tdl_file <- identify_tdl_cycles(   tdl_file,   valve_column_name = 'valve_number',   cycle_start_valve = 20,   expected_cycle_length_minutes = 2.7,   expected_cycle_num_valves = 9,   timestamp_colname = 'TIMESTAMP' )  str(tdl_file) # Notice the two new columns: `cycle_num` and `elapsed_time` #> 'data.frame':\t918 obs. of  99 variables: #>  $ TIMESTAMP [read_cr3000] (TS)            : POSIXlt, format: \"2022-07-12 06:12:43\" \"2022-07-12 06:13:03\" ... #>  $ RECORD [read_cr3000] (RN)               : num  0 1 2 3 4 5 6 7 8 9 ... #>  $ valve_number [read_cr3000] ()           : num  20 21 23 26 2 10 11 12 13 20 ... #>  $ diag_system_Avg [read_cr3000] ()        : num  128 128 128 132 128 128 128 128 128 128 ... #>  $ NumSamples [read_cr3000] ()             : num  100 100 100 100 100 100 100 100 100 100 ... #>  $ Conc12C_Avg [read_cr3000] (ppm)         : num  2.9 68.8 311.9 1022.5 294.3 ... #>  $ Conc13C_Avg [read_cr3000] (ppm)         : num  0.132 0.847 3.481 11.114 3.299 ... #>  $ TGAStatus_Avg [read_cr3000] ()          : num  96 96 96 96 96 96 96 96 96 96 ... #>  $ TGAPressure_Avg [read_cr3000] (mb)      : num  30 30 30 30 30 ... #>  $ LaserTemp_Avg [read_cr3000] (degC)      : num  -4 -4 -4 -4 -4 ... #>  $ DCCurrentA_Avg [read_cr3000] (mA)       : num  50.4 50.4 50.4 50.4 50.4 ... #>  $ DCCurrentB_Avg [read_cr3000] (mA)       : num  38.9 38.9 38.9 38.9 38.9 ... #>  $ TGAAnalog1_Avg [read_cr3000] (V)        : num  0.0244 0.0244 0.0244 0.0244 0.0244 ... #>  $ TGATemp1_Avg [read_cr3000] (degC)       : num  30 30 30 30 30 ... #>  $ TGATemp2_Avg [read_cr3000] (degC)       : num  30 30 30 30 30 ... #>  $ LaserCooler_Avg [read_cr3000] (V)       : num  2.02 2.02 2.02 2.02 2.02 ... #>  $ RefDetSigA_Avg [read_cr3000] (mV)       : num  2.48 2.48 2.48 2.48 2.48 ... #>  $ RefDetSigB_Avg [read_cr3000] (mV)       : num  0.503 0.503 0.502 0.502 0.502 ... #>  $ RefDetTransA_Avg [read_cr3000] (%)      : num  41.2 41.2 41.1 41.1 41.1 ... #>  $ RefDetTransB_Avg [read_cr3000] (%)      : num  54.8 54.8 54.7 54.7 54.7 ... #>  $ RefDetTemp_Avg [read_cr3000] (degC)     : num  -35 -35 -35 -35 -35 ... #>  $ RefDetCooler_Avg [read_cr3000] ()       : num  1461 1461 1461 1461 1461 ... #>  $ RefDetGainOffset_Avg [read_cr3000] ()   : num  8217 8217 8217 8217 8217 ... #>  $ SmpDetSigA_Avg [read_cr3000] (mV)       : num  57.8 56.5 51.6 39.8 52 ... #>  $ SmpDetSigB_Avg [read_cr3000] (mV)       : num  10.08 9.88 9.17 7.38 9.22 ... #>  $ SmpDetTransA_Avg [read_cr3000] (%)      : num  99.8 97.4 89.2 68.8 89.8 ... #>  $ SmpDetTransB_Avg [read_cr3000] (%)      : num  114.4 112.2 104.2 84.2 104.8 ... #>  $ SmpDetTemp_Avg [read_cr3000] (degC)     : num  -39 -39 -39 -39 -39 ... #>  $ SmpDetCooler_Avg [read_cr3000] ()       : num  1449 1449 1449 1449 1449 ... #>  $ SmpDetGainOffset_Avg [read_cr3000] ()   : num  8456 8456 8456 8456 8456 ... #>  $ TGATemp1DutyCycle_Avg [read_cr3000] ()  : num  0.13 0.121 0.132 0.129 0.138 ... #>  $ TGATemp2DutyCycle_Avg [read_cr3000] ()  : num  0.0601 0.077 0.0677 0.0676 0.0649 ... #>  $ SampleFlow_Avg [read_cr3000] (ml_min)   : num  167 167 167 164 162 ... #>  $ ExcessFlow_Avg [read_cr3000] (ml_min)   : num  95.77 105.457 140.852 0.123 53.341 ... #>  $ SamplePress_Avg [read_cr3000] (mb)      : num  400 400 400 396 400 ... #>  $ BypassPress_Avg [read_cr3000] (mb)      : num  400 400 400 400 400 ... #>  $ SampleP_control_Avg [read_cr3000] ()    : num  0.4 0.404 0.414 0.2 0.385 ... #>  $ BypassP_control_Avg [read_cr3000] ()    : num  0.477 0.475 0.471 0.484 0.496 ... #>  $ TGAPress_control_Avg [read_cr3000] ()   : num  0.528 0.529 0.53 0.53 0.53 ... #>  $ panel_tmpr_Avg [read_cr3000] (degC)     : num  24.7 24.7 24.7 24.7 24.7 ... #>  $ batt_volt_Avg [read_cr3000] (V)         : num  11.8 11.8 11.8 11.8 11.8 ... #>  $ buff_depth_Max [read_cr3000] ()         : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ Conc12C_Std [read_cr3000] (ppm)         : num  0.5244 0.0946 0.2025 1.1064 1.5535 ... #>  $ Conc13C_Std [read_cr3000] (ppm)         : num  0.00797 0.00637 0.00849 0.02317 0.018 ... #>  $ TGAStatus_Std [read_cr3000] ()          : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ TGAPressure_Std [read_cr3000] (mb)      : num  0.0101 0.0105 0.0115 0.0102 0.0112 ... #>  $ LaserTemp_Std [read_cr3000] (degC)      : num  0.000244 0.000289 0.000272 0.000287 0.00025 ... #>  $ DCCurrentA_Std [read_cr3000] (mA)       : num  0.000454 0.0006 0.000338 0.000492 0.000503 ... #>  $ DCCurrentB_Std [read_cr3000] (mA)       : num  0.000677 0.000844 0.00061 0.000753 0.000625 ... #>  $ TGAAnalog1_Std [read_cr3000] (V)        : num  1.56e-05 1.39e-05 1.31e-05 1.30e-05 1.31e-05 ... #>  $ TGATemp1_Std [read_cr3000] (degC)       : num  0.000994 0.00121 0.003558 0.001737 0.001128 ... #>  $ TGATemp2_Std [read_cr3000] (degC)       : num  0.00215 0.00137 0.00141 0.00126 0.00227 ... #>  $ LaserCooler_Std [read_cr3000] (V)       : num  0.000293 0.000347 0.000326 0.000345 0.000301 ... #>  $ RefDetSigA_Std [read_cr3000] (mV)       : num  0.00155 0.00185 0.00155 0.00199 0.00154 ... #>  $ RefDetSigB_Std [read_cr3000] (mV)       : num  0.00169 0.00148 0.00145 0.0015 0.00188 ... #>  $ RefDetTransA_Std [read_cr3000] (%)      : num  0.0298 0.0354 0.0268 0.0366 0.0293 ... #>  $ RefDetTransB_Std [read_cr3000] (%)      : num  0.255 0.233 0.223 0.226 0.258 ... #>  $ RefDetTemp_Std [read_cr3000] (degC)     : num  0.00364 0.0032 0.00361 0.00365 0.00315 ... #>  $ RefDetCooler_Std [read_cr3000] ()       : num  0.354 0.316 0.356 0.357 0.299 ... #>  $ RefDetGainOffset_Std [read_cr3000] ()   : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ SmpDetSigA_Std [read_cr3000] (mV)       : num  0.01137 0.00519 0.00502 0.01354 0.02786 ... #>  $ SmpDetSigB_Std [read_cr3000] (mV)       : num  0.00497 0.00576 0.00366 0.00388 0.00501 ... #>  $ SmpDetTransA_Std [read_cr3000] (%)      : num  0.0214 0.00781 0.00875 0.02549 0.05127 ... #>  $ SmpDetTransB_Std [read_cr3000] (%)      : num  0.0631 0.0441 0.0564 0.0485 0.0763 ... #>  $ SmpDetTemp_Std [read_cr3000] (degC)     : num  0.00136 0.00128 0.00116 0.00148 0.00128 ... #>  $ SmpDetCooler_Std [read_cr3000] ()       : num  0.1147 0.1077 0.1009 0.1203 0.0931 ... #>  $ SmpDetGainOffset_Std [read_cr3000] ()   : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ TGATemp1DutyCycle_Std [read_cr3000] ()  : num  0.00923 0.00826 0.0119 0.00883 0.00886 ... #>  $ TGATemp2DutyCycle_Std [read_cr3000] ()  : num  0.00837 0.00978 0.00828 0.00849 0.00862 ... #>  $ SampleFlow_Std [read_cr3000] (ml_min)   : num  0.1467 0.2004 0.1747 0.0871 0.1594 ... #>  $ ExcessFlow_Std [read_cr3000] (ml_min)   : num  0.10026 0.11171 0.1207 0.00958 0.08248 ... #>  $ SamplePress_Std [read_cr3000] (mb)      : num  0.0214 0.0234 0.0199 0.0935 0.0242 ... #>  $ BypassPress_Std [read_cr3000] (mb)      : num  0.1431 0.0428 0.1358 0.4229 0.3114 ... #>  $ SampleP_control_Std [read_cr3000] ()    : num  9.05e-05 8.99e-05 7.08e-05 0.00 2.21e-04 ... #>  $ BypassP_control_Std [read_cr3000] ()    : num  1.85e-04 5.47e-05 1.52e-04 4.63e-04 3.60e-04 ... #>  $ TGAPress_control_Std [read_cr3000] ()   : num  0.000536 0.000541 0.000592 0.000525 0.000577 ... #>  $ panel_tmpr_Std [read_cr3000] (degC)     : num  0.00641 0.00222 0.00214 0.0023 0.00224 ... #>  $ batt_volt_Std [read_cr3000] (V)         : num  0.00241 0.00235 0.00224 0.00218 0.00232 ... #>  $ Li64Match_Avg(1) [read_cr3000] ()       : num  1 1 1 1 1 1 1 1 1 1 ... #>  $ Li64Match_Avg(2) [read_cr3000] ()       : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ Li64Tmpr_Avg(1) [read_cr3000] (degC)    : num  -79.2 -77.6 -81.6 -79.4 -79.7 ... #>  $ Li64Tmpr_Avg(2) [read_cr3000] (degC)    : num  NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN ... #>  $ Li64Heat_Avg(1) [read_cr3000] ()        : num  1 1 1 1 1 1 1 1 1 1 ... #>  $ Li64Heat_Avg(2) [read_cr3000] ()        : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ _Mix_diag_system_Avg [read_cr3000] ()   : num  NaN 960 960 960 960 960 960 960 960 960 ... #>  $ _Mix_ExcessZeroFlow_Avg [read_cr3000] (): num  NaN 0.42 0.379 0.441 0.411 ... #>  $ _Mix_ExcessMixFlow_Avg [read_cr3000] () : num  NaN 159 158 158 158 ... #>  $ _Mix_CO2Press_Avg [read_cr3000] ()      : num  NaN 11.4 11.4 11.4 11.4 ... #>  $ _Mix_ZeroPress_Avg [read_cr3000] ()     : num  NaN 16.5 16.5 16.5 16.5 ... #>  $ _Mix_CO2P_control_Avg [read_cr3000] ()  : num  NaN 0 0 0 0 0 0 0 0 0 ... #>  $ _Mix_ZeroP_control_Avg [read_cr3000] () : num  NaN 0 0 0 0 0 0 0 0 0 ... #>  $ _Mix_MixTmpr1_Avg [read_cr3000] ()      : num  NaN 32 32 32 32 ... #>  $ _Mix_MixTmpr2_Avg [read_cr3000] ()      : num  NaN 31.7 31.7 31.7 31.7 ... #>  $ _Mix_MixHeat1_Avg [read_cr3000] ()      : num  NaN 1 1 1 1 1 1 1 1 1 ... #>  $ _Mix_MixHeat2_Avg [read_cr3000] ()      : num  NaN 1 1 1 1 1 1 1 1 1 ... #>  $ _Mix_panel_tmpr_Avg [read_cr3000] ()    : num  NaN 24.1 24.1 24.1 24.1 ... #>  $ _Mix_batt_volt_Avg [read_cr3000] ()     : num  NaN 9.62 9.62 9.62 9.62 ... #>  $ cycle_num [calculated] (NA)             : num  1 1 1 1 1 1 1 1 1 2 ... #>  $ elapsed_time [calculated] (minutes)     : num  0 0.333 0.667 1 1.333 ..."},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c3_aci.html","id":null,"dir":"Reference","previous_headings":"","what":"Make an initial guess of FvCB model parameter values for one curve — initial_guess_c3_aci","title":"Make an initial guess of FvCB model parameter values for one curve — initial_guess_c3_aci","text":"Creates function makes initial guess FvCB model parameter values   one curve. returned function meets requirements   initial_guess_fun input argument fit_c3_aci. Values estimated guessing function considered inaccurate,   always improved upon optimizer.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c3_aci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make an initial guess of FvCB model parameter values for one curve — initial_guess_c3_aci","text":"","code":"initial_guess_c3_aci(     cc_threshold_rd = 100,     Oc = 210000,     atp_use = 4.0,     nadph_use = 8.0,     a_column_name = 'A',     cc_column_name = 'Cc',     kc_column_name = 'Kc',     ko_column_name = 'Ko',     gamma_star_column_name = 'Gamma_star',     vcmax_norm_column_name = 'Vcmax_norm',     rd_norm_column_name = 'Rd_norm',     j_norm_column_name = 'J_norm'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c3_aci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make an initial guess of FvCB model parameter values for one curve — initial_guess_c3_aci","text":"cc_threshold_rd upper cutoff value chloroplast CO2 concentration     micromol mol^(-1) used estimating Rd. Oc concentration O2 chloroplast, expressed     micromol mol^(-1). often assumed ambient value.     air measurements, 21 percent O2, 210000 ppm. low     oxygen measurements, 2 percent O2, 20000 ppm. atp_use number ATP molecules used per C3 cycle. nadph_use number NADPH molecules used per C3 cycle. a_column_name name column licor_exdf contains net     assimilation micromol m^(-2) s^(-1). cc_column_name name column exdf_obj contains     chloroplastic CO2 concentration micromol mol^(-1). kc_column_name name column exdf_obj contains     Michaelis-Menten constant rubisco carboxylation     micromol mol^(-1). ko_column_name name column exdf_obj contains     Michaelis-Menten constant rubisco oxygenation     mmol mol^(-1). gamma_star_column_name name column exdf_obj contains     Gamma_star values micromol mol^(-1). vcmax_norm_column_name name column exdf_obj contains normalized     Vcmax values (units     normalized Vcmax 25 degrees C). rd_norm_column_name name column exdf_obj contains normalized     Rd values (units normalized Rd 25 degrees C). j_norm_column_name name column exdf_obj contains normalized     J values (units normalized J 25 degrees C).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c3_aci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make an initial guess of FvCB model parameter values for one curve — initial_guess_c3_aci","text":"estimate values Rd, Vcmax, J, TPU   measured C3 CO2 response curve. information   parameters, see documentation calculate_c3_assimilation.   estimate parameter values, use several equations S. von   Caemmerer, \"Biochemical Models Leaf Photosynthesis\" (CSIRO Publishing,   2000) [doi:10.1071/9780643103405 ]. equation numbers referenced   book.  Estimating Rd: estimate Rd can obtained using           Equation 2.20. start, note term Kc * (1 + Oc / Ko)           equation typically value around 1000 ppm.           , concentration CO2 chloroplast low,           Cc + Kc * (1 + Oc / Ko) can approximated           Kc * (1 + Oc / Ko). conditions, Equation 2.20           simplifies linear relationship Ac Cc:           Ac = (Cc - Gamma_star) * Vcmax / (Kc * (1.0 + Oc / Ko)) - Rd.           Additionally, Ac = -Rd Cc = Gamma_star. ,           estimate Rd, make linear fit vs. Cc           low Cc range assimilation expected rubisco           limited linear equation expected valid. ,           evaluate linear model Cc = Gamma_star, estimating           Rd negative predicted assimilation value           point. Estimating Vcmax: estimate Vcmax can also           obtained Equation 2.20. case, simply solve           equation Vcmax use calculate value           Vcmax point curve measured values           Cc, value Rd estimated .           rubisco-limited part curve, = Ac           estimated values Vcmax reasonable. parts           curve, Ac limiting rate, < Ac.           Consequently, estimated values Vcmax parts           curve smaller. , make overall estimate, choose           largest estimated Vcmax value. Estimating J: estimate J can obtained           solving Equation 2.23 J, similar method used           estimate Vcmax. Estimating TPU: estimate TPU can obtained           solving Equation 2.26 TPU, similar method used           estimate Vcmax.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c3_aci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make an initial guess of FvCB model parameter values for one curve — initial_guess_c3_aci","text":"function one input argument rc_exdf,  exdf object representing one C3 CO2 response curve. return value   function numeric vector four elements, representing   values TPU, J, Rd, Vcmax (order)   25 degrees C.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c3_aci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make an initial guess of FvCB model parameter values for one curve — initial_guess_c3_aci","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   system.file('extdata', 'c3_aci_1.xlsx', package = 'PhotoGEA') )  # Define a new column that uniquely identifies each curve licor_file[, 'species_plot'] <-   paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )  # Organize the data licor_file <- organize_response_curve_data(     licor_file,     'species_plot',     c(9, 10, 16),     'CO2_r_sp' )  # Specify an infinite mesophyll conductance (so `Cc` = `Ci`) licor_file <- set_variable(   licor_file,   'gmc', 'mol m^(-2) s^(-1) bar^(-1)', value = Inf )  # Calculate the total pressure in the Licor chamber licor_file <- calculate_total_pressure(licor_file)  # Calculate Cc licor_file <- apply_gm(licor_file)  # Calculate temperature-dependent values of C3 photosynthetic parameters licor_file <- calculate_arrhenius(licor_file, c3_arrhenius_bernacchi)  # Create the guessing function guessing_func <- initial_guess_c3_aci()  # Apply it and see the initial guesses for each curve str(by(licor_file, licor_file[, 'species_plot'], guessing_func)) #> List of 3 #>  $ soybean - 5a: num [1:4] 19.739 208.981 0.439 177.739 #>  $ tobacco - 1 : num [1:4] 23.403 247.436 0.816 171.186 #>  $ tobacco - 2 : num [1:4] 22.423 220.466 0.751 159.862  # Calculate simulated A-Ci curves based on the guesses and compare them to the # actual data calculated_aci <- do.call(rbind, by(   licor_file,   licor_file[, 'species_plot'],   function(x) {     param <- guessing_func(x)     calculate_c3_assimilation(x, param[1], param[2], param[3], param[4])   } ))  lattice::xyplot(   Ac + Aj + Ap + An + A ~ Cc | species_plot,   data = cbind(licor_file, calculated_aci)$main_data,   type = 'b',   auto = TRUE,   grid = TRUE )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c4_aci.html","id":null,"dir":"Reference","previous_headings":"","what":"Make an initial guess of C4 photosynthesis parameter values for one curve — initial_guess_c4_aci","title":"Make an initial guess of C4 photosynthesis parameter values for one curve — initial_guess_c4_aci","text":"Creates function makes initial guess C4 photosynthesis model   parameter values one curve. returned function meets requirements   initial_guess_fun input argument fit_c4_aci. Values estimated guessing function considered inaccurate,   always improved upon optimizer.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c4_aci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make an initial guess of C4 photosynthesis parameter values for one curve — initial_guess_c4_aci","text":"","code":"initial_guess_c4_aci(     pcm_threshold_rm = 100,     gbs = 0.003,     Rm_frac = 0.5,     a_column_name = 'A',     pcm_column_name = 'PCm',     kp_column_name = 'Kp',     rd_norm_column_name = 'Rd_norm',     vcmax_norm_column_name = 'Vcmax_norm',     vpmax_norm_column_name = 'Vpmax_norm'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c4_aci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make an initial guess of C4 photosynthesis parameter values for one curve — initial_guess_c4_aci","text":"pcm_threshold_rm upper cutoff value partial pressure CO2 mesophyll (    microbar) used estimating Rm. gbs bundle sheath conductance CO2 mol m^(-2) s^(-1) bar^(-1). Rm_frac fraction total mitochondrial respiration occurs     mesophyll. a_column_name name column licor_exdf contains net     assimilation micromol m^(-2) s^(-1). pcm_column_name name column exdf_obj contains partial pressure     CO2 mesophyll, expressed microbar. kp_column_name name column exdf_obj contains Michaelis-Menten     constant PEP carboxylase carboxylation microbar. rd_norm_column_name name column exdf_obj contains normalized     Rd values (units normalized Rd 25 degrees C). vcmax_norm_column_name name column exdf_obj contains normalized     Vcmax values (units     normalized Vcmax 25 degrees C). vpmax_norm_column_name name column exdf_obj contains normalized     Vpmax values (units     normalized Vpmax 25 degrees C).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c4_aci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make an initial guess of C4 photosynthesis parameter values for one curve — initial_guess_c4_aci","text":"estimate values Rd, Vcmax, Vpmax,   Vpr measured C4 CO2 response curve. information   parameters, see documentation   calculate_c4_assimilation. estimate parameter values,   use several equations S. von Caemmerer, \"Biochemical Models Leaf   Photosynthesis\" (CSIRO Publishing, 2000) [doi:10.1071/9780643103405 ].   equation numbers referenced book.  Estimating Rd: estimate Rm can obtained           using Equation 4.26, applies low values PCm.           situation, PCm + Kp can approximated Kp,           Equation 4.26 simplifies linear relationship net           assimilation PCm: =           (gbs + Vpmax / kP) * PCm - Rm. , estimate Rm, make           linear fit vs. PCm low PCm range           equation expected valid. Rm given           negative intercept fit. C4 assimilation           model, assume Rm = Rm_frac * Rd, can also           estimate Rd = Rm / Rm_frac value. Estimating Vpmax: estimate Vpmax can also           obtained Equation 4.26. case, simply solve           equation Vpmax use calculate value           Vpmax point curve measured values           PCm, input value gbs, value           Rm estimated . PEP-carboxylation-limited range,           estimated values Vpmax reasonable.           parts curve, assimilation rate limited factors,           smaller PEP-carboxylation-limited           values, causing estimated values Vpmax smaller.           , make overall estimate, choose largest estimated           Vpmax value. Estimating Vcmax: estimate Vcmax can           obtained solving = Vcmax - Rd Vcmax, similar           method used estimate Vpmax. Estimating Vpr: estimate Vpr can           obtained solving = Vpr + gbs * PCm - Rm Vpr,           similar method used estimate Vpmax. Note key assumption underlying approach net   assimilation can reasonably approximated = min(Apc, Apr, Ar)   (Equation 4.25). approximation seems work well low values   PCm, tends deviate significantly accurate version   (Equation 4.21) higher values PCm, predicting values   noticably smaller. Thus, values Vcmax Vpr estimated   using procedure unlikely accurate. problem;   instead simply highlights importance improving initial guess   using optimizer, can accomplished via fit_c4_aci.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c4_aci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make an initial guess of C4 photosynthesis parameter values for one curve — initial_guess_c4_aci","text":"function one input argument rc_exdf,  exdf object representing one C4 CO2 response curve. return value   function numeric vector four elements, representing   values Rd, Vcmax, Vpmax, Vpr (  order) 25 degrees C.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c4_aci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make an initial guess of C4 photosynthesis parameter values for one curve — initial_guess_c4_aci","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   system.file('extdata', 'c4_aci_1.xlsx', package = 'PhotoGEA') )  # Define a new column that uniquely identifies each curve licor_file[, 'species_plot'] <-   paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )  # Organize the data licor_file <- organize_response_curve_data(     licor_file,     'species_plot',     c(9, 10, 16),     'CO2_r_sp' )  # Calculate temperature-dependent values of C4 photosynthetic parameters licor_file <- calculate_arrhenius(licor_file, c4_arrhenius_von_caemmerer)  # Calculate the total pressure in the Licor chamber licor_file <- calculate_total_pressure(licor_file)  # Calculate PCm licor_file <- apply_gm(licor_file, 'C4')  # Create the guessing function guessing_func <- initial_guess_c4_aci()  # Apply it and see the initial guesses for each curve str(by(licor_file, licor_file[, 'species_plot'], guessing_func)) #> List of 3 #>  $ maize - 5  : num [1:4] -12 26.5 125.4 54.8 #>  $ sorghum - 2: num [1:4] -6.81 35.79 145.14 62.94 #>  $ sorghum - 3: num [1:4] -10.8 27.4 86.1 58.6  # Calculate simulated A-Ci curves based on the guesses and compare them to the # actual data calculated_aci <- do.call(rbind, by(   licor_file,   licor_file[, 'species_plot'],   function(x) {     param <- guessing_func(x)     calculate_c4_assimilation(x, param[1], param[2], param[3], param[4])   } ))  lattice::xyplot(   Apr + Apc + Ar + An + A ~ PCm | species_plot,   data = cbind(licor_file, calculated_aci)$main_data,   type = 'b',   auto = TRUE,   grid = TRUE )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/is.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Is an object an exdf? — is.exdf","title":"Is an object an exdf? — is.exdf","text":"Checks whether object exdf object.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/is.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is an object an exdf? — is.exdf","text":"","code":"is.exdf(x, consistency_check = FALSE)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/is.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is an object an exdf? — is.exdf","text":"x R object. consistency_check logical value indicating whether perform additional consistency checks.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/is.exdf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Is an object an exdf? — is.exdf","text":"default version .exdf simply checks see 'exdf'   class(x). consistency_check TRUE, additional checks   performed make sure object three elements named main_data,   units, categories; elements data frames   column names; units categories   one row. requirements part definition exdf   object, checks require additional time always   desired.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/is.exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is an object an exdf? — is.exdf","text":"logical (TRUE / FALSE) value indicating whether object exdf object.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/is.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is an object an exdf? — is.exdf","text":"","code":"# Test a simple exdf object simple_exdf <- exdf(data.frame(A = 1), data.frame(A = 'u'), data.frame(A = 'c')) is.exdf(simple_exdf) #> [1] TRUE is.exdf(simple_exdf, TRUE) #> [1] TRUE  # Test an object that is clearly not an exdf not_an_exdf <- 2 is.exdf(not_an_exdf) #> [1] FALSE is.exdf(not_an_exdf, TRUE) #> [1] FALSE  # Test an object that claims to be an exdf but does not meet all of the # requirements fake_exdf <- not_an_exdf class(fake_exdf) <- c('exdf', class(fake_exdf)) is.exdf(fake_exdf) #> [1] TRUE is.exdf(fake_exdf, TRUE) #> Warning: x must have elements named `main_data`, `units`, and `categories` #> [1] FALSE"},{"path":"https://eloch216.github.io/PhotoGEA/reference/length.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Length of an exdf object — length.exdf","title":"Length of an exdf object — length.exdf","text":"Returns length exdf object's main_data.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/length.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Length of an exdf object — length.exdf","text":"","code":"# S3 method for exdf length(x)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/length.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Length of an exdf object — length.exdf","text":"x exdf object.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/length.exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Length of an exdf object — length.exdf","text":"Returns length(x[['main_data']]).","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/length.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Length of an exdf object — length.exdf","text":"","code":"simple_exdf <- exdf(data.frame(A = 1), data.frame(A = 'u'), data.frame(A = 'c')) length(simple_exdf) #> [1] 1 length(simple_exdf[['main_data']]) # An equivalent command #> [1] 1"},{"path":"https://eloch216.github.io/PhotoGEA/reference/multi_curve_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Set of colors for plotting multiple curves — multi_curve_colors","title":"Set of colors for plotting multiple curves — multi_curve_colors","text":"set color specifications work reasonably well plotting multiple   curves axes.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/multi_curve_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set of colors for plotting multiple curves — multi_curve_colors","text":"","code":"multi_curve_colors()"},{"path":"https://eloch216.github.io/PhotoGEA/reference/multi_curve_colors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set of colors for plotting multiple curves — multi_curve_colors","text":"color set originally formed calling following: multi_curve_colors <- c(       \"#000000\",       RColorBrewer::brewer.pal(8, \"Set2\"),       RColorBrewer::brewer.pal(12, \"Paired\")[c(1:10,12)],       RColorBrewer::brewer.pal(8, \"Dark2\")   )","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/multi_curve_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set of colors for plotting multiple curves — multi_curve_colors","text":"character vector 28 elements, hexadecimal color   specification.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/organize_response_curve_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Check response curve data for common issues — organize_response_curve_data","title":"Check response curve data for common issues — organize_response_curve_data","text":"Checks make sure exdf object representing response curve data   expected number rows contain infinite values.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/organize_response_curve_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check response curve data for common issues — organize_response_curve_data","text":"","code":"organize_response_curve_data(     licor_exdf,     identifier_columns,     measurement_numbers_to_remove,     column_for_ordering,     ordering_column_tolerance = Inf   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/organize_response_curve_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check response curve data for common issues — organize_response_curve_data","text":"licor_exdf exdf object representing response curve data Licor gas     exchange measurement system. identifier_columns vector list strings representing names columns     licor_exdf , taken together, uniquely identify curve.     often includes names like plot, event, replicate, etc. measurement_numbers_to_remove vector integers specifying points remove curve;     example, curve 16 points 10^th^ 11^th^ points along     sequence included subsequent analysis,     measurement_numbers_to_remove specified c(10, 11). column_for_ordering name column systematically varied produce curve;     example, light response curve, typically Qin. ordering_column_tolerance passed check_licor_data     driving_column_tolerance input argument;     ordering_column_tolerance can set Inf disable     check.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/organize_response_curve_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check response curve data for common issues — organize_response_curve_data","text":"exdf object consisting multiple response curves can   identified using values identifier_columns, function   performs following actions: Assigns sequential number measurement curve,           beginning 1; words, first point curve           given number 1, second given number 2, etc. numbers           stored new column called seq_num. Extracts subset data corresponding values           seq_num measurement_numbers_to_remove;           often helpful -Ci curves, CO~2~ concentration begins           ambient value, decreased low value, reset           atmospheric several measurements allow plant           reacclimate, increased higher values. case,           first measurement ambient CO~2~ used plotting           additional analysis. Reorders data according ascending values           column_for_ordering. example, points -Ci curve           ordered according Ci values curve measured           using sequence described . can cause issues making           line plots, may convenient reorder according           Ci values. performing operations, function checks make sure   identifier_columns specify response curves (1)   number points (2) column_for_ordering follows   sequence values curve (within tolerance set   ordering_column_tolerance). check accomplished via   check_licor_data, treating column_for_ordering   driving_column.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/organize_response_curve_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check response curve data for common issues — organize_response_curve_data","text":"exdf object based licor_exdf processed described   .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/organize_response_curve_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check response curve data for common issues — organize_response_curve_data","text":"","code":"# Read an example Licor file included in the PhotoGEA package and organize it. # This file includes several 7-point light-response curves that can be uniquely # identified by the values of its 'species' and 'plot' columns. Since these are # light-response curves, each one follows a pre-set sequence of `Qin` values. licor_file <- read_gasex_file(   system.file('extdata', 'ball_berry_1.xlsx', package = 'PhotoGEA') )  # Split the data into individual curves, keep all seven measurement points in # each curve, and order them by their incident light values (since these are # light response curves). The curves were measured from high to low values of # `Qin`, so after organizing the curves, their order will be reversed from the # original version. licor_file <- organize_response_curve_data(   licor_file,   c('species', 'plot'),   c(),   'Qin' )  # View a subset of the data, including the new `seq_num` column print(licor_file[, c('species', 'plot', 'seq_num', 'Qin', 'A'), TRUE]) #>    species [UserDefCon] (NA) plot [UserDefCon] (NA) seq_num [NA] (NA) #> 1                    soybean                     1a                 7 #> 2                    soybean                     1a                 6 #> 3                    soybean                     1a                 5 #> 4                    soybean                     1a                 4 #> 5                    soybean                     1a                 3 #> 6                    soybean                     1a                 2 #> 7                    soybean                     1a                 1 #> 8                    soybean                     1b                 7 #> 9                    soybean                     1b                 6 #> 10                   soybean                     1b                 5 #> 11                   soybean                     1b                 4 #> 12                   soybean                     1b                 3 #> 13                   soybean                     1b                 2 #> 14                   soybean                     1b                 1 #> 15                   tobacco                      2                 7 #> 16                   tobacco                      2                 6 #> 17                   tobacco                      2                 5 #> 18                   tobacco                      2                 4 #> 19                   tobacco                      2                 3 #> 20                   tobacco                      2                 2 #> 21                   tobacco                      2                 1 #> 22                   soybean                      5                 7 #> 23                   soybean                      5                 6 #> 24                   soybean                      5                 5 #> 25                   soybean                      5                 4 #> 26                   soybean                      5                 3 #> 27                   soybean                      5                 2 #> 28                   soybean                      5                 1 #>    Qin [LeafQ] (micromol m^(-2) s^(-1)) A [GasEx] (micromol m^(-2) s^(-1)) #> 1                               200.141                           5.679174 #> 2                               350.106                          12.240074 #> 3                               500.135                          16.617929 #> 4                               649.951                          23.290614 #> 5                               799.983                          25.430106 #> 6                              1099.800                          22.996635 #> 7                              2000.030                          35.400473 #> 8                               200.070                           9.276031 #> 9                               350.060                          14.666531 #> 10                              499.982                          17.009070 #> 11                              650.070                          26.383035 #> 12                              799.873                          25.472460 #> 13                             1099.890                          30.250627 #> 14                             1999.850                          47.950460 #> 15                              200.236                           7.849870 #> 16                              350.073                          12.044692 #> 17                              500.036                          12.106347 #> 18                              650.001                          16.345888 #> 19                              800.046                          22.218165 #> 20                             1099.980                          25.492278 #> 21                             2000.020                          29.614535 #> 22                              200.029                          10.768250 #> 23                              349.991                          17.091593 #> 24                              499.921                          22.068194 #> 25                              650.108                          22.924484 #> 26                              799.910                          32.769396 #> 27                             1099.960                          36.218245 #> 28                             1999.980                          45.780746"},{"path":"https://eloch216.github.io/PhotoGEA/reference/print.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the contents of an exdf object — print.exdf","title":"Print the contents of an exdf object — print.exdf","text":"Prints contents exdf object's main_data. column   described name, unit, category formatted like   name [category] (units).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/print.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the contents of an exdf object — print.exdf","text":"","code":"# S3 method for exdf print(x, ...)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/print.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the contents of an exdf object — print.exdf","text":"x exdf object. ... Additional arguments passed print.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/print.exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the contents of an exdf object — print.exdf","text":"None.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/print.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print the contents of an exdf object — print.exdf","text":"","code":"simple_exdf <- exdf(data.frame(A = 1), data.frame(A = 'u'), data.frame(A = 'c')) print(simple_exdf) #>   A [c] (u) #> 1         1"},{"path":"https://eloch216.github.io/PhotoGEA/reference/process_tdl_cycle_erml.html","id":null,"dir":"Reference","previous_headings":"","what":"Process cycles from the ERML TDL — process_tdl_cycle_erml","title":"Process cycles from the ERML TDL — process_tdl_cycle_erml","text":"Uses 12C 13C signal calibration lines tunable diode   laser (TDL) determine correction factors apply sample   lines. Applicable system NOAA calibration tank, nitrogen tank,   three lines mixing nitrogen CO2 tank different ratios.   function designed specifically TDL operating Carl   Bernacchi's lab Edward R. Madigan Laboratory (ERML) University   Illinois, Urbana-Champaign.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/process_tdl_cycle_erml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process cycles from the ERML TDL — process_tdl_cycle_erml","text":"","code":"process_tdl_cycle_erml(     tdl_cycle,     valve_column_name,     noaa_valve,     calibration_0_valve,     calibration_1_valve,     calibration_2_valve,     calibration_3_valve,     raw_12c_colname,     raw_13c_colname,     noaa_cylinder_co2_concentration,     noaa_cylinder_isotope_ratio,     calibration_isotope_ratio,     f_other,     R_VPDB   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/process_tdl_cycle_erml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process cycles from the ERML TDL — process_tdl_cycle_erml","text":"tdl_cycle exdf object representing one cycle TDL data. valve_column_name name column tdl_cycle contains valve number;     typically, 'valve_number'. noaa_valve valve number corresponds NOAA reference cylinder. calibration_0_valve valve number corresponds calibration valve 0 (nitrogen     cylinder). calibration_1_valve valve number corresponds calibration valve 1 (mixture     nitrogen gas calibrated CO2 source). calibration_2_valve valve number corresponds calibration valve 2 (mixture     nitrogen gas calibrated CO2 source). calibration_3_valve valve number corresponds calibration valve 3 (mixture     nitrogen gas calibrated CO2 source). raw_12c_colname name column tdl_cycle contains 12C signal;     typically, 'Conc12C_Avg'. raw_13c_colname name column tdl_cycle contains 13C signal;     typically, 'Conc13C_Avg'. noaa_cylinder_co2_concentration total CO2 concentration NOAA calibration cylinder ppm;     includes carbon species, 12C18O18O. noaa_cylinder_isotope_ratio isotope ratio NOAA calibration cylinder ppt. calibration_isotope_ratio isotope ratio CO2 cylinder ppt. f_other fraction CO2 13C16O16O 12C16O16O. R_VPDB Vienna Pee Dee Belemnite reference value.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/process_tdl_cycle_erml.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process cycles from the ERML TDL — process_tdl_cycle_erml","text":"function applies several corrections data tdl_cycle: First, 12C 13C signals nitrogen line considered           additive offsets data. values subtracted           measured 12C 13C signals produce \"zero-corrected\" values. zero-corrected 12C signal NOAA calibration line           assumed related true 12C concentration line           multiplicative \"gain\" factor. factor calculated using           known values NOAA cylinder's CO2 concentration isotope           ratio, applied zero-corrected 12C signals get           \"calibrated\" 12C concentrations. true 13C concentration calibration lines 0-3 can determined           calibrated 12C concentration measurements known           isotope ratio calibration tank. true concentrations can           compared measured zero-corrected 13C signals develop           correction function. perform third-order polynomial fit           expected vs. measured 13C values. (Four data points used           fit.) fit result can used convert zero-corrected           13C signals \"calibrated\" 13C concentrations. equations ? references cite? function assumes tdl_cycle represents single TDL   measurement cycle. process multiple cycles , function often   used along .exdf consolidate.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/process_tdl_cycle_erml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process cycles from the ERML TDL — process_tdl_cycle_erml","text":"list five elements:  tdl_data: exdf object containing original content           tdl_cycle several new columns:           'zero_corrected_12c', 'zero_corrected_13c',           'calibrated_12c', 'calibrated_13c',           'total_mixing_ratio', 'total_isotope_ratio'. calibration_zero: exdf object describing values           used calculate zero-corrected 12C 13C signals. calibration_12CO2: exdf object describing gain           factor used calculate calibrated 12C signal. calibration_13CO2_data: exdf object describing           data used polynomial fit expected vs. measured 13C signals           calibration valves 0-3. calibration_13CO2_fit: exdf object describing           results polynomial fitting procedure.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/process_tdl_cycle_erml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process cycles from the ERML TDL — process_tdl_cycle_erml","text":"","code":"# Example: reading a TDL file that is included with the PhotoGEA package, # identifying its measurement cycles, and then process them. tdl_file <- read_gasex_file(   system.file(\"extdata\", \"tdl_sampling_1.dat\", package = \"PhotoGEA\"),   'TIMESTAMP' )  tdl_file <- identify_tdl_cycles(   tdl_file,   valve_column_name = 'valve_number',   cycle_start_valve = 20,   expected_cycle_length_minutes = 2.7,   expected_cycle_num_valves = 9,   timestamp_colname = 'TIMESTAMP' )  processed_tdl <- consolidate(by(   tdl_file,   tdl_file[, 'cycle_num'],   process_tdl_cycle_erml,   valve_column_name = 'valve_number',   noaa_valve = 2,   calibration_0_valve = 20,   calibration_1_valve = 21,   calibration_2_valve = 23,   calibration_3_valve = 26,   raw_12c_colname = 'Conc12C_Avg',   raw_13c_colname = 'Conc13C_Avg',   noaa_cylinder_co2_concentration = 294.996,   noaa_cylinder_isotope_ratio = -8.40,   calibration_isotope_ratio = -11.505,   f_other = 0.00474,   R_VPDB = 0.0111797 ))  # Make a plot of the raw and calibrated 13C signals across all the TDL cycles. # Note that the calibrated signal from valve 20 is always exactly zero, since # this is the line from the nitrogen tank. The calibrated signal from valve 2 is # also constant since this is the line from the NOAA tank whose concentration is # known. lattice::xyplot(   Conc13C_Avg + calibrated_13c ~ cycle_num | factor(valve_number),   data = processed_tdl$tdl_data$main_data,   type = 'l',   auto = TRUE,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('13C concentration (', processed_tdl$tdl_data$units$Conc13C_Avg, ')') )   # Make a plot of 12C gain factor against elapsed time lattice::xyplot(   gain_12CO2 ~ elapsed_time,   data = processed_tdl$calibration_12CO2$main_data,   type = 'b',   pch = 16,   grid = TRUE,   xlab = paste0('Elapsed time (', processed_tdl$calibration_12CO2$units$elapsed_time, ')'),   ylab = paste0('12C gain factor (', processed_tdl$calibration_12CO2$units$gain_12CO2, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/process_tdl_cycle_polynomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Process cycles from the ERML TDL — process_tdl_cycle_polynomial","title":"Process cycles from the ERML TDL — process_tdl_cycle_polynomial","text":"Uses 12C 13C signal calibration lines tunable diode   laser (TDL) determine correction factors apply sample   lines. Applicable system two reference tanks whose 12C   13C concentrations known beforehand.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/process_tdl_cycle_polynomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process cycles from the ERML TDL — process_tdl_cycle_polynomial","text":"","code":"process_tdl_cycle_polynomial(     tdl_cycle,     poly_order,     reference_tanks,     reference_tank_time_points = NA,     f_other = 0.00474,     R_VPDB = 0.0111797,     valve_column_name = 'valve_number',     raw_12c_colname = 'Conc12C_Avg',     raw_13c_colname = 'Conc13C_Avg'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/process_tdl_cycle_polynomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process cycles from the ERML TDL — process_tdl_cycle_polynomial","text":"tdl_cycle exdf object representing one cycle TDL data. poly_order order polynomial fit, 1 indicates linear fit, 2     indicates quadratic fit, etc. argument passed     stats::poly fitting procedure. reference_tanks list element list three named elements: valve,     conc_12C, conc_13C. valve indicate valve     number reference tank, two elements indicate     known concentrations 12C 13C tank. reference_tank_time_points Either NA list element list three named     elements: valve, start, end. valve     indicate valve number reference tank, two elements     indicate first last time points measurements     valve averaged. order valves must     reference_tanks input argument. f_other fraction CO2 13C16O16O 12C16O16O. R_VPDB Vienna Pee Dee Belemnite reference value. valve_column_name name column tdl_cycle contains valve number. raw_12c_colname name column tdl_cycle contains 12C signal. raw_13c_colname name column tdl_cycle contains 13C signal.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/process_tdl_cycle_polynomial.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process cycles from the ERML TDL — process_tdl_cycle_polynomial","text":"function applies simple correction measured values 12C   13C. correction based fact reference tank   true concentration (known beforehand) measured concentration   (TDL) isotope. Using information, possible   perform polynomial fit true vs. measured concentrations; words,   possible identify polynomial function determines true   concentrations measured ones. function can applied tanks   whose concentration known beforehand; case, provides   estimate true concentration, otherwise referred calibrated   value. making dynamic TDL measurements, concentrations   reference valves may logged multiple time points. case,   typical take average value subset .   process_tdl_cycle_polynomial can handle situation   reference_tank_time_points input argument NA. function assumes tdl_cycle represents single TDL   measurement cycle. process multiple cycles , function often   used along .exdf consolidate.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/process_tdl_cycle_polynomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process cycles from the ERML TDL — process_tdl_cycle_polynomial","text":"list two elements:  tdl_data: exdf object containing original content           tdl_cycle several new columns:           'calibrated_12c', 'calibrated_13c',           'total_mixing_ratio', 'total_isotope_ratio'. calibration_parameters: exdf object describing           fitted polynomial coefficients.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/process_tdl_cycle_polynomial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process cycles from the ERML TDL — process_tdl_cycle_polynomial","text":"","code":"# An example of a `reference_tank_time_points` list for a situation where there # are just two reference valves (1 and 3) reference_tank_time_points = list(   list(valve = 1, start = 101, end = 300), # Take an average of time points 101 - 300 for valve 1   list(valve = 3, start = 201, end = 300)  # Take an average of time points 201 - 300 for valve 3 )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_cr3000.html","id":null,"dir":"Reference","previous_headings":"","what":"Reading a CR3000 data file — read_cr3000","title":"Reading a CR3000 data file — read_cr3000","text":"Tool reading output files created Campbell Scientific CR3000 data   loggers storing contents exdf objects.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_cr3000.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reading a CR3000 data file — read_cr3000","text":"","code":"read_cr3000(     file_name,     rows_to_skip = 1,     variable_name_row = 2,     variable_unit_row = 3,     data_start_row = 5,     ...   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_cr3000.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reading a CR3000 data file — read_cr3000","text":"file_name relative absolute path .dat file containing TDL data. rows_to_skip number rows skip beginning file; first row     TDL file typically fewer columns others, causes problems     storing table. variable_name_row row number TDL file containing names variables     (RECORD, Conc12C_Avg, etc). variable_unit_row row number TDL file containing units variables     (ppm, V, etc). data_start_row first row number table containing measured data. ... Additional arguments; currently unused.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_cr3000.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reading a CR3000 data file — read_cr3000","text":"exdf object fully includes data CR3000 output   file. addition elements described documentation  read_gasex_file, following \"extra\" elements also   included:  rows_to_skip: copy input argument name variable_name_row: copy input argument           name. variable_unit_row: copy input argument           name. data_start_row: copy input argument           name.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_cr3000.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reading a CR3000 data file — read_cr3000","text":"","code":"# Example: reading a TDL file that is included with the PhotoGEA package. tdl_file <- PhotoGEA:::read_cr3000(   system.file(\"extdata\", \"tdl_sampling_1.dat\", package = \"PhotoGEA\") )  tdl_file$file_name # A record of where the data came from #> NULL str(tdl_file)      # View the contents of the exdf object's main_data #> 'data.frame':\t922 obs. of  97 variables: #>  $ TIMESTAMP [read_cr3000] (TS)            : chr  \"2022-07-12 06:12:43\" \"2022-07-12 06:13:03\" \"2022-07-12 06:13:23\" \"2022-07-12 06:13:43\" ... #>  $ RECORD [read_cr3000] (RN)               : num  0 1 2 3 4 5 6 7 8 9 ... #>  $ valve_number [read_cr3000] ()           : num  20 21 23 26 2 10 11 12 13 20 ... #>  $ diag_system_Avg [read_cr3000] ()        : num  128 128 128 132 128 128 128 128 128 128 ... #>  $ NumSamples [read_cr3000] ()             : num  100 100 100 100 100 100 100 100 100 100 ... #>  $ Conc12C_Avg [read_cr3000] (ppm)         : num  2.9 68.8 311.9 1022.5 294.3 ... #>  $ Conc13C_Avg [read_cr3000] (ppm)         : num  0.132 0.847 3.481 11.114 3.299 ... #>  $ TGAStatus_Avg [read_cr3000] ()          : num  96 96 96 96 96 96 96 96 96 96 ... #>  $ TGAPressure_Avg [read_cr3000] (mb)      : num  30 30 30 30 30 ... #>  $ LaserTemp_Avg [read_cr3000] (degC)      : num  -4 -4 -4 -4 -4 ... #>  $ DCCurrentA_Avg [read_cr3000] (mA)       : num  50.4 50.4 50.4 50.4 50.4 ... #>  $ DCCurrentB_Avg [read_cr3000] (mA)       : num  38.9 38.9 38.9 38.9 38.9 ... #>  $ TGAAnalog1_Avg [read_cr3000] (V)        : num  0.0244 0.0244 0.0244 0.0244 0.0244 ... #>  $ TGATemp1_Avg [read_cr3000] (degC)       : num  30 30 30 30 30 ... #>  $ TGATemp2_Avg [read_cr3000] (degC)       : num  30 30 30 30 30 ... #>  $ LaserCooler_Avg [read_cr3000] (V)       : num  2.02 2.02 2.02 2.02 2.02 ... #>  $ RefDetSigA_Avg [read_cr3000] (mV)       : num  2.48 2.48 2.48 2.48 2.48 ... #>  $ RefDetSigB_Avg [read_cr3000] (mV)       : num  0.503 0.503 0.502 0.502 0.502 ... #>  $ RefDetTransA_Avg [read_cr3000] (%)      : num  41.2 41.2 41.1 41.1 41.1 ... #>  $ RefDetTransB_Avg [read_cr3000] (%)      : num  54.8 54.8 54.7 54.7 54.7 ... #>  $ RefDetTemp_Avg [read_cr3000] (degC)     : num  -35 -35 -35 -35 -35 ... #>  $ RefDetCooler_Avg [read_cr3000] ()       : num  1461 1461 1461 1461 1461 ... #>  $ RefDetGainOffset_Avg [read_cr3000] ()   : num  8217 8217 8217 8217 8217 ... #>  $ SmpDetSigA_Avg [read_cr3000] (mV)       : num  57.8 56.5 51.6 39.8 52 ... #>  $ SmpDetSigB_Avg [read_cr3000] (mV)       : num  10.08 9.88 9.17 7.38 9.22 ... #>  $ SmpDetTransA_Avg [read_cr3000] (%)      : num  99.8 97.4 89.2 68.8 89.8 ... #>  $ SmpDetTransB_Avg [read_cr3000] (%)      : num  114.4 112.2 104.2 84.2 104.8 ... #>  $ SmpDetTemp_Avg [read_cr3000] (degC)     : num  -39 -39 -39 -39 -39 ... #>  $ SmpDetCooler_Avg [read_cr3000] ()       : num  1449 1449 1449 1449 1449 ... #>  $ SmpDetGainOffset_Avg [read_cr3000] ()   : num  8456 8456 8456 8456 8456 ... #>  $ TGATemp1DutyCycle_Avg [read_cr3000] ()  : num  0.13 0.121 0.132 0.129 0.138 ... #>  $ TGATemp2DutyCycle_Avg [read_cr3000] ()  : num  0.0601 0.077 0.0677 0.0676 0.0649 ... #>  $ SampleFlow_Avg [read_cr3000] (ml_min)   : num  167 167 167 164 162 ... #>  $ ExcessFlow_Avg [read_cr3000] (ml_min)   : num  95.77 105.457 140.852 0.123 53.341 ... #>  $ SamplePress_Avg [read_cr3000] (mb)      : num  400 400 400 396 400 ... #>  $ BypassPress_Avg [read_cr3000] (mb)      : num  400 400 400 400 400 ... #>  $ SampleP_control_Avg [read_cr3000] ()    : num  0.4 0.404 0.414 0.2 0.385 ... #>  $ BypassP_control_Avg [read_cr3000] ()    : num  0.477 0.475 0.471 0.484 0.496 ... #>  $ TGAPress_control_Avg [read_cr3000] ()   : num  0.528 0.529 0.53 0.53 0.53 ... #>  $ panel_tmpr_Avg [read_cr3000] (degC)     : num  24.7 24.7 24.7 24.7 24.7 ... #>  $ batt_volt_Avg [read_cr3000] (V)         : num  11.8 11.8 11.8 11.8 11.8 ... #>  $ buff_depth_Max [read_cr3000] ()         : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ Conc12C_Std [read_cr3000] (ppm)         : num  0.5244 0.0946 0.2025 1.1064 1.5535 ... #>  $ Conc13C_Std [read_cr3000] (ppm)         : num  0.00797 0.00637 0.00849 0.02317 0.018 ... #>  $ TGAStatus_Std [read_cr3000] ()          : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ TGAPressure_Std [read_cr3000] (mb)      : num  0.0101 0.0105 0.0115 0.0102 0.0112 ... #>  $ LaserTemp_Std [read_cr3000] (degC)      : num  0.000244 0.000289 0.000272 0.000287 0.00025 ... #>  $ DCCurrentA_Std [read_cr3000] (mA)       : num  0.000454 0.0006 0.000338 0.000492 0.000503 ... #>  $ DCCurrentB_Std [read_cr3000] (mA)       : num  0.000677 0.000844 0.00061 0.000753 0.000625 ... #>  $ TGAAnalog1_Std [read_cr3000] (V)        : num  1.56e-05 1.39e-05 1.31e-05 1.30e-05 1.31e-05 ... #>  $ TGATemp1_Std [read_cr3000] (degC)       : num  0.000994 0.00121 0.003558 0.001737 0.001128 ... #>  $ TGATemp2_Std [read_cr3000] (degC)       : num  0.00215 0.00137 0.00141 0.00126 0.00227 ... #>  $ LaserCooler_Std [read_cr3000] (V)       : num  0.000293 0.000347 0.000326 0.000345 0.000301 ... #>  $ RefDetSigA_Std [read_cr3000] (mV)       : num  0.00155 0.00185 0.00155 0.00199 0.00154 ... #>  $ RefDetSigB_Std [read_cr3000] (mV)       : num  0.00169 0.00148 0.00145 0.0015 0.00188 ... #>  $ RefDetTransA_Std [read_cr3000] (%)      : num  0.0298 0.0354 0.0268 0.0366 0.0293 ... #>  $ RefDetTransB_Std [read_cr3000] (%)      : num  0.255 0.233 0.223 0.226 0.258 ... #>  $ RefDetTemp_Std [read_cr3000] (degC)     : num  0.00364 0.0032 0.00361 0.00365 0.00315 ... #>  $ RefDetCooler_Std [read_cr3000] ()       : num  0.354 0.316 0.356 0.357 0.299 ... #>  $ RefDetGainOffset_Std [read_cr3000] ()   : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ SmpDetSigA_Std [read_cr3000] (mV)       : num  0.01137 0.00519 0.00502 0.01354 0.02786 ... #>  $ SmpDetSigB_Std [read_cr3000] (mV)       : num  0.00497 0.00576 0.00366 0.00388 0.00501 ... #>  $ SmpDetTransA_Std [read_cr3000] (%)      : num  0.0214 0.00781 0.00875 0.02549 0.05127 ... #>  $ SmpDetTransB_Std [read_cr3000] (%)      : num  0.0631 0.0441 0.0564 0.0485 0.0763 ... #>  $ SmpDetTemp_Std [read_cr3000] (degC)     : num  0.00136 0.00128 0.00116 0.00148 0.00128 ... #>  $ SmpDetCooler_Std [read_cr3000] ()       : num  0.1147 0.1077 0.1009 0.1203 0.0931 ... #>  $ SmpDetGainOffset_Std [read_cr3000] ()   : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ TGATemp1DutyCycle_Std [read_cr3000] ()  : num  0.00923 0.00826 0.0119 0.00883 0.00886 ... #>  $ TGATemp2DutyCycle_Std [read_cr3000] ()  : num  0.00837 0.00978 0.00828 0.00849 0.00862 ... #>  $ SampleFlow_Std [read_cr3000] (ml_min)   : num  0.1467 0.2004 0.1747 0.0871 0.1594 ... #>  $ ExcessFlow_Std [read_cr3000] (ml_min)   : num  0.10026 0.11171 0.1207 0.00958 0.08248 ... #>  $ SamplePress_Std [read_cr3000] (mb)      : num  0.0214 0.0234 0.0199 0.0935 0.0242 ... #>  $ BypassPress_Std [read_cr3000] (mb)      : num  0.1431 0.0428 0.1358 0.4229 0.3114 ... #>  $ SampleP_control_Std [read_cr3000] ()    : num  9.05e-05 8.99e-05 7.08e-05 0.00 2.21e-04 ... #>  $ BypassP_control_Std [read_cr3000] ()    : num  1.85e-04 5.47e-05 1.52e-04 4.63e-04 3.60e-04 ... #>  $ TGAPress_control_Std [read_cr3000] ()   : num  0.000536 0.000541 0.000592 0.000525 0.000577 ... #>  $ panel_tmpr_Std [read_cr3000] (degC)     : num  0.00641 0.00222 0.00214 0.0023 0.00224 ... #>  $ batt_volt_Std [read_cr3000] (V)         : num  0.00241 0.00235 0.00224 0.00218 0.00232 ... #>  $ Li64Match_Avg(1) [read_cr3000] ()       : num  1 1 1 1 1 1 1 1 1 1 ... #>  $ Li64Match_Avg(2) [read_cr3000] ()       : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ Li64Tmpr_Avg(1) [read_cr3000] (degC)    : num  -79.2 -77.6 -81.6 -79.4 -79.7 ... #>  $ Li64Tmpr_Avg(2) [read_cr3000] (degC)    : num  NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN ... #>  $ Li64Heat_Avg(1) [read_cr3000] ()        : num  1 1 1 1 1 1 1 1 1 1 ... #>  $ Li64Heat_Avg(2) [read_cr3000] ()        : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ _Mix_diag_system_Avg [read_cr3000] ()   : num  NaN 960 960 960 960 960 960 960 960 960 ... #>  $ _Mix_ExcessZeroFlow_Avg [read_cr3000] (): num  NaN 0.42 0.379 0.441 0.411 ... #>  $ _Mix_ExcessMixFlow_Avg [read_cr3000] () : num  NaN 159 158 158 158 ... #>  $ _Mix_CO2Press_Avg [read_cr3000] ()      : num  NaN 11.4 11.4 11.4 11.4 ... #>  $ _Mix_ZeroPress_Avg [read_cr3000] ()     : num  NaN 16.5 16.5 16.5 16.5 ... #>  $ _Mix_CO2P_control_Avg [read_cr3000] ()  : num  NaN 0 0 0 0 0 0 0 0 0 ... #>  $ _Mix_ZeroP_control_Avg [read_cr3000] () : num  NaN 0 0 0 0 0 0 0 0 0 ... #>  $ _Mix_MixTmpr1_Avg [read_cr3000] ()      : num  NaN 32 32 32 32 ... #>  $ _Mix_MixTmpr2_Avg [read_cr3000] ()      : num  NaN 31.7 31.7 31.7 31.7 ... #>  $ _Mix_MixHeat1_Avg [read_cr3000] ()      : num  NaN 1 1 1 1 1 1 1 1 1 ... #>  $ _Mix_MixHeat2_Avg [read_cr3000] ()      : num  NaN 1 1 1 1 1 1 1 1 1 ... #>  $ _Mix_panel_tmpr_Avg [read_cr3000] ()    : num  NaN 24.1 24.1 24.1 24.1 ... #>  $ _Mix_batt_volt_Avg [read_cr3000] ()     : num  NaN 9.62 9.62 9.62 9.62 ..."},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_gasex_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Reading a gas exchange log file — read_gasex_file","title":"Reading a gas exchange log file — read_gasex_file","text":"Tool reading log files created gas exchange measurement instruments   storing contents exdf objects.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_gasex_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reading a gas exchange log file — read_gasex_file","text":"","code":"read_gasex_file(     file_name,     timestamp_colname = NA,     file_type = 'AUTO',     instrument_type = 'AUTO',     ...   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_gasex_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reading a gas exchange log file — read_gasex_file","text":"file_name relative absolute path log file containing gas exchange data. timestamp_colname name column contains timestamp measurement;     typically, 'time'. file_type type file loaded. file_type 'AUTO',     file type automatically determined extension     file_name. supported options 'plaintext',     'Excel', 'data'. instrument_type type measurement instrument produced log file.     instrument_type 'AUTO', instrument type     determined file_type. supported options     'Licor LI-6800' 'CR3000'. ... Additional arguments passed specialized reading functions; see     details.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_gasex_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reading a gas exchange log file — read_gasex_file","text":"log files contain Unicode characters column names units,   characters represented properly R. address , Unicode   characters replaced reasonable alternatives; example,   character capital Greek letter delta replaced word   Delta. replacement rules stored data frame can   accessed via PhotoGEA:::UNICODE_REPLACEMENTS, information can   found source code (R/unicode_replacements.R). reading log file, can useful identify timestamp column   values can properly interpreted POSIXlt objects.   timestamp_colname NA, conversion skipped. automatically determining file type extension, following   rules used: .xlsx extension corresponds file_type = 'Excel'. .dat extension corresponds file_type = 'data'. file extension corresponds file_type =           'plaintext'. automatically determining instrument type file type,   following rules used: File types 'Excel' 'plaintext' correspond           instrument_type = 'Licor LI-6800'. file type 'data' corresponds instrument_type =           'CR3000'. Internally, function calls one several (non-exported) functions   depending values instrument_type file_type: read_licor_6800_plaintext (instrument_type =           'LI-6800' file_type = 'plaintext') read_licor_6800_Excel (instrument_type =           'LI-6800' file_type = 'Excel') read_cr3000 (instrument_type =           'CR3000' file_type = 'data') additional arguments specified via ... passed   functions. IMPORTANT NOTE LICOR EXCEL FILES: default, Licor Excel files   \"calculate\" formula values. causes problem reading   R, since data entry determined formula read 0. fix   issue Licor Excel file, open Excel, go   Formulas menu, choose Calculate Now. (Alternatively, press   F9.) save file close . See   GitHub issue 495 readxl package   details.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_gasex_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reading a gas exchange log file — read_gasex_file","text":"exdf object fully includes data log file.   addition required elements exdf object, following   \"extra\" elements also included:  file_name: copy input argument name. instrument_type: copy input argument           name. file_type: copy input argument name,           unless set 'AUTO'; case, file type           determined file's extension. timestamp_colname: copy input argument           name, unless set 'AUTO'; case, instrument           type determined file type.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_gasex_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reading a gas exchange log file — read_gasex_file","text":"","code":"# Example: Eeading a Licor Excel file that is included with the PhotoGEA # package. Here we specify 'time' as the name of the timestamp column. licor_file <- read_gasex_file(   system.file(\"extdata\", \"ball_berry_1.xlsx\", package = \"PhotoGEA\"),   'time' )  licor_file$file_name     # A record of where the data came from #> [1] \"/home/runner/work/_temp/Library/PhotoGEA/extdata/ball_berry_1.xlsx\" str(licor_file)          # View the contents of the exdf object's main_data #> 'data.frame':\t28 obs. of  240 variables: #>  $ obs [SysObs] (NA)                                  : num  1 2 3 4 5 6 7 8 9 10 ... #>  $ time [SysObs] (s)                                  : POSIXlt, format: \"2021-08-23 14:30:48\" \"2021-08-23 14:38:15\" ... #>  $ elapsed [SysObs] (s)                               : num  0 448 803 1226 1486 ... #>  $ date [SysObs] (NA)                                 : chr  \"20210823 09:30:48\" \"20210823 09:38:15\" \"20210823 09:44:11\" \"20210823 09:51:14\" ... #>  $ hhmmss [SysObs] (NA)                               : chr  \"09:30:48\" \"09:38:15\" \"09:44:11\" \"09:51:14\" ... #>  $ averaging [SysObs] (s)                             : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ species [UserDefCon] (NA)                          : chr  \"soybean\" \"soybean\" \"soybean\" \"soybean\" ... #>  $ plot [UserDefCon] (NA)                             : chr  \"1a\" \"1a\" \"1a\" \"1a\" ... #>  $ instrument [UserDefCon] (NA)                       : chr  \"ripe4\" \"ripe4\" \"ripe4\" \"ripe4\" ... #>  $ bb index [UserDefVar] (NA)                         : num  5.98 3.91 4.34 3.92 2.8 ... #>  $ TIME [GasEx] (s)                                   : num  1.63e+09 1.63e+09 1.63e+09 1.63e+09 1.63e+09 ... #>  $ E [GasEx] (mol m^(-2) s^(-1))                      : num  0.00532 0.00378 0.00327 0.00263 0.00255 ... #>  $ Emm [GasEx] (mmol m^(-2) s^(-1))                   : num  5.32 3.78 3.27 2.63 2.55 ... #>  $ A [GasEx] (micromol m^(-2) s^(-1))                 : num  35.4 23 25.4 23.3 16.6 ... #>  $ Ca [GasEx] (micromol mol^(-1))                     : num  415 415 415 415 415 ... #>  $ Ci [GasEx] (micromol mol^(-1))                     : num  252 281 257 232 279 ... #>  $ Pci [GasEx] (Pa)                                   : num  25 27.9 25.5 23 27.7 ... #>  $ Pca [GasEx] (Pa)                                   : num  41.2 41.2 41.2 41.2 41.2 ... #>  $ gsw [GasEx] (mol m^(-2) s^(-1))                    : num  0.388 0.304 0.28 0.218 0.212 ... #>  $ gbw [GasEx] (mol m^(-2) s^(-1))                    : num  2.92 2.91 2.91 2.92 2.91 ... #>  $ gtw [GasEx] (mol m^(-2) s^(-1))                    : num  0.362 0.288 0.266 0.209 0.204 ... #>  $ gtc [GasEx] (mol m^(-2) s^(-1))                    : num  0.228 0.181 0.168 0.132 0.128 ... #>  $ Rabs [GasEx] (W m^(-2))                            : num  321.5 177.8 130 106 82.1 ... #>  $ TleafEB [GasEx] (degrees C)                        : num  31.2 30.5 30 29.9 29.8 ... #>  $ TleafCnd [GasEx] (degrees C)                       : num  31 30.3 29.8 29.6 29.6 ... #>  $ SVPleaf [GasEx] (kPa)                              : num  4.52 4.33 4.21 4.17 4.17 ... #>  $ RHcham [GasEx] (%)                                 : num  70.1 70.6 70.8 69.9 69.9 ... #>  $ VPcham [GasEx] (kPa)                               : num  3.11 3.08 3.03 2.97 2.97 ... #>  $ SVPcham [GasEx] (kPa)                              : num  4.44 4.36 4.28 4.25 4.25 ... #>  $ VPDleaf [GasEx] (kPa)                              : num  1.4 1.25 1.18 1.2 1.2 ... #>  $ LatHFlux [GasEx] (W m^(-2))                        : num  -234 -166 -144 -116 -113 ... #>  $ SenHFlux [GasEx] (W m^(-2))                        : num  -47.9 18 48.1 52.3 54.3 ... #>  $ NetTherm [GasEx] (W m^(-2))                        : num  -3.68 1.38 3.67 3.98 4.14 ... #>  $ EBSum [GasEx] (W m^(-2))                           : num  35.5 30.7 37.4 46.5 28 ... #>  $ Leak [Leak] (micromol s^(-1))                      : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ LeakPct [Leak] (%)                                 : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ CorrFact [Leak] (NA)                               : num  1 1 1 1 1 1 1 1 1 1 ... #>  $ CorrFactPct [Leak] (%)                             : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ Fan [Leak] (micromol s^(-1))                       : num  51867 51661 51885 51967 51898 ... #>  $ DarkAdaptedID [FLR] (NA)                           : chr  \"RECT-12243-20210724-05_20_30\" \"RECT-12243-20210724-05_20_30\" \"RECT-12243-20210724-05_20_30\" \"RECT-12243-20210724-05_20_30\" ... #>  $ Qmax_d [FLR] (NA)                                  : num  10239 10239 10239 10239 10239 ... #>  $ Fo [FLR] (NA)                                      : num  302 302 302 302 302 ... #>  $ Fm [FLR] (NA)                                      : num  4052 4052 4052 4052 4052 ... #>  $ Fv/Fm [FLR] (NA)                                   : num  0.925 0.925 0.925 0.925 0.925 ... #>  $ A_dark [FLR] (micromol m^(-2) s^(-1))              : num  -0.323 -0.323 -0.323 -0.323 -0.323 ... #>  $ LightAdaptedID [FLR] (NA)                          : chr  \"MPF-13020-20210823-09_30_24\" \"MPF-13022-20210823-09_37_51\" \"MPF-13024-20210823-09_43_47\" \"MPF-13026-20210823-09_50_50\" ... #>  $ Qmax [FLR] (NA)                                    : num  10175 10195 10208 10218 10221 ... #>  $ Fs [FLR] (NA)                                      : num  813 888 927 924 873 ... #>  $ Fm' [FLR] (NA)                                     : num  1311 1931 2372 2582 2645 ... #>  $ PhiPS2 [FLR] (NA)                                  : num  0.38 0.54 0.609 0.642 0.67 ... #>  $ PS2/1 [FLR] (NA)                                   : num  0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ... #>  $ Qabs_fs [FLR] (micromol m^(-2) s^(-1))             : num  1681 925 673 547 421 ... #>  $ A_fs [FLR] (micromol m^(-2) s^(-1))                : num  35.4 23 25.4 23.3 16.6 ... #>  $ ETR [FLR] (micromol m^(-2) s^(-1))                 : num  319 250 205 176 141 ... #>  $ PhiCO2 [FLR] (micromol micromol^(-1))              : num  0.0212 0.0252 0.0383 0.0432 0.0402 ... #>  $ NPQ [FLR] (NA)                                     : num  2.091 1.098 0.708 0.569 0.532 ... #>  $ alt. Fo' [FLR] (NA)                                : num  261 279 287 290 291 ... #>  $ DarkPulseID [FLR] (NA)                             : chr  \"DARK-13021-20210823-09_30_32\" \"DARK-13023-20210823-09_37_59\" \"DARK-13025-20210823-09_43_55\" \"DARK-13027-20210823-09_50_58\" ... #>  $ Fmin [FLR] (NA)                                    : num  577 625 660 681 690 ... #>  $ Fo' [FLR] (NA)                                     : num  577 625 660 681 690 ... #>  $ Fv'/Fm' [FLR] (NA)                                 : num  0.56 0.676 0.722 0.736 0.739 ... #>  $ qP [FLR] (NA)                                      : num  0.679 0.799 0.844 0.872 0.906 ... #>  $ qN [FLR] (NA)                                      : num  0.789 0.619 0.495 0.436 0.418 ... #>  $ qP_Fo [FLR] (NA)                                   : num  0.493 0.641 0.698 0.727 0.757 ... #>  $ qN_Fo [FLR] (NA)                                   : num  0.731 0.566 0.448 0.392 0.375 ... #>  $ qL [FLR] (NA)                                      : num  0.482 0.562 0.6 0.643 0.716 ... #>  $ 1-qL [FLR] (NA)                                    : num  0.518 0.438 0.4 0.357 0.284 ... #>  $ Qin [LeafQ] (micromol m^(-2) s^(-1))               : num  2000 1100 800 650 500 ... #>  $ Qabs [LeafQ] (micromol m^(-2) s^(-1))              : num  1681 925 673 547 421 ... #>  $ alpha [LeafQ] (NA)                                 : num  0.841 0.841 0.841 0.842 0.842 ... #>  $ convert [LeafQ] (J/micromol)                       : num  0.161 0.162 0.162 0.163 0.164 ... #>  $ S [Const] (cm^2)                                   : num  6 6 6 6 6 6 6 6 6 6 ... #>  $ K [Const] (NA)                                     : num  0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ... #>  $ Geometry [Const] (NA)                              : chr  \"0: Broadleaf\" \"0: Broadleaf\" \"0: Broadleaf\" \"0: Broadleaf\" ... #>  $ Custom [Const] (mol m^(-2) s^(-1))                 : num  2 2 2 2 2 2 2 2 2 2 ... #>  $ TIME [Meas] (s)                                    : num  1.63e+09 1.63e+09 1.63e+09 1.63e+09 1.63e+09 ... #>  $ CO2_s [Meas] (micromol mol^(-1))                   : num  415 415 415 415 415 ... #>  $ CO2_r [Meas] (micromol mol^(-1))                   : num  460 444 447 444 436 ... #>  $ H2O_s [Meas] (mmol mol^(-1))                       : num  31.4 31 30.6 29.9 29.9 ... #>  $ H2O_r [Meas] (mmol mol^(-1))                       : num  25.2 26.6 26.8 26.8 27 ... #>  $ CO2_a [Meas] (micromol mol^(-1))                   : num  423 423 423 423 423 ... #>  $ H2O_a [Meas] (mmol mol^(-1))                       : num  31.3 30.9 30.3 30 29.9 ... #>  $ Flow [Meas] (micromol s^(-1))                      : num  500 500 500 500 500 ... #>  $ Pa [Meas] (kPa)                                    : num  99.2 99.2 99.2 99.2 99.1 ... #>  $ DeltaPcham [Meas] (kPa)                            : num  0.0999 0.1002 0.0998 0.1001 0.0998 ... #>  $ Tair [Meas] (degrees C)                            : num  30.7 30.4 30.1 30 30 ... #>  $ Tleaf [Meas] (degrees C)                           : num  31 30.3 29.8 29.6 29.6 ... #>  $ Tleaf2 [Meas] (degrees C)                          : num  1000 1000 1000 1000 1000 ... #>  $ Offset [Meas] (degrees C)                          : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ Offset2 [Meas] (degrees C)                         : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ Fan_speed [Meas] (rpm)                             : num  10016 9964 9998 10009 9998 ... #>  $ Qamb_in [Meas] (micromol m^(-2) s^(-1))            : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ Qamb_out [Meas] (micromol m^(-2) s^(-1))           : num  1212 1253 1322 1350 1393 ... #>  $ DeltaCO2 [Meas2] (micromol mol^(-1))               : num  -41 -33.2 -29 -25.7 -22 ... #>  $ CO2_s_d [Meas2] (micromol mol^(-1))                : num  428 428 428 428 428 ... #>  $ CO2_r_d [Meas2] (micromol mol^(-1))                : num  468 460 456 453 449 ... #>  $ DeltaH2O [Meas2] (mmol mol^(-1))                   : num  6.11 4.18 3.51 3.12 2.91 ... #>  $ CO2_b [Meas2] (micromol mol^(-1))                  : num  456 448 444 441 437 ... #>  $ H2O_b [Meas2] (mmol mol^(-1))                      : num  25.2 26.6 26.8 26.8 27 ... #>   [list output truncated] str(licor_file$preamble) # View the Licor file's preamble data #> 'data.frame':\t1 obs. of  50 variables: #>  $ SysConst    : chr NA #>  $ AvgTime     : chr \"4\" #>  $ Oxygen      : chr \"21\" #>  $ ChambConst  : chr NA #>  $ Chamber     : chr \"6800-01A\" #>  $ Aperture    : chr \"6 cm^2\" #>  $ blc_a       : chr \"0.57799999999999996\" #>  $ blc_b       : chr \"0.52297389999999999\" #>  $ blc_c       : chr \"3.7402519999999999E-3\" #>  $ blc_d       : chr \"-6.1979609999999997E-2\" #>  $ blc_e       : chr \"-5.6085859999999996E-3\" #>  $ blc_minS    : chr \"1\" #>  $ blc_maxS    : chr \"6\" #>  $ blc_Po      : chr \"96.9\" #>  $ LTConst     : chr NA #>  $ deltaTw     : chr \"0\" #>  $ fT1         : chr \"1\" #>  $ fT2         : chr \"0\" #>  $ fTeb        : chr \"0\" #>  $ LQConst     : chr NA #>  $ Leaf        : chr \"standard\" #>  $ Ambient     : chr \"Sun+Sky\" #>  $ abs_ambient : chr \"0.8\" #>  $ abs_redLED  : chr \"0.84\" #>  $ abs_greenLED: chr \"0.7\" #>  $ abs_blueLED : chr \"0.87\" #>  $ abs_whiteLED: chr \"0.75\" #>  $ abs_redFlr  : chr \"0.84\" #>  $ abs_blueFlr : chr \"0.87\" #>  $ k_ambient   : chr \"0.19109999999999999\" #>  $ k_redLED    : chr \"0.1512\" #>  $ k_greenLED  : chr \"0.161\" #>  $ k_blueLED   : chr \"0.22620000000000001\" #>  $ k_whiteLED  : chr \"0.1575\" #>  $ k_redFlr    : chr \"0.15959999999999999\" #>  $ k_blueFlr   : chr \"0.2175\" #>  $ QConst      : chr NA #>  $ fQ_Amb_in   : chr \"0\" #>  $ fQ_Amb_out  : chr \"0\" #>  $ fQ_HeadLS   : chr \"0\" #>  $ fQ_ConsoleLS: chr \"0\" #>  $ fQ_Flr      : chr \"1\" #>  $ LeakConst   : chr NA #>  $ fan_a       : chr \"-6276\" #>  $ fan_b       : chr \"6.6\" #>  $ fan_c       : chr \"1.7090000000000001E-5\" #>  $ fan_d       : chr \"3.11\" #>  $ Fs_meas     : chr \"2.57209 56.8345 376.092 656.102 912.922 1140.22 1323.58 1601.94\" #>  $ Fs_true     : chr \"0.140462 100.535 403.009 601.359 801.268 1002.06 1200.81 1402.44\" #>  $ leak_wt     : chr \"0\""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_licor_6800_Excel.html","id":null,"dir":"Reference","previous_headings":"","what":"Reading a plaintext Licor LI-6800 log file — read_licor_6800_Excel","title":"Reading a plaintext Licor LI-6800 log file — read_licor_6800_Excel","text":"Tool reading Excel log files created Licor LI-6800 instruments   storing contents exdf objects.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_licor_6800_Excel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reading a plaintext Licor LI-6800 log file — read_licor_6800_Excel","text":"","code":"read_licor_6800_Excel(file_name, column_name = 'obs', ...)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_licor_6800_Excel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reading a plaintext Licor LI-6800 log file — read_licor_6800_Excel","text":"file_name relative absolute path Excel file containing Licor data. column_name column name present log file; used identify     beginning data block file. ... Additional arguments; currently unused.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_licor_6800_Excel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reading a plaintext Licor LI-6800 log file — read_licor_6800_Excel","text":"Licor LI-6800 instruments create two types log files: plain-text file   Excel file, containing information. general, Excel   files much easier modify, example, deleting rows adding new   columns. reason, helpful able read files R.   Unfortunately, base R functionality reading Excel files,   openxlsx package used. read_licor_6800_Excel looks particular data column order   identify start data table within contents Licor file.   Rows main data table assumed part preamble (  header), broken pairs rows representing names values. IMPORTANT NOTE LICOR EXCEL FILES: default, Licor Excel files   \"calculate\" formula values. causes problem reading   R, since data entry determined formula read 0. fix   issue Licor Excel file, open Excel, go   Formulas menu, choose Calculate Now. (Alternatively, press   F9.) save file close . See   GitHub issue 495 readxl package   details.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_licor_6800_Excel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reading a plaintext Licor LI-6800 log file — read_licor_6800_Excel","text":"exdf object fully includes data Licor Excel   file. addition elements described documentation  read_gasex_file, following \"extra\" elements also   included:  preamble: data frame containing \"preamble\" (\"header\")           information file. data_row: line file column name found.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_licor_6800_Excel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reading a plaintext Licor LI-6800 log file — read_licor_6800_Excel","text":"","code":"# Example 1: Reading a Licor Excel file that is included with the PhotoGEA # package. licor_file <- PhotoGEA:::read_licor_6800_Excel(   system.file(\"extdata\", \"ball_berry_1.xlsx\", package = \"PhotoGEA\") )  # Example 2: Reading a Licor Excel file that is included with the PhotoGEA # package; here we use a different column name to identify the data block within # the file's contents. licor_file <- PhotoGEA:::read_licor_6800_Excel(   system.file(\"extdata\", \"ball_berry_1.xlsx\", package = \"PhotoGEA\"),   column_name = 'A' )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_licor_6800_plaintext.html","id":null,"dir":"Reference","previous_headings":"","what":"Reading a plaintext Licor LI-6800 log file — read_licor_6800_plaintext","title":"Reading a plaintext Licor LI-6800 log file — read_licor_6800_plaintext","text":"Tool reading plaintext log files created Licor LI-6800 instruments   storing contents exdf objects.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_licor_6800_plaintext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reading a plaintext Licor LI-6800 log file — read_licor_6800_plaintext","text":"","code":"read_licor_6800_plaintext(file_name, ...)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_licor_6800_plaintext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reading a plaintext Licor LI-6800 log file — read_licor_6800_plaintext","text":"file_name relative absolute path plaintext file containing Licor data. ... Additional arguments; currently unused.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_licor_6800_plaintext.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reading a plaintext Licor LI-6800 log file — read_licor_6800_plaintext","text":"Licor LI-6800 instruments create two types log files: plaintext file   Excel file, containing information. plaintext files   ones guaranteed created, since Excel files require user   select option create . read_licor_6800_plaintext looks two special lines Licor log   file: [Head] line indicates beginning header (  preamble), [Data] line indicates beginning data   table. lines missing file, loaded   properly.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_licor_6800_plaintext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reading a plaintext Licor LI-6800 log file — read_licor_6800_plaintext","text":"exdf object fully includes data Licor Excel   file. addition elements described documentation  read_gasex_file, following \"extra\" elements also   included:  preamble: data frame containing \"preamble\" (\"header\")           information file. header_indx: line file [Head]           found. data_indx: line file [Data] found.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_licor_6800_plaintext.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reading a plaintext Licor LI-6800 log file — read_licor_6800_plaintext","text":"","code":"# Example: Reading a Licor plaintext file that is included with the PhotoGEA # package. licor_file <- PhotoGEA:::read_licor_6800_plaintext(   system.file(\"extdata\", \"plaintext_licor_file\", package = \"PhotoGEA\") )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/remove_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove specific points from an exdf object — remove_points","title":"Remove specific points from an exdf object — remove_points","text":"Removes points exdf object satisfy set   conditions.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/remove_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove specific points from an exdf object — remove_points","text":"","code":"remove_points(exdf_obj, ...)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/remove_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove specific points from an exdf object — remove_points","text":"exdf_obj exdf object. ... optional argument list named elements specify     points removed exdf_obj. example,     list(species = 'soybean', plot = c('1a', '1b')) specifies set     points (1) species 'soybean' (2) plot     '1a' '1b'.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/remove_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove specific points from an exdf object — remove_points","text":"exdf object formed exdf_obj removing rows   meet conditions specified optional input arguments.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/remove_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove specific points from an exdf object — remove_points","text":"","code":"# Create an exdf object by reading a Licor Excel file licor_file <- read_gasex_file(   system.file(\"extdata\", \"ball_berry_1.xlsx\", package = \"PhotoGEA\") )  # Print the number of points in the data set nrow(licor_file) #> [1] 28  # Remove the following: # - All points where `obs` is 28 (1 point) # - All points where `species` is `soybean` and `plot` is `1a` or `1b` (14 points) licor_file <- remove_points(   licor_file,   list(obs = 28),   list(species = 'soybean', plot = c('1a', '1b')) )  # There should now be 15 fewer points remaining in the data set nrow(licor_file) #> [1] 13"},{"path":"https://eloch216.github.io/PhotoGEA/reference/residual_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate statistics that describe the residuals of a fit — residual_stats","title":"Calculate statistics that describe the residuals of a fit — residual_stats","text":"Calculates several key statistics residuals fit: residual   sum squares (RSS), mean squared error (MSE), root   mean squared error (RMSE), residual standard error   (RSE). function used internally several fitting functions   PhotoGEA package, fit_ball_berry   fit_c3_aci.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/residual_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate statistics that describe the residuals of a fit — residual_stats","text":"","code":"residual_stats(fit_residuals, units, nparam)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/residual_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate statistics that describe the residuals of a fit — residual_stats","text":"fit_residuals numeric vector representing residuals fit, .e.,     differences measured fitted values. units string expressing units residuals. nparam number free parameters varied performing fit.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/residual_stats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate statistics that describe the residuals of a fit — residual_stats","text":"function calculates several model-independent measures quality   fit. basis statistics residuals (also known   errors). measured values quantity y given   y_measured fitted values y_fitted,   residuals defined residual = y_measured - y_fitted. key   statistics can calculated residuals follows: residual sum squares (RSS) also known sum           squared errors (SSE). name implies, simply sum           squared residuals: RSS = sum(residuals^2). mean squared error (MSE) mean value squared           residuals: MSE = sum(residuals^2) / n = RSS / n, n           number residuals. root mean squared error (RMSE) square root           mean squared error: RMSE = sqrt(MSE) = sqrt(RSS / n). residual standard error RSE given RSE =           sqrt(RSS / dof), dof = n - nparam number           degrees freedom involved fit. given model, RMSE usually good way compare   quality different fits. trying decide model best fits   measured data, RSE may appropriate metric since   controls number parameters model.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/residual_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate statistics that describe the residuals of a fit — residual_stats","text":"exdf object one row following columns: npts (  number residual values), nparam, dof, RSS, MSE,  RMSE, RSE.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/residual_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate statistics that describe the residuals of a fit — residual_stats","text":"","code":"# Generate some random residuals residuals <- runif(10, -1, 1)  # Calculate residual stats as if these values had units of `kg` and were related # to a model with 3 free parameters residual_stats(residuals, 'kg', 3) #>   npts [residual_stats] (NA) nparam [residual_stats] (NA) #> 1                         10                            3 #>   dof [residual_stats] (NA) RSS [residual_stats] ((kg)^2) #> 1                         7                      3.638694 #>   MSE [residual_stats] ((kg)^2) RMSE [residual_stats] (kg) #> 1                     0.3638694                  0.6032159 #>   RSE [residual_stats] (kg) #> 1                 0.7209808"},{"path":"https://eloch216.github.io/PhotoGEA/reference/set_variable.html","id":null,"dir":"Reference","previous_headings":"","what":"Document exdf columns by specifying units and categories — set_variable","title":"Document exdf columns by specifying units and categories — set_variable","text":"Sets value, units, /category new existing column   exdf object.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/set_variable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Document exdf columns by specifying units and categories — set_variable","text":"","code":"set_variable(     exdf_obj,     name,     units = NULL,     category = NULL,     value = NA,     id_column = NULL,     value_table = list()   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/set_variable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Document exdf columns by specifying units and categories — set_variable","text":"exdf_obj exdf object. name name column added exdf_obj. units units column added exdf_obj. category category column added exdf_obj. value value column added exdf_obj. id_column name identifier column exdf_obj. value_table list named elements, name element possible value     id_column value element corresponding     value name column take.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/set_variable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Document exdf columns by specifying units and categories — set_variable","text":"function attempts set value new existing column   exdf object according following rules: value name column exdf_obj set           value; assignment follows usual rules; words,           value single value vector length           nrow(exdf_obj). units categories NULL, units           category specified. case, name           column already exists, units category remain ;           name column new, initialized           NA units category. either units _or_ category NULL,           units category name column _will_ specified.           case, one units category _is_ NULL,           value set NA. id_column NULL, value_table           used set different values name column           specified value id_column. example,           id_column species value_table =           list(soybean = 1, tobacco = 2), name column           set 1 species 'soybean' 2           species 'tobacco'. values           species ('maize'), value name still           value. **Note**: values id_column           converted using .character making comparisons.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/set_variable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Document exdf columns by specifying units and categories — set_variable","text":"exdf object new /modified columns.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/set_variable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Document exdf columns by specifying units and categories — set_variable","text":"","code":"# Create a simple exdf object with two columns (`A` and `B`) and default values # for its units and categories. simple_exdf <- exdf(data.frame(A = c(3, 2, 7, 9), B = c(4, 5, 1, 8)))  print(simple_exdf) #>   A [NA] (NA) B [NA] (NA) #> 1           3           4 #> 2           2           5 #> 3           7           1 #> 4           9           8  # Add a new column called 'C' with units 'u1' and category 'cat1' whose value is # 1000. simple_exdf <- set_variable(simple_exdf, 'C', 'u1', 'cat1', 1000)  # Set the value of the 'B' column to 2000 when 'A' is 3, to 3000 when 'A' is 9, # and to 4000 for all other values of 'A'. Do not modify its units or category. simple_exdf <- set_variable(   simple_exdf,   'B',   value = 4000,   id_column = 'A',   value_table = list('3' = 2000, '9' = 3000) )  print(simple_exdf) #>   A [NA] (NA) B [NA] (NA) C [cat1] (u1) #> 1           3        2000          1000 #> 2           2        4000          1000 #> 3           7        4000          1000 #> 4           9        3000          1000  # As a more realistic example, load a Licor file and set different values of # mesophyll conductance for each species in the data set. licor_file <- read_gasex_file(   system.file(\"extdata\", \"ball_berry_1.xlsx\", package = \"PhotoGEA\") )  licor_file <- set_variable(   licor_file,   'gmc',   'mol m^(-2) s^(-1) bar^(-1)',   '',   id_column = 'species',   value_table = list(soybean = 0.9, tobacco = 1.1) )  print(licor_file[, c('species', 'gmc'), TRUE]) #>    species [UserDefCon] (NA) gmc [] (mol m^(-2) s^(-1) bar^(-1)) #> 1                    soybean                                 0.9 #> 2                    soybean                                 0.9 #> 3                    soybean                                 0.9 #> 4                    soybean                                 0.9 #> 5                    soybean                                 0.9 #> 6                    soybean                                 0.9 #> 7                    soybean                                 0.9 #> 8                    soybean                                 0.9 #> 9                    soybean                                 0.9 #> 10                   soybean                                 0.9 #> 11                   soybean                                 0.9 #> 12                   soybean                                 0.9 #> 13                   soybean                                 0.9 #> 14                   soybean                                 0.9 #> 15                   soybean                                 0.9 #> 16                   soybean                                 0.9 #> 17                   soybean                                 0.9 #> 18                   soybean                                 0.9 #> 19                   soybean                                 0.9 #> 20                   soybean                                 0.9 #> 21                   soybean                                 0.9 #> 22                   tobacco                                 1.1 #> 23                   tobacco                                 1.1 #> 24                   tobacco                                 1.1 #> 25                   tobacco                                 1.1 #> 26                   tobacco                                 1.1 #> 27                   tobacco                                 1.1 #> 28                   tobacco                                 1.1"},{"path":"https://eloch216.github.io/PhotoGEA/reference/smooth_tdl_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Smoothing data from one TDL valve — smooth_tdl_data","title":"Smoothing data from one TDL valve — smooth_tdl_data","text":"Tool applying smoothing function time series corresponding   measurements single valve tunable diode laser (TDL) data set.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/smooth_tdl_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smoothing data from one TDL valve — smooth_tdl_data","text":"","code":"smooth_tdl_data(     tdl_exdf,     column_to_be_smoothed,     valve_column_name,     valve_number,     smoothing_function   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/smooth_tdl_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smoothing data from one TDL valve — smooth_tdl_data","text":"tdl_exdf exdf object representing data TDL data logger. column_to_be_smoothed name column tdl_exdf contains data     smoothed; typically, 'Conc12C_Avg' 'Conc12C_Avg'. valve_column_name name column tdl_exdf contains valve number;     typically, 'valve_number'. valve_number value valve_column_name column indicates valve     smoothed. smoothing_function function accepts two vectors Y X (order)     returns smoothed version Y(X); typically,     smoothing_function based smooth.spline     filter signal package.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/smooth_tdl_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Smoothing data from one TDL valve — smooth_tdl_data","text":"output TDL highly sensitive electronic atmospheric noise,   often helpful smooth data one valves   attempting apply calibration corrections determine content   unknown gas mixture. smooth_tdl_data convenience function   extracts time series corresponding data one valve, applies   smoothing operation, replaces original data tdl_exdf   smoothed version. smoothing function user-supplied allow   flexbility. addition column_to_be_smoothed valve_column_name   columns, tdl_exdf must also contain 'elapsed_time'   column, typically created call   identify_tdl_cycles.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/smooth_tdl_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smoothing data from one TDL valve — smooth_tdl_data","text":"exdf object based tdl_exdf, time series  column_to_be_smoothed vs. 'elapsed_time' replaced   smoothed version obtained applying smoothing_function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/smooth_tdl_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smoothing data from one TDL valve — smooth_tdl_data","text":"","code":"# Example 1: Smoothing the 12C signal from one TDL valve using a spline fit tdl_file <- read_gasex_file(   system.file(\"extdata\", \"tdl_sampling_1.dat\", package = \"PhotoGEA\"),   'TIMESTAMP' )  tdl_file <- identify_tdl_cycles(   tdl_file,   valve_column_name = 'valve_number',   cycle_start_valve = 20,   expected_cycle_length_minutes = 2.7,   expected_cycle_num_valves = 9,   timestamp_colname = 'TIMESTAMP' )  spline_smoothing_function <- function(Y, X) {     ss <- smooth.spline(X, Y)     return(ss$y) }  spline_smoothed_tdl_file <- smooth_tdl_data(   tdl_file, 'Conc12C_Avg', 'valve_number', 20, spline_smoothing_function )  # Example 2: Smoothing the same data with a Butterworth filter (as an # alternative to the spline_smoothing_function above)  if (FALSE) {  butterworth_smoothing_function <- function(Y, X) {   # Create a low-pass Butterworth filter   lpf <- signal::butter(1, 0.25, type = \"low\")    # Apply it to the Y data   signal::filter(lpf, Y) }  butterworth_smoothed_tdl_file <- smooth_tdl_data(   tdl_file, 'Conc12C_Avg', 'valve_number', 20, butterworth_smoothing_function ) }"},{"path":"https://eloch216.github.io/PhotoGEA/reference/split.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Divide an exdf object into groups — split.exdf","title":"Divide an exdf object into groups — split.exdf","text":"Divides exdf object groups defined one factors.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/split.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Divide an exdf object into groups — split.exdf","text":"","code":"# S3 method for exdf split(x, f, drop = FALSE, lex.order = FALSE, ...)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/split.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Divide an exdf object into groups — split.exdf","text":"x exdf object. f factor list factors. drop logical value indicating whether levels f occur     dropped. lex.order logical value passed interaction. ... Additional arguments passed default method     split.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/split.exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Divide an exdf object into groups — split.exdf","text":"Returns list exdf objects created splitting x along   values f.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/split.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Divide an exdf object into groups — split.exdf","text":"","code":"# Read a Licor file, select just a few columns, and then split it by the value # of the `plot` column licor_file <- read_gasex_file(   system.file(\"extdata\", \"ball_berry_1.xlsx\", package = \"PhotoGEA\") )  licor_file <- licor_file[, c('plot', 'species', 'Qin', 'A', 'gsw'), TRUE]  split(   licor_file,   list(licor_file[,'species'], licor_file[,'plot']),   drop = TRUE ) #> $soybean.1a #>   plot [UserDefCon] (NA) species [UserDefCon] (NA) #> 1                     1a                   soybean #> 2                     1a                   soybean #> 3                     1a                   soybean #> 4                     1a                   soybean #> 5                     1a                   soybean #> 6                     1a                   soybean #> 7                     1a                   soybean #>   Qin [LeafQ] (micromol m^(-2) s^(-1)) A [GasEx] (micromol m^(-2) s^(-1)) #> 1                             2000.030                          35.400473 #> 2                             1099.800                          22.996635 #> 3                              799.983                          25.430106 #> 4                              649.951                          23.290614 #> 5                              500.135                          16.617929 #> 6                              350.106                          12.240074 #> 7                              200.141                           5.679174 #>   gsw [GasEx] (mol m^(-2) s^(-1)) #> 1                       0.3881885 #> 2                       0.3044869 #> 3                       0.2804279 #> 4                       0.2181023 #> 5                       0.2123801 #> 6                       0.1848656 #> 7                       0.1685880 #>  #> $soybean.1b #>    plot [UserDefCon] (NA) species [UserDefCon] (NA) #> 15                     1b                   soybean #> 16                     1b                   soybean #> 17                     1b                   soybean #> 18                     1b                   soybean #> 19                     1b                   soybean #> 20                     1b                   soybean #> 21                     1b                   soybean #>    Qin [LeafQ] (micromol m^(-2) s^(-1)) A [GasEx] (micromol m^(-2) s^(-1)) #> 15                             1999.850                          47.950460 #> 16                             1099.890                          30.250627 #> 17                              799.873                          25.472460 #> 18                              650.070                          26.383035 #> 19                              499.982                          17.009070 #> 20                              350.060                          14.666531 #> 21                              200.070                           9.276031 #>    gsw [GasEx] (mol m^(-2) s^(-1)) #> 15                       0.6974767 #> 16                       0.5627892 #> 17                       0.4941281 #> 18                       0.4676789 #> 19                       0.4235752 #> 20                       0.1587479 #> 21                       0.2030845 #>  #> $tobacco.2 #>    plot [UserDefCon] (NA) species [UserDefCon] (NA) #> 22                      2                   tobacco #> 23                      2                   tobacco #> 24                      2                   tobacco #> 25                      2                   tobacco #> 26                      2                   tobacco #> 27                      2                   tobacco #> 28                      2                   tobacco #>    Qin [LeafQ] (micromol m^(-2) s^(-1)) A [GasEx] (micromol m^(-2) s^(-1)) #> 22                             2000.020                           29.61454 #> 23                             1099.980                           25.49228 #> 24                              800.046                           22.21817 #> 25                              650.001                           16.34589 #> 26                              500.036                           12.10635 #> 27                              350.073                           12.04469 #> 28                              200.236                            7.84987 #>    gsw [GasEx] (mol m^(-2) s^(-1)) #> 22                      0.29002835 #> 23                      0.26095999 #> 24                      0.24715976 #> 25                      0.22395230 #> 26                      0.22348130 #> 27                      0.20608729 #> 28                      0.08301745 #>  #> $soybean.5 #>    plot [UserDefCon] (NA) species [UserDefCon] (NA) #> 8                       5                   soybean #> 9                       5                   soybean #> 10                      5                   soybean #> 11                      5                   soybean #> 12                      5                   soybean #> 13                      5                   soybean #> 14                      5                   soybean #>    Qin [LeafQ] (micromol m^(-2) s^(-1)) A [GasEx] (micromol m^(-2) s^(-1)) #> 8                              1999.980                           45.78075 #> 9                              1099.960                           36.21825 #> 10                              799.910                           32.76940 #> 11                              650.108                           22.92448 #> 12                              499.921                           22.06819 #> 13                              349.991                           17.09159 #> 14                              200.029                           10.76825 #>    gsw [GasEx] (mol m^(-2) s^(-1)) #> 8                        0.8771680 #> 9                        0.6695119 #> 10                       0.5599051 #> 11                       0.5758128 #> 12                       0.3805223 #> 13                       0.3462828 #> 14                       0.3181253 #>"},{"path":"https://eloch216.github.io/PhotoGEA/reference/str.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Display the structure of an exdf object — str.exdf","title":"Display the structure of an exdf object — str.exdf","text":"Displays structure exdf object's main_data.   column described name, unit, category formatted like   name [category] (units).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/str.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display the structure of an exdf object — str.exdf","text":"","code":"# S3 method for exdf str(object, ...)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/str.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display the structure of an exdf object — str.exdf","text":"object exdf object. ... Additional arguments passed str.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/str.exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display the structure of an exdf object — str.exdf","text":"None.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/str.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display the structure of an exdf object — str.exdf","text":"","code":"simple_exdf <- exdf(data.frame(A = 1), data.frame(A = 'u'), data.frame(A = 'c')) str(simple_exdf) #> 'data.frame':\t1 obs. of  1 variable: #>  $ A [c] (u): num 1"},{"path":"https://eloch216.github.io/PhotoGEA/reference/xyplot_avg_rc.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot average response curves with error bars — xyplot_avg_rc","title":"Plot average response curves with error bars — xyplot_avg_rc","text":"wrapper lattice::xyplot plots average response curves   error bars.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/xyplot_avg_rc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot average response curves with error bars — xyplot_avg_rc","text":"","code":"xyplot_avg_rc(     Y,     X,     point_identifier,     group_identifier,     y_error_bars = TRUE,     x_error_bars = FALSE,     cols = multi_curve_colors(),     eb_length = 0.05,     eb_lwd = 1,     ...   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/xyplot_avg_rc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot average response curves with error bars — xyplot_avg_rc","text":"Y numeric vector y-values. X numeric vector x-values length Y point_identifier vector length Y indicates location     (x, y) pair along response curve; typically     seq_num column exdf object. group_identifier vector length Y indicates \"group\"     response curve. y_error_bars logical value indicating whether plot y-axis error bars. x_error_bars logical value indicating whether plot x-axis error bars. cols vector color specifications. eb_length width error bars. eb_lwd line width (thickness) error bars. ... Additional arguments passed lattice::xyplot.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/xyplot_avg_rc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot average response curves with error bars — xyplot_avg_rc","text":"function calculates average values X Y value   point_identifier across groups defined   group_identifier, uses values plot average response   curves group. Error bars determined calculating standard   errors X Y value point_identifier   across groups defined group_identifier.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/xyplot_avg_rc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot average response curves with error bars — xyplot_avg_rc","text":"trellis object created lattice::xyplot.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/xyplot_avg_rc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot average response curves with error bars — xyplot_avg_rc","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   system.file(\"extdata\", \"ball_berry_1.xlsx\", package = \"PhotoGEA\") )  # Organize the response curve data licor_file <- organize_response_curve_data(   licor_file,   c('species', 'plot'),   c(),   'Qin' )  # Plot the average light response curve for each species (here there is only one # curve for tobacco, so there are no tobacco error bars) xyplot_avg_rc(   licor_file[, 'A'],   licor_file[, 'Qin'],   licor_file[, 'seq_num'],   licor_file[, 'species'],   ylim = c(0, 50),   xlab = paste0('Incident PPFD (', licor_file$units$Qin, ')'),   ylab = paste0('Average net assimilation (', licor_file$units$A, ')'),   auto = TRUE,   grid = TRUE )"},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"photogea-version-080-2023-04-30","dir":"Changelog","previous_headings":"","what":"PhotoGEA VERSION 0.8.0 (2023-04-30)","title":"PhotoGEA VERSION 0.8.0 (2023-04-30)","text":"Modified identify_tdl_cycles process_tdl_cycle_polynomial can handle cycles multiple measurement logs valve. Added several functions calculating quadratic roots; exported package namespace, now used calculate_c3_assimilation calculate_c4_assimilation make code cleaner robust. Choose minimal RuBP carboxylation rate rather minimal net CO2 assimilation rate. Allow user specify value alpha (previously value hard-coded 0). Allow user specify two separate curvature values including co-limitation. Renamed min_aj_cutoff max_aj_cutoff cj_crossover_min cj_crossover_max better reflect purpose. https://github.com/eloch216/PhotoGEA/pull/68","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"photogea-version-071-2023-01-11","dir":"Changelog","previous_headings":"","what":"PhotoGEA VERSION 0.7.1 (2023-01-11)","title":"PhotoGEA VERSION 0.7.1 (2023-01-11)","text":"Added new outputs fit_c3_aci fit_c4_aci include average values leaf-temperature-dependent parameters like Vcmax Rd. Added options specifying flat temperature response fitting C3 C4 -Ci curves; available via two new data sets c3_arrhenius_no_temp c4_arrhenius_no_temp. https://github.com/eloch216/PhotoGEA/pull/64 https://github.com/eloch216/PhotoGEA/pull/65","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"photogea-version-070-2022-12-19","dir":"Changelog","previous_headings":"","what":"PhotoGEA VERSION 0.7.0 (2022-12-19)","title":"PhotoGEA VERSION 0.7.0 (2022-12-19)","text":"plaintext_licor_file represents plaintext Licor LI-6800 log file. c4_aci_1.xlsx c4_aci_2.xlsx contain examples C4 -Ci curves measured Licor LI-6800 instruments. Added ability read plaintext Licor LI-6800 log files. Consolidated file-reading functions single one called read_gasex_file. Depending user-supplied inputs specify instrument file type, read_gasex_file internally calls either read_licor_6800_Excel, read_licor_6800_plaintext, read_CR3000 actually read data file. loading LI-6800 Excel log files, longer necessary provide information preamble data rows. previous reading functions read_licor_file read_tdl_file now deprecated. Since functions commonly used scripts, message sent users attempt call functions. Eventually completely removed package namespace. Added new function calculates total pressure inside Licor chamber separate values ambient pressure chamber overpressure: calculate_total_pressure. apply_gm calculate_c3_assimilation calculate_gas_properties fit_c3_aci calculate_cc now apply_gm can used C3 C4 photosynthesis calculations. apply_gm modified include partial pressures outputs. fit_c4_aci modified make like fit_c3_aci. Added new input argument xyplot_avg_rc y-axis error bars can disabled. Added new input argument apply_gm drawdown calculations now optional. Improved error messages generated check_licor_data. Included ATP NADPH usage C3 assimilation calculations. initial_guess_c4_aci makes initial guesses C4 photosynthetic parameters. calculate_c4_assimilation calculates assimilation values using S. von Caemmerer’s model C4 photosynthesis. Added new vignette demonstrating analyze C4 -Ci curve data. https://github.com/eloch216/PhotoGEA/pull/58 https://github.com/eloch216/PhotoGEA/pull/59 https://github.com/eloch216/PhotoGEA/pull/60 https://github.com/eloch216/PhotoGEA/pull/61 https://github.com/eloch216/PhotoGEA/pull/62","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"photogea-version-061-2022-11-01","dir":"Changelog","previous_headings":"","what":"PhotoGEA VERSION 0.6.1 (2022-11-01)","title":"PhotoGEA VERSION 0.6.1 (2022-11-01)","text":"Modified fit_c3_aci now ensures initial guess lies within () bounds. requirement dfoptim::nmkb solver presumably bounded optimizers well. https://github.com/eloch216/PhotoGEA/pull/57","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"photogea-version-060-2022-10-06","dir":"Changelog","previous_headings":"","what":"PhotoGEA VERSION 0.6.0 (2022-10-06)","title":"PhotoGEA VERSION 0.6.0 (2022-10-06)","text":"Moved dfoptim package Suggests Imports used essential part PhotoGEA. check_required_variables function moved package namespace. default optimizer function (default_optimizer). function guessing C3 parameter values (initial_guess_c3_aci). function identifying columns take single unique value (identifier_columns). function calculates error metrics values residuals, including root mean squared error (RMSE) several others (residual_stats). cbind.exdf longer requires objects number rows. [<-.exdf now allows users remove columns setting values NULL. conversion timestamp column POSIXlt read_tdl_file read_licor_file can now skipped setting timestamp_colname NA. now option set curvature value can used allow co-limitation net assimilation rate. now uses initial_guess_c3_aci generate initial guesses default. now option fix certain parameter values (TPU) exclude fitting process via new input argument called fixed. output now includes residuals error metrics RMSE. fit_ball_berry also returns residuals error metrics output. “Creating Processing Tools” discusses best practices writing custom functions processing. example, function fitting rectangular hyperbola -Ci curve developed. “Combining PhotoGEA Packages” discusses best practices writing wrappers processing tools packages. example, wrapper plantecophys::fitaci developed. “Analyzing C3 -Ci Curves” vignette updated include new features fit_c3_aci. “Developing Data Analysis Pipeline” vignette updated include new functions added version. “Working Extended Data Frames” vignette updated include new diagrams. “Getting Started PhotoGEA” vignette updated include links new vignettes. https://github.com/eloch216/PhotoGEA/pull/50 https://github.com/eloch216/PhotoGEA/pull/52 https://github.com/eloch216/PhotoGEA/pull/53 https://github.com/eloch216/PhotoGEA/pull/54 https://github.com/eloch216/PhotoGEA/pull/55 https://github.com/eloch216/PhotoGEA/pull/56","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"photogea-version-050-2022-09-16","dir":"Changelog","previous_headings":"","what":"PhotoGEA VERSION 0.5.0 (2022-09-16)","title":"PhotoGEA VERSION 0.5.0 (2022-09-16)","text":"Added new vignette demonstrating analyze C3 -Ci curve data. Included TPU output calculate_c3_assimilation. organize_response_curve_data function, changed default value ordering_column_tolerance column Inf disable check default, since often want reorder using column like Ci follow sequence values every curve. Added new input arguments fit_c3_aci: min_aj_cutoff max_aj_cutoff, provide way constrain range Cc Aj allowed limiting assimilation rate. Added new function calibrating TDL data (process_tdl_cycle_polynomial) option using gm_from_tdl script. Modified Licor-TDL pairing stop assuming particular relationship sample reference valve numbers. Fixed issue calculate_c3_assimilation causing report incorrect values low Cc. Fixed several typos Ac misidentified “RuBP-limited” rate; fact, RuBP-saturated rate commonly referred rubisco-limited rate. Added new example script uses fit_c3_aci. https://github.com/eloch216/PhotoGEA/pull/44 https://github.com/eloch216/PhotoGEA/pull/46 https://github.com/eloch216/PhotoGEA/pull/47 https://github.com/eloch216/PhotoGEA/pull/48","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"photogea-version-040-2022-09-07","dir":"Changelog","previous_headings":"","what":"PhotoGEA VERSION 0.4.0 (2022-09-07)","title":"PhotoGEA VERSION 0.4.0 (2022-09-07)","text":"Renamed GitHub repository licor-processing--analysis PhotoGEA. Made GitHub repository public, allows simpler installation via remotes::install_github. Initialized website using pkgdown GitHub Pages using usethis::use_pkgdown_github_pages; website now available https://eloch216.github.io/PhotoGEA/index.html. Added stability check. Made stats calculations clear. function excluding data points (remove_points). cross-platform file selection tool (choose_input_files). function calculating C3 assimilation rates (calculate_c3_assimilation). function fitting C3 CO2 response curves (fit_c3_aci). function setting exdf column values (set_variable). function calculating Arrhenius exponents (calculate_arrhenius). Added option thorough check .exdf. organize_response_curve_data now specification points remove rather points keep, usually easier . document_variables (formerly specify_variables) exclude_outliers barchart_with_errorbars (formerly bar_wrapper) bwplot_wrapper (formerly box_wrapper) xyplot_avg_rc (formerly avg_xyplot) multi_curve_colors (formerly default_colors) calculate_cc check_required_variables (formerly check_required_columns) example_data_files (also added new files C3 -Ci curves) c3_arrhenius_bernacchi, c3_arrhenius_sharkey, c4_arrhenius_von_caemmerer add_gm_to_licor_data_from_table add_gm_to_licor_data_from_value batch_specify_oxygen batch_specify_respiration choose_input_gm_table_file read_gm_table (functions can replicated set_variable) vignette describing work extended data frames. vignette describing develop data analysis pipeline. vignette introducing new users PhotoGEA. fit_c3_aci calculate_c3_assimilation calculate_cc calculate_gas_properties calculate_c3_assimilation calculate_ball_berry_index fit_ball_berry https://github.com/eloch216/PhotoGEA/pull/33 https://github.com/eloch216/PhotoGEA/pull/34 https://github.com/eloch216/PhotoGEA/pull/35 https://github.com/eloch216/PhotoGEA/pull/37 https://github.com/eloch216/PhotoGEA/pull/41 https://github.com/eloch216/PhotoGEA/pull/42","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"photogea-version-030-2022-08-15","dir":"Changelog","previous_headings":"","what":"PhotoGEA VERSION 0.3.0 (2022-08-15)","title":"PhotoGEA VERSION 0.3.0 (2022-08-15)","text":"version adds substantial amount documentation, including vignette describing use PhotoGEA analyze TDL data. working documentation, several changes made key functions behaved reasonably became easier document. exdf objects can now initialized just data frame; case, units categories NA. apply_fit_across_reps process_tdl_cycles replaced two new lower-level functions offer generality: .exdf consolidate. check_response_curve_data check_signal_averaging_data consolidated one function: check_licor_data. exdf method cbind added. exclude_tdl_cycles extract_tdl_valve removed since can easily reproduced basic exdf functionality. functions creating modifying Excel files removed since longer want follow strategy. basic_stats “Variable J” example script fixed.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"photogea-version-020-2022-07-26","dir":"Changelog","previous_headings":"","what":"PhotoGEA VERSION 0.2.0 (2022-07-26)","title":"PhotoGEA VERSION 0.2.0 (2022-07-26)","text":"version adds substantial amount documentation, including vignette describing use PhotoGEA analyze Ball-Berry data. working documentation, several changes made key functions behaved reasonably became easier document. moment, basic_stats “Variable J” example script broken.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"photogea-version-010","dir":"Changelog","previous_headings":"","what":"PhotoGEA VERSION 0.1.0","title":"PhotoGEA VERSION 0.1.0","text":"first version PhotoGEA. point, package state rapid development, changes described . reserving version 1.0.0 first version R package functions data sets documented; , major changes increase minor version number.","code":""}]
