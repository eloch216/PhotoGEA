[{"path":"https://eloch216.github.io/PhotoGEA/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 PhotoGEA authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/PhotoGEA.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Getting Started With PhotoGEA","text":"PhotoGEA (short photosynthetic gas exchange analysis) R package provides suite tools loading, processing, analyzing photosynthetic gas exchange data. See Lochocki, Salesse-Smith, & McGrath (2025) information. vignette designed viewed online; links may work properly local version. see online version, visit https://eloch216.github.io/PhotoGEA/articles/PhotoGEA.html.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/PhotoGEA.html","id":"installing-photogea","dir":"Articles","previous_headings":"","what":"Installing PhotoGEA","title":"Getting Started With PhotoGEA","text":"PhotoGEA available CRAN, easiest way install latest release type following within R terminal:","code":"install.packages('PhotoGEA')"},{"path":"https://eloch216.github.io/PhotoGEA/articles/PhotoGEA.html","id":"an-example-c3-co2-response-curves","dir":"Articles","previous_headings":"","what":"An Example: C3 CO2 Response Curves","title":"Getting Started With PhotoGEA","text":"example, read data two Licor Li-6800 log files contain several -Ci curves measured tobacco soybean plants, fit model response curve, plot results. basic example just scratches surface possible PhotoGEA. (Note: loading files analysis, advisable use PhotoGEA_example_file_path done code . Instead, file paths can directly written, files can chosen using interactive window. See Analyzing C3 -Ci Curves vignette information.)","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/PhotoGEA.html","id":"fitting-the-curves","dir":"Articles","previous_headings":"An Example: C3 CO2 Response Curves","what":"Fitting the Curves","title":"Getting Started With PhotoGEA","text":"following code can used read data fit curve: document generated, evaluating code required following amount time: timing results may vary depending particular machine used run code. Nevertheless, small time investment advanced algorithm uses derivative-free optimizers robust fitting calculates nonparametric confidence intervals determine estimated parameter values reliable. example contains 13 commands, certainly isn’t short; however, close look reveals much commands general apply set C3 response curves. fact, parts need modified, list files read, curve identifier, value mesophyll conductance. using PhotoGEA, encouraged copy example others use base scripts; work smarter, harder!","code":"# Load required packages library(PhotoGEA) library(lattice)  # Define a vector of paths to the files we wish to load; in this case, we are # loading example files included with the PhotoGEA package file_paths <- c(   PhotoGEA_example_file_path('c3_aci_1.xlsx'),   PhotoGEA_example_file_path('c3_aci_2.xlsx') )  # Load the data from each file licor_exdf_list <- lapply(file_paths, function(fpath) {   read_gasex_file(fpath, 'time') })  # Get the names of all columns that are present in all of the Licor files columns_to_keep <- do.call(identify_common_columns, licor_exdf_list)  # Extract just these columns licor_exdf_list <- lapply(licor_exdf_list, function(x) {   x[ , columns_to_keep, TRUE] })  # Combine the data from all the files licor_data <- do.call(rbind, licor_exdf_list)  # Define a new column that uniquely identifies each curve licor_data[, 'curve_id'] <-   paste(licor_data[, 'species'], '-', licor_data[, 'plot'] )  # Organize the data licor_data <- organize_response_curve_data(     licor_data,     'curve_id',     c(9, 10, 16),     'CO2_r_sp' )  # Calculate the total pressure licor_data <- calculate_total_pressure(licor_data)  # Calculate temperature-dependent values of C3 photosynthetic parameters licor_data <- calculate_temperature_response(licor_data, c3_temperature_param_bernacchi)  # The default optimizer uses randomness, so we will set a seed to ensure the # results from this fit are always identical set.seed(1234)  # Fit all curves in the data set aci_results <- consolidate(by(   licor_data,   licor_data[, 'curve_id'],   fit_c3_aci,   Ca_atmospheric = 420 )) #>    user  system elapsed  #>  16.264   0.058  16.323"},{"path":"https://eloch216.github.io/PhotoGEA/articles/PhotoGEA.html","id":"viewing-the-results","dir":"Articles","previous_headings":"An Example: C3 CO2 Response Curves","what":"Viewing the Results","title":"Getting Started With PhotoGEA","text":"fit response curves, also possible view fits, parameter estimates, confidence intervals. PhotoGEA provides several tools , enable users check fit quality ensure reliable parameter estimates used subsequent analysis. can plot measured values net assimilation (black circles), fitted values net assimilation (), limiting assimilation rates calculated fitting procedure: Rubisco limited rate (Ac), RuBP regeneration limited rate (Aj), triose phosphate utilization (TPU) limited rate (Ap). basic quality check can make sure fits make sense look believable:  figure, curves missing one potential limiting rates. occurs, means points curve found limited process. Another way check overall quality fits plot residuals, randomly distributed:  individual parameters, can take look best-fit values associated confidence intervals. example showing values Tp_at_25, maximum rate triose phosphate utilization. estimates upper limit Inf best estimate NA. comparison fits shown indicates curves, insufficiently many points found TPU-limited, preventing reliable estimate Tp_at_25. also possible plot best-fit values parameter averaged across subsets data bar chart, error bars represent standard error mean. values NA excluded. plot values Vcmax 25 degrees C species.","code":"plot_c3_aci_fit(aci_results, 'curve_id', 'Ci', ylim = c(-10, 80)) xyplot(   A_residuals ~ Ci | curve_id,   data = aci_results$fits$main_data,   type = 'b',   pch = 16,   grid = TRUE,   xlab = paste0('Intercellular CO2 concentration (', aci_results$fits$units$Ci, ')'),   ylab = paste0('Assimilation rate residual (measured - fitted)\\n(', aci_results$fits$units$A, ')'), ) aci_results$parameters[, c('curve_id', 'Tp_at_25_lower', 'Tp_at_25', 'Tp_at_25_upper')] #>       curve_id Tp_at_25_lower  Tp_at_25 Tp_at_25_upper #> 1  soybean - 1       7.664314  8.167682       8.609374 #> 2 soybean - 5a           -Inf        NA            Inf #> 3 soybean - 5b           -Inf        NA            Inf #> 4  tobacco - 1       7.597912        NA            Inf #> 5  tobacco - 2      12.100282        NA            Inf #> 6  tobacco - 4       9.901601 10.282169      10.671615 barchart_with_errorbars(   aci_results$parameters[, 'Vcmax_at_25'],   aci_results$parameters[, 'species'],   xlab = 'Species',   ylab = paste0('Vcmax at 25 degrees C (', aci_results$parameters$units$Vcmax_at_25, ')'),   ylim = c(0, 200) )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/PhotoGEA.html","id":"learning-more","dir":"Articles","previous_headings":"","what":"Learning More","title":"Getting Started With PhotoGEA","text":"PhotoGEA package includes extensive documentation, articles added time: Publication Gallery: Includes list publications describe use PhotoGEA, along links corresponding analysis scripts. Analyzing C3 -Ci Curves (example detailed analysis demonstrated .) Analyzing C4 -Ci Curves Analyzing Ball-Berry Data Analyzing TDL Data Analyzing Mesophyll Conductance Data Creating Processing Tools: Discusses create functions compatible PhotoGEA apply new types processing. Combining PhotoGEA Packages: Discusses create wrappers functions packages extend processing capabilities PhotoGEA. Developing Data Analysis Pipeline: Discusses PhotoGEA provides functionality parts data analysis pipeline, including loading validating data – can help save time improve reproducibility data analysis! Working Extended Data Frames: Discusses work extended data frames, critical part PhotoGEA. Frequently Asked Questions: Provides answers frequently asked questions PhotoGEA. Guide Licor LI-6800 User Constants: Discusses include metadata log files using Licor LI-6800 gas exchange measurement system, provides advice dealing data sets contain user constants.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/LI6800_user_constants.html","id":"overview","dir":"Articles > Web_only","previous_headings":"","what":"Overview","title":"Guide to Licor LI-6800 User Constants","text":"performing gas exchange experiments, measurements variables like AnA_n, CiC_i, gswg_{sw} important pieces data record–’s also crucial include information particular plant measured, species treatment group. descriptive data type metadata, defined “data provides information data.” “User Constant” interface, Licor LI-6800 instruments provide way include user-defined descriptive metadata log files, alongside measured values always recorded. used effectively, Licor user constants can convenient way keep track metadata, helping streamline data analysis workflow. Simply put, including user constants data make processing analyzing data much easier. two main situations user constants can help: Applying operation every curve data set. approach can used automate processing steps curve fitting. image shows curve identifier (type metadata can stored user constant, determined values user constants) can used purpose. Performing statistical operations compare results across groups. Following example image , entail running t-test check signficiant differences J rings. Short examples applications can found Examples User Constant Applications section, additional examples can found throughout PhotoGEA documentation, Analyzing C3 -Ci Curves vignette. Illustration processing multiple parts table using consolidate. , id ring user constants, id column identifies individual curve, ring value indicates whether leaf grown ambient () elevated (E) carbon dioxide conditions. processing function fits single -Ci curve returns list two tables called fits parameters. first two sections vignette provide key advice set user constants can used : Choosing User Constants – Advice choosing pieces metadata record, including examples. Using User Constants – Advice setting user constants measurements. later sections include information related topics: Examples User Constant Applications – short examples using user constants processing analyzing data, building brief overview . Using File Names Log Remarks – discussion alternatives user constants; section illustrates user constants generally simpler easier. Deal Files Metadata – discussion log files user constants, file names, log remarks used record metadata. Throughout vignette, key pieces advice shown italics. final section vignette (Summary Advice Using Licor LI-6800 User Constants) contains list pieces advice. Although vignette specialized Licor LI-6800 instruments, gas exchange systems similar ways record user constants, advice general, even particular details may change instruments. advice also specialized measuring response curves, sometimes mention considerations may apply making spot measurements. Several R examples vignette use PhotoGEA lattice packages, load now:","code":"library(PhotoGEA) library(lattice)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/LI6800_user_constants.html","id":"choosing-user-constants","dir":"Articles > Web_only","previous_headings":"","what":"Choosing User Constants","title":"Guide to Licor LI-6800 User Constants","text":"setting user constants Licor LI-6800 interface, necessary decide pieces metadata record. considerations keep mind choosing : User constants generally reflect experimental design comparisons eventually plan make. example, field experiment two cultivars two treatments, make sense include cultivar treatment user constants. combination, user constants uniquely identify response curve data set. experiment , plan measure multiple biological replicates cultivar treatment, cultivar treatment uniquely identify measurement. case make sense also include replicate user constant. Don’t include many user constants. user constant takes time effort define, update measurements. Make sure one clear purpose, redundant another user constant.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/LI6800_user_constants.html","id":"examples-of-user-constants","dir":"Articles > Web_only","previous_headings":"Choosing User Constants","what":"Examples of User Constants","title":"Guide to Licor LI-6800 User Constants","text":"examples user constants used researchers: instrument, species, plot, replicate: used field measurements plants different species, multiple plots species. Including “nickname” instrument user constant can make easy check instrument-specific bias measurements. machine, line, sample, condition: used growth chamber measurements plants different lineages grown different temperature conditions. , sample ID number plays role replicate examples. cultivar, plot, leaf_type: used field measurements plants different cultivars arranged several plots. plot, two different leaf types (sunlit shaded) measured. instrument, plant_id: minimal example sufficient uniquely identify curve set. , researcher using randomized block design greenhouse experiment, plant ID consisted block number genotype, formatted like block - genotype. possible extract block genotype information ID, probably easier use separate user constants block genotype instead single plant_id. See Using File Names Log Remarks section details extracting components multi-part identifier.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/LI6800_user_constants.html","id":"using-user-constants","dir":"Articles > Web_only","previous_headings":"","what":"Using User Constants","title":"Guide to Licor LI-6800 User Constants","text":"practical terms, three main steps involved using Licor LI-6800 user constants: Defining user constants Choosing logging options Setting values user constants discussed following three sections.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/LI6800_user_constants.html","id":"defining-the-user-constants","dir":"Articles > Web_only","previous_headings":"Using User Constants","what":"Defining the User Constants","title":"Guide to Licor LI-6800 User Constants","text":"“LI-6800 Operating Instructions” includes section defining user constants. great place start, ’s missing important practical details: User constants must defined opening log file. user constants (potentially) included columns log file, must defined opening log file. can defined warmup tests, good time get sorted . User constant definitions retained machine uses. Just like environmental settings (humiditity, temperature, light), user constant definitions retained log file closed machine powered . , first start using machine, may see user constant definitions previous experiment used . Just go ahead replace definitions. Always log user constants columns, rows. Logging user constants rows breaks main data table log file. basic expectation table row represents set observations column. longer true user constants logged rows, makes table difficult process. Never reset logging. “reset default logging” option selected, value user constant change default single log. running response curve, means first row curve desired value user constant, remaining rows default value. confusing. Potentially, acceptable “reset default logging” making spot measurements, even case clear benefit resetting . rare need computed variable. Computed variables almost never needed. exception want see value variable included typical log file, Ball-Berry index (measuring Ball-Berry curves). consistent spelling, capitalization, spacing across machines replicates. using multiple machines single experiment plan eventually combine data separate log file, important use consistent spelling capitalization across user constant definitions. example, one machine user constant called Species another species, R identify column reading log files. Consider using dropdown menu. user constants simple values, setting values keyboard/number pad best choice. example, replicate user constant take numeric values 1 5, easy enter using keyboard. However, sometimes values complicated; example, construct_id user constant might take values h1na, zg5b, WT. case, spelling tedious error-prone, better use dropdown menu instead keyboard. Consider using configuration file define user constants. User constant definitions can saved configuration file, can transferred USB stick. , configuration file can copied machines, definitions can loaded. can save time help ensure user constants use consistent spelling capitalization across machines.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/LI6800_user_constants.html","id":"choosing-logging-options","dir":"Articles > Web_only","previous_headings":"Using User Constants","what":"Choosing Logging Options","title":"Guide to Licor LI-6800 User Constants","text":"“LI-6800 Operating Instructions” includes section logging options. One logging options pertains user constants. rare prompt manual logs. “prompt (manual) logs” option selected, prompt window appear making manual log; prompt allow enter values user constant. measuring response curves, manual logs rarely made, strong reason use option. may helpful making spot measurements, though.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/LI6800_user_constants.html","id":"setting-values-of-the-user-constants","dir":"Articles > Web_only","previous_headings":"Using User Constants","what":"Setting Values of the User Constants","title":"Guide to Licor LI-6800 User Constants","text":"values user constants can set changed time constants defined. , first make sure “Edit/Reorder” checkbox selected. , simply click user constant; window appear can type new value select dropdown menu. user constants set log columns, row log file contain current value user constant. none user constants set “reset default,” values remain values specified change . Make user constants part measurement routine. clamping new leaf, good idea double check environment variables, update user constants accurately describe new leaf. Make sure steps part measurement routine. machine automatically remind update user constant values. Record metadata second place. User constants convenient way ensure important metadata stored alongside gas exchange data . However, ’s easy make mistakes field conditions, sometimes forget update user constants clamping new leaf starting new curve. “insurance policy,” wise record metadata second place, typically paper lab notebook. paper record, just indicate sequence samples machine measures throughout day. enable correct errors user constants.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/LI6800_user_constants.html","id":"applying-an-operation-to-every-curve-in-a-data-set","dir":"Articles > Web_only","previous_headings":"Examples of User Constant Applications","what":"Applying an Operation to Every Curve in a Data Set","title":"Guide to Licor LI-6800 User Constants","text":"often want apply operation every response curve data set. something relatively simple, plotting AnA_n values CiC_i values, something complicated, fitting Farquhar-von-Caemmerer-Berry model estimate values key photosynthetic parameters. cases, prerequisite must able identify curve set. User constants help achieve . example, every curve set can identified unique values species plot columns, can define new curve_identifier column combining values species plot. , can use column split set chunks representing individual curves, apply operation chunk. example using Licor log file included PhotoGEA package. file created, researcher specified values user constants called species plot. file contains several Ball-Berry curves, special type light response curve intended fit using Ball-Berry model:","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('ball_berry_1.xlsx') )  # Create a `curve_identifier` column based on the `species` and `plot` columns licor_file[, 'curve_identifier'] <- paste(   licor_file[, 'species'],   licor_file[, 'plot'] )  # Plot A vs. Qin for each curve in the data set xyplot(   licor_file[, 'A'] ~ licor_file[, 'Qin'] | licor_file[, 'curve_identifier'],   type = 'b',   pch = 16,   xlab = 'Qin (micromol / m^2 / s)',   ylab = 'A (micromol / m^2 / s)' ) # Get the number of measured points in each curve by(   licor_file,   licor_file[, 'curve_identifier'],   nrow ) #> $`soybean 1a` #> [1] 7 #>  #> $`soybean 1b` #> [1] 7 #>  #> $`soybean 5` #> [1] 7 #>  #> $`tobacco 2` #> [1] 7  # A more complex example: apply the `fit_ball_berry` function to each curve licor_file <- calculate_total_pressure(licor_file) licor_file <- calculate_gas_properties(licor_file) licor_file <- calculate_ball_berry_index(licor_file)  bb_results <- consolidate(by(   licor_file,   licor_file[, 'curve_identifier'],   fit_ball_berry ))"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/LI6800_user_constants.html","id":"performing-statistical-operations","dir":"Articles > Web_only","previous_headings":"Examples of User Constant Applications","what":"Performing Statistical Operations","title":"Guide to Licor LI-6800 User Constants","text":"fitting functions PhotoGEA preserve user constants outputs, makes easy perform statistical operations resulting parameter estimates. Continuing example , can calculate mean Ball-Berry intercept species plot mean Ball-Berry slope:  simple example simple data set. realistic examples perform stats tests compute ANOVA tables.","code":"# Get the Ball-Berry parameter estimates bb_parameters <- bb_results$parameters  # Calculate mean Ball-Berry intercept for each species by(   bb_parameters,   bb_parameters[, 'species'],   function(x) {     mean(x[, 'bb_intercept'])   } ) #> $soybean #> [1] 0.1141754 #>  #> $tobacco #> [1] 0.09410874  # Make barchart of mean Ball-Berry slope for each species barchart_with_errorbars(   bb_parameters[, 'bb_slope'],   bb_parameters[, 'species'],   ylim = c(0, 8),   ylab = 'Ball-Berry slope (dimensionless)' )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/LI6800_user_constants.html","id":"using-file-names-or-log-remarks","dir":"Articles > Web_only","previous_headings":"","what":"Using File Names or Log Remarks","title":"Guide to Licor LI-6800 User Constants","text":"Besides user constants, methods digitally storing metadata. Perhaps simplest approach include one response curve file, use file name store metadata. example, file name formatted like YYYY-MM-DD species plot replicate.xlsx. Another option use log remarks, free-form text rows saved log file. Remarks intended comments “Wow, plant looks terrible,” can repurposed store metadata. Following example , remark message something like species plot replicate. downside approaches provide one field storing metadata. words, examples , instead creating separate columns species, plot, replicate, approaches create single description three together. want later extract individual species, plot, replicate values, necessary “parse” combined text string. User constants save time long run compared storing metadata file names remarks. “parsing issue,” ’s generally simpler time-efficient just make separate user constants important piece metadata. Although ’s often simple human parse string, can difficult computer. general way parse string, discuss options .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/LI6800_user_constants.html","id":"automated-parsing-using-r","dir":"Articles > Web_only","previous_headings":"Using File Names or Log Remarks","what":"Automated Parsing Using R","title":"Guide to Licor LI-6800 User Constants","text":"Automated parsing can sometimes accomplished R combination strsplit, grep, gsub functions. example using strsplit: ’s easy imagine scenarios approach parsing fail. example, suppose typo made making remark, written maize2 3. Let’s see happens: Similar issues occur remark components separated dashes instead spaces. issues like , automated parsing can sometimes difficult complex. Even just detecting spaces dashes used can require lot code, can seen example. just mistakes remarks, can manually fixed editing log files reading . However, limit number formatting issues potentially occur. may think can perfectly follow clear format remarks, everyone makes mistakes.","code":"# Set up a hypothetical user remark formatted like \"species plot replicate\" remark_message <- 'maize 2 3'  # We can split this message into components that are separated by spaces split_remark_message <- strsplit(remark_message, split = ' ') str(split_remark_message) #> List of 1 #>  $ : chr [1:3] \"maize\" \"2\" \"3\"  # Then we can identify each component of the split message species   <- split_remark_message[[1]][1] plot      <- split_remark_message[[1]][2] replicate <- split_remark_message[[1]][3]  str(list(species = species, plot = plot, replicate = replicate)) #> List of 3 #>  $ species  : chr \"maize\" #>  $ plot     : chr \"2\" #>  $ replicate: chr \"3\" # Set up a hypothetical user remark with a typo remark_message <- 'maize2 3'  # We can split this message into components that are separated by spaces split_remark_message <- strsplit(remark_message, split = ' ')  # Then we can identify each component of the split message species   <- split_remark_message[[1]][1] plot      <- split_remark_message[[1]][2] replicate <- split_remark_message[[1]][3]  str(list(species = species, plot = plot, replicate = replicate)) #> List of 3 #>  $ species  : chr \"maize2\" #>  $ plot     : chr \"3\" #>  $ replicate: chr NA"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/LI6800_user_constants.html","id":"manual-parsing-using-r","dir":"Articles > Web_only","previous_headings":"Using File Names or Log Remarks","what":"Manual Parsing Using R","title":"Guide to Licor LI-6800 User Constants","text":"possible side-step complexities automated parsing using code manually sets values individual metadata variables based value file name user remark. example, continuing example , something like following: interpreting many different file names remarks, alternative parsing can streamlined bit using PhotoGEA’s set_variable function, always tedious. ’s example done:","code":"if (remark_message == 'maize2 3') {   species   <- 'maize'   plot      <- 2   replicate <- 3 }  str(list(species = species, plot = plot, replicate = replicate)) #> List of 3 #>  $ species  : chr \"maize\" #>  $ plot     : num 2 #>  $ replicate: num 3 # Say we have a data frame of spot measurements that also includes user remarks # with inconsistent formatting licor_data <- data.frame(   A = c(1.1, 1.2, 1.3, 1.4, 1.5),   Ci = c(291, 292, 293, 294, 295),   user_remark = c('maize 2 3', 'maize-1 4', 'soybean3 1', 'maiz 5 6', '3 2 soybean') )  print(licor_data) #>     A  Ci user_remark #> 1 1.1 291   maize 2 3 #> 2 1.2 292   maize-1 4 #> 3 1.3 293  soybean3 1 #> 4 1.4 294    maiz 5 6 #> 5 1.5 295 3 2 soybean  # Now we can manually parse the remarks using `set_variable` licor_data <- set_variable(   licor_data,   'species',   id_column = 'user_remark',   value_table = list(     `maize 2 3`   = 'maize',     `maize-1 4`   = 'maize',     `soybean3 1`  = 'soybean',     `maiz 5 6`    = 'maize',     `3 2 soybean` = 'soybean'   ) )  licor_data <- set_variable(   licor_data,   'plot',   id_column = 'user_remark',   value_table = list(     `maize 2 3`   = 2,     `maize-1 4`   = 1,     `soybean3 1`  = 3,     `maiz 5 6`    = 5,     `3 2 soybean` = 3   ) )  licor_data <- set_variable(   licor_data,   'replicate',   id_column = 'user_remark',   value_table = list(     `maize 2 3`   = 3,     `maize-1 4`   = 4,     `soybean3 1`  = 1,     `maiz 5 6`    = 6,     `3 2 soybean` = 2   ) )  print(licor_data) #>     A  Ci user_remark species plot replicate #> 1 1.1 291   maize 2 3   maize    2         3 #> 2 1.2 292   maize-1 4   maize    1         4 #> 3 1.3 293  soybean3 1 soybean    3         1 #> 4 1.4 294    maiz 5 6   maize    5         6 #> 5 1.5 295 3 2 soybean soybean    3         2"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/LI6800_user_constants.html","id":"manual-parsing-using-excel","dir":"Articles > Web_only","previous_headings":"Using File Names or Log Remarks","what":"Manual Parsing Using Excel","title":"Guide to Licor LI-6800 User Constants","text":"working Excel log files, ’s also possible manually add new columns individual metadata variables, fill appropriate values. can time-consuming tedious, especially many files process, sometimes might best option.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/LI6800_user_constants.html","id":"how-to-deal-with-files-that-have-no-metadata","dir":"Articles > Web_only","previous_headings":"","what":"How To Deal With Files That Have No Metadata","title":"Guide to Licor LI-6800 User Constants","text":"Sometimes may find working files contain helpful metadata form user constants remarks, even file names. Don’t worry – ways deal situation, long metadata available somewhere.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/LI6800_user_constants.html","id":"adding-metadata-in-r","dir":"Articles > Web_only","previous_headings":"How To Deal With Files That Have No Metadata","what":"Adding Metadata in R","title":"Guide to Licor LI-6800 User Constants","text":"may require creativity, usually way add basic curve identifier data set R. example, suppose files contain response curves 17 points. files, observations 1–17 constitute one curve, observations 18–34 constitute next curve, . case, following code used add curve identifier column based file name sequential curve number: course, code may problems curves different numbers points, manual log accidentally made (values obs don’t line properly). ’s creativity may required. basic curve identifier added, values metadata can added following set_variable strategy described Manual Parsing Using R section.","code":"# Specify the number of points in each curve pts_in_curve <- 17  # Create a new identifier column formatted like `file_name - curve_number` licor_data[, 'curve_identifier'] <- paste(   tools::file_path_sans_ext(basename(licor_data[, 'file_name'])),   ceiling(licor_data[, 'obs'] / pts_in_curve),   sep = ' - ' )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/LI6800_user_constants.html","id":"adding-metadata-in-excel","dir":"Articles > Web_only","previous_headings":"How To Deal With Files That Have No Metadata","what":"Adding Metadata in Excel","title":"Guide to Licor LI-6800 User Constants","text":"working Excel log files, ’s also possible manually add new columns individual metadata variables, fill appropriate values. can time-consuming tedious, especially many files process, sometimes might best option.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/LI6800_user_constants.html","id":"summary-of-advice-for-using-licor-li-6800-user-constants","dir":"Articles > Web_only","previous_headings":"","what":"Summary of Advice for Using Licor LI-6800 User Constants","title":"Guide to Licor LI-6800 User Constants","text":"User constants generally reflect experimental design comparisons eventually plan make. combination, user constants uniquely identify response curve data set. User constants must defined opening log file. User constant definitions retained machine uses. Always log user constants columns, rows. Never reset logging. rare need computed variable. consistent spelling, capitalization, spacing across machines replicates. Consider using dropdown menu. Consider using configuration file define user constants. rare prompt manual logs. Make user constants part measurement routine. Record metadata second place. User constants save time long run compared storing metadata file names remarks.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_ball_berry_data.html","id":"overview","dir":"Articles > Web_only","previous_headings":"","what":"Overview","title":"Analyzing Ball-Berry Data","text":"vignette, give example showing analyze Ball-Berry data using PhotoGEA package. commands vignette can used initialize script, described Customizing Script.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_ball_berry_data.html","id":"the-model","dir":"Articles > Web_only","previous_headings":"Background","what":"The Model","title":"Analyzing Ball-Berry Data","text":"Ball-Berry model simple way describe response leaf’s stomata assimilation rate local environmental conditions. Specifically, predicts stomatal conductance water vapor using following equation: gsw=b0+b1**hs/Cs g_{sw} = b_0 + b_1 * A_n * h_s / C_s gswg_{sw} stomatal conductance, AnA_n net assimilation rate, hsh_s relative humidity leaf surface, CsC_s CO2 concentration leaf surface. term *hs/CsA_n * h_s / C_s commonly referred Ball-Berry index, model can described predicting linear relationship stomatal conductance Ball-Berry index. intercept (b0b_0) slope (b1b_1) linear relationship referred Ball-Berry parameters, describe leaf’s stomatal response. Although model certainly oversimplification, encode important stomatal responses. example, humidity low, stomata real plant tend close, reducing stomatal conductance. Likewise, CO2 concentration around leaf depleted, stomata real plant tend open, increasing somatal conductance. information model possible alternatives, see following papers: Ball, Woodrow, Berry (1987) Tardieu Davies (1993) Leuning (1995) Dewar (2002)","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_ball_berry_data.html","id":"the-data","dir":"Articles > Web_only","previous_headings":"Background","what":"The Data","title":"Analyzing Ball-Berry Data","text":"Ball-Berry parameters typically determined measuring Ball-Berry curve, one environmental factors influence Ball-Berry index systematically varied across range values. value, care taken AnA_n gswg_{sw} reached steady-state values, AnA_n, gswg_{sw}, key pieces information recorded. Finally, linear fit experimentally observed gswg_{sw} function Ball-Berry index performed extract values Ball-Berry intercept slope. photosynthetic gas exchange measurements commonly performed using Licor portable photosynthesis system Li-6400 Li-6800. machines record values AnA_n, gswg_{sw}, many important quantities. produce two types output files: plain-text Microsoft Excel. often convenient work Excel files since entries can easily modified (example, remove extraneous row add new column). hand, can difficult access file contents using pieces software R. However, PhotoGEA package reduces barrier including tools reading Licor Excel files R, demonstrated following section.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_ball_berry_data.html","id":"loading-packages","dir":"Articles > Web_only","previous_headings":"","what":"Loading Packages","title":"Analyzing Ball-Berry Data","text":"always, first step load packages using. addition PhotoGEA, also use lattice package generating plots. lattice package installed R setup, can install typing install.packages('lattice').","code":"# Load required packages library(PhotoGEA) library(lattice)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_ball_berry_data.html","id":"loading-licor-data","dir":"Articles > Web_only","previous_headings":"","what":"Loading Licor Data","title":"Analyzing Ball-Berry Data","text":"PhotoGEA package includes two files representing Ball-Berry data measured using two Li-6800 instruments. data stored Microsoft Excel files, includes curves measured two different crop species (tobacco soybean) several different plots . curve seven-point light response curve; words, incident light intensity varied change AnA_n hence Ball-Berry index. Although two files based real data, noise added since unpublished, files used examples. files stored computer somewhere R package installation directory, full paths files can obtained PhotoGEA_example_file_path: (Note: loading files analysis, advisable use PhotoGEA_example_file_path done . Instead, file paths can directly written, files can chosen using interactive window. See Input Files information.) actually read data files store R objects, use read_gasex_file function PhotoGEA. Since multiple files read, call function file using lapply: result command R list “extended data frames” (abbreviated exdf objects). exdf class special data structure defined PhotoGEA package. many ways, exdf object equivalent data frame, major difference exdf object includes units column. information, type ?exdf R terminal access built-help menu entry, check Working Extended Data Frames vignette. Generally, convenient work single exdf object rather list , next step combine objects list. action can accomplished using rbind function, combines table-like objects rows; words, stacks two tables vertically. action makes sense tables columns, combine exdf objects, make sure case. PhotoGEA package includes function called identify_common_columns can used get names columns present Licor files. , can extract just columns, combine exdf objects single one. Now single R object called licor_data includes data several Licor Excel files. information consolidating information multiple files, see Common Patterns section Working Extended Data Frames vignette.","code":"# Define a vector of paths to the files we wish to load; in this case, we are # loading example files included with the PhotoGEA package file_paths <- c(   PhotoGEA_example_file_path('ball_berry_1.xlsx'),   PhotoGEA_example_file_path('ball_berry_2.xlsx') ) # Load each file, storing the result in a list licor_exdf_list <- lapply(file_paths, function(fpath) {   read_gasex_file(fpath, 'time') }) # Get the names of all columns that are present in all of the Licor files columns_to_keep <- do.call(identify_common_columns, licor_exdf_list)  # Extract just these columns licor_exdf_list <- lapply(licor_exdf_list, function(x) {   x[ , columns_to_keep, TRUE] })  # Use `rbind` to combine all the data licor_data <- do.call(rbind, licor_exdf_list)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_ball_berry_data.html","id":"checking-licor-data","dir":"Articles > Web_only","previous_headings":"","what":"Checking Licor Data","title":"Analyzing Ball-Berry Data","text":"extracting Ball-Berry parameters, good idea basic checks data ensure organized properly measured properly.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_ball_berry_data.html","id":"basic-checks","dir":"Articles > Web_only","previous_headings":"Checking Licor Data","what":"Basic Checks","title":"Analyzing Ball-Berry Data","text":"First, make sure column data whose value uniquely identifies curve. particular data set, several “user constants” defined making measurements help identify curve: instrument, species, plot. However, neither columns alone sufficient uniquely identify curve. can solve issue creating new column combines values : measuring response curves (type gas exchange data), strongly recommended record key pieces metadata log files using “user constants,” done example. information, please see Guide Licor LI-6800 User Constants, also includes advice dealing data sets contain metadata. next step make sure column correctly identifies response curve. , can use check_response_curve_data function PhotoGEA. supply name column uniquely identify response curve (curve_identifier), expected number points curve (7), name “driving” column follow sequence curve (Qin), tolerance values driving column (1.0 mol / m^2 / s). data passes checks, function output produce messages. (information, see built-help menu entry typing ?check_response_curve_data, visit Frequently Asked Questions.) However, check_response_curve_data detects issue, print helpful message R terminal. example, specified wrong number points, wrong identifier column, unrealistic tolerance, get error messages:","code":"# Create a new identifier column formatted like `instrument - species - plot` licor_data[ , 'curve_identifier'] <-   paste(licor_data[ , 'instrument'], '-', licor_data[ , 'species'], '-', licor_data[ , 'plot']) # Make sure the data meets basic requirements check_response_curve_data(licor_data, 'curve_identifier', 7, 'Qin', 1.0) check_response_curve_data(licor_data, 'curve_identifier', 8) #>       curve_identifier npts #> 1 ripe4 - soybean - 1a    7 #> 2 ripe4 - soybean - 1b    7 #> 3  ripe4 - soybean - 5    7 #> 4  ripe4 - tobacco - 2    7 #> 5  ripe5 - soybean - 1    7 #> 6 ripe5 - soybean - 5a    7 #> 7 ripe5 - soybean - 5c    7 #> 8  ripe5 - tobacco - 5    7 #> Error in check_response_curve_data(licor_data, \"curve_identifier\", 8): One or more curves does not have the expected number of points.  check_response_curve_data(licor_data, 'species', 7) #>   species npts #> 1 soybean   42 #> 2 tobacco   14 #> Error in check_response_curve_data(licor_data, \"species\", 7): One or more curves does not have the expected number of points.  check_response_curve_data(licor_data, 'curve_identifier', 7, 'Qin', 0.1) #>  [1] \"Point 1 from curve `ripe5 - soybean - 5a` has value `Qin = 2000.14`, but the average value for this point across all curves is `Qin = 2000`\"       #>  [2] \"Point 1 from curve `ripe5 - soybean - 5c` has value `Qin = 2000.12`, but the average value for this point across all curves is `Qin = 2000`\"       #>  [3] \"Point 2 from curve `ripe5 - soybean - 1` has value `Qin = 1100.11`, but the average value for this point across all curves is `Qin = 1099.965`\"    #>  [4] \"Point 3 from curve `ripe5 - soybean - 1` has value `Qin = 800.223`, but the average value for this point across all curves is `Qin = 800.043375`\"  #>  [5] \"Point 3 from curve `ripe5 - tobacco - 5` has value `Qin = 800.176`, but the average value for this point across all curves is `Qin = 800.043375`\"  #>  [6] \"Point 4 from curve `ripe4 - soybean - 5` has value `Qin = 650.108`, but the average value for this point across all curves is `Qin = 650.005`\"     #>  [7] \"Point 4 from curve `ripe5 - soybean - 1` has value `Qin = 650.115`, but the average value for this point across all curves is `Qin = 650.005`\"     #>  [8] \"Point 5 from curve `ripe4 - soybean - 1a` has value `Qin = 500.135`, but the average value for this point across all curves is `Qin = 500.026875`\" #>  [9] \"Point 6 from curve `ripe5 - soybean - 1` has value `Qin = 350.145`, but the average value for this point across all curves is `Qin = 350.04`\"      #> [10] \"Point 7 from curve `ripe4 - tobacco - 2` has value `Qin = 200.236`, but the average value for this point across all curves is `Qin = 200.0565`\" #> Error in check_response_curve_data(licor_data, \"curve_identifier\", 7, : The curves do not all follow the same sequence of the driving variable."},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_ball_berry_data.html","id":"qualitative-checks","dir":"Articles > Web_only","previous_headings":"Checking Licor Data","what":"Qualitative Checks","title":"Analyzing Ball-Berry Data","text":"Since data passed basic checks, can now take look make sure seems reasonable. Sometimes Licor override temperature humidity controls making measurements; case, conditions inside measurement chamber may stable, curves may accurately reflect plant’s true steady-state stomatal response. can check types issues making plots. situation, lattice library makes simple include curve separate subplot figure. following sections, generate several different plots check curve quality.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_ball_berry_data.html","id":"humidity-control","dir":"Articles > Web_only","previous_headings":"Checking Licor Data > Qualitative Checks","what":"Humidity Control","title":"Analyzing Ball-Berry Data","text":", Humidifier_% Desiccant_% represent flow humidifier desiccant columns, value 0 indicates valve column fully closed value 100 indicates valve column fully opened. RHcham represents relative humidity inside chamber percentage (words, value 0 100). Qin incident photosynthetically active flux density (PPFD). curves measured, chamber humidity setpoint specified. , looking plot, check relative humidity fairly constant curve. Typically, accompanied relatively smooth changes valve percentages accomodate changes ambient humidity leaf photosynthesis. plot, data looks good.","code":"# Make a plot to check humidity control xyplot(   RHcham + `Humidifier_%` + `Desiccant_%` ~ Qin | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(0, 100),   xlim = c(0, 2200),   xlab = paste0('Incident PPFD (', licor_data$units$Qin, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_ball_berry_data.html","id":"temperature-control","dir":"Articles > Web_only","previous_headings":"Checking Licor Data > Qualitative Checks","what":"Temperature Control","title":"Analyzing Ball-Berry Data","text":", TleafCnd leaf temperature measured using thermocouple, Txchg temperature heat exhanger used control air temperature measurement instrument. curves measured, exchanger setpoint specified. , looking plot, check Txchg constant curve leaf temperature vary erratic way. plot, data looks good.","code":"# Make a plot to check temperature control xyplot(   TleafCnd + Txchg ~ Qin | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(25, 40),   xlim = c(0, 2200),   xlab = paste0('Incident PPFD (', licor_data$units$Qin, ')'),   ylab = paste0('Temperature (', licor_data$units$TleafCnd, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_ball_berry_data.html","id":"co2-control","dir":"Articles > Web_only","previous_headings":"Checking Licor Data > Qualitative Checks","what":"CO2 Control","title":"Analyzing Ball-Berry Data","text":", CO2_s CO2 concentration sample cell CO2_r CO2 concentration reference cell. curves measured, sample cell CO2 concentration setpoint supplied. , looking plot, check CO2_s constant curve. , looks like ripe5 instrument controlling CO2 expected several curves; CO2_s constant ripe5 - soybean - 1, ripe5 - soybean - 5c, ripe5 - soybean - 5. However, CO2_r relatively constant curves, changes CO2_s smooth, reasonable expect measurements represent true steady-state values. Considering , curves acceptable based CO2 plots.","code":"# Make a plot to check CO2 control xyplot(   CO2_s + CO2_r ~ Qin | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(360, 480),   xlim = c(0, 2200),   xlab = paste0('Incident PPFD (', licor_data$units$Qin, ')'),   ylab = paste0('CO2 concentration (', licor_data$units$CO2_r, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_ball_berry_data.html","id":"stability","dir":"Articles > Web_only","previous_headings":"Checking Licor Data > Qualitative Checks","what":"Stability","title":"Analyzing Ball-Berry Data","text":"measuring response curves Licor, possible specify stability criteria point addition minimum maximum wait times. words, set point driving variable changed, machine waits stability criteria met; minimum waiting period, also maximum prevent machine waiting long. stability criteria especially important Ball-Berry curves, since stomata may take long time reach steady state. curves measured, stability criteria supplied net assimilation rate stomatal conductance gsw. stability status stored log file appropriate logging option stability set. Now, point, possible check whether stability achieved whether point logged maximum waiting period met. maximum waiting period reached plant still stabilized, data point may unreliable, important check information. plot, :OK indicates whether stable (0 , 1 yes), gsw:OK indicates whether gsw stable (0 , 1 yes), Stable indicates total number stability conditions met. , looking points Stable 2. Otherwise, can check traces see whether gsw unstable. looks like many high light points stable, may good idea remove proceeding Ball-Berry fitting.","code":"xyplot(   `A:OK` + `gsw:OK` + Stable ~ Qin | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlim = c(0, 2200),   xlab = paste0('Incident PPFD (', licor_data$units$Qin, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_ball_berry_data.html","id":"light-response-curves","dir":"Articles > Web_only","previous_headings":"Checking Licor Data > Qualitative Checks","what":"Light-Response Curves","title":"Analyzing Ball-Berry Data","text":"simply looking reasonable light-response curve shape, assimilation low light low, assimilation roughly linear response initial increases light intensity, finally reaches plateau. strong deviations expected shape may indicate plant stressed otherwise behaving abnormally, might want use curve Ball-Berry analysis. plot, three curves look like normal C3 light response curves: ripe4 - soybean - 1a, ripe4 - soybean - 1b, ripe4 - soybean - 5. strange curves likely byproduct noise intentionally added true measured data (see Data). Nevertheless, may good idea remove proceeding Ball-Berry fitting.","code":"# Make a plot to check light-response curves xyplot(   A ~ Qin | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(-5, 50),   xlim = c(0, 2200),   xlab = paste0('Incident PPFD (', licor_data$units$Qin, ')'),   ylab = paste0('Net assimilation (', licor_data$units$A, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_ball_berry_data.html","id":"cleaning-the-licor-data","dir":"Articles > Web_only","previous_headings":"Checking Licor Data","what":"Cleaning the Licor Data","title":"Analyzing Ball-Berry Data","text":"checking plots Qualitative Checks, two issues noticed: (1) points logged stability achieved (2) curves look abnormal. section, demonstrate remove unstable points weird curves using remove_points function PhotoGEA. following command remove points Stable 0 1, keeping points Stable 2; condition means stability criteria satisfied. Since identified curves may acceptable Ball-Berry fitting, can remove via remove_points function PhotoGEA: following command remove points curves acceptable Ball-Berry fitting:","code":"# Only keep points where stability was achieved licor_data <- remove_points(   licor_data,   list(Stable = c(0, 1)),   method = 'exclude' ) # Define a list of curves to remove from the data set curves_to_remove <- c(   'ripe4 - soybean - 1a',   'ripe4 - soybean - 1b',   'ripe4 - soybean - 5' )  # Remove them licor_data <- remove_points(   licor_data,   list(curve_identifier = curves_to_remove),   method = 'remove' )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_ball_berry_data.html","id":"fitting-licor-data","dir":"Articles > Web_only","previous_headings":"","what":"Fitting Licor Data","title":"Analyzing Ball-Berry Data","text":"Now checked data quality, ready perform fitting. produced instruments, Licor data files include values Ball-Berry index; fact, even include values hsh_s CsC_s required calculate Ball-Berry index. However, PhotoGEA package includes three functions help calculations: calculate_total_pressure, calculate_gas_properties, calculate_ball_berry_index. requires exdf object containing Licor data. units required column checked attempt avoid unit-related errors. information functions can obtained built-help system typing ?calculate_total_pressure, ?calculate_gas_properties, ?calculate_ball_berry_index. use sequentially calculate values Ball-Berry index: Together, functions add several new columns licor_data, including one called bb_index, includes values Ball-Berry index. information, now ready perform fitting procedure. operation, can use fit_ball_berry function PhotoGEA package, fits single Ball-Berry curve extract Ball-Berry parameters. apply function curve larger data set consolidate results, can use conjunction consolidate, also part PhotoGEA. (information functions, see built-help menu entries typing ?fit_ball_berry, ?.exdf, ?consolidate, check Common Patterns section Working Extended Data Frames vignette.) Together, functions split apart main data using curve identifier column defined (Basic Checks), make linear fit gswg_{sw} Ball-Berry index, return resulting parameters fits:","code":"# Calculate the total pressure in the Licor chamber licor_data <- calculate_total_pressure(licor_data)  # Calculate additional gas properties, including `RHleaf` and `Csurface` licor_data <- calculate_gas_properties(licor_data)  # Calculate the Ball-Berry index licor_data <- calculate_ball_berry_index(licor_data) # Fit a linear model to the Ball-Berry data ball_berry_results <- consolidate(by(   licor_data,                       # The `exdf` object containing the curves   licor_data[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_ball_berry                    # The function to apply to each chunk of `licor_data` ))"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_ball_berry_data.html","id":"viewing-the-fitted-curves","dir":"Articles > Web_only","previous_headings":"Fitting Licor Data","what":"Viewing the Fitted Curves","title":"Analyzing Ball-Berry Data","text":"made fits, now good idea visually check , making sure look reasonable. , can use plot_ball_berry_fits function PhotoGEA, also show points excluded fits data cleaning step:  fits look good!","code":"# Plot the Ball-Berry fits plot_ball_berry_fit(ball_berry_results, 'curve_identifier')"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_ball_berry_data.html","id":"viewing-the-fitted-parameter-values","dir":"Articles > Web_only","previous_headings":"Fitting Licor Data","what":"Viewing the Fitted Parameter Values","title":"Analyzing Ball-Berry Data","text":"can also take look fitted Ball-Berry parameter values, stored ball_berry_results$parameters, another exdf object. object includes many columns care . can view follows:","code":"# View the Ball-Berry parameters columns_for_viewing <-   c('instrument', 'species', 'plot', 'bb_intercept', 'bb_slope', 'r_squared')  ball_berry_parameters <-   ball_berry_results$parameters[ , columns_for_viewing, TRUE]  print(ball_berry_parameters) #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>   instrument [UserDefCon] (NA) species [UserDefCon] (NA) plot [UserDefCon] (NA) #> 1                        ripe4                   tobacco                      2 #> 2                        ripe5                   soybean                      1 #> 3                        ripe5                   soybean                     5a #> 4                        ripe5                   soybean                     5c #> 5                        ripe5                   tobacco                      5 #>   bb_intercept [fit_ball_berry] (mol m^(-2) s^(-1)) #> 1                                        0.08778255 #> 2                                        0.21437406 #> 3                                        0.10722148 #> 4                                        0.11118324 #> 5                                        0.13565311 #>   bb_slope [fit_ball_berry] (dimensionless) r_squared [fit_ball_berry] () #> 1                                  3.864316                     0.6452714 #> 2                                  4.462244                     0.9004803 #> 3                                  4.823671                     0.8866346 #> 4                                  4.750743                     0.7726284 #> 5                                  4.097481                     0.9849869"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_ball_berry_data.html","id":"extracting-average-values","dir":"Articles > Web_only","previous_headings":"Fitting Licor Data","what":"Extracting Average Values","title":"Analyzing Ball-Berry Data","text":"Finally, can extract average values Ball-Berry parameters species using basic_stats function PhotoGEA:","code":"# Compute the average and standard error for the Ball-Berry slope and intercept # for each species ball_berry_averages <- basic_stats(   ball_berry_results$parameters,   'species' )  # View the averages and errors columns_to_view <- c(   'species',   'bb_intercept_avg', 'bb_intercept_stderr',   'bb_slope_avg', 'bb_slope_stderr' ) print(ball_berry_averages[ , columns_to_view, TRUE]) #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>   species [UserDefCon] (NA) #> 1                   soybean #> 2                   tobacco #>   bb_intercept_avg [fit_ball_berry] (mol m^(-2) s^(-1)) #> 1                                             0.1442596 #> 2                                             0.1117178 #>   bb_intercept_stderr [fit_ball_berry] (mol m^(-2) s^(-1)) #> 1                                               0.03507588 #> 2                                               0.02393528 #>   bb_slope_avg [fit_ball_berry] (dimensionless) #> 1                                      4.678886 #> 2                                      3.980898 #>   bb_slope_stderr [fit_ball_berry] (dimensionless) #> 1                                        0.1103477 #> 2                                        0.1165826"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_ball_berry_data.html","id":"customizing-your-script","dir":"Articles > Web_only","previous_headings":"","what":"Customizing Your Script","title":"Analyzing Ball-Berry Data","text":"Note commands vignette written general way can used basis Ball-Berry analysis script (see Commands Document). order use script, following changes may required. may also others specifically mentioned .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_ball_berry_data.html","id":"input-files","dir":"Articles > Web_only","previous_headings":"Customizing Your Script","what":"Input Files","title":"Analyzing Ball-Berry Data","text":"file paths specified file_paths need modified point Licor files. One way script simply write relative absolute paths files wish load. example, replace previous definition file_paths one: may also want consider using choose_input_licor_files function PhotoGEA; function create pop-browser window can interactively select set files. Sometimes convenient writing file paths names. example, replace previous definition file_paths one: Unfortunately, choose_input_licor_files available interactive R sessions running Microsoft Windows, also platform-independent option: choose_input_files. See Translation section Developing Data Analysis Pipeline vignette details.","code":"# Define a vector of paths to the files we wish to load file_paths <- c(   'myfile1.xlsx',        # `myfile1.xlsx` must be in the current working directory   'C:/documents/myfile2' # This is an absolute path to `myfile2` ) # Interactively define a vector of paths to the files we wish to load file_paths <- choose_input_licor_files()"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_ball_berry_data.html","id":"curve-identifier","dir":"Articles > Web_only","previous_headings":"Customizing Your Script","what":"Curve Identifier","title":"Analyzing Ball-Berry Data","text":"Depending user constants defined Licor Excel files, may need modify definition curve_identifier column.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_ball_berry_data.html","id":"excluded-curves","dir":"Articles > Web_only","previous_headings":"Customizing Your Script","what":"Excluded Curves","title":"Analyzing Ball-Berry Data","text":"Depending qualitative data checks, may need change definition curves_to_remove vector.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_ball_berry_data.html","id":"averages-and-standard-errors","dir":"Articles > Web_only","previous_headings":"Customizing Your Script","what":"Averages and Standard Errors","title":"Analyzing Ball-Berry Data","text":"Depending data organized, may want change column used divide data calculating averages standard errors.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_ball_berry_data.html","id":"plots","dir":"Articles > Web_only","previous_headings":"Customizing Your Script","what":"Plots","title":"Analyzing Ball-Berry Data","text":"may need change axis limits plots. Alternatively, can remove , allowing xyplot automatically choose .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_ball_berry_data.html","id":"saving-results","dir":"Articles > Web_only","previous_headings":"Customizing Your Script","what":"Saving Results","title":"Analyzing Ball-Berry Data","text":"may want use write.csv save fitting results csv files. example, following commands allow interactively choose output filenames resulting csv files:","code":"write.csv(ball_berry_results$fits, file.choose(), row.names = FALSE) write.csv(ball_berry_results$parameters, file.choose(), row.names = FALSE) write.csv(ball_berry_averages, file.choose(), row.names = FALSE)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_ball_berry_data.html","id":"commands-from-this-document","dir":"Articles > Web_only","previous_headings":"","what":"Commands From This Document","title":"Analyzing Ball-Berry Data","text":"following code chunk includes central commands used throughout document. compiled make easy copy/paste text file initialize script. Annotation also added clearly indicate four steps involved data analysis, described Developing Data Analysis Pipeline vignette.","code":"### ### PRELIMINARIES: ### Loading packages, defining constants, creating helping functions, etc. ###  # Load required packages library(PhotoGEA) library(lattice)  ### ### TRANSLATION: ### Creating convenient R objects from raw data files ###  ## IMPORTANT: When loading your own files, it is not advised to use ## `PhotoGEA_example_file_path` as in the code below. Instead, write out the ## names or use the `choose_input_licor_files` function.  # Define a vector of paths to the files we wish to load; in this case, we are # loading example files included with the PhotoGEA package file_paths <- c(   PhotoGEA_example_file_path('ball_berry_1.xlsx'),   PhotoGEA_example_file_path('ball_berry_2.xlsx') )  # Load each file, storing the result in a list licor_exdf_list <- lapply(file_paths, function(fpath) {   read_gasex_file(fpath, 'time') })  # Get the names of all columns that are present in all of the Licor files columns_to_keep <- do.call(identify_common_columns, licor_exdf_list)  # Extract just these columns licor_exdf_list <- lapply(licor_exdf_list, function(x) {   x[ , columns_to_keep, TRUE] })  # Use `rbind` to combine all the data licor_data <- do.call(rbind, licor_exdf_list)  ### ### VALIDATION: ### Organizing the data, checking its consistency and quality, cleaning it ###  # Create a new identifier column formatted like `instrument - species - plot` licor_data[ , 'curve_identifier'] <-   paste(licor_data[ , 'instrument'], '-', licor_data[ , 'species'], '-', licor_data[ , 'plot'])  # Make sure the data meets basic requirements check_response_curve_data(licor_data, 'curve_identifier', 7, 'Qin', 1.0)  # Make a plot to check humidity control xyplot(   RHcham + `Humidifier_%` + `Desiccant_%` ~ Qin | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(0, 100),   xlim = c(0, 2200),   xlab = paste0('Incident PPFD (', licor_data$units$Qin, ')') )  # Make a plot to check temperature control xyplot(   TleafCnd + Txchg ~ Qin | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(25, 40),   xlim = c(0, 2200),   xlab = paste0('Incident PPFD (', licor_data$units$Qin, ')'),   ylab = paste0('Temperature (', licor_data$units$TleafCnd, ')') )  # Make a plot to check CO2 control xyplot(   CO2_s + CO2_r ~ Qin | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(360, 480),   xlim = c(0, 2200),   xlab = paste0('Incident PPFD (', licor_data$units$Qin, ')'),   ylab = paste0('CO2 concentration (', licor_data$units$CO2_r, ')') )  xyplot(   `A:OK` + `gsw:OK` + Stable ~ Qin | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlim = c(0, 2200),   xlab = paste0('Incident PPFD (', licor_data$units$Qin, ')') )  # Make a plot to check light-response curves xyplot(   A ~ Qin | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(-5, 50),   xlim = c(0, 2200),   xlab = paste0('Incident PPFD (', licor_data$units$Qin, ')'),   ylab = paste0('Net assimilation (', licor_data$units$A, ')') )  ## IMPORTANT: When analyzing your own files, it is not advised to remove any ## points for the initial fits. Only remove unstable or unusual points if it is ## necessary in order to get good fits.  # Only keep points where stability was achieved licor_data <- remove_points(   licor_data,   list(Stable = c(0, 1)),   method = 'exclude' )  # Define a list of curves to remove from the data set curves_to_remove <- c(   'ripe4 - soybean - 1a',   'ripe4 - soybean - 1b',   'ripe4 - soybean - 5' )  # Remove them licor_data <- remove_points(   licor_data,   list(curve_identifier = curves_to_remove),   method = 'remove' )  ### ### PROCESSING: ### Extracting new pieces of information from the data ###  # Calculate the total pressure in the Licor chamber licor_data <- calculate_total_pressure(licor_data)  # Calculate additional gas properties, including `RHleaf` and `Csurface` licor_data <- calculate_gas_properties(licor_data)  # Calculate the Ball-Berry index licor_data <- calculate_ball_berry_index(licor_data)  # Fit a linear model to the Ball-Berry data ball_berry_results <- consolidate(by(   licor_data,                       # The `exdf` object containing the curves   licor_data[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_ball_berry                    # The function to apply to each chunk of `licor_data` ))  # Plot the Ball-Berry fits plot_ball_berry_fit(ball_berry_results, 'curve_identifier')  # View the Ball-Berry parameters columns_for_viewing <-   c('instrument', 'species', 'plot', 'bb_intercept', 'bb_slope', 'r_squared')  ball_berry_parameters <-   ball_berry_results$parameters[ , columns_for_viewing, TRUE]  print(ball_berry_parameters)  ### ### SYNTHESIS: ### Using plots and statistics to help draw conclusions from the data ###  # Compute the average and standard error for the Ball-Berry slope and intercept # for each species ball_berry_averages <- basic_stats(   ball_berry_results$parameters,   'species' )  # View the averages and errors columns_to_view <- c(   'species',   'bb_intercept_avg', 'bb_intercept_stderr',   'bb_slope_avg', 'bb_slope_stderr' ) print(ball_berry_averages[ , columns_to_view, TRUE])"},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c3_aci_curves.html","id":"overview","dir":"Articles > Web_only","previous_headings":"","what":"Overview","title":"Analyzing C3 A-Ci Curves","text":"vignette, give example showing analyze C3A-Ci data using PhotoGEA package. commands vignette can used initialize script, described Customizing Script.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c3_aci_curves.html","id":"understanding-c3-a-ci-curves","dir":"Articles > Web_only","previous_headings":"Background","what":"Understanding C3A-Ci Curves","title":"Analyzing C3 A-Ci Curves","text":"-Ci curve (CO2 response curve) particular type gas exchange measurement living leaf exposed varying concentrations CO2. CO2 concentration sequence, net assimilation rate (AnA_n), stomatal conductance H2O (gswg_{sw}), intercellular CO2 concentration (CiC_i), important quantities measured recorded. Typically, environmental variables temperature, humidity, incident photosynthetically-active photon flux density (PPFD) held constant measurement sequence changes assimilation rates can attributed CO2 alone. different cell structures biochemical pathways, C3 C4 plants different responses CO2. , discussing C3 plants. full C3 photosynthetic pathway quite complicated, consisting least two hundred individual reactions, may impact measured -Ci curve. However, simplified models net CO2 assimilation available much easier understand work . models tend based around Rubisco kinetics, describing net assimilation rate responds amount CO2 available chloroplast. widely-used model typically referred Farquhar-von-Caemmerer-Berry model (often shortened FvCB model Farquhar model) three scientists first published . excellent description model can found Biochemical Models Leaf Photosynthesis (Caemmerer 2000), subject additional considerations discussed Lochocki McGrath (2025). model provides framework understanding changes AnA_n occur C3 leaf exposed successively higher concentrations CO2. Overall, response CO2 high light conditions can divided three separate ranges: low levels CO2 chloroplast, CO2 assimilation primarily limited Rubisco activity; maximum rate Rubisco activity denoted VcmaxV_{cmax}. intermediate levels CO2 chloroplast, CO2 assimilation primarily limited rate electron transport going support RuBP regeneration; potential rate electron transport given incident PPFD denoted JJ. (Note: JJ distinct maximum rate electron transport achieved incident PPFD, denoted JmaxJ_{max}.) high levels CO2 chloroplast, CO2 assimilation primarily limited triose phosphate utilization (TPU); maximum rate TPU denoted TpT_p. specifically, model provides equations potential RuBP carboxylation rates (catalyzed Rubisco) limited one three important processes: Rubisco-limited carboxylation rate (WcW_c). RuBP-regeneration-limited carboxylation rate (WjW_j). triose-phosphate-utilization-limited carboxylation rate (WpW_p). rates depend CO2 concentration chloroplast factors incident light intensity. actual RuBP carboxylation rate (VcV_c) particular set conditions taken smallest three potential rates. , net CO2 assimilation rate AnA_n can calculated VcV_c including carbon losses due photorespiration non-photorespiratory CO2 release; rate non-photorespiratory CO2 release light denoted RLR_L. also possible calculate net assimilation rates corresponding potential carboxylation rate: AcA_c, AjA_j, ApA_p. plot illustrates three different assimilation ranges observed typical high-light -Ci curve, predicted FvCB model.  (Note: figure generated using calculate_c3_assimilation function PhotoGEA package, represents photosynethetic response C3 leaf according FvCB model alpha_old = 0.2, J = 170 micromol m^(-2) s^(-1), RL = 1 micromol m^(-2) s^(-1), Tp = 11.8 , Vcmax = 100 micromol m^(-2) s^(-1). Temperature response parameters Thomas D. Sharkey et al. (2007) used calculations.) Thus, one common reasons measure -Ci curve interpret context model. words, fitting model’s equations measured curve, possible estimate values JJ, JmaxJ_{max}, RLR_L, TpT_p, VcmaxV_{cmax}. See documentation calculate_c3_assimilation information important quantities.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c3_aci_curves.html","id":"practicalities","dir":"Articles > Web_only","previous_headings":"Background","what":"Practicalities","title":"Analyzing C3 A-Ci Curves","text":"important practicalities keep mind thinking CO2 response curves. One point net assimilation models generally predict response assimilation CO2 concentration chloroplast (CcC_c), gas exchange measurements can determine CO2 concentration leaf’s intercellular spaces (CiC_i). Thus, extra step required interpreting -Ci curves. mesophyll conductance CO2 diffusion (gmcg_{mc}) known, possible calculate values CcC_c AnA_n, CiC_i, gmcg_{mc}. Otherwise, typical assume infinite mesophyll conductance; case, Cc=CiC_c = C_i, estimated values VcmaxV_{cmax} parameters can considered “effective values” describing plant’s response intercellular CO2 rather true response chloroplastic CO2. Another important point plants generally appreciate starved CO2, usually possible start response curve low CO2 proceed upwards. typical approach : Begin ambient atmospheric CO2 levels. Decrease towards low value. Return ambient levels wait plant reacclimate; waiting period usually accomplished logging several points ambient CO2 levels. Increase higher values. taking approach, therefore becomes necessary remove extra points measured ambient CO2 levels reorder points according CO2 values plotting analyzing . Note: approach commonly used, reasearchers advocate starting either high low CO2, continuously decreasing increasing CO2 concentration (Thomas D. Sharkey 2019).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c3_aci_curves.html","id":"the-data","dir":"Articles > Web_only","previous_headings":"Background","what":"The Data","title":"Analyzing C3 A-Ci Curves","text":"-Ci curves commonly measured using portable photosynthesis system Licor Li-6800. machines record values AnA_n, gswg_{sw}, CiC_i, many important quantities. produce two types output files: plain-text Microsoft Excel. often convenient work Excel files since entries can easily modified (example, remove extraneous row add new column). hand, can difficult access file contents using pieces software R. However, PhotoGEA package reduces barrier including tools reading Licor Excel files R, demonstrated following section.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c3_aci_curves.html","id":"loading-packages","dir":"Articles > Web_only","previous_headings":"","what":"Loading Packages","title":"Analyzing C3 A-Ci Curves","text":"always, first step load packages using. addition PhotoGEA, also use lattice package generating plots. lattice package installed R setup, can install typing install.packages('lattice').","code":"# Load required packages library(PhotoGEA) library(lattice)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c3_aci_curves.html","id":"loading-licor-data","dir":"Articles > Web_only","previous_headings":"","what":"Loading Licor Data","title":"Analyzing C3 A-Ci Curves","text":"PhotoGEA package includes two files representing -Ci curves measured using two Li-6800 instruments. data stored Microsoft Excel files, includes curves measured two different crop species (tobacco soybean) several different plots . curve sixteen-point CO2 response curve; words, CO2 concentration air surrounding leaf varied, AnA_n (among variables) measured CO2 setpoint. Although two files based real data, noise added since unpublished. files stored computer somewhere R package installation directory, full paths files can obtained PhotoGEA_example_file_path: (Note: loading files analysis, advisable use PhotoGEA_example_file_path done . Instead, file paths can directly written, files can chosen using interactive window. See Input Files information.) actually read data files store R objects, use read_gasex_file function PhotoGEA. Since multiple files read, call function file using lapply: result command R list “extended data frames” (abbreviated exdf objects). exdf class special data structure defined PhotoGEA package. many ways, exdf object equivalent data frame, major difference exdf object includes units column. information, type ?exdf R terminal access built-help menu entry, check Working Extended Data Frames vignette. Generally, convenient work single exdf object rather list , next step combine objects list. action can accomplished using rbind function, combines table-like objects rows; words, stacks two tables vertically. action makes sense tables columns, combine exdf objects, make sure case. PhotoGEA package includes function called identify_common_columns can used get names columns present Licor files. , can extract just columns, combine exdf objects single one. Now single R object called licor_data includes data several Licor Excel files. information consolidating information multiple files, see Common Patterns section Working Extended Data Frames vignette.","code":"# Define a vector of paths to the files we wish to load; in this case, we are # loading example files included with the PhotoGEA package file_paths <- c(   PhotoGEA_example_file_path('c3_aci_1.xlsx'),   PhotoGEA_example_file_path('c3_aci_2.xlsx') ) # Load each file, storing the result in a list licor_exdf_list <- lapply(file_paths, function(fpath) {   read_gasex_file(fpath, 'time') }) # Get the names of all columns that are present in all of the Licor files columns_to_keep <- do.call(identify_common_columns, licor_exdf_list)  # Extract just these columns licor_exdf_list <- lapply(licor_exdf_list, function(x) {   x[ , columns_to_keep, TRUE] })  # Use `rbind` to combine all the data licor_data <- do.call(rbind, licor_exdf_list)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c3_aci_curves.html","id":"validating-the-data","dir":"Articles > Web_only","previous_headings":"","what":"Validating the Data","title":"Analyzing C3 A-Ci Curves","text":"attempting fit curves, good idea basic checks data ensure organized properly measured properly.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c3_aci_curves.html","id":"basic-checks","dir":"Articles > Web_only","previous_headings":"Validating the Data","what":"Basic Checks","title":"Analyzing C3 A-Ci Curves","text":"First, make sure column data whose value uniquely identifies curve. particular data set, several “user constants” defined making measurements help identify curve: instrument, species, plot. However, neither columns alone sufficient uniquely identify curve. can solve issue creating new column combines values : measuring response curves (type gas exchange data), strongly recommended record key pieces metadata log files using “user constants,” done example. information, please see Guide Licor LI-6800 User Constants, also includes advice dealing data sets contain metadata. next step make sure column correctly identifies response curve. , can use check_response_curve_data function PhotoGEA. supply name column uniquely identify response curve (curve_identifier), expected number points curve (16), name “driving” column follow sequence curve (CO2_r_sp). data passes checks, function output produce messages. (information, see built-help menu entry typing ?check_response_curve_data, visit Frequently Asked Questions.) However, check_response_curve_data detects issue, print helpful message R terminal. example, specified wrong number points wrong identifier column, get error messages:","code":"# Create a new identifier column formatted like `instrument - species - plot` licor_data[ , 'curve_identifier'] <-   paste(licor_data[ , 'instrument'], '-', licor_data[ , 'species'], '-', licor_data[ , 'plot']) # Make sure the data meets basic requirements check_response_curve_data(licor_data, 'curve_identifier', 16, 'CO2_r_sp') check_response_curve_data(licor_data, 'curve_identifier', 15) #>       curve_identifier npts #> 1 ripe1 - soybean - 5a   16 #> 2  ripe1 - tobacco - 1   16 #> 3  ripe1 - tobacco - 2   16 #> 4  ripe2 - soybean - 1   16 #> 5 ripe2 - soybean - 5b   16 #> 6  ripe2 - tobacco - 4   16 #> Error in check_response_curve_data(licor_data, \"curve_identifier\", 15): One or more curves does not have the expected number of points.  check_response_curve_data(licor_data, 'species', 16) #>   species npts #> 1 soybean   48 #> 2 tobacco   48 #> Error in check_response_curve_data(licor_data, \"species\", 16): One or more curves does not have the expected number of points."},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c3_aci_curves.html","id":"reorganizing-the-data","dir":"Articles > Web_only","previous_headings":"Validating the Data","what":"Reorganizing the Data","title":"Analyzing C3 A-Ci Curves","text":"discussed Practicalities, several repeated points logged CO2 concentration, points logged order ascending descending concentration. fact, sequence CO2 setpoints follows: extra recovery points used plotting fitting curves. Additionally, plots may look strange points ordered Ci values. , like remove ninth tenth points (setpoint reset 400 allow leaf reacclimate ambient CO2 levels), reorder data arranged low high values Ci. can done using organize_response_curve function PhotoGEA: command, also used optional columns_to_average input argument calculate average values leaf temperature incident PPFD curve, attached new columns called TleafCnd_avg Qin_avg, respectively. important later calculating values JmaxJ_{max}.","code":"licor_data[licor_data[, 'curve_identifier'] == 'ripe2 - soybean - 1', 'CO2_r_sp'] #>  [1]  400  300  200  150  100   75   50   20  400  400  600  800 1000 1200 1500 #> [16] 1800 # Remove points with duplicated `CO2_r_sp` values, reorder by `Ci`, and # calculate average values of leaf temperature and Qin licor_data <- organize_response_curve_data(     licor_data,     'curve_identifier',     c(9, 10),     'Ci',     columns_to_average = c('TleafCnd', 'Qin') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c3_aci_curves.html","id":"plotting-the-a-ci-curves","dir":"Articles > Web_only","previous_headings":"Validating the Data","what":"Plotting the A-Ci Curves","title":"Analyzing C3 A-Ci Curves","text":"One qualitative way check data simply create plot -Ci curves. situation, lattice library makes simple include curve separate subplot figure. example:  curves look bit strange, related noise intentionally added data. Three curves exhibit sharp likely unrealistic downturn assimilation highest values CiC_i. pose problem fitting, remove later making quality checks.","code":"# Plot all A-Ci curves in the data set xyplot(   A ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']'),   ylab = paste('Net CO2 assimilation rate [', licor_data$units$A, ']') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c3_aci_curves.html","id":"additional-plots-for-qualitative-validation","dir":"Articles > Web_only","previous_headings":"Validating the Data","what":"Additional Plots for Qualitative Validation","title":"Analyzing C3 A-Ci Curves","text":"Sometimes Licor override temperature humidity controls making measurements; case, conditions inside measurement chamber may stable, may wish exclude points. can check types issues making plots. following sections, generate several different plots check curve quality.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c3_aci_curves.html","id":"humidity-control","dir":"Articles > Web_only","previous_headings":"Validating the Data > Additional Plots for Qualitative Validation","what":"Humidity Control","title":"Analyzing C3 A-Ci Curves","text":", Humidifier_% Desiccant_% represent flow humidifier desiccant columns, value 0 indicates valve column fully closed value 100 indicates valve column fully opened. RHcham represents relative humidity inside chamber percentage (words, value 0 100). curves measured, chamber humidity setpoint specified. , looking plot, check relative humidity fairly constant curve. Typically, accompanied relatively smooth changes valve percentages accomodate changes ambient humidity leaf photosynthesis. plot, data looks good.","code":"# Make a plot to check humidity control xyplot(   RHcham + `Humidifier_%` + `Desiccant_%` ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(0, 100),   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c3_aci_curves.html","id":"temperature-control","dir":"Articles > Web_only","previous_headings":"Validating the Data > Additional Plots for Qualitative Validation","what":"Temperature Control","title":"Analyzing C3 A-Ci Curves","text":", TleafCnd leaf temperature measured using thermocouple, Txchg temperature heat exhanger used control air temperature measurement instrument. curves measured, exchanger setpoint specified. , looking plot, check Txchg constant curve leaf temperature vary erratic way. plot, data looks good.","code":"# Make a plot to check temperature control xyplot(   TleafCnd + Txchg ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(25, 40),   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']'),   ylab = paste0('Temperature (', licor_data$units$TleafCnd, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c3_aci_curves.html","id":"co2-control","dir":"Articles > Web_only","previous_headings":"Validating the Data > Additional Plots for Qualitative Validation","what":"CO2 Control","title":"Analyzing C3 A-Ci Curves","text":", CO2_s CO2 concentration sample cell, CO2_r CO2 concentration reference cell, CO2_r_sp setpoint CO2_r. curves measured, sequence CO2_r values specified, , looking plot, check CO2_r close CO2_r_sp. also expect CO2_s bit lower CO2_r leaf sample chamber assimilating CO2, reduce concentration surrounding air. (exception rule occurs low values CO2_r_sp, leaf actually releases CO2.) plot, data looks good.","code":"# Make a plot to check CO2 control xyplot(   CO2_s + CO2_r + CO2_r_sp ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']'),   ylab = paste0('CO2 concentration (', licor_data$units$CO2_r, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c3_aci_curves.html","id":"stability","dir":"Articles > Web_only","previous_headings":"Validating the Data > Additional Plots for Qualitative Validation","what":"Stability","title":"Analyzing C3 A-Ci Curves","text":"measuring response curves Licor, possible specify stability criteria point addition minimum maximum wait times. words, set point driving variable changed, machine waits stability criteria met; minimum waiting period, also maximum prevent machine waiting long. curves measured, stability criteria supplied net assimilation rate stomatal conductance gsw. stability status stored log file appropriate logging option stability set. Now, point, possible check whether stability achieved whether point logged maximum waiting period met. maximum waiting period reached plant still stabilized, data point may unreliable, can helpful check information. plot, :OK indicates whether stable (0 , 1 yes), gsw:OK indicates whether gsw stable (0 , 1 yes), Stable indicates total number stability conditions met. , looking points Stable 2. Otherwise, can check traces see whether gsw unstable. Comparing plots ones Plotting -Ci Curves, seems unstable points correspond “odd-looking” points -Ci curves, probably good idea remove fitting data.","code":"# Make a plot to check stability criteria xyplot(   `A:OK` + `gsw:OK` + Stable ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c3_aci_curves.html","id":"cleaning-the-licor-data","dir":"Articles > Web_only","previous_headings":"Validating the Data","what":"Cleaning the Licor Data","title":"Analyzing C3 A-Ci Curves","text":"checking plots previous sections, two issues noticed: (1) points logged stability achieved (2) curves strange points high CiC_i. section, demonstrate remove unstable unusual points. following command keep points Stable exactly 2; condition means stability criteria satisfied. Sometimes, following procedure, curve stable points remaining; usually good idea automatically exclude curve fewer three stable points. Next, can use remove_points function PhotoGEA exclude points decrease AA high CiC_i. just happens points measured ripe1 instrument occur highest CO2 setpoint value, easy specify :","code":"# Only keep points where stability was achieved licor_data <- licor_data[licor_data[, 'Stable'] == 2, , TRUE]  # Remove any curves that have fewer than three remaining points npts <- by(licor_data, licor_data[, 'curve_identifier'], nrow) ids_to_keep <- names(npts[npts > 2]) licor_data <- licor_data[licor_data[, 'curve_identifier'] %in% ids_to_keep, , TRUE] # Remove points where `instrument` is `ripe1` and `CO2_r_sp` is 1800 licor_data <- remove_points(   licor_data,   list(instrument = 'ripe1', CO2_r_sp = 1800),   method = 'exclude' )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c3_aci_curves.html","id":"fitting-licor-data","dir":"Articles > Web_only","previous_headings":"","what":"Fitting Licor Data","title":"Analyzing C3 A-Ci Curves","text":"Now checked data quality, ready perform fitting. order fit curves, several required pieces information included Licor data files produced instrument: values total pressure temperature-dependent values important photosynthetic parameters Γ*\\Gamma^*. However, PhotoGEA package includes two functions help calculations: calculate_temperature_response calculate_total_pressure. requires exdf object containing Licor data. units required column checked attempt avoid unit-related errors. information functions can obtained built-help system typing ?calculate_total_pressure ?calculate_total_pressure. First, can use calculate_temperature_response: simple command, used leaf temperature Licor file calculate values several key C3 photosynthetic parameters (Gamma_star_norm, J_norm, Kc_norm, Ko_norm, RL_norm, Vcmax_norm, gmc_norm, Tp_norm, Gamma_star_at_25, Kc_at_25, Ko_at_25) according temperature response parameters specified Thomas D. Sharkey et al. (2007). Now can use calculate_total_pressure: Together, functions add several new columns licor_data, including total_pressure, Gamma_star, others. information, now ready perform fitting procedure. operation, can use fit_c3_aci function PhotoGEA package, fits single response curve extract values key photosynthetic parameters. apply function curve larger data set consolidate results, can use conjunction consolidate, also part PhotoGEA. (information functions, see built-help menu entries typing ?fit_c3_aci, ?.exdf, ?consolidate, check Common Patterns section Working Extended Data Frames vignette.) Together, functions split apart main data using curve identifier column defined (Basic Checks), fit -Ci curve using FvCB model discussed Understanding C3A-Ci Curves, return resulting parameters fits: Note command, used default fitting settings. case, vary five key photosynthetic parameters: αold\\alpha_{old}, JJ, RLR_L, TpT_p, VcmaxV_{cmax}. mesophyll conductance (gmcg_{mc}) set infinity default, fits made assuming Cc=CiC_c = C_i, hence estimates VcmaxV_{cmax} parameters considered “effective” values rather chloroplastic values.","code":"# Calculate temperature-dependent values of C3 photosynthetic parameters licor_data <- calculate_temperature_response(licor_data, c3_temperature_param_sharkey) # Calculate the total pressure in the Licor chamber licor_data <- calculate_total_pressure(licor_data) # The default optimizer uses randomness, so we will set a seed to ensure the # results from this fit are always identical set.seed(1234)  # Fit the C3 A-Ci curves c3_aci_results <- consolidate(by(   licor_data,                       # The `exdf` object containing the curves   licor_data[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_c3_aci,                       # The function to apply to each chunk of `licor_data`   Ca_atmospheric = 420              # Additional argument passed to `fit_c3_aci` ))"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c3_aci_curves.html","id":"viewing-the-fitted-curves","dir":"Articles > Web_only","previous_headings":"Fitting Licor Data","what":"Viewing the Fitted Curves","title":"Analyzing C3 A-Ci Curves","text":"made fits, now good idea visually check , making sure look reasonable. can done using built-plotting function called plot_c3_aci_fit. addition fitted values , output also includes values potential limiting rates Ac, Aj, Ap, well estimated operating point.  general, fits look good. specific things notice: fitted values closely match measured ones. good sign. curve begins Rubisco-limited portion (= Ac). expected light-saturated -Ci curves. curves values Aj. means points identified limited RuBP regeneration. possible estimate values J curves. curves values Ap. means points identified limited TPU. possible estimate values Tp curves. One curve almost entirely limited Rubisco activity. Based values Ci, seems plant’s stomata fully open measurement, almost fully restricting measured assimilation values Rubisco-limited range. curve, optimizer identified just one point RuBP-regeneration-limited, associated value J may reliable. typical parameters estimated -Ci curves. unavoidable consquence inherent variability plant leaves. Checking residuals also powerful way gauge quality fit. output fit_c3_aci includes residuals (calculated - A_fit) output, easy plot :  good fit produce small randomly-distributed residuals; clear pattern residuals, model able reproduce measured values well.","code":"# Plot the C3 A-Cc fits (including limiting rates) plot_c3_aci_fit(c3_aci_results, 'curve_identifier', 'Ci', ylim = c(-10, 80)) # Plot the residuals xyplot(   A_residuals ~ Ci | curve_identifier,   data = c3_aci_results$fits$main_data,   type = 'b',   pch = 16,   grid = TRUE,   xlab = paste0('Intercellular CO2 concentration (', c3_aci_results$fits$units$Ci, ')'),   ylab = paste0('Assimilation rate residual (measured - fitted)\\n(', c3_aci_results$fits$units$A, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c3_aci_curves.html","id":"calculating-jmax","dir":"Articles > Web_only","previous_headings":"Fitting Licor Data","what":"Calculating Jmax","title":"Analyzing C3 A-Ci Curves","text":"fit_c3_aci function estimates values JJ, JmaxJ_{max}. However, estimates JmaxJ_{max} can obtained fitting applying calculate_jmax function results fit_c3_aci. information function, see built-help menu entry typing ?calculate_jmax. order , need values QinQ_{} TleafT_{leaf} curve. information typically included Licor file, calculated average values QinQ_{} TleafT_{leaf} Reorganizing Data section calling organize_response_curve_data, taken care . also necessary temperature-dependent values αJ\\alpha_J θJ\\theta_J, two parameters related JJ JmaxJ_{max}. can obtained using calculate_temperature_response function, also used Fitting Licor Data section . commands, parameters element c3_aci_results now includes estimates JmaxJ_{max}. aware estimates JmaxJ_{max} dependent assumed values αJ\\alpha_J θJ\\theta_J 25 degrees C, especially curves measured low values incident PPFD; see documentation calculate_jmax information.","code":"# Calculate temperature-dependent values of Jmax-related parameters c3_aci_results$parameters <- calculate_temperature_response(     c3_aci_results$parameters,     jmax_temperature_param_bernacchi,     'TleafCnd_avg' )  # Calculate Jmax c3_aci_results$parameters <- calculate_jmax(c3_aci_results$parameters)"},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c3_aci_curves.html","id":"accessing-best-fit-estimates-and-confidence-intervals","dir":"Articles > Web_only","previous_headings":"Examining the Results","what":"Accessing Best-Fit Estimates and Confidence Intervals","title":"Analyzing C3 A-Ci Curves","text":"fit returns best-fit values confidence limits parameter, stored c3_aci_results$parameters, another exdf object. example, can look estimated JJ values curve follows: can see curves upper limit infinity (Inf) best-fit value “available” (NA). Comparing table figure showing fits, can see curves one fewer points limited RuBP regeneration. curves, values J reliably estimated, fit_c3_aci returns value NA J_at_25. values JmaxJ_{max} calculated JJ estimates, Jmax_at_25 also NA whenever J_at_25 NA: contrast, curve associated value VcmaxV_{cmax} finite confidence interval:","code":"# View values of J from each fit c3_aci_results$parameters[, c('curve_identifier', 'J_at_25_lower', 'J_at_25', 'J_at_25_upper')] #>       curve_identifier J_at_25_lower  J_at_25 J_at_25_upper #> 1 ripe1 - soybean - 5a      183.4704       NA           Inf #> 2  ripe1 - tobacco - 1      229.6193 236.1173      242.6154 #> 3  ripe1 - tobacco - 2      201.4352 208.5933      215.7515 #> 4  ripe2 - soybean - 1      160.3528       NA           Inf #> 5 ripe2 - soybean - 5b      152.3077 160.9145      169.5211 #> 6  ripe2 - tobacco - 4      165.4966       NA           Inf # View values of Jmax from each fit c3_aci_results$parameters[, c('curve_identifier', 'Jmax_at_25_lower', 'Jmax_at_25', 'Jmax_at_25_upper')] #>       curve_identifier Jmax_at_25_lower Jmax_at_25 Jmax_at_25_upper #> 1 ripe1 - soybean - 5a         185.2471         NA               NA #> 2  ripe1 - tobacco - 1         232.7625   239.5027         246.2574 #> 3  ripe1 - tobacco - 2         203.6768   211.0427         218.4225 #> 4  ripe2 - soybean - 1         161.6362         NA               NA #> 5 ripe2 - soybean - 5b         153.4441   162.2087         170.9871 #> 6  ripe2 - tobacco - 4         166.8804         NA               NA # View values of Vcmax from each fit c3_aci_results$parameters[, c('curve_identifier', 'Vcmax_at_25_lower', 'Vcmax_at_25', 'Vcmax_at_25_upper')] #>       curve_identifier Vcmax_at_25_lower Vcmax_at_25 Vcmax_at_25_upper #> 1 ripe1 - soybean - 5a          96.90014   103.76133         111.42324 #> 2  ripe1 - tobacco - 1         126.18030   133.10357         140.02684 #> 3  ripe1 - tobacco - 2         104.97289   113.58840         121.19946 #> 4  ripe2 - soybean - 1         102.25501   109.06224         121.15487 #> 5 ripe2 - soybean - 5b         105.28778   122.01155         138.73580 #> 6  ripe2 - tobacco - 4          84.24146    87.79944          91.35828"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c3_aci_curves.html","id":"visualizing-average-best-fit-parameters","dir":"Articles > Web_only","previous_headings":"Examining the Results","what":"Visualizing Average Best-Fit Parameters","title":"Analyzing C3 A-Ci Curves","text":"can also visualize best-fit parameters using plots. One way using barchart_with_errorbars function PhotoGEA create barcharts average values species. function ignore NA values curves parameter reliably estimated, error bars show standard error mean species.  Another option create box-whisper plots using bwplot function lattice package:","code":"# Make a barchart showing average Vcmax values barchart_with_errorbars(   c3_aci_results$parameters[, 'Vcmax_at_25'],   c3_aci_results$parameters[, 'species'],   ylim = c(0, 180),   xlab = 'Species',   ylab = paste0('Vcmax at 25 degrees C (', c3_aci_results$parameters$units$Vcmax_at_25, ')') ) # Make a boxplot showing the distribution of Vcmax values bwplot(   Vcmax_at_25 ~ species,   data = c3_aci_results$parameters$main_data,   ylim = c(0, 180),   xlab = 'Species',   ylab = paste0('Vcmax at 25 degrees C (', c3_aci_results$parameters$units$Vcmax_at_25, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c3_aci_curves.html","id":"calculating-average-best-fit-parameters","dir":"Articles > Web_only","previous_headings":"Examining the Results","what":"Calculating Average Best-Fit Parameters","title":"Analyzing C3 A-Ci Curves","text":"can also calculate average values standard errors best-fit parameters species using basic_stats function PhotoGEA:","code":"# Compute the average and standard error of each parameter for each species c3_aci_averages <- basic_stats(c3_aci_results$parameters, 'species')  # View the averages and errors columns_to_view <- c(   'species',   'Vcmax_at_25_avg', 'Vcmax_at_25_stderr',   'J_at_25_avg', 'J_at_25_stderr',   'RL_at_25_avg', 'RL_at_25_stderr',   'Tp_at_25_avg', 'Tp_at_25_stderr' )  c3_aci_averages[ , columns_to_view] #>   species Vcmax_at_25_avg Vcmax_at_25_stderr J_at_25_avg J_at_25_stderr #> 1 soybean        111.6117           5.420409    160.9145             NA #> 2 tobacco        111.4971          13.119908    222.3553         13.762 #>   RL_at_25_avg RL_at_25_stderr Tp_at_25_avg Tp_at_25_stderr #> 1     1.938940       0.5729344     9.834033              NA #> 2     1.925908       0.1694586    11.178309              NA"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c3_aci_curves.html","id":"other-ideas-for-synthesizing-results","dir":"Articles > Web_only","previous_headings":"Examining the Results","what":"Other Ideas for Synthesizing Results","title":"Analyzing C3 A-Ci Curves","text":"Statistical tests check differences groups can performed within R using packages onewaytests DescTools. Alternatively, parameter values can exported comma-separated-value (CSV) file analyzed another software environment like jmp.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c3_aci_curves.html","id":"customizing-your-script","dir":"Articles > Web_only","previous_headings":"","what":"Customizing Your Script","title":"Analyzing C3 A-Ci Curves","text":"Note commands vignette written general way can used basis analysis script (see Commands Document). order use script, following changes may required. may also others specifically mentioned .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c3_aci_curves.html","id":"input-files","dir":"Articles > Web_only","previous_headings":"Customizing Your Script","what":"Input Files","title":"Analyzing C3 A-Ci Curves","text":"file paths specified file_paths need modified point Licor files. One way script simply write relative absolute paths files wish load. example, replace previous definition file_paths one: may also want consider using choose_input_licor_files function PhotoGEA; function create pop-browser window can interactively select set files. Sometimes convenient writing file paths names. example, replace previous definition file_paths one: Unfortunately, choose_input_licor_files available interactive R sessions running Microsoft Windows, also platform-independent option: choose_input_files. See Translation section Developing Data Analysis Pipeline vignette details.","code":"# Define a vector of paths to the files we wish to load file_paths <- c(   'myfile1.xlsx',        # `myfile1.xlsx` must be in the current working directory   'C:/documents/myfile2' # This is an absolute path to `myfile2` ) # Interactively define a vector of paths to the files we wish to load file_paths <- choose_input_licor_files()"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c3_aci_curves.html","id":"curve-identifier","dir":"Articles > Web_only","previous_headings":"Customizing Your Script","what":"Curve Identifier","title":"Analyzing C3 A-Ci Curves","text":"Depending user constants defined Licor Excel files, may need modify definition curve_identifier column.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c3_aci_curves.html","id":"data-cleaning","dir":"Articles > Web_only","previous_headings":"Customizing Your Script","what":"Data Cleaning","title":"Analyzing C3 A-Ci Curves","text":"Depending qualitative data checks, may need change input arguments remove_points. might also necessary remove unstable points performing fits. Often, helpful perform data cleaning first, remove problematic points seem cause problems fits.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c3_aci_curves.html","id":"plots","dir":"Articles > Web_only","previous_headings":"Customizing Your Script","what":"Plots","title":"Analyzing C3 A-Ci Curves","text":"may need change axis limits plots. Alternatively, can remove , allowing xyplot automatically choose . may also want consider using pdf_print function PhotoGEA save plots PDFs. See help page info: ?pdf_print.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c3_aci_curves.html","id":"saving-results","dir":"Articles > Web_only","previous_headings":"Customizing Your Script","what":"Saving Results","title":"Analyzing C3 A-Ci Curves","text":"may want use write.csv.exdf save fitting results CSV files. writing contents exdf object CSV file, using write.csv.exdf rather write.csv ensure units included column. example, following commands allow interactively choose output filenames resulting CSV files:","code":"write.csv.exdf(c3_aci_results$fits, file.choose()) write.csv.exdf(c3_aci_results$parameters, file.choose()) write.csv.exdf(c3_aci_averages, file.choose())"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c3_aci_curves.html","id":"commands-from-this-document","dir":"Articles > Web_only","previous_headings":"","what":"Commands From This Document","title":"Analyzing C3 A-Ci Curves","text":"following code chunk includes central commands used throughout document. compiled make easy copy/paste text file initialize script. Annotation also added clearly indicate four steps involved data analysis, described Developing Data Analysis Pipeline vignette.","code":"### ### PRELIMINARIES: ### Loading packages, defining constants, creating helping functions, etc. ###  # Load required packages library(PhotoGEA) library(lattice)  ### ### TRANSLATION: ### Creating convenient R objects from raw data files ###  ## IMPORTANT: When loading your own files, it is not advised to use ## `PhotoGEA_example_file_path` as in the code below. Instead, write out the ## names or use the `choose_input_licor_files` function.  # Define a vector of paths to the files we wish to load; in this case, we are # loading example files included with the PhotoGEA package file_paths <- c(   PhotoGEA_example_file_path('c3_aci_1.xlsx'),   PhotoGEA_example_file_path('c3_aci_2.xlsx') )  # Load each file, storing the result in a list licor_exdf_list <- lapply(file_paths, function(fpath) {   read_gasex_file(fpath, 'time') })  # Get the names of all columns that are present in all of the Licor files columns_to_keep <- do.call(identify_common_columns, licor_exdf_list)  # Extract just these columns licor_exdf_list <- lapply(licor_exdf_list, function(x) {   x[ , columns_to_keep, TRUE] })  # Use `rbind` to combine all the data licor_data <- do.call(rbind, licor_exdf_list)  ### ### VALIDATION: ### Organizing the data, checking its consistency and quality, cleaning it ###  # Create a new identifier column formatted like `instrument - species - plot` licor_data[ , 'curve_identifier'] <-   paste(licor_data[ , 'instrument'], '-', licor_data[ , 'species'], '-', licor_data[ , 'plot'])  # Make sure the data meets basic requirements check_response_curve_data(licor_data, 'curve_identifier', 16, 'CO2_r_sp')  # Remove points with duplicated `CO2_r_sp` values, reorder by `Ci`, and # calculate average values of leaf temperature and Qin licor_data <- organize_response_curve_data(     licor_data,     'curve_identifier',     c(9, 10),     'Ci',     columns_to_average = c('TleafCnd', 'Qin') )  # Plot all A-Ci curves in the data set xyplot(   A ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']'),   ylab = paste('Net CO2 assimilation rate [', licor_data$units$A, ']') )  # Make a plot to check humidity control xyplot(   RHcham + `Humidifier_%` + `Desiccant_%` ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(0, 100),   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']') )  # Make a plot to check temperature control xyplot(   TleafCnd + Txchg ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(25, 40),   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']'),   ylab = paste0('Temperature (', licor_data$units$TleafCnd, ')') )  # Make a plot to check CO2 control xyplot(   CO2_s + CO2_r + CO2_r_sp ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']'),   ylab = paste0('CO2 concentration (', licor_data$units$CO2_r, ')') )  # Make a plot to check stability criteria xyplot(   `A:OK` + `gsw:OK` + Stable ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']') )  ## IMPORTANT: When analyzing your own files, it is not advised to remove any ## points for the initial fits. Only remove unstable or unusual points if it is ## necessary in order to get good fits. See the \"Cleaning the Licor Data\" ## section above for instructions.  ### ### PROCESSING: ### Extracting new pieces of information from the data ###  # Calculate temperature-dependent values of C3 photosynthetic parameters licor_data <- calculate_temperature_response(licor_data, c3_temperature_param_sharkey)  # Calculate the total pressure in the Licor chamber licor_data <- calculate_total_pressure(licor_data)  # The default optimizer uses randomness, so we will set a seed to ensure the # results from this fit are always identical set.seed(1234)  # Fit the C3 A-Ci curves c3_aci_results <- consolidate(by(   licor_data,                       # The `exdf` object containing the curves   licor_data[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_c3_aci,                       # The function to apply to each chunk of `licor_data`   Ca_atmospheric = 420              # Additional argument passed to `fit_c3_aci` ))  # Plot the C3 A-Cc fits (including limiting rates) plot_c3_aci_fit(c3_aci_results, 'curve_identifier', 'Ci', ylim = c(-10, 80))  # Plot the residuals xyplot(   A_residuals ~ Ci | curve_identifier,   data = c3_aci_results$fits$main_data,   type = 'b',   pch = 16,   grid = TRUE,   xlab = paste0('Intercellular CO2 concentration (', c3_aci_results$fits$units$Ci, ')'),   ylab = paste0('Assimilation rate residual (measured - fitted)\\n(', c3_aci_results$fits$units$A, ')') )  # Calculate temperature-dependent values of Jmax-related parameters c3_aci_results$parameters <- calculate_temperature_response(     c3_aci_results$parameters,     jmax_temperature_param_bernacchi,     'TleafCnd_avg' )  # Calculate Jmax c3_aci_results$parameters <- calculate_jmax(c3_aci_results$parameters)  ### ### SYNTHESIS: ### Using plots and statistics to help draw conclusions from the data ###  # View values of J from each fit c3_aci_results$parameters[, c('curve_identifier', 'J_at_25_lower', 'J_at_25', 'J_at_25_upper')]  # View values of Jmax from each fit c3_aci_results$parameters[, c('curve_identifier', 'Jmax_at_25_lower', 'Jmax_at_25', 'Jmax_at_25_upper')]  # View values of Vcmax from each fit c3_aci_results$parameters[, c('curve_identifier', 'Vcmax_at_25_lower', 'Vcmax_at_25', 'Vcmax_at_25_upper')]  # Make a barchart showing average Vcmax values barchart_with_errorbars(   c3_aci_results$parameters[, 'Vcmax_at_25'],   c3_aci_results$parameters[, 'species'],   ylim = c(0, 180),   xlab = 'Species',   ylab = paste0('Vcmax at 25 degrees C (', c3_aci_results$parameters$units$Vcmax_at_25, ')') )  # Make a boxplot showing the distribution of Vcmax values bwplot(   Vcmax_at_25 ~ species,   data = c3_aci_results$parameters$main_data,   ylim = c(0, 180),   xlab = 'Species',   ylab = paste0('Vcmax at 25 degrees C (', c3_aci_results$parameters$units$Vcmax_at_25, ')') )  # Compute the average and standard error of each parameter for each species c3_aci_averages <- basic_stats(c3_aci_results$parameters, 'species')  # View the averages and errors columns_to_view <- c(   'species',   'Vcmax_at_25_avg', 'Vcmax_at_25_stderr',   'J_at_25_avg', 'J_at_25_stderr',   'RL_at_25_avg', 'RL_at_25_stderr',   'Tp_at_25_avg', 'Tp_at_25_stderr' )  c3_aci_averages[ , columns_to_view]"},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"overview","dir":"Articles > Web_only","previous_headings":"","what":"Overview","title":"Analyzing C4 A-Ci Curves","text":"vignette, give example showing analyze C4A-Ci data using PhotoGEA package. commands vignette can used initialize script, described Customizing Script.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"understanding-c4-a-ci-curves","dir":"Articles > Web_only","previous_headings":"Background","what":"Understanding C4A-Ci Curves","title":"Analyzing C4 A-Ci Curves","text":"-Ci curve (CO2 response curve) particular type gas exchange measurement living leaf exposed varying concentrations CO2. CO2 concentration sequence, net assimilation rate (AnA_n), stomatal conductance H2O (gswg_{sw}), intercellular CO2 concentration (CiC_i), important quantities measured recorded. Typically, environmental variables temperature, humidity, incident photosynthetically-active photon flux density (PPFD) held constant measurement sequence changes assimilation rates can attributed CO2 alone. different cell structures biochemical pathways, C3 C4 plants different responses CO2. , discussing C3 plants. full C4 photosynthetic pathway quite complicated, consisting least two hundred individual reactions, may impact measured -Ci curve. However, simplified models net CO2 assimilation available much easier understand work . models tend based around PEP carboxylase rubisco kinetics, describing net assimilation rate responds partial pressure CO2 mesophyll bundle sheath cells. widely-used model described Biochemical Models Leaf Photosynthesis (S. von Caemmerer 2000). model provides framework understanding changes AnA_n occur C4 leaf exposed successively higher concentrations CO2. Overall, photosynthetic response CO2 high light conditions can understood follows: low levels CO2, CO2 assimilation primarily limited PEP carboxylase activity mesophyll cells; maximum rate PEP carboxylase activity denoted Vp,maxV_{p,max}. higher levels CO2, CO2 assimilation can limited Rubisco activity bundle sheath cells, PEP regeneration mesophyll cells, electron transport going support RuBP PEP regeneration. maximum rate Rubisco activity denoted Vc,maxV_{c,max}, maximum rate PEP regeneration denoted Vp,rV_{p,r}, potential electron transport rate going support RuBP PEP regeneration given incident PPFD denoted JJ. (Note: JJ distinct maximum rate electron transport achieved incident PPFD, denoted JmaxJ_{max}.) specifically, model provides equations calculate net assimilation rate AnA_n Vp,maxV_{p,max}, Vc,maxV_{c,max}, Vp,rV_{p,r}, JJ, total rate non-photorespiratory CO2 release across mesophyll bundle sheath cells light (RLR_L), partial pressure CO2 mesophyll (PcmP_{cm}), several parameters. full equations quite complicated. AnA_n given smaller enzyme-limited rate (AcA_c) electron-transport-limited rate (AjA_j). AcA_c co-limited PEP carboxylase activity, Rubisco activity, PEP regeneration, AjA_j co-limited electron transport mesophyll bundle-sheath cells. certain circumstances (bundle sheath conductance zero photosystem II activity occurs mesophyll), complicated equations reduce simpler situation AnA_n given minimum five separate rates: PEP-carboxylase-limited rate (ApcA_{pc}) Rubisco-limited rate (ArA_r) PEP-regeneration-limited rate (AprA_{pr}) electron-transport-limited rate mesophyll (AjmA_{jm}) electron-transport-limited rate bundle sheath (AjbsA_{jbs}) simplified version can helpful understanding rough model behavior, important keep mind real model different, AnA_n generally equal minimum five rates full model. plot shows example full model output:  (Note: figure generated using calculate_c4_assimilation function PhotoGEA package, represents photosynethetic response C4 leaf according model J_at_25 = 220 micromol m^(-2) s^(-1), RL_at_25 = 1 micromol m^(-2) s^(-1), Vcmax_at_25 = 30 micromol m^(-2) s^(-1), Vpmax_at_25 = 150 micromol m^(-2) s^(-1), Vpr = 80 micromol m^(-2) s^(-1), leaf temperature 30 degrees C. Temperature response parameters Susanne von Caemmerer (2021) used calculations.) several important things notice plot: conditions, AnA_n always equal AcA_c. Thus, assimilation enzyme-limited across entire range CO2 values. enzyme-limited rate AcA_c always smaller either three rates related individual enzymes (ApcA_{pc}, AprA_{pr}, ArA_r). electron-transport-limited rate AjA_j always smaller either two rates related electron transport individual cell types (AjmA_{jm} AjbA_{jb}). dependence ArA_r, AjA_j, AprA_{pr} CO2 concentration similar, three nearly independent CO2. PEP-carboxylase-limited rate (ApcA_{pc}) rate approaches zero, happens CO2 concentration decreases. Regardless process may limiting assimilation, AnA_nnever decreases CO2 increases. important conclusion PEP carboxylase always limits assimilation low CO2 concentrations, one Rubisco activity, electron transport, PEP regeneration limits assimilation high CO2 concentrations. three processes produce plateau nearly flat response CO2. One common reasons measure -Ci curve interpret context model. words, fitting model’s equations measured curve, possible estimate values JJ, JmaxJ_{max}, RLR_L, VcmaxV_{cmax}, VpmaxV_{pmax}, others. See documentation calculate_c4_assimilation information important quantities. discussion , evident determining rate-limiting process high CiC_i C4A-Ci curve difficult impossible three potentially limiting processes exhibit nearly identical responses CO2. two main ways deal issue: One way assume particular limiting process based outside information. example, curves measured high light conditions (electron transport rates high), warm temperatures (PEP regeneration rates high) likely Rubisco-limited high CiC_i. Another option use empirical non-rectangular hyperbola fit curve. enables estimates VmaxV_{max}, maximum rate gross assimilation, related highest value AnA_n (,maxA_{n,max}) ,max=Vmax−RLA_{n,max} = V_{max} - R_L. quantity meaningful mechanistic interpretation can used compare assimilation rates groups plants. taking approach, values VpmaxV_{pmax} can still estimated low CiC_i part curve using mechanistic model. approaches demonstrated vignette.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"practicalities","dir":"Articles > Web_only","previous_headings":"Background","what":"Practicalities","title":"Analyzing C4 A-Ci Curves","text":"important practicalities keep mind thinking CO2 response curves. One point C4 net assimilation models generally predict response assimilation partial pressure CO2 mesophyll (PcmP_{cm}), gas exchange measurements can determine CO2 concentration leaf’s intercellular spaces (CiC_i). Thus, extra step required interpreting -Ci curves. mesophyll conductance CO2 (gmcg_{mc}) total pressure (PP) known, possible calculate values PcmP_{cm} AnA_n, CiC_i, PP, gmcg_{mc}. Otherwise, also possible assume infinite mesophyll conductance; case, Cm=CiC_m = C_i, estimated values VcmaxV_{cmax} parameters can considered “effective values” describing plant’s response intercellular CO2 rather true response chloroplastic CO2. Another important point plants generally appreciate starved CO2, usually possible start response curve low CO2 proceed upwards. typical approach : Begin ambient atmospheric CO2 levels. Decrease towards low value. Return ambient levels wait plant reacclimate; waiting period usually accomplished logging several points ambient CO2 levels. Increase higher values. taking approach, therefore becomes necessary remove extra points measured ambient CO2 levels reorder points according CO2 values plotting analyzing . Note: approach commonly used, reasearchers advocate starting either high low CO2, continuously decreasing increasing CO2 concentration (Sharkey 2019).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"the-data","dir":"Articles > Web_only","previous_headings":"Background","what":"The Data","title":"Analyzing C4 A-Ci Curves","text":"-Ci curves commonly measured using portable photosynthesis system Licor Li-6800. machines record values AnA_n, gswg_{sw}, CiC_i, many important quantities. produce two types output files: plain-text Microsoft Excel. often convenient work Excel files since entries can easily modified (example, remove extraneous row add new column). hand, can difficult access file contents using pieces software R. However, PhotoGEA package reduces barrier including tools reading Licor Excel files R, demonstrated following section.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"loading-packages","dir":"Articles > Web_only","previous_headings":"","what":"Loading Packages","title":"Analyzing C4 A-Ci Curves","text":"always, first step load packages using. addition PhotoGEA, also use lattice package generating plots. lattice package installed R setup, can install typing install.packages('lattice').","code":"# Load required packages library(PhotoGEA) library(lattice)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"loading-licor-data","dir":"Articles > Web_only","previous_headings":"","what":"Loading Licor Data","title":"Analyzing C4 A-Ci Curves","text":"PhotoGEA package includes two files representing -Ci curves measured using two Li-6800 instruments. data stored Microsoft Excel files, includes curves measured two different crop species (sorghum maize) several different plots . curve sixteen-point CO2 response curve; words, CO2 concentration air surrounding leaf varied, AnA_n (among variables) measured CO2 setpoint. Although two files based real data, noise added since unpublished. files stored computer somewhere R package installation directory, full paths files can obtained PhotoGEA_example_file_path: (Note: loading files analysis, advisable use PhotoGEA_example_file_path done . Instead, file paths can directly written, files can chosen using interactive window. See Input Files information.) actually read data files store R objects, use read_gasex_file function PhotoGEA. Since multiple files read, call function file using lapply: result command R list “extended data frames” (abbreviated exdf objects). exdf class special data structure defined PhotoGEA package. many ways, exdf object equivalent data frame, major difference exdf object includes units column. information, type ?exdf R terminal access built-help menu entry, check Working Extended Data Frames vignette. Generally, convenient work single exdf object rather list , next step combine objects list. action can accomplished using rbind function, combines table-like objects rows; words, stacks two tables vertically. action makes sense tables columns, combine exdf objects, make sure case. PhotoGEA package includes function called identify_common_columns can used get names columns present Licor files. , can extract just columns, combine exdf objects single one. Now single R object called licor_data includes data several Licor Excel files. information consolidating information multiple files, see Common Patterns section Working Extended Data Frames vignette.","code":"# Define a vector of paths to the files we wish to load; in this case, we are # loading example files included with the PhotoGEA package file_paths <- c(   PhotoGEA_example_file_path('c4_aci_1.xlsx'),   PhotoGEA_example_file_path('c4_aci_2.xlsx') ) # Load each file, storing the result in a list licor_exdf_list <- lapply(file_paths, function(fpath) {   read_gasex_file(fpath, 'time') }) # Get the names of all columns that are present in all of the Licor files columns_to_keep <- do.call(identify_common_columns, licor_exdf_list)  # Extract just these columns licor_exdf_list <- lapply(licor_exdf_list, function(x) {   x[ , columns_to_keep, TRUE] })  # Use `rbind` to combine all the data licor_data <- do.call(rbind, licor_exdf_list)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"validating-the-data","dir":"Articles > Web_only","previous_headings":"","what":"Validating the Data","title":"Analyzing C4 A-Ci Curves","text":"attempting fit curves, good idea basic checks data ensure organized properly measured properly.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"basic-checks","dir":"Articles > Web_only","previous_headings":"Validating the Data","what":"Basic Checks","title":"Analyzing C4 A-Ci Curves","text":"First, make sure column data whose value uniquely identifies curve. particular data set, several “user constants” defined making measurements help identify curve: instrument, species, plot. However, neither columns alone sufficient uniquely identify curve. can solve issue creating new column combines values : measuring response curves (type gas exchange data), strongly recommended record key pieces metadata log files using “user constants,” done example. information, please see Guide Licor LI-6800 User Constants, also includes advice dealing data sets contain metadata. next step make sure column correctly identifies response curve. , can use check_response_curve_data function PhotoGEA. supply name column uniquely identify response curve (curve_identifier), expected number points curve (16), name “driving” column follow sequence curve (CO2_r_sp). data passes checks, function output produce messages. (information, see built-help menu entry typing ?check_response_curve_data, visit Frequently Asked Questions.) However, check_response_curve_data detects issue, print helpful message R terminal. example, specified wrong number points wrong identifier column, get error messages:","code":"# Create a new identifier column formatted like `instrument - species - plot` licor_data[ , 'curve_identifier'] <-   paste(licor_data[ , 'instrument'], '-', licor_data[ , 'species'], '-', licor_data[ , 'plot']) # Make sure the data meets basic requirements check_response_curve_data(licor_data, 'curve_identifier', 16, 'CO2_r_sp') check_response_curve_data(licor_data, 'curve_identifier', 15) #>      curve_identifier npts #> 1   ripe1 - maize - 5   16 #> 2 ripe1 - sorghum - 2   16 #> 3 ripe1 - sorghum - 3   16 #> 4   ripe2 - maize - 2   16 #> 5 ripe2 - sorghum - 3   16 #> Error in check_response_curve_data(licor_data, \"curve_identifier\", 15): One or more curves does not have the expected number of points.  check_response_curve_data(licor_data, 'species', 16) #>   species npts #> 1   maize   32 #> 2 sorghum   48 #> Error in check_response_curve_data(licor_data, \"species\", 16): One or more curves does not have the expected number of points."},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"reorganizing-the-data","dir":"Articles > Web_only","previous_headings":"Validating the Data","what":"Reorganizing the Data","title":"Analyzing C4 A-Ci Curves","text":"discussed Practicalities, several repeated points logged CO2 concentration, points logged order ascending descending concentration. fact, sequence CO2 setpoints follows: extra recovery points used plotting fitting curves. Additionally, plots may look strange points ordered Ci values. , like remove ninth tenth points (setpoint reset 400 allow leaf reacclimate ambient CO2 levels), reorder data arranged low high values Ci. can done using organize_response_curve function PhotoGEA: command, also used optional columns_to_average input argument calculate average values leaf temperature incident PPFD curve, attached new columns called TleafCnd_avg Qin_avg, respectively. important later calculating values JmaxJ_{max}.","code":"licor_data[licor_data[, 'curve_identifier'] == 'ripe2 - maize - 2', 'CO2_r_sp'] #>  [1]  400  300  200  150  100   75   50   20  400  400  600  800 1000 1200 1500 #> [16] 1800 # Remove points with duplicated `CO2_r_sp` values, reorder by `Ci`, and # calculate average values of leaf temperature and Qin licor_data <- organize_response_curve_data(     licor_data,     'curve_identifier',     c(9, 10),     'Ci',     columns_to_average = c('TleafCnd', 'Qin') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"plotting-the-a-ci-curves","dir":"Articles > Web_only","previous_headings":"Validating the Data","what":"Plotting the A-Ci Curves","title":"Analyzing C4 A-Ci Curves","text":"One qualitative way check data simply create plot -Ci curves. situation, lattice library makes simple include curve separate subplot figure. example:  curves look bit strange, related noise intentionally added data. Nevertheless, points probably exclude attempting fit curves. One issue model never predicts decrease AA CiCi increases. , usually good idea exclude points high CiCi AA observed decrease large amount. dropoff assimilation due one processes captured model, fits unreliable. remove points later, made several data quality checks.","code":"# Plot all A-Ci curves in the data set xyplot(   A ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']'),   ylab = paste('Net CO2 assimilation rate [', licor_data$units$A, ']') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"additional-plots-for-qualitative-validation","dir":"Articles > Web_only","previous_headings":"Validating the Data","what":"Additional Plots for Qualitative Validation","title":"Analyzing C4 A-Ci Curves","text":"Sometimes Licor override temperature humidity controls making measurements; case, conditions inside measurement chamber may stable, may wish exclude points. can check types issues making plots. following sections, generate several different plots check curve quality.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"humidity-control","dir":"Articles > Web_only","previous_headings":"Validating the Data > Additional Plots for Qualitative Validation","what":"Humidity Control","title":"Analyzing C4 A-Ci Curves","text":", Humidifier_% Desiccant_% represent flow humidifier desiccant columns, value 0 indicates valve column fully closed value 100 indicates valve column fully opened. RHcham represents relative humidity inside chamber percentage (words, value 0 100). curves measured, chamber humidity setpoint specified. , looking plot, check relative humidity fairly constant curve. Typically, accompanied relatively smooth changes valve percentages accomodate changes ambient humidity leaf photosynthesis. plot, data looks good.","code":"# Make a plot to check humidity control xyplot(   RHcham + `Humidifier_%` + `Desiccant_%` ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(0, 100),   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"temperature-control","dir":"Articles > Web_only","previous_headings":"Validating the Data > Additional Plots for Qualitative Validation","what":"Temperature Control","title":"Analyzing C4 A-Ci Curves","text":", TleafCnd leaf temperature measured using thermocouple, Txchg temperature heat exhanger used control air temperature measurement instrument. curves measured, exchanger setpoint specified. , looking plot, check Txchg constant curve leaf temperature vary erratic way. plot, data looks good.","code":"# Make a plot to check temperature control xyplot(   TleafCnd + Txchg ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(25, 40),   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']'),   ylab = paste0('Temperature (', licor_data$units$TleafCnd, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"co2-control","dir":"Articles > Web_only","previous_headings":"Validating the Data > Additional Plots for Qualitative Validation","what":"CO2 Control","title":"Analyzing C4 A-Ci Curves","text":", CO2_s CO2 concentration sample cell, CO2_r CO2 concentration reference cell, CO2_r_sp setpoint CO2_r. curves measured, sequence CO2_r values specified, , looking plot, check CO2_r close CO2_r_sp. also expect CO2_s bit lower CO2_r leaf sample chamber assimilating CO2, reduce concentration surrounding air. (exception rule occurs low values CO2_r_sp, leaf actually releases CO2.) plot, data looks good.","code":"# Make a plot to check CO2 control xyplot(   CO2_s + CO2_r + CO2_r_sp ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']'),   ylab = paste0('CO2 concentration (', licor_data$units$CO2_r, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"stability","dir":"Articles > Web_only","previous_headings":"Validating the Data > Additional Plots for Qualitative Validation","what":"Stability","title":"Analyzing C4 A-Ci Curves","text":"measuring response curves Licor, possible specify stability criteria point addition minimum maximum wait times. words, set point driving variable changed, machine waits stability criteria met; minimum waiting period, also maximum prevent machine waiting long. curves measured, stability criteria supplied net assimilation rate stomatal conductance gsw. stability status stored log file appropriate logging option stability set. Now, point, possible check whether stability achieved whether point logged maximum waiting period met. maximum waiting period reached plant still stabilized, data point may unreliable, can helpful check information. plot, :OK indicates whether stable (0 , 1 yes), gsw:OK indicates whether gsw stable (0 , 1 yes), Stable indicates total number stability conditions met. , looking points Stable 2. Otherwise, can check traces see whether gsw unstable. Comparing plots ones Plotting -Ci Curves, seems none unstable points look particularly strange, remove .","code":"# Make a plot to check stability criteria xyplot(   `A:OK` + `gsw:OK` + Stable ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"cleaning-the-licor-data","dir":"Articles > Web_only","previous_headings":"Validating the Data","what":"Cleaning the Licor Data","title":"Analyzing C4 A-Ci Curves","text":"checking plots previous sections, noticed curves exhibit sharp decrease AA high values CiC_i. can use remove_points function PhotoGEA exclude points. just happens points AnA_n suddenly decreases high CiC_i measured ripe1 instrument occur highest CO2 setpoint value, easy specify .","code":"# Remove points where `instrument` is `ripe1` and `CO2_r_sp` is 1800 licor_data <- remove_points(   licor_data,   list(instrument = 'ripe1', CO2_r_sp = 1800),   method = 'exclude' )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"fitting-licor-data","dir":"Articles > Web_only","previous_headings":"","what":"Fitting Licor Data","title":"Analyzing C4 A-Ci Curves","text":"Now checked data quality, ready perform fitting. order fit curves, several required pieces information included Licor data files produced instrument: temperature-dependent values important photosynthetic parameters γ*\\gamma^*, values total pressure. However, PhotoGEA package includes two functions help calculations: calculate_temperature_response calculate_total_pressure. requires exdf object containing Licor data. units required column checked attempt avoid unit-related errors. information functions can obtained built-help system typing ?calculate_temperature_response ?calculate_total_pressure. First, can use calculate_temperature_response: simple command, used leaf temperature Licor file calculate values several key C4 photosynthetic parameters (Vcmax_norm, Vpmax_norm, RL_norm, Kc, Ko, Kp, gamma_star, ao, gmc_norm, J_norm) according temperature response parameters specified Susanne von Caemmerer (2021). Notice command calculated values mesophyll conductance CO2 (gmc) units mol m−2^{-2} s−1^{-1} bar−1^{-1}. values estmated Setaria viridis may appropriate C4 plants. Nevertheless, use . Now can use calculate_total_pressure: Together, functions added several new columns licor_data, including gmc, PCm, gamma_star, others. information, now ready fit curves. demonstrate three different approaches curve fitting. fits, using fit_c4_aci fit_c4_aci_hyperbola functions PhotoGEA package, fit single response curves estimate values key photosynthetic parameters. apply functions curve larger data set consolidate results, can use conjunction consolidate, also part PhotoGEA. (information functions, see built-help menu entries typing ?fit_c4_aci, ?fit_c4_aci_hyperbola, ?.exdf, ?consolidate, check Common Patterns section Working Extended Data Frames vignette.) Together, functions split apart main data using curve identifier column defined (Basic Checks), fit -Ci curve using models discussed Understanding C4A-Ci Curves, return resulting parameters fits. viewing resulting fits, using plot_c4_aci_fit plot_c4_aci_hyperbola_fit functions PhotoGEA.","code":"# Calculate temperature-dependent values of C4 photosynthetic parameters licor_data <- calculate_temperature_response(licor_data, c4_temperature_param_vc) # Calculate the total pressure in the Licor chamber licor_data <- calculate_total_pressure(licor_data)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"mechanistic-fit-assuming-rubisco-limitations","dir":"Articles > Web_only","previous_headings":"Fitting Licor Data","what":"Mechanistic Fit, Assuming Rubisco Limitations","title":"Analyzing C4 A-Ci Curves","text":"ensure fitted assimilation rates limited Rubisco activity high CiC_i, can set VprV_{pr} JJ extremely high values, ensure PEP regeneration light availability never limiting. time, allow VcmaxV_{cmax} vary fit. default behavior fit_c4_aci, use fit_options input argument make clear requiring Rubisco limitations. made fits, can view results:  Overall, fits look good. Note Rubisco activity PEP carboxylase activity co-limit net assimilation rate, AnA_n always smaller either ArA_r ApcA_{pc} results.","code":"# The default optimizer uses randomness, so we will set a seed to ensure the # results from this fit are always identical set.seed(1234)  # Fit the C4 A-Ci curves with the mechanistic model, assuming Rubisco limitations c4_aci_results_rubisco <- consolidate(by(   licor_data,                       # The `exdf` object containing the curves   licor_data[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_c4_aci,                       # The function to apply to each chunk of `licor_data`   Ca_atmospheric = 420,             # Used to estimate the operating point   fit_options = list(Vcmax_at_25 = 'fit', Vpr = 1000, J_at_25 = 1000) )) # Plot the C4 A-Ci fits that were made assuming Rubisco limitations plot_c4_aci_fit(   c4_aci_results_rubisco,   'curve_identifier',   'Ci',   ylim = c(-10, 100),   main = 'Mechanistic fits assuming Rubisco limitations' )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"mechanistic-fit-assuming-electron-transport-limitations","dir":"Articles > Web_only","previous_headings":"Fitting Licor Data","what":"Mechanistic Fit, Assuming Electron Transport Limitations","title":"Analyzing C4 A-Ci Curves","text":"ensure fitted assimilation rates limited electron transport high CiC_i, can set VprV_{pr} VcmaxV_{cmax} extremely high values, ensure PEP regeneration Rubisco activity never limiting. time, allow JJ vary fit. can done using fit_options input argument fit_c4_aci. made fits, can view results:  Overall, fits look good. Note electron transport PEP carboxylase independent model, sharp transition =ApcA_n = A_{pc} =AjA_n = A_j fits, contrast Rubisco fits , smooth transition limiting states.","code":"# The default optimizer uses randomness, so we will set a seed to ensure the # results from this fit are always identical set.seed(1234)  # Fit the C4 A-Ci curves with the mechanistic model, assuming electron transport limitations c4_aci_results_light <- consolidate(by(   licor_data,                       # The `exdf` object containing the curves   licor_data[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_c4_aci,                       # The function to apply to each chunk of `licor_data`   Ca_atmospheric = 420,             # Used to estimate the operating point   fit_options = list(Vcmax_at_25 = 1000, Vpr = 1000, J_at_25 = 'fit') )) # Plot the C4 A-Ci fits that were made assuming electron transport limitations plot_c4_aci_fit(   c4_aci_results_light,   'curve_identifier',   'Ci',   ylim = c(-10, 100),   main = 'Mechanistic fits assuming electron transport limitations' )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"calculating-jmax","dir":"Articles > Web_only","previous_headings":"Fitting Licor Data > Mechanistic Fit, Assuming Electron Transport Limitations","what":"Calculating Jmax","title":"Analyzing C4 A-Ci Curves","text":"fit_c4_aci function estimates values JJ, JmaxJ_{max}. However, estimates JmaxJ_{max} can obtained fitting applying calculate_jmax function results fit_c4_aci. possible allowing assuming electron transport limitations, done fits section. information function, see built-help menu entry typing ?calculate_jmax. order , need values QinQ_{} TleafT_{leaf} curve. information typically included Licor file, calculated average values QinQ_{} TleafT_{leaf} Reorganizing Data section calling organize_response_curve_data, taken care . also necessary temperature-dependent values αJ\\alpha_J θJ\\theta_J, two parameters related JJ JmaxJ_{max}. can obtained using calculate_temperature_response function, also used Fitting Licor Data section . commands, parameters element c4_aci_results_light now includes estimates JmaxJ_{max}. aware estimates JmaxJ_{max} dependent assumed values αJ\\alpha_J θJ\\theta_J 25 degrees C, especially curves measured low values incident PPFD; see documentation calculate_jmax information.","code":"# Calculate temperature-dependent values of Jmax-related parameters c4_aci_results_light$parameters <- calculate_temperature_response(     c4_aci_results_light$parameters,     jmax_temperature_param_flat,     'TleafCnd_avg' )  # Calculate Jmax c4_aci_results_light$parameters <- calculate_jmax(   c4_aci_results_light$parameters )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"semi-empirical-fit","dir":"Articles > Web_only","previous_headings":"Fitting Licor Data","what":"Semi-Empirical Fit","title":"Analyzing C4 A-Ci Curves","text":"can also take empirical approach curve fitting, use non-rectangular hyperbola instead mechanistic model. made fits, can view results:  hyperbola used estimate VmaxV_{max}, characterizes maximum gross assimilation rate occurs high CiC_i, Amax=Vmax−RLA_{max} = V_{max} - R_L highest net assimilation rate. common pair estimate VpmaxV_{pmax} made fitting mechanistic equation low-CiC_i part curve: =Vpmax⋅CiCi+Kp−RLA_n = \\frac{V_{pmax} \\cdot C_i}{C_i + K_p} - R_L full mechanistic model reduces particular equation following conditions met: bundle sheath conductance (gbsg_{bs}) zero. photosystem II activity occurs bundle sheath (αPSII=0\\alpha_{PSII} = 0). CO2 concentration mesophyll identical intercellular CO2 concentration. case mesophyll conductance infinitely large. fit equation just measured points CiC_i 60 ppm. , also need specify infinite value mesophyll conductance, overriding default value. made fits, can view results:","code":"# The default optimizer uses randomness, so we will set a seed to ensure the # results from this fit are always identical set.seed(1234)  # Fit the C4 A-Ci curves with the empirical model c4_aci_results_hyperbola <- consolidate(by(   licor_data,                       # The `exdf` object containing the curves   licor_data[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_c4_aci_hyperbola              # The function to apply to each chunk of `licor_data` )) # Plot the C4 A-Ci fits that were made using the empirical model plot_c4_aci_hyperbola_fit(   c4_aci_results_hyperbola,   'curve_identifier',   ylim = c(-10, 100),   main = 'Empirical fits using a hyperbola' ) # Get a subset of the data where Ci is below the threshold value licor_data_low_ci <- licor_data[licor_data[, 'Ci'] <= 60, , TRUE]  # The default optimizer uses randomness, so we will set a seed to ensure the # results from this fit are always identical set.seed(1234)  # Fit the C4 A-Ci curves with the mechanistic Vpmax equation c4_aci_results_vpmax <- consolidate(by(   licor_data_low_ci,                       # The `exdf` object containing the curves   licor_data_low_ci[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_c4_aci,                              # The function to apply to each chunk of `licor_data`   fit_options = list(     Vcmax_at_25 = 1000,     Vpr = 1000,     J_at_25 = 1000,     alpha_psii = 0,     gbs = 0,     gmc_at_25 = Inf   ) )) # Plot the C4 A-Ci fits that were made to the low Ci part of the curves plot_c4_aci_fit(   c4_aci_results_vpmax,   'curve_identifier',   'Ci',   ylim = c(-10, 60),   main = 'Mechanistic fits to the low Ci part of each curve' )"},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"accessing-best-fit-estimates-and-confidence-intervals","dir":"Articles > Web_only","previous_headings":"Examining the Results","what":"Accessing Best-Fit Estimates and Confidence Intervals","title":"Analyzing C4 A-Ci Curves","text":"fit returns best-fit values confidence limits parameter, stored parameters element output list, another exdf object. values can viewed directly R. example, can look estimated VpmaxV_{pmax} values mechanistic fit follows: can see estimates made mechanistic fit Rubisco limitations generally largest, made just low-CiC_i points lowest. Estimates parameters, JJ, JmaxJ_{max}, RLR_L, VcmaxV_{cmax}, VmaxV_{max}, can accessed similar commands, although may available fits. example, JJ JmaxJ_{max} available fits made assuming electron transport limitations:","code":"# Specify columns to view vpmax_columns <- c(   'curve_identifier',   'Vpmax_at_25_lower',   'Vpmax_at_25',   'Vpmax_at_25_upper' )  # View Vpmax values from the mechanistic fit that assumed Rubisco limitations c4_aci_results_rubisco$parameters[, vpmax_columns] #>      curve_identifier Vpmax_at_25_lower Vpmax_at_25 Vpmax_at_25_upper #> 1   ripe1 - maize - 5          133.8529    158.2040          187.1139 #> 2 ripe1 - sorghum - 2          123.4999    149.4453          179.5492 #> 3 ripe1 - sorghum - 3          115.9223    124.2466          133.2167 #> 4   ripe2 - maize - 2          135.7686    154.8675          176.9160 #> 5 ripe2 - sorghum - 3          110.0679    131.1353          156.6364  # View Vpmax values from the mechanistic fit that assumed light limitations c4_aci_results_light$parameters[, vpmax_columns] #>      curve_identifier Vpmax_at_25_lower Vpmax_at_25 Vpmax_at_25_upper #> 1   ripe1 - maize - 5          76.89114    90.46091          110.6617 #> 2 ripe1 - sorghum - 2          85.62048   104.52367          123.4277 #> 3 ripe1 - sorghum - 3          75.98196    83.72335           91.4649 #> 4   ripe2 - maize - 2          92.12211    99.30727          108.7100 #> 5 ripe2 - sorghum - 3          74.08761    85.42020           96.7532  # View Vpmax values from the mechanistic fit to the low-Ci part of the curves c4_aci_results_vpmax$parameters[, vpmax_columns] #>      curve_identifier Vpmax_at_25_lower Vpmax_at_25 Vpmax_at_25_upper #> 1   ripe1 - maize - 5          75.32530    82.31016          89.29503 #> 2 ripe1 - sorghum - 2          65.23357    70.17602          75.11849 #> 3 ripe1 - sorghum - 3          70.41548    73.30350          76.19152 #> 4   ripe2 - maize - 2          62.10453    64.47364          66.84276 #> 5 ripe2 - sorghum - 3          55.37449    57.38421          59.39391 # View J values from the mechanistic fit that assumed light limitations c4_aci_results_light$parameters[, c('curve_identifier', 'J_at_25_lower', 'J_at_25', 'J_at_25_upper')] #>      curve_identifier J_at_25_lower  J_at_25 J_at_25_upper #> 1   ripe1 - maize - 5      206.0962 223.3115      240.4858 #> 2 ripe1 - sorghum - 2      248.3432 271.6375      294.8683 #> 3 ripe1 - sorghum - 3      231.9786 241.9906      251.9899 #> 4   ripe2 - maize - 2      239.8052 249.4091      259.6814 #> 5 ripe2 - sorghum - 3      216.6279 233.3910      250.1130  # View Jmax values from the mechanistic fit that assumed light limitations c4_aci_results_light$parameters[, c('curve_identifier', 'Jmax_at_25_lower', 'Jmax_at_25', 'Jmax_at_25_upper')] #>      curve_identifier Jmax_at_25_lower Jmax_at_25 Jmax_at_25_upper #> 1   ripe1 - maize - 5         230.7720   253.2810         276.4805 #> 2 ripe1 - sorghum - 2         287.3653   320.7355         355.8663 #> 3 ripe1 - sorghum - 3         264.8904   278.5509         292.4765 #> 4   ripe2 - maize - 2         275.5463   288.8552         303.3929 #> 5 ripe2 - sorghum - 3         244.4579   266.8019         289.8413"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"visualizing-average-best-fit-parameters","dir":"Articles > Web_only","previous_headings":"Examining the Results","what":"Visualizing Average Best-Fit Parameters","title":"Analyzing C4 A-Ci Curves","text":"can also visualize best-fit parameters using plots. One way using barchart_with_errorbars function PhotoGEA create barcharts average values species. function ignore NA values curves parameter reliably estimated, error bars show standard error mean species. take look VcmaxV_{cmax} estimates.  Another option create box-whisper plots using bwplot function lattice package:","code":"# Make a barchart showing average Vcmax values barchart_with_errorbars(   c4_aci_results_rubisco$parameters[, 'Vcmax_at_25'],   c4_aci_results_rubisco$parameters[, 'species'],   ylim = c(0, 50),   xlab = 'Species',   ylab = paste0('Vcmax at 25 degrees C (', c4_aci_results_rubisco$parameters$units$Vcmax_at_25, ')') ) # Make a boxplot showing the distribution of Vcmax values bwplot(   Vcmax_at_25 ~ species,   data = c4_aci_results_rubisco$parameters$main_data,   ylim = c(0, 50),   xlab = 'Species',   ylab = paste0('Vcmax at 25 degrees C (', c4_aci_results_rubisco$parameters$units$Vcmax_at_25, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"calculating-average-best-fit-parameters","dir":"Articles > Web_only","previous_headings":"Examining the Results","what":"Calculating Average Best-Fit Parameters","title":"Analyzing C4 A-Ci Curves","text":"can also calculate average values standard errors best-fit parameters species using basic_stats function PhotoGEA:","code":"# Compute the average and standard error of each parameter for each species # from one of the mechanistic fits c4_aci_averages_rubisco <- basic_stats(c4_aci_results_rubisco$parameters, 'species')  # View the averages and errors columns_to_view <- c(   'species',   'Vcmax_at_25_avg', 'Vcmax_at_25_stderr',   'Vpmax_at_25_avg', 'Vpmax_at_25_stderr',   'RL_at_25_avg', 'RL_at_25_stderr' )  c4_aci_averages_rubisco[ , columns_to_view] #>   species Vcmax_at_25_avg Vcmax_at_25_stderr Vpmax_at_25_avg Vpmax_at_25_stderr #> 1   maize        36.53579           2.628570        156.5358           1.668228 #> 2 sorghum        38.39997           2.117231        134.9424           7.519182 #>   RL_at_25_avg RL_at_25_stderr #> 1   -0.1333101        2.842192 #> 2   -0.9351559        1.442296"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"other-ideas-for-synthesizing-results","dir":"Articles > Web_only","previous_headings":"Examining the Results","what":"Other Ideas for Synthesizing Results","title":"Analyzing C4 A-Ci Curves","text":"Statistical tests check differences groups can performed within R using packages onewaytests DescTools. Alternatively, parameter values can exported comma-separated-value (CSV) file analyzed another software environment like jmp.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"customizing-your-script","dir":"Articles > Web_only","previous_headings":"","what":"Customizing Your Script","title":"Analyzing C4 A-Ci Curves","text":"Note commands vignette written general way can used basis analysis script (see Commands Document). order use script, following changes may required. may also others specifically mentioned .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"input-files","dir":"Articles > Web_only","previous_headings":"Customizing Your Script","what":"Input Files","title":"Analyzing C4 A-Ci Curves","text":"file paths specified file_paths need modified point Licor files. One way script simply write relative absolute paths files wish load. example, replace previous definition file_paths one: may also want consider using choose_input_licor_files function PhotoGEA; function create pop-browser window can interactively select set files. Sometimes convenient writing file paths names. example, replace previous definition file_paths one: Unfortunately, choose_input_licor_files available interactive R sessions running Microsoft Windows, also platform-independent option: choose_input_files. See Translation section Developing Data Analysis Pipeline vignette details.","code":"# Define a vector of paths to the files we wish to load file_paths <- c(   'myfile1.xlsx',        # `myfile1.xlsx` must be in the current working directory   'C:/documents/myfile2' # This is an absolute path to `myfile2` ) # Interactively define a vector of paths to the files we wish to load file_paths <- choose_input_licor_files()"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"curve-identifier","dir":"Articles > Web_only","previous_headings":"Customizing Your Script","what":"Curve Identifier","title":"Analyzing C4 A-Ci Curves","text":"Depending user constants defined Licor Excel files, may need modify definition curve_identifier column.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"data-cleaning","dir":"Articles > Web_only","previous_headings":"Customizing Your Script","what":"Data Cleaning","title":"Analyzing C4 A-Ci Curves","text":"Depending qualitative data checks, may need change input arguments remove_points. might also necessary remove unstable points performing fits. Often, helpful perform data cleaning first, remove problematic points seem cause problems fits.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"averages-and-standard-errors","dir":"Articles > Web_only","previous_headings":"Customizing Your Script","what":"Averages and Standard Errors","title":"Analyzing C4 A-Ci Curves","text":"Depending data organized, may want change column used divide data calculating averages standard errors.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"plots","dir":"Articles > Web_only","previous_headings":"Customizing Your Script","what":"Plots","title":"Analyzing C4 A-Ci Curves","text":"may need change axis limits plots. Alternatively, can remove , allowing xyplot automatically choose . may also want consider using pdf_print function PhotoGEA save plots PDFs. See help page info: ?pdf_print.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"saving-results","dir":"Articles > Web_only","previous_headings":"Customizing Your Script","what":"Saving Results","title":"Analyzing C4 A-Ci Curves","text":"may want use write.csv.exdf save fitting results CSV files. writing contents exdf object CSV file, using write.csv.exdf rather write.csv ensure units included column. example, following commands save results one mechanistic fits, allowing interactively choose output filenames resulting CSV files:","code":"write.csv.exdf(c4_aci_results_rubisco$fits, file.choose()) write.csv.exdf(c4_aci_results_rubisco$parameters, file.choose()) write.csv.exdf(c4_aci_averages_rubisco, file.choose())"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_c4_aci_curves.html","id":"commands-from-this-document","dir":"Articles > Web_only","previous_headings":"","what":"Commands From This Document","title":"Analyzing C4 A-Ci Curves","text":"following code chunk includes central commands used throughout document. compiled make easy copy/paste text file initialize script. Annotation also added clearly indicate four steps involved data analysis, described Developing Data Analysis Pipeline vignette.","code":"### ### PRELIMINARIES: ### Loading packages, defining constants, creating helping functions, etc. ###  # Load required packages library(PhotoGEA) library(lattice)  ### ### TRANSLATION: ### Creating convenient R objects from raw data files ###  ## IMPORTANT: When loading your own files, it is not advised to use ## `PhotoGEA_example_file_path` as in the code below. Instead, write out the ## names or use the `choose_input_licor_files` function.  # Define a vector of paths to the files we wish to load; in this case, we are # loading example files included with the PhotoGEA package file_paths <- c(   PhotoGEA_example_file_path('c4_aci_1.xlsx'),   PhotoGEA_example_file_path('c4_aci_2.xlsx') )  # Load each file, storing the result in a list licor_exdf_list <- lapply(file_paths, function(fpath) {   read_gasex_file(fpath, 'time') })  # Get the names of all columns that are present in all of the Licor files columns_to_keep <- do.call(identify_common_columns, licor_exdf_list)  # Extract just these columns licor_exdf_list <- lapply(licor_exdf_list, function(x) {   x[ , columns_to_keep, TRUE] })  # Use `rbind` to combine all the data licor_data <- do.call(rbind, licor_exdf_list)  ### ### VALIDATION: ### Organizing the data, checking its consistency and quality, cleaning it ###  # Create a new identifier column formatted like `instrument - species - plot` licor_data[ , 'curve_identifier'] <-   paste(licor_data[ , 'instrument'], '-', licor_data[ , 'species'], '-', licor_data[ , 'plot'])  # Make sure the data meets basic requirements check_response_curve_data(licor_data, 'curve_identifier', 16, 'CO2_r_sp')  # Remove points with duplicated `CO2_r_sp` values, reorder by `Ci`, and # calculate average values of leaf temperature and Qin licor_data <- organize_response_curve_data(     licor_data,     'curve_identifier',     c(9, 10),     'Ci',     columns_to_average = c('TleafCnd', 'Qin') )  # Plot all A-Ci curves in the data set xyplot(   A ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']'),   ylab = paste('Net CO2 assimilation rate [', licor_data$units$A, ']') )  # Make a plot to check humidity control xyplot(   RHcham + `Humidifier_%` + `Desiccant_%` ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(0, 100),   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']') )  # Make a plot to check temperature control xyplot(   TleafCnd + Txchg ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(25, 40),   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']'),   ylab = paste0('Temperature (', licor_data$units$TleafCnd, ')') )  # Make a plot to check CO2 control xyplot(   CO2_s + CO2_r + CO2_r_sp ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']'),   ylab = paste0('CO2 concentration (', licor_data$units$CO2_r, ')') )  # Make a plot to check stability criteria xyplot(   `A:OK` + `gsw:OK` + Stable ~ Ci | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']') )  ## IMPORTANT: When analyzing your own files, it is not advised to remove any ## points for the initial fits. Only remove unstable or unusual points if it is ## necessary in order to get good fits. See the \"Cleaning the Licor Data\" ## section above for instructions.  ### ### PROCESSING: ### Extracting new pieces of information from the data ###  # Calculate temperature-dependent values of C4 photosynthetic parameters licor_data <- calculate_temperature_response(licor_data, c4_temperature_param_vc)  # Calculate the total pressure in the Licor chamber licor_data <- calculate_total_pressure(licor_data)  ## ## Mechanistic fits, assuming Rubisco limitations ##  # The default optimizer uses randomness, so we will set a seed to ensure the # results from this fit are always identical set.seed(1234)  # Fit the C4 A-Ci curves with the mechanistic model, assuming Rubisco limitations c4_aci_results_rubisco <- consolidate(by(   licor_data,                       # The `exdf` object containing the curves   licor_data[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_c4_aci,                       # The function to apply to each chunk of `licor_data`   Ca_atmospheric = 420,             # Used to estimate the operating point   fit_options = list(Vcmax_at_25 = 'fit', Vpr = 1000, J_at_25 = 1000) ))  # Plot the C4 A-Ci fits that were made assuming Rubisco limitations plot_c4_aci_fit(   c4_aci_results_rubisco,   'curve_identifier',   'Ci',   ylim = c(-10, 100),   main = 'Mechanistic fits assuming Rubisco limitations' )  ## ## Mechanistic fits, assuming light limitations ##  # The default optimizer uses randomness, so we will set a seed to ensure the # results from this fit are always identical set.seed(1234)  # Fit the C4 A-Ci curves with the mechanistic model, assuming electron transport limitations c4_aci_results_light <- consolidate(by(   licor_data,                       # The `exdf` object containing the curves   licor_data[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_c4_aci,                       # The function to apply to each chunk of `licor_data`   Ca_atmospheric = 420,             # Used to estimate the operating point   fit_options = list(Vcmax_at_25 = 1000, Vpr = 1000, J_at_25 = 'fit') ))  # Plot the C4 A-Ci fits that were made assuming electron transport limitations plot_c4_aci_fit(   c4_aci_results_light,   'curve_identifier',   'Ci',   ylim = c(-10, 100),   main = 'Mechanistic fits assuming electron transport limitations' )  # Calculate temperature-dependent values of Jmax-related parameters c4_aci_results_light$parameters <- calculate_temperature_response(     c4_aci_results_light$parameters,     jmax_temperature_param_flat,     'TleafCnd_avg' )  # Calculate Jmax c4_aci_results_light$parameters <- calculate_jmax(   c4_aci_results_light$parameters )  ## ## Semi-empirical fits ##  # The default optimizer uses randomness, so we will set a seed to ensure the # results from this fit are always identical set.seed(1234)  # Fit the C4 A-Ci curves with the empirical model c4_aci_results_hyperbola <- consolidate(by(   licor_data,                       # The `exdf` object containing the curves   licor_data[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_c4_aci_hyperbola              # The function to apply to each chunk of `licor_data` ))  # Plot the C4 A-Ci fits that were made using the empirical model plot_c4_aci_hyperbola_fit(   c4_aci_results_hyperbola,   'curve_identifier',   ylim = c(-10, 100),   main = 'Empirical fits using a hyperbola' )  # Get a subset of the data where Ci is below the threshold value licor_data_low_ci <- licor_data[licor_data[, 'Ci'] <= 60, , TRUE]  # The default optimizer uses randomness, so we will set a seed to ensure the # results from this fit are always identical set.seed(1234)  # Fit the C4 A-Ci curves with the mechanistic Vpmax equation c4_aci_results_vpmax <- consolidate(by(   licor_data_low_ci,                       # The `exdf` object containing the curves   licor_data_low_ci[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_c4_aci,                              # The function to apply to each chunk of `licor_data`   fit_options = list(     Vcmax_at_25 = 1000,     Vpr = 1000,     J_at_25 = 1000,     alpha_psii = 0,     gbs = 0,     gmc_at_25 = Inf   ) ))  # Plot the C4 A-Ci fits that were made to the low Ci part of the curves plot_c4_aci_fit(   c4_aci_results_vpmax,   'curve_identifier',   'Ci',   ylim = c(-10, 60),   main = 'Mechanistic fits to the low Ci part of each curve' )  ### ### SYNTHESIS: ### Using plots and statistics to help draw conclusions from the data ###  # Specify columns to view vpmax_columns <- c(   'curve_identifier',   'Vpmax_at_25_lower',   'Vpmax_at_25',   'Vpmax_at_25_upper' )  # View Vpmax values from the mechanistic fit that assumed Rubisco limitations c4_aci_results_rubisco$parameters[, vpmax_columns]  # View Vpmax values from the mechanistic fit that assumed light limitations c4_aci_results_light$parameters[, vpmax_columns]  # View Vpmax values from the mechanistic fit to the low-Ci part of the curves c4_aci_results_vpmax$parameters[, vpmax_columns]  # View J values from the mechanistic fit that assumed light limitations c4_aci_results_light$parameters[, c('curve_identifier', 'J_at_25_lower', 'J_at_25', 'J_at_25_upper')]  # View Jmax values from the mechanistic fit that assumed light limitations c4_aci_results_light$parameters[, c('curve_identifier', 'Jmax_at_25_lower', 'Jmax_at_25', 'Jmax_at_25_upper')]  # Make a barchart showing average Vcmax values barchart_with_errorbars(   c4_aci_results_rubisco$parameters[, 'Vcmax_at_25'],   c4_aci_results_rubisco$parameters[, 'species'],   ylim = c(0, 50),   xlab = 'Species',   ylab = paste0('Vcmax at 25 degrees C (', c4_aci_results_rubisco$parameters$units$Vcmax_at_25, ')') )  # Make a boxplot showing the distribution of Vcmax values bwplot(   Vcmax_at_25 ~ species,   data = c4_aci_results_rubisco$parameters$main_data,   ylim = c(0, 50),   xlab = 'Species',   ylab = paste0('Vcmax at 25 degrees C (', c4_aci_results_rubisco$parameters$units$Vcmax_at_25, ')') )  # Compute the average and standard error of each parameter for each species # from one of the mechanistic fits c4_aci_averages_rubisco <- basic_stats(c4_aci_results_rubisco$parameters, 'species')  # View the averages and errors columns_to_view <- c(   'species',   'Vcmax_at_25_avg', 'Vcmax_at_25_stderr',   'Vpmax_at_25_avg', 'Vpmax_at_25_stderr',   'RL_at_25_avg', 'RL_at_25_stderr' )  c4_aci_averages_rubisco[ , columns_to_view]"},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_gm_data.html","id":"overview","dir":"Articles > Web_only","previous_headings":"","what":"Overview","title":"Analyzing Mesophyll Conductance Data","text":"vignette, give example showing use combined gas exchange isotope discrimination data estimate values mesophyll conductance PhotoGEA package. commands vignette can used initialize script, described Customizing Script.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_gm_data.html","id":"background","dir":"Articles > Web_only","previous_headings":"","what":"Background","title":"Analyzing Mesophyll Conductance Data","text":"process photosynthesis tends preferentially assimilate 12C often rarer heavier stable isotope 13C, carbon isotope discrimination measurements proven incredibly useful fields plant biology climate science (Evans Caemmerer 2013). context plant biology, common approach hold leaf plant controlled environmental conditions measure isotope discrimination; models predict discrimination can used estimate key parameter values mesophyll conductance CO2 (gmcg_{mc}) C3 plants bundle-sheath leakiness CO2 (ϕ\\phi) C4 plants. general, technique requires simultaneous measurements net CO2 assimilation rate AnA_n, intercellular CO2 concentration CiC_i, 12C 13C concentrations air flowing leaf, others. make measurements, gas exchange measurement system (Licor Li-6800) combined isotope concentration measurement system, making challenging experimental technique. Although several methods available measuring relative concentrations 12C 13C gas mixtures, tunable diode laser (TDL) absorption spectroscopy emerged one popular due high sensitivity relatively short measurement times (Salesse-Smith, Driever, Clarke 2022).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_gm_data.html","id":"isotope-discrimination-measurements","dir":"Articles > Web_only","previous_headings":"Background","what":"Isotope Discrimination Measurements","title":"Analyzing Mesophyll Conductance Data","text":"understand isotope discrimination, helpful first discuss fractionation. Fractionation process relative abundance one isotope differs product reactant chemical reaction. term fractionation also refers measurable quantity α\\alpha defined α=RrRp,\\alpha = \\frac{R_r}{R_p}, RrR_r RpR_p ratios isotope concentrations reactant product, respectively. case photosynthetic carbon isotope discrimination, α13C\\alpha^{13}C fractionation 13C relative 12C, air reactant, plant carbon product, ratios given 13C / 12C. photosynthesis assimilates 12C 13C, RpR_p always smaller RrR_r, α13C\\alpha^{13}C always greater 1. isotope discrimination Δ\\Delta related isotope fractionation α\\alpha according Δ=α−1=Rr−RpRp.\\Delta = \\alpha - 1 = \\frac{R_r - R_p}{R_p}. , case photosynthetic carbon isotope discrimination, Δ13C\\Delta^{13}C always positive (α\\alpha always greater 1). discrimination can also expressed terms isotopic composition δ\\delta, related isotope ratio RR δ=R−1\\delta = R - 1: Δ13C=δ13Cr−δ13Cp1+δ13Cp.\\Delta^{13}C = \\frac{\\delta^{13}C_r - \\delta^{13}C_p}{1 + \\delta^{13}C_p}. isotopic compositions can expressed relative international standard, making preferred way express relative abundance different isotopes. photosynthetic carbon isotope discrimination measurements, typically possible actually measure δ13Cp\\delta^{13}C_p variety reasons. Instead, δ13C\\delta^{13}C can measured outgoing air leaf. , possible relate isotopic compositions incoming outgoing air leaf (δ13Cin\\delta^{13}C_{} δ13Cout\\delta^{13}C_{}, respectively) δ13Cp\\delta^{13}C_p. case, full equation Δ13C\\Delta^{13}C becomes Δ13C=ξ(δ13Cout−δ13Cin)1+δ13Cout−ξ(δ13Cout−δ13Cin).\\Delta^{13}C = \\frac{\\xi (\\delta^{13}C_{} - \\delta^{13}C_{})} {1 + \\delta^{13}C_{} - \\xi (\\delta^{13}C_{} - \\delta^{13}C_{})}. , ξ\\xi defined ξ=CinCin−Cout,\\xi = \\frac{C_{}}{C_{} - C_{}}, CinC_{} CoutC_{} 12C concentrations incoming outgoing air. summary, photosynthetic carbon isotope discrimination Δ13C\\Delta^{13}C experimentally accessible quantity reflects degree preference 12C process photosynthesis. information discrimination measurement via TDL, see Ubierna, Holloway-Phillips, Farquhar (2018).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_gm_data.html","id":"isotope-discrimination-calculations","dir":"Articles > Web_only","previous_headings":"Background","what":"Isotope Discrimination Calculations","title":"Analyzing Mesophyll Conductance Data","text":"Values Δ13C\\Delta^{13}C can predicted knowledge photosynthetic chemical pathway, first done Farquhar, O’Leary, Berry (1982). approach breaks photosynthetic carbon assimilation several steps including diffusion air liquid, binding CO2 RuBP catalyzed Rubisco. step along pathway distinct fractionation. also necessary include release carbon photorespiration day respiration, also associated fractionations. entire equation relating Δ13C\\Delta^{13}C AnA_n, CiC_i, variables different C3 C4 plants. equations can also written several different ways depending assumptions made deriving . Due complexities, reproduce equations . However, can found many places, Box Ubierna, Holloway-Phillips, Farquhar (2018). important aspect equations can solved key parameters mesophyll conductance CO2 (C3 plants) bundle-sheath leakiness CO2 (C4 plants). , experimentally-measured values Δ13C\\Delta^{13}C can used calculate values gmcg_{mc} ϕ\\phi. many subtelties calculations, uncertainties fractionation values due photorespiration day respiration. attempt discuss , information can found Busch et al. (2020).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_gm_data.html","id":"a-note-about-this-example","dir":"Articles > Web_only","previous_headings":"Background","what":"A Note About This Example","title":"Analyzing Mesophyll Conductance Data","text":"Estimating mesophyll conductance combined gas exchange TDL measurements complicated process, making example longer PhotoGEA vignettes. general, analysis follows steps: Separately load gas exchange TDL data. Pair data together, making sure log point gas exchange data can identified carbon isotope concentrations sample reference lines measured TDL. Calculate photosynthetic carbon isotope discrimination mesophyll conductance. brevity, discuss types log files used example, information can found Analyzing TDL Data Analyzing C3 -Ci Curves vignettes.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_gm_data.html","id":"loading-packages","dir":"Articles > Web_only","previous_headings":"","what":"Loading Packages","title":"Analyzing Mesophyll Conductance Data","text":"always, first step load packages using. addition PhotoGEA, also use lattice package generating plots. lattice package installed R setup, can install typing install.packages('lattice').","code":"# Load required packages library(PhotoGEA) library(lattice)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_gm_data.html","id":"loading-gas-exchange-data","dir":"Articles > Web_only","previous_headings":"","what":"Loading Gas Exchange Data","title":"Analyzing Mesophyll Conductance Data","text":"PhotoGEA package includes two files representing gas exchange data measured along TDL data discussed next section. data recorded Licor Li-6800 instruments stored Microsoft Excel files. file includes two different CO2_r setpoints (715 ppm 450 ppm); six logs recorded setpoint. Although two files based real data, noise added since unpublished, files used examples. files stored computer somewhere R package installation directory, full paths files can obtained PhotoGEA_example_file_path: (Note: loading files analysis, advisable use PhotoGEA_example_file_path done . Instead, file paths can directly written, files can chosen using interactive window. See Input Files information.) actually read data files store R objects, use read_gasex_file function PhotoGEA. Later, need match timestamps gas exchange isotope discrimination data; make sure timestamps interpreted correctly, also specify time zone measurements made (America/Chicago). Since (potentially) multiple files read, call function file using lapply: result command R list “extended data frames” (abbreviated exdf objects). exdf class special data structure defined PhotoGEA package. many ways, exdf object equivalent data frame, major difference exdf object includes units column. information, type ?exdf R terminal access built-help menu entry, check Working Extended Data Frames vignette. Later, also necessary know “site number” gas exchange system. refers TDL valve numbers corresponding sample reference lines gas exchange instrument. UIUC, convention sample line valve number stored Licor log file name. can extracted using get_sample_valve_from_filename function PhotoGEA package, also provides method specifying reference line valve number. Generally, convenient work single exdf object rather list , next step combine objects list. action can accomplished using rbind function, combines table-like objects rows; words, stacks two tables vertically. action makes sense tables columns, combine exdf objects, make sure case. PhotoGEA package includes function called identify_common_columns can used get names columns present Licor files. , can extract just columns, combine exdf objects single one. Now single R object called licor_data includes data several Licor Excel files. information consolidating information multiple files, see Common Patterns section Working Extended Data Frames vignette.","code":"# Define a vector of paths to the files we wish to load; in this case, we are # loading example files included with the PhotoGEA package licor_file_paths <- c(   PhotoGEA_example_file_path('licor_for_gm_site11.xlsx'),   PhotoGEA_example_file_path('licor_for_gm_site13.xlsx') ) # Load each Licor file, storing the result in a list licor_exdf_list <- lapply(licor_file_paths, function(fpath) {   read_gasex_file(fpath, 'time', posix_options = list(tz = 'America/Chicago')) }) # Get TDL sample and reference valve numbers from the Licor filenames licor_exdf_list <- lapply(licor_exdf_list, function(exdf_obj) {   get_sample_valve_from_filename(exdf_obj, list(     '13' = 12, # The reference valve is 12 when the sample valve is 13     '11' = 10  # The reference valve is 10 when the sample valve is 11   )) }) # Get the names of all columns that are present in all of the Licor files licor_columns_to_keep <- do.call(identify_common_columns, licor_exdf_list)  # Extract just these columns licor_exdf_list <- lapply(licor_exdf_list, function(x) {   x[ , licor_columns_to_keep, TRUE] })  # Use `rbind` to combine all the data licor_data <- do.call(rbind, licor_exdf_list)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_gm_data.html","id":"loading-tunable-diode-laser-data","dir":"Articles > Web_only","previous_headings":"","what":"Loading Tunable Diode Laser Data","title":"Analyzing Mesophyll Conductance Data","text":"PhotoGEA package includes one file representing TDL data recorded Campbell Scientific CR3000 data logger simultaneously gas exchange data discussed previous section. Although two file based real data, noise added since unpublished, used example. file stored computer somewhere R package installation directory, full path file can obtained PhotoGEA_example_file_path: (Note: loading files analysis, advisable use PhotoGEA_example_file_path done . Instead, file paths can directly written, files can chosen using interactive window. See Input Files information.) actually read data files store R objects, use read_gasex_file function PhotoGEA. Later, need match timestamps gas exchange isotope discrimination data; make sure timestamps interpreted correctly, also specify time zone measurements made (America/Chicago). Since multiple files read, call function file using lapply: , result command list exdf objects. (case, list one element. However, written example general way able accomodate multple TDL log files necessary use one.) Generally, convenient work single exdf object rather list , next step combine objects list. process used previous section Licor log files. Now single R object called tdl_data includes data several TDL data files. information consolidating information multiple files, see Common Patterns section Working Extended Data Frames vignette.","code":"# Define a vector of paths to the files we wish to load; in this case, we are # loading example files included with the PhotoGEA package tdl_file_paths <- c(   PhotoGEA_example_file_path('tdl_for_gm.dat') ) # Load each TDL file, storing the result in a list tdl_exdf_list <- lapply(tdl_file_paths, function(fpath) {   read_gasex_file(fpath, 'TIMESTAMP', posix_options = list(tz = 'America/Chicago')) }) # Get the names of all columns that are present in all of the TDL files tdl_columns_to_keep <- do.call(identify_common_columns, tdl_exdf_list)  # Extract just these columns tdl_exdf_list <- lapply(tdl_exdf_list, function(x) {   x[ , tdl_columns_to_keep, TRUE] })  # Use `rbind` to combine all the data tdl_data <- do.call(rbind, tdl_exdf_list)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_gm_data.html","id":"basic-checks-of-the-gas-exchange-data","dir":"Articles > Web_only","previous_headings":"","what":"Basic Checks of the Gas Exchange Data","title":"Analyzing Mesophyll Conductance Data","text":"Next, make sure column data whose value uniquely identifies related set measurements. particular data set, several “user constants” defined making measurements help identify set: machine replicate. However, neither columns alone sufficient uniquely identify set. can solve issue creating new column combines values : measuring response curves (type gas exchange data), strongly recommended record key pieces metadata log files using “user constants,” done example. information, please see Guide Licor LI-6800 User Constants, also includes advice dealing data sets contain metadata. next step make sure column correctly identifies response curve. , can use check_response_curve_data function PhotoGEA. supply name column uniquely identify response curve (curve_identifier), expected number points curve (12), name “driving” column follow sequence curve (CO2_r_sp). data passes checks, function output produce messages. (information, see built-help menu entry typing ?check_response_curve_data, visit Frequently Asked Questions.) However, check_response_curve_data detects issue, print helpful message R terminal. example, specified wrong number points wrong identifier column, get error messages: Now confirmed curve identifier properly identifies sets data, can also perform additional organization using organize_response_curve_data function PhotoGEA: Now new column called seq_num, point set given number 1-12 corresponding measurement order. points also re-ordered according Ci.","code":"# Create a new identifier column formatted like `machine - replicate` licor_data[ , 'curve_identifier'] <-   paste(licor_data[ , 'machine'], licor_data[ , 'replicate'], sep = ' - ') # Make sure the data meets basic requirements check_response_curve_data(licor_data, 'curve_identifier', 12, 'CO2_r_sp') check_response_curve_data(licor_data, 'curve_identifier', 13) #>   curve_identifier npts #> 1       mickey - 1   12 #> 2        pluto - 1   12 #> Error in check_response_curve_data(licor_data, \"curve_identifier\", 13): One or more curves does not have the expected number of points.  check_response_curve_data(licor_data, 'replicate', 12) #>   replicate npts #> 1         1   24 #> Error in check_response_curve_data(licor_data, \"replicate\", 12): One or more curves does not have the expected number of points. # Order by `Ci`. licor_data <- organize_response_curve_data(   licor_data,   'curve_identifier',   c(), # keep all the measured points   'Ci' )"},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_gm_data.html","id":"identifying-tdl-cycles","dir":"Articles > Web_only","previous_headings":"Combining the Gas Exchange and Isotope Discrimination Data","what":"Identifying TDL Cycles","title":"Analyzing Mesophyll Conductance Data","text":"Typically TDL system periodically cycles multiple gas lines measurements. gas lines represent gas mixtures known composition can used calibration, others “unknown” mixtures whose composition measured. collection valves used control gas line measured given time, “active” valve recorded data point included measurement file. first step towards applying calibrations combining data associated gas exchange measurements identify complete measurement cycles within data set. can accomplished using identify_tdl_cycles function PhotoGEA package. use function, need know following information: name column TDL data indicates valve measured. valve number marks beginning new cycle. many valves measured cycle. name column TDL data indicates time measurement made. amount time take cycle valves. information usually known beforehand settings specified operating TDL; alternatively, isn’t known already, can often determined taking look data via View(tdl_files). information obtained, identify_tdl_cycles can used automatically assign number measurement cycle: Now tdl_data object two new columns: one called cycle_num specifies TDL cycle, called elapsed_time indicates elapsed time TDL log relative first one.","code":"# Assign numbers to all full cycles in the TDL data set tdl_data <- identify_tdl_cycles(   tdl_data,   valve_column_name = 'valve_number',   cycle_start_valve = 20,   expected_cycle_length_minutes = 2.7,   expected_cycle_num_valves = 9,   timestamp_colname = 'TIMESTAMP' )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_gm_data.html","id":"calibrating-tdl-cycles","dir":"Articles > Web_only","previous_headings":"Combining the Gas Exchange and Isotope Discrimination Data","what":"Calibrating TDL Cycles","title":"Analyzing Mesophyll Conductance Data","text":"Now individual cycles identified, next step use reference valves calibrate TDL readings. general, procedure depend strongly individual TDL system, since one may different types reference tanks. data used vignette measured using TDL Carl Bernacchi’s lab Edward R. Madigan Laboratory University Illinois, Urbana-Champaign. includes five reference tanks can broken three types: One certified tank whose total CO2 concentration carbon isotope ratio supplied NOAA. One nitrogen tank carbon . final type reference another CO2 tank whose isotype ratio measured UIUC using different method; tank mixed nitrogen three different ratios provide range carbon concentrations. full procedure using references calibrate TDL signal somewhat complicated. Fortunately, easy determine apply calibrations single TDL cycle using process_tdl_cycle_erml function PhotoGEA. apply function TDL cycle larger data set consolidate results, can use conjunction consolidate, also part PhotoGEA. (information functions, see built-help menu entries typing ?process_tdl_cycle_erml, ?.exdf, ?consolidate, check Common Patterns section Working Extended Data Frames vignette.) previous function, many inputs (noaa_cylinder_isotope_ratio) must obtained whoever managing TDL system used: output function – processed_tdl – list several exdf objects include calibrated TDL readings valve information calibration parameters determined processing data.","code":"# Use the data from the calibration valves to determine calibrated carbon # concentrations from all valves in each TDL cycle processed_tdl <- consolidate(by(   tdl_data,   tdl_data[, 'cycle_num'],   process_tdl_cycle_erml,   valve_column_name = 'valve_number',   noaa_valve = 2,   calibration_0_valve = 20,   calibration_1_valve = 21,   calibration_2_valve = 23,   calibration_3_valve = 26,   raw_12c_colname = 'Conc12C_Avg',   raw_13c_colname = 'Conc13C_Avg',   noaa_cylinder_co2_concentration = 294.996,   noaa_cylinder_isotope_ratio = -8.40,   calibration_isotope_ratio = -11.505 ))"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_gm_data.html","id":"pairing-gas-exchange-and-tdl-data","dir":"Articles > Web_only","previous_headings":"Combining the Gas Exchange and Isotope Discrimination Data","what":"Pairing Gas Exchange and TDL Data","title":"Analyzing Mesophyll Conductance Data","text":"analyzing combined gas exchange isotope discrimination data, key step combine TDL gas exchange data measured times. function performs operation locating TDL cycle whose timestamp closest Licor file entry. , 12C, 13C, total CO2, δ13\\delta^{13}C values measured TDL Licor’s sample reference lines cycle added gas exchange data new columns.","code":"# Pair the Licor and TDL data by locating the TDL cycle corresponding to each # Licor measurement licor_data <- pair_gasex_and_tdl(licor_data, processed_tdl$tdl_data)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_gm_data.html","id":"qualitative-validation","dir":"Articles > Web_only","previous_headings":"","what":"Qualitative Validation","title":"Analyzing Mesophyll Conductance Data","text":"data now undergone several basic validation checks. Now can make qualitative validation checks plotting various quantities looking outliers otherwise strange measurement points. section, just look many possible variables plotted. possibilities can found PhotoGEA vignettes, Analyzing TDL Data Analyzing C3 -Ci Curves.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_gm_data.html","id":"environment-control","dir":"Articles > Web_only","previous_headings":"Qualitative Validation","what":"Environment Control","title":"Analyzing Mesophyll Conductance Data","text":"One type validation make sure leaf environment properly controlled. include temperature, humidity, /CO2 concentration. example, first look temperature. measurements, leaf temperature set 28 degrees C, good idea confirm leaf temperature constant measurements.  temperature control perfect last point curve, deviates setpoint 0.5 degrees C. acceptable amount variation reason concern. can also look CO2_r, 715 ppm first six points 450 ppm following points.  can see CO2 control good measurement points.","code":"# Plot the leaf temperature, grouped by CO2_r setpoint xyplot(   TleafCnd ~ seq_num | curve_identifier,   group = CO2_r_sp,   data = licor_data$main_data,   type = 'p',   pch = 16,   auto.key = list(space = 'right'),   grid = TRUE,   ylim = c(26, 30),   xlab = 'Measurement number',   ylab = paste('Leaf temperature', '[', licor_data$units$TleafCnd, ']') ) # Plot CO2_r, grouped by CO2_r setpoint xyplot(   CO2_r ~ seq_num | curve_identifier,   group = CO2_r_sp,   data = licor_data$main_data,   type = 'p',   pch = 16,   auto.key = list(space = 'right'),   grid = TRUE,   ylim = c(400, 800),   xlab = 'Measurement number',   ylab = paste('CO2 concentration', '[', licor_data$units$CO2_r, ']') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_gm_data.html","id":"tdl-readings","dir":"Articles > Web_only","previous_headings":"Qualitative Validation","what":"TDL Readings","title":"Analyzing Mesophyll Conductance Data","text":"key requisite reliable mesophyll conductance values TDL readings stable time CO2 setpoint. can check looking calibrated TDL readings.  can see valves variable start TDL log file (valves 26 23). However, quite stable time gas exchange logs begin (around 25 minutes elapsed time).","code":"xyplot(   Conc13C_Avg ~ elapsed_time,   group = valve_number,   data = processed_tdl$tdl_data$main_data,   auto.key = list(space='right'),   grid = TRUE,   type = 'b',   xlab = paste0('Elapsed time (', processed_tdl$tdl_data$units$elapsed_time, ')'),   ylab = paste0(     'Calibrated TDL 13C concentration (',     processed_tdl$tdl_data$units$Conc13C_Avg, ')'   ),   par.settings = list(     superpose.line = list(col = multi_curve_colors()),     superpose.symbol = list(col = multi_curve_colors(), pch = 16)   ) )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_gm_data.html","id":"cleaning-the-data","dir":"Articles > Web_only","previous_headings":"Qualitative Validation","what":"Cleaning the Data","title":"Analyzing Mesophyll Conductance Data","text":"point, issues identified, clean data removing problematic points. example, procedure required. examples clean data set removing points, please see Analyzing C3 -Ci Curves vignette, one vignettes.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_gm_data.html","id":"calculating-isotope-discrimination","dir":"Articles > Web_only","previous_headings":"","what":"Calculating Isotope Discrimination","title":"Analyzing Mesophyll Conductance Data","text":"Now, licor_data exdf object includes TDL measurements Licor sample reference gas lines correspond log point. information can now used calculate Δ13C\\Delta^{13}C, photosynthetic isotope discrimination: can also make quick validity check . Photosynthetic carbon isotope discrimination vary much CO2 setpoint. can check plot.  large amount noise, expected measurements.","code":"# Calculate isotope discrimination licor_data <- calculate_isotope_discrimination(licor_data) # Plot the photosynthetic isotope discrimination, grouped by CO2_r setpoint xyplot(   Delta_obs_tdl ~ seq_num | curve_identifier,   group = CO2_r_sp,   data = licor_data$main_data,   type = 'p',   pch = 16,   auto.key = list(space = 'right'),   grid = TRUE,   ylim = c(16, 22),   xlab = 'Measurement number',   ylab = paste('Photosynthetic isotope discrimination', '[', licor_data$units$Delta_obs_tdl, ']') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_gm_data.html","id":"calculating-mesophyll-conductance","dir":"Articles > Web_only","previous_headings":"","what":"Calculating Mesophyll Conductance","title":"Analyzing Mesophyll Conductance Data","text":"Now loaded raw data, combined two main data sources (gas exchange TDL measurements), performed validity checks, calculated isotope discrimination values. just steps required calculate mesophyll conductance values. particular, mesophyll conductance equations require following inputs: rate day respiration (RdR_d). CO2 compensation point absence day respiration (Γ*\\Gamma^*). ternary correction factor (tt). observed photosynthetic carbon isotope discrimination growth conditions (Δobsgrowth\\Delta_{obs}^{growth}). value day respiration RdR_d must known measurements; typically determined placing leaf gas exchange measurement chamber light , measuring steady-state net assimilation rate. use 1.2 μ\\mumol m−2^{-2} s−1^{-1}. several possible approaches choosing value Γ*\\Gamma^*. calculate value leaf temperature Rubisco specificity using calculate_gamma_star function PhotoGEA, using 92 M M−1^{-1} specificity. ternary correction factor tt can calculated using calculate_ternary_correction function PhotoGEA. function requirements, can met first calling calculate_total_pressure calculate_gas_properties. Like RdR_d, observed photosynthetic isotope discrimination growth conditions (Δobsgrowth\\Delta_{obs}^{growth}) must measured leaf plant species. Ideally, determined setting ambient CO2 concentration around leaf ambient value using TDL measure photosynthetic isotope discrimination Δobs\\Delta_{obs}. data set, first six points file CO2_r set 715 ppm, produces value CaC_a close 420 ppm (global atmospheric value time measurements made). Thus, can use average value Δobs\\Delta_{obs} across first six points value Δobsgrowth\\Delta_{obs}^{growth} replicate. Now finally able calculate values mesophyll conductance! example, found mesophyll conductance values reasonable ff (assumed fractionation due day respiration) set 0. general, ff typically zero, can varied analysis.","code":"# Set day respiration rate licor_data <- set_variable(   licor_data,   'RL',   'micromol m^(-2) s^(-1)',   value = 1.2 ) # Set Rubisco specificity licor_data <- set_variable(     licor_data,     'rubisco_specificity_tl',     'M / M',     value = 92 )  # Calculate Gamma_star licor_data <- calculate_gamma_star(licor_data) # Calculate total pressure licor_data <- calculate_total_pressure(licor_data)  # Calculate gbc, gsc, Csurface licor_data <- calculate_gas_properties(licor_data)  # Calculate t licor_data <- calculate_ternary_correction(licor_data) # Set Delta_obs_growth licor_data <- set_variable(   licor_data,   'Delta_obs_growth',   'ppt',   id_column = 'curve_identifier',   value_table = as.list(tapply(     licor_data[licor_data[, 'CO2_r_sp'] == 715, 'Delta_obs_tdl'],     licor_data[licor_data[, 'CO2_r_sp'] == 715, 'curve_identifier'],     mean   )) ) # Calculate mesophyll conductance licor_data <- calculate_gm_busch(licor_data, f = 0)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_gm_data.html","id":"examining-the-results","dir":"Articles > Web_only","previous_headings":"","what":"Examining the Results","title":"Analyzing Mesophyll Conductance Data","text":"One way view results simply plot calculated value mesophyll conductance.  Another approach plot average mesophyll conductance average CiC_i CO2 setpoint.  usual, appropriate synthesis operations depend details project data used.","code":"# Plot the mesophyll conductance values, grouped by CO2_r setpoint xyplot(   gmc ~ seq_num | curve_identifier,   group = CO2_r_sp,   data = licor_data$main_data,   type = 'p',   pch = 16,   auto.key = list(space = 'right'),   grid = TRUE,   xlab = 'Measurement number',   ylab = paste('Mesophyll conductance to CO2', '[', licor_data$units$gmc, ']') ) # Plot the average mesophyll conductance values against average Ci values, # grouped by CO2_r setpoint xyplot_avg_rc(   licor_data[, 'gmc'],   licor_data[, 'Ci'],   licor_data[, 'CO2_r_sp'],   licor_data[, 'curve_identifier'],   type = 'b',   auto = TRUE,   grid = TRUE,   pch = 16,   ylab = paste('Mesophyll conductance to CO2', '[', licor_data$units$gmc, ']'),   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_gm_data.html","id":"customizing-your-script","dir":"Articles > Web_only","previous_headings":"","what":"Customizing Your Script","title":"Analyzing Mesophyll Conductance Data","text":"Note commands vignette written general way can used basis analysis script (see Commands Document). order use script, following changes may required. may also others specifically mentioned .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_gm_data.html","id":"input-files","dir":"Articles > Web_only","previous_headings":"Customizing Your Script","what":"Input Files","title":"Analyzing Mesophyll Conductance Data","text":"file paths specified licor_file_paths tdl_file_paths need modified point files. One way script simply write relative absolute paths files wish load. example, replace previous definitions ones: may also want consider using choose_input_licor_files choose_input_tdl_files functions PhotoGEA; functions create pop-browser windows can interactively select set files. Sometimes convenient writing file paths names. example, replace previous definitions ones: Unfortunately, choose_input_licor_files choose_input_tdl_files available interactive R sessions running Microsoft Windows, also platform-independent option: choose_input_files. See Translation section Developing Data Analysis Pipeline vignette details.","code":"# Define a vector of paths to the files we wish to load licor_file_paths <- c(   'myfile1.xlsx',        # `myfile1.xlsx` must be in the current working directory   'C:/documents/myfile2' # This is an absolute path to `myfile2` )  tdl_file_paths <- c(   'tdl_1.dat',     # `tdl_1.dat` must be in the current working directory   'data/tdl_2.dat' # The current working directory must contain a subdirectory )                  # called `data` that contains `tdl2.dat` # Interactively define a vector of paths to the files we wish to load licor_file_paths <- choose_input_licor_files()  tdl_file_paths <- choose_input_tdl_files()"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_gm_data.html","id":"mesophyll-conductance-calculations","dir":"Articles > Web_only","previous_headings":"Customizing Your Script","what":"Mesophyll Conductance Calculations","title":"Analyzing Mesophyll Conductance Data","text":"Sometimes may possible estimate Δgrowthobs\\Delta^{obs}_{growth}. case, set e_star_equation = 19 calling calculate_gm_busch use calculate_gm_ubierna instead calculate_gm_busch.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_gm_data.html","id":"saving-results","dir":"Articles > Web_only","previous_headings":"Customizing Your Script","what":"Saving Results","title":"Analyzing Mesophyll Conductance Data","text":"may want use write.csv save results csv files. example, following command allow interactively choose output filename csv file containing combined gas exchange TDL data, along calculated values isotope discrimination mesophyll conductance:","code":"write.csv(licor_data, file.choose(), row.names = FALSE)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_gm_data.html","id":"commands-from-this-document","dir":"Articles > Web_only","previous_headings":"","what":"Commands From This Document","title":"Analyzing Mesophyll Conductance Data","text":"following code chunk includes central commands used throughout document. compiled make easy copy/paste text file initialize script. Annotation also added clearly indicate four steps involved data analysis, described Developing Data Analysis Pipeline vignette.","code":"### ### PRELIMINARIES: ### Loading packages, defining constants, creating helping functions, etc. ###  # Load required packages library(PhotoGEA) library(lattice)  ### ### TRANSLATION: ### Creating convenient R objects from raw data files ###  ## ## Gas exchange log files ##  ## IMPORTANT: When loading your own files, it is not advised to use ## `PhotoGEA_example_file_path` as in the code below. Instead, write out the ## names or use the `choose_input_licor_files` function.  # Define a vector of paths to the files we wish to load; in this case, we are # loading example files included with the PhotoGEA package licor_file_paths <- c(   PhotoGEA_example_file_path('licor_for_gm_site11.xlsx'),   PhotoGEA_example_file_path('licor_for_gm_site13.xlsx') )  # Load each Licor file, storing the result in a list licor_exdf_list <- lapply(licor_file_paths, function(fpath) {   read_gasex_file(fpath, 'time', posix_options = list(tz = 'America/Chicago')) })  # Get TDL sample and reference valve numbers from the Licor filenames licor_exdf_list <- lapply(licor_exdf_list, function(exdf_obj) {   get_sample_valve_from_filename(exdf_obj, list(     '13' = 12, # The reference valve is 12 when the sample valve is 13     '11' = 10  # The reference valve is 10 when the sample valve is 11   )) })  # Get the names of all columns that are present in all of the Licor files licor_columns_to_keep <- do.call(identify_common_columns, licor_exdf_list)  # Extract just these columns licor_exdf_list <- lapply(licor_exdf_list, function(x) {   x[ , licor_columns_to_keep, TRUE] })  # Use `rbind` to combine all the data licor_data <- do.call(rbind, licor_exdf_list)  ## ## Isotope discrimination log files ##  ## IMPORTANT: When loading your own files, it is not advised to use ## `PhotoGEA_example_file_path` as in the code below. Instead, write out the ## names or use the `choose_input_tdl_files` function.  # Define a vector of paths to the files we wish to load; in this case, we are # loading example files included with the PhotoGEA package tdl_file_paths <- c(   PhotoGEA_example_file_path('tdl_for_gm.dat') )  # Load each TDL file, storing the result in a list tdl_exdf_list <- lapply(tdl_file_paths, function(fpath) {   read_gasex_file(fpath, 'TIMESTAMP', posix_options = list(tz = 'America/Chicago')) })  # Get the names of all columns that are present in all of the TDL files tdl_columns_to_keep <- do.call(identify_common_columns, tdl_exdf_list)  # Extract just these columns tdl_exdf_list <- lapply(tdl_exdf_list, function(x) {   x[ , tdl_columns_to_keep, TRUE] })  # Use `rbind` to combine all the data tdl_data <- do.call(rbind, tdl_exdf_list)  ### ### VALIDATION: ### Organizing the data, checking its consistency and quality, cleaning it ###  # Create a new identifier column formatted like `machine - replicate` licor_data[ , 'curve_identifier'] <-   paste(licor_data[ , 'machine'], licor_data[ , 'replicate'], sep = ' - ')  # Make sure the data meets basic requirements check_response_curve_data(licor_data, 'curve_identifier', 12, 'CO2_r_sp')  # Order by `Ci`. licor_data <- organize_response_curve_data(   licor_data,   'curve_identifier',   c(), # keep all the measured points   'Ci' )  ## ## Combining the gas exchange and isotope discrimination data ##  # Assign numbers to all full cycles in the TDL data set tdl_data <- identify_tdl_cycles(   tdl_data,   valve_column_name = 'valve_number',   cycle_start_valve = 20,   expected_cycle_length_minutes = 2.7,   expected_cycle_num_valves = 9,   timestamp_colname = 'TIMESTAMP' )  # Use the data from the calibration valves to determine calibrated carbon # concentrations from all valves in each TDL cycle processed_tdl <- consolidate(by(   tdl_data,   tdl_data[, 'cycle_num'],   process_tdl_cycle_erml,   valve_column_name = 'valve_number',   noaa_valve = 2,   calibration_0_valve = 20,   calibration_1_valve = 21,   calibration_2_valve = 23,   calibration_3_valve = 26,   raw_12c_colname = 'Conc12C_Avg',   raw_13c_colname = 'Conc13C_Avg',   noaa_cylinder_co2_concentration = 294.996,   noaa_cylinder_isotope_ratio = -8.40,   calibration_isotope_ratio = -11.505 ))  # Pair the Licor and TDL data by locating the TDL cycle corresponding to each # Licor measurement licor_data <- pair_gasex_and_tdl(licor_data, processed_tdl$tdl_data)  ## ## Qualitative validation ##  # Plot the leaf temperature, grouped by CO2_r setpoint xyplot(   TleafCnd ~ seq_num | curve_identifier,   group = CO2_r_sp,   data = licor_data$main_data,   type = 'p',   pch = 16,   auto.key = list(space = 'right'),   grid = TRUE,   ylim = c(26, 30),   xlab = 'Measurement number',   ylab = paste('Leaf temperature', '[', licor_data$units$TleafCnd, ']') )  # Plot CO2_r, grouped by CO2_r setpoint xyplot(   CO2_r ~ seq_num | curve_identifier,   group = CO2_r_sp,   data = licor_data$main_data,   type = 'p',   pch = 16,   auto.key = list(space = 'right'),   grid = TRUE,   ylim = c(400, 800),   xlab = 'Measurement number',   ylab = paste('CO2 concentration', '[', licor_data$units$CO2_r, ']') )  xyplot(   Conc13C_Avg ~ elapsed_time,   group = valve_number,   data = processed_tdl$tdl_data$main_data,   auto.key = list(space='right'),   grid = TRUE,   type = 'b',   xlab = paste0('Elapsed time (', processed_tdl$tdl_data$units$elapsed_time, ')'),   ylab = paste0(     'Calibrated TDL 13C concentration (',     processed_tdl$tdl_data$units$Conc13C_Avg, ')'   ),   par.settings = list(     superpose.line = list(col = multi_curve_colors()),     superpose.symbol = list(col = multi_curve_colors(), pch = 16)   ) )  ### ### PROCESSING: ### Extracting new pieces of information from the data ###  # Calculate isotope discrimination licor_data <- calculate_isotope_discrimination(licor_data)  # Plot the photosynthetic isotope discrimination, grouped by CO2_r setpoint xyplot(   Delta_obs_tdl ~ seq_num | curve_identifier,   group = CO2_r_sp,   data = licor_data$main_data,   type = 'p',   pch = 16,   auto.key = list(space = 'right'),   grid = TRUE,   ylim = c(16, 22),   xlab = 'Measurement number',   ylab = paste('Photosynthetic isotope discrimination', '[', licor_data$units$Delta_obs_tdl, ']') )  # Set day respiration rate licor_data <- set_variable(   licor_data,   'RL',   'micromol m^(-2) s^(-1)',   value = 1.2 )  # Set Rubisco specificity licor_data <- set_variable(     licor_data,     'rubisco_specificity_tl',     'M / M',     value = 92 )  # Calculate Gamma_star licor_data <- calculate_gamma_star(licor_data)  # Calculate total pressure licor_data <- calculate_total_pressure(licor_data)  # Calculate gbc, gsc, Csurface licor_data <- calculate_gas_properties(licor_data)  # Calculate t licor_data <- calculate_ternary_correction(licor_data)  # Set Delta_obs_growth licor_data <- set_variable(   licor_data,   'Delta_obs_growth',   'ppt',   id_column = 'curve_identifier',   value_table = as.list(tapply(     licor_data[licor_data[, 'CO2_r_sp'] == 715, 'Delta_obs_tdl'],     licor_data[licor_data[, 'CO2_r_sp'] == 715, 'curve_identifier'],     mean   )) )  ### ### SYNTHESIS: ### Using plots and statistics to help draw conclusions from the data ###  # Plot the mesophyll conductance values, grouped by CO2_r setpoint xyplot(   gmc ~ seq_num | curve_identifier,   group = CO2_r_sp,   data = licor_data$main_data,   type = 'p',   pch = 16,   auto.key = list(space = 'right'),   grid = TRUE,   xlab = 'Measurement number',   ylab = paste('Mesophyll conductance to CO2', '[', licor_data$units$gmc, ']') )  # Plot the average mesophyll conductance values against average Ci values, # grouped by CO2_r setpoint xyplot_avg_rc(   licor_data[, 'gmc'],   licor_data[, 'Ci'],   licor_data[, 'CO2_r_sp'],   licor_data[, 'curve_identifier'],   type = 'b',   auto = TRUE,   grid = TRUE,   pch = 16,   ylab = paste('Mesophyll conductance to CO2', '[', licor_data$units$gmc, ']'),   xlab = paste('Intercellular CO2 concentration [', licor_data$units$Ci, ']') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_tdl_data.html","id":"overview","dir":"Articles > Web_only","previous_headings":"","what":"Overview","title":"Analyzing TDL Data","text":"vignette, give example showing analyze data tunable diode laser (TDL) using PhotoGEA package. commands vignette can used initialize script, described Customizing Script.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_tdl_data.html","id":"background","dir":"Articles > Web_only","previous_headings":"","what":"Background","title":"Analyzing TDL Data","text":"process photosynthesis tends preferentially assimilate 12C often rarer heavier stable isotope 13C, carbon isotope discrimination measurements proven incredibly useful fields plant biology climate science (Evans Caemmerer 2013). Although several methods available measuring relative concentrations 12C 13C gas mixtures, tunable diode laser (TDL) absorption spectroscopy emerged one popular due high sensitivity relatively short measurement times. technique, emission wavelength laser tuned characteristic absorption lines species present gas, resulting decrease light transmission can used determine gas concentration even properties temperature. information general technique, please see Wikipedia page. gas concentrations reported directly TDL measurement system tend influenced electrical noise subtle changes air properties within measurement room. reason, usually necessary make frequent measurements gas mixtures known concentrations output signals can calibrated. fact, TDL systems used plant biology include gas handling system multiple valves can attached various gas sources, including calibration tanks well lines gas whose isotopic makeup determined. measurement, gas handling system periodically cycles valve succession, data logger used record TDL output signal valve. “TDL cycles” basic unit TDL measurement. typical output file TDL used carbon isotope discrimination measurements therefore includes following columns (minimum): time stamp, valve number, raw 12C concentration, raw 13C concentration. analyze data set, necessary identify individual TDL cycles within entire set use calibration valves determine accurate gas concentrations valves. Additional operations may also required, removing cycles seem unreliable smoothing data calibration decrease noise. vignette, demonstrate several tools PhotoGEA package can help streamline operations R environment.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_tdl_data.html","id":"loading-packages","dir":"Articles > Web_only","previous_headings":"","what":"Loading Packages","title":"Analyzing TDL Data","text":"always, first step load packages using. addition PhotoGEA, also use lattice package generating plots. lattice package installed R setup, can install typing install.packages('lattice').","code":"# Load required packages library(PhotoGEA) library(lattice)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_tdl_data.html","id":"loading-tdl-data","dir":"Articles > Web_only","previous_headings":"","what":"Loading TDL Data","title":"Analyzing TDL Data","text":"PhotoGEA package includes two files representing TDL data recorded Campbell Scientific CR3000 data logger two consecutive days. Although two files based real data, noise added since unpublished, files used examples. files stored computer somewhere R package installation directory, full paths files can obtained PhotoGEA_example_file_path: (Note: loading files analysis, advisable use PhotoGEA_example_file_path done . Instead, file paths can directly written, files can chosen using interactive window. See Input Files information.) actually read data files store R objects, use read_gasex_file function PhotoGEA. Since multiple files read, call function file using lapply: result command R list “extended data frames” (abbreviated exdf objects). exdf class special data structure defined PhotoGEA package. many ways, exdf object equivalent data frame, major difference exdf object includes units column. information, type ?exdf R terminal access built-help menu entry, check Working Extended Data Frames vignette. Generally, convenient work single exdf object rather list , next step combine objects list. action can accomplished using rbind function, combines table-like objects rows; words, stacks two tables vertically. action makes sense tables columns, combine exdf objects, make sure case. PhotoGEA package includes function called identify_common_columns can used get names columns present TDL files. , can extract just columns, combine exdf objects single one. Now single R object called tdl_files includes data several TDL data files. information consolidating information multiple files, see Common Patterns section Working Extended Data Frames vignette.","code":"# Define a vector of paths to the files we wish to load; in this case, we are # loading example files included with the PhotoGEA package file_paths <- c(   PhotoGEA_example_file_path('tdl_sampling_1.dat'),   PhotoGEA_example_file_path('tdl_sampling_2.dat') ) # Load each file, storing the result in a list tdl_exdf_list <- lapply(file_paths, function(fpath) {   read_gasex_file(fpath, 'TIMESTAMP') }) # Get the names of all columns that are present in all of the TDL files columns_to_keep <- do.call(identify_common_columns, tdl_exdf_list)  # Extract just these columns tdl_exdf_list <- lapply(tdl_exdf_list, function(x) {   x[ , columns_to_keep, TRUE] })  # Use `rbind` to combine all the data tdl_files <- do.call(rbind, tdl_exdf_list)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_tdl_data.html","id":"identifying-tdl-cycles","dir":"Articles > Web_only","previous_headings":"","what":"Identifying TDL Cycles","title":"Analyzing TDL Data","text":"first step analyzing TDL data identify “TDL cycles” present within . , need know following information: name column TDL data indicates valve measured. valve number marks beginning new cycle. many valves measured cycle. name column TDL data indicates time measurement made. amount time take cycle valves. information usually known beforehand settings specified operating TDL; alternatively, isn’t known already, can often determined taking look data via View(tdl_files). information obtained, identify_tdl_cycles function PhotoGEA package can used automatically assign number measurement cycle: Now tdl_files object two new columns: one called cycle_num specifies TDL cycle, called elapsed_time indicates elapsed time start cycle.","code":"# Assign numbers to all full cycles in the data set tdl_files <- identify_tdl_cycles(   tdl_files,   valve_column_name = 'valve_number',   cycle_start_valve = 20,   expected_cycle_length_minutes = 2.7,   expected_cycle_num_valves = 9,   timestamp_colname = 'TIMESTAMP' )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_tdl_data.html","id":"processing-tdl-cycles","dir":"Articles > Web_only","previous_headings":"","what":"Processing TDL Cycles","title":"Analyzing TDL Data","text":"Now individual cycles identified, next step use reference valves calibrate TDL readings. general, procedure depend strongly individual TDL system, since one may different types reference tanks. data used vignette measured using TDL Carl Bernacchi’s lab Edward R. Madigan Laboratory University Illinois, Urbana-Champaign. includes five reference tanks can broken three types: One certified tank whose total CO2 concentration carbon isotope ratio supplied NOAA. One nitrogen tank carbon . final type reference another CO2 tank whose isotype ratio measured UIUC using different method; tank mixed nitrogen three different ratios provide range carbon concentrations. full procedure using references calibrate TDL signal somewhat complicated. Fortunately, easy determine apply calibrations single TDL cycle using process_tdl_cycle_erml function PhotoGEA. apply function TDL cycle larger data set consolidate results, can use conjunction consolidate, also part PhotoGEA. (information functions, see built-help menu entries typing ?process_tdl_cycle_erml, ?.exdf, ?consolidate, check Common Patterns section Working Extended Data Frames vignette.) previous function, many inputs (noaa_cylinder_isotope_ratio) must obtained whoever managing TDL system used: output function – processed_tdl – list several exdf objects include calibrated TDL readings valve information calibration parameters determined processing data.","code":"# Use the data from the calibration valves to determine calibrated carbon # concentrations from all valves in each TDL cycle processed_tdl <- consolidate(by(   tdl_files,   tdl_files[, 'cycle_num'],   process_tdl_cycle_erml,   valve_column_name = 'valve_number',   noaa_valve = 2,   calibration_0_valve = 20,   calibration_1_valve = 21,   calibration_2_valve = 23,   calibration_3_valve = 26,   raw_12c_colname = 'Conc12C_Avg',   raw_13c_colname = 'Conc13C_Avg',   noaa_cylinder_co2_concentration = 294.996,   noaa_cylinder_isotope_ratio = -8.40,   calibration_isotope_ratio = -11.505 ))"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_tdl_data.html","id":"checking-the-calibrated-data","dir":"Articles > Web_only","previous_headings":"Processing TDL Cycles","what":"Checking the Calibrated Data","title":"Analyzing TDL Data","text":"Typically good idea check raw data, calibrated data, calibration constants issues might affect reliability results. Since many valves involved calibration involves several different steps (see ?process_tdl_cycle_erml), also many possible things check. full check data might require creating viewing many different plots. first take look raw calibrated values 12C valve. information stored tdl_data element processed_tdl. lattice library makes simple include valve separate subplot figure, raw calibrated values separate traces. goal simply keep eye anythign looks unusual data.  figure, apparent valves 23 26 large spikes, surprising since calibration valves; gas flowing TDL valves expected fairly constant carbon concentration. possible view just one valve time detailed analysis. take look 12C concentration valve 26, exhibits spike.  graph, can see calibrated 12C concentration large deviation raw values near large spike, although calibrated raw values generally similar rest data. fact, can see valve 12 (one valves whose composition trying determine), also large deviation raw calibrated 12C signals near spike.  Finally, can also see traces anomaly calibration constants determined TDL cycle processing. plot, 12C gain factor nearly constant times exception cycles also spike 12C signal valve 26.","code":"# Plot the 12C concentration data from all the valves xyplot(   Conc12C_Avg + calibrated_12c ~ cycle_num | factor(valve_number),   data = processed_tdl$tdl_data$main_data,   type = 'p',   pch = 20,   auto = TRUE,   grid = TRUE,   xlab = paste0('Elapsed time (', processed_tdl$tdl_data$units$cycle_num, ')'),   ylab = paste0('12C concentration (', processed_tdl$tdl_data$units$Conc12C_Avg, ')'),   main = '12C concentrations' ) # Specify a single valve to plot valve_to_plot <- 26  # Get the processed data from the single valve single_valve <-   processed_tdl$tdl_data[processed_tdl$tdl_data[, 'valve_number'] == valve_to_plot, , TRUE]  # Plot the 12C concentration data from the single valve xyplot(   Conc12C_Avg + calibrated_12c ~ cycle_num,   data = single_valve$main_data,   type = 'b',   pch = 20,   auto = TRUE,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('12C concentration (', single_valve$units$Conc12C_Avg, ')'),   main = paste('12C concentrations from valve', valve_to_plot) ) # Plot the 12C gain factor determined during the calibration process xyplot(   gain_12CO2 ~ cycle_num,   data = processed_tdl$calibration_12CO2$main_data,   type = 'b',   pch = 16,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('12C gain factor (', processed_tdl$calibration_12CO2$units$gain_12CO2, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_tdl_data.html","id":"processing-tdl-cycles-with-removal-and-smoothing","dir":"Articles > Web_only","previous_headings":"","what":"Processing TDL Cycles (With Removal and Smoothing)","title":"Analyzing TDL Data","text":"Processing TDL Cycles, processed full contents raw TDL file. However, users sometimes remove unreliable cycles apply smoothing functions valves processing data. section, demonstrate .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_tdl_data.html","id":"removing-problematic-cycles","dir":"Articles > Web_only","previous_headings":"Processing TDL Cycles (With Removal and Smoothing)","what":"Removing Problematic Cycles","title":"Analyzing TDL Data","text":"Checking Calibrated Data, located spike measured 12C concentration valve 26, one calibration values. Since presence spike indicates something unexpected happened TDL system, evidence calibration may compromised spike, probably good idea remove TDL cycles 12C signal valve 26 suddenly becomes large. Fortunately, simple using remove_points function PhotoGEA. following illustrates “clean” data removing unreliable TDL cycles; , actually remove two regions data appear suspicious:","code":"# Define a vector of cycle numbers that should be removed tdl_cycles_to_remove <- c(   145:150, # The big spike in valve 26   103:107  # A smaller spike in valve 26 )  # Remove them tdl_files_clean <-   remove_points(tdl_files, list(cycle_num = tdl_cycles_to_remove))"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_tdl_data.html","id":"smoothing-the-tdl-data","dir":"Articles > Web_only","previous_headings":"Processing TDL Cycles (With Removal and Smoothing)","what":"Smoothing the TDL Data","title":"Analyzing TDL Data","text":"Since TDL signals susceptible several types noise composition gas calibration tanks expected relatively constant, safe assume high-frequency variations calibration valve signals due noise. reason, may helpful smooth data calibration valves processing TDL cycles. may reduce noise calibrated values “unknown” valves. many possible strategies smoothing time series values measured valve, PhotoGEA package attempt provide smoothing algorithms. Instead, PhotoGEA provides general function called smooth_tdl_data can apply smoothing function data one valve. use function, user must specify smoothing method. (information, see help menu entry typing ?smooth_tdl_data.) show spline smoothing function base R package can used smooth 12C 13C signals calibration valves:","code":"# Define a spline smoothing function spline_smoothing_function <- function(Y, X) {     ss <- smooth.spline(X, Y)     return(ss$y) }  # Specify the valves that should be smoothed valves_to_smooth <- c(2, 20, 21, 23, 26)  # Initialize a smoothed copy of the data tdl_files_smooth <- tdl_files_clean  # Apply the smoothing function to the 12C and 13C signal from each valve for (valve in valves_to_smooth) {   for (column in c('Conc12C_Avg', 'Conc13C_Avg')) {     tdl_files_smooth <- smooth_tdl_data(       tdl_files_smooth,       column,       'valve_number',       valve,       spline_smoothing_function     )   } }"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_tdl_data.html","id":"checking-the-data-after-cleaning-and-smoothing","dir":"Articles > Web_only","previous_headings":"Processing TDL Cycles (With Removal and Smoothing)","what":"Checking the Data After Cleaning and Smoothing","title":"Analyzing TDL Data","text":"Now removed problematic cycles applied spline smoothing function calibration valves, can process TDL cycles using command Processing TDL Cycles; difference operating smoothed data: important confirm smoothing procedure produced reasonable outputs. create plot comparing raw smoothed 12C signal valves:  Although clear successfully removed spikes valve 26, may helpful display just valve take closer look:  graph can see spike indeed removed smoothed data good job following raw data valve. another check, can also see smoothed data altered calibration process. look valve 12, Checking Calibrated Data:  see cleaning smoothing data, calibrated data “unknown” valve slightly different raw data across cycles. Finally, can also plot 12C gain factor Checking Calibrated Data:  , sudden spikes remaining gain factor, indicating good job cleaning smoothing data.","code":"# Use the data from the calibration valves to determine calibrated carbon # concentrations from all valves in each TDL cycle processed_smooth_tdl <- consolidate(by(   tdl_files_smooth,   tdl_files_smooth[, 'cycle_num'],   process_tdl_cycle_erml,   valve_column_name = 'valve_number',   noaa_valve = 2,   calibration_0_valve = 20,   calibration_1_valve = 21,   calibration_2_valve = 23,   calibration_3_valve = 26,   raw_12c_colname = 'Conc12C_Avg',   raw_13c_colname = 'Conc13C_Avg',   noaa_cylinder_co2_concentration = 294.996,   noaa_cylinder_isotope_ratio = -8.40,   calibration_isotope_ratio = -11.505 )) # Add columns indicating which which operations have been applied to each exdf tdl_files[ , 'data_type'] <- '01 raw data' tdl_files_clean[ , 'data_type'] <- '02 cleaned data' tdl_files_smooth[ , 'data_type'] <- '03 cleaned smoothed data'  # Make a big exdf object with the raw and smoothed data tdl_compare <- rbind(tdl_files, tdl_files_clean, tdl_files_smooth)  # Keep only the valves that were smoothed tdl_compare <-   tdl_compare[tdl_compare[ , 'valve_number'] %in% valves_to_smooth, , TRUE]  # Plot the uncalibrated 12C concentration data from all the valves xyplot(   Conc12C_Avg ~ cycle_num | factor(valve_number),   group = data_type,   data = tdl_compare$main_data,   type = 'b',   pch = 20,   auto = TRUE,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('Uncalibrated 12C concentration (', tdl_compare$tdl_data$units$Conc12C_Avg, ')'),   main = 'Uncalibrated 12C concentrations' ) # Specify a single valve to plot valve_to_compare <- 26  # Get the comparison data from the single valve single_valve_compare <-   tdl_compare[tdl_compare[, 'valve_number'] == valve_to_compare, , TRUE]  # Plot the 12C concentration data from the single valve xyplot(   Conc12C_Avg ~ cycle_num,   group = data_type,   data = single_valve_compare$main_data,   type = 'b',   pch = 20,   auto = TRUE,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('Uncalibrated 12C concentration (', single_valve_compare$units$Conc12C_Avg, ')'),   main = paste('Uncalibrated 12C concentrations from valve', valve_to_compare) ) # Specify a single valve to plot valve_to_plot <- 12  # Get the processed data from the single valve single_valve_smooth <- processed_smooth_tdl$tdl_data[   processed_smooth_tdl$tdl_data[, 'valve_number'] == valve_to_plot, , TRUE]  # Plot the 12C concentration data from the single valve xyplot(   Conc12C_Avg + calibrated_12c ~ cycle_num,   data = single_valve_smooth$main_data,   type = 'b',   pch = 20,   auto = TRUE,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('12C concentration (', single_valve_smooth$units$Conc12C_Avg, ')'),   main = paste('12C concentrations from valve', valve_to_plot) ) # Plot the 12C gain factor determined during the calibration process xyplot(   gain_12CO2 ~ cycle_num,   data = processed_smooth_tdl$calibration_12CO2$main_data,   type = 'b',   pch = 16,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('12C gain factor (', processed_smooth_tdl$calibration_12CO2$units$gain_12CO2, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_tdl_data.html","id":"next-steps","dir":"Articles > Web_only","previous_headings":"","what":"Next steps","title":"Analyzing TDL Data","text":"cleaned, smoothed, visually checked data, can now confident calibrated 12C 13C values accurate can . next step analysis interpret data valves whose composition unknown determined. depend particular application, give general advice !","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_tdl_data.html","id":"customizing-your-script","dir":"Articles > Web_only","previous_headings":"","what":"Customizing Your Script","title":"Analyzing TDL Data","text":"Note commands vignette written general way can used basis TDL analysis script (see Commands Document). order use script, following changes may required. may also others specifically mentioned .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_tdl_data.html","id":"input-files","dir":"Articles > Web_only","previous_headings":"Customizing Your Script","what":"Input Files","title":"Analyzing TDL Data","text":"file paths specified file_paths need modified point TDL files. One way script simply write relative absolute paths files wish load. example, replace previous definition file_paths one: may also want consider using choose_input_tdl_files function PhotoGEA; function create pop-browser window can interactively select set files. Sometimes convenient writing file paths names. example, replace previous definition file_paths one: Unfortunately, choose_input_tdl_files available interactive R sessions running Microsoft Windows, also platform-independent option: choose_input_files. See Translation section Developing Data Analysis Pipeline vignette details.","code":"# Define a vector of paths to the files we wish to load file_paths <- c(   'myfile1.dat',             # `myfile1.dat` must be in the current working directory   'C:/documents/myfile2.dat' # This is an absolute path to `myfile2.dat` ) # Interactively define a vector of paths to the files we wish to load file_paths <- choose_input_tdl_files()"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_tdl_data.html","id":"plots-for-checking","dir":"Articles > Web_only","previous_headings":"Customizing Your Script","what":"Plots for Checking","title":"Analyzing TDL Data","text":"keep vignette shorter, skipped many possible plots may want view. addition ones generated , may also helpful make following plots: Plots 13C signals addition plots 12C. Individual plots raw, cleaned, smoothed data valve. Plots 13C calibration constants. Plots 13C calibration fits. plots can created making small modifications commands document.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_tdl_data.html","id":"cycles-to-remove","dir":"Articles > Web_only","previous_headings":"Customizing Your Script","what":"Cycles to Remove","title":"Analyzing TDL Data","text":"beginning analyze new data set, advisable remove TDL cycles; can accomplished defining tdl_cycles_to_remove following command place one used : viewing data, unreliable cycles removed can identified.","code":"tdl_cycles_to_remove <- c()"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_tdl_data.html","id":"smoothing-function","dir":"Articles > Web_only","previous_headings":"Customizing Your Script","what":"Smoothing Function","title":"Analyzing TDL Data","text":"beginning analyze new data set, advisable disable smoothing. can done definining “null” smoothing function; words, function actually perform smoothing: , function passed smooth_tdl_data place spline_smoothing_function.","code":"# Define a null smoothing function null_smoothing_function <- function(Y, X) {return(Y)}"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/analyzing_tdl_data.html","id":"commands-from-this-document","dir":"Articles > Web_only","previous_headings":"","what":"Commands From This Document","title":"Analyzing TDL Data","text":"following code chunk includes central commands used throughout document. compiled make easy copy/paste text file initialize script. Annotation also added clearly indicate four steps involved data analysis, described Developing Data Analysis Pipeline vignette.","code":"### ### PRELIMINARIES: ### Loading packages, defining constants, creating helping functions, etc. ###  # Load required packages library(PhotoGEA) library(lattice)  ### ### TRANSLATION: ### Creating convenient R objects from raw data files ###  ## IMPORTANT: When loading your own files, it is not advised to use ## `PhotoGEA_example_file_path` as in the code below. Instead, write out the ## names or use the `choose_input_tdl_files` function.  # Define a vector of paths to the files we wish to load; in this case, we are # loading example files included with the PhotoGEA package file_paths <- c(   PhotoGEA_example_file_path('tdl_sampling_1.dat'),   PhotoGEA_example_file_path('tdl_sampling_2.dat') )  # Load each file, storing the result in a list tdl_exdf_list <- lapply(file_paths, function(fpath) {   read_gasex_file(fpath, 'TIMESTAMP') })  # Get the names of all columns that are present in all of the TDL files columns_to_keep <- do.call(identify_common_columns, tdl_exdf_list)  # Extract just these columns tdl_exdf_list <- lapply(tdl_exdf_list, function(x) {   x[ , columns_to_keep, TRUE] })  # Use `rbind` to combine all the data tdl_files <- do.call(rbind, tdl_exdf_list)  ### ### VALIDATION: ### Organizing the data, checking its consistency and quality, cleaning it ###  # Assign numbers to all full cycles in the data set tdl_files <- identify_tdl_cycles(   tdl_files,   valve_column_name = 'valve_number',   cycle_start_valve = 20,   expected_cycle_length_minutes = 2.7,   expected_cycle_num_valves = 9,   timestamp_colname = 'TIMESTAMP' )  # Define a vector of cycle numbers that should be removed tdl_cycles_to_remove <- c(   145:150, # The big spike in valve 26   103:107  # A smaller spike in valve 26 )  # Remove them tdl_files_clean <-   remove_points(tdl_files, list(cycle_num = tdl_cycles_to_remove))  # Define a spline smoothing function spline_smoothing_function <- function(Y, X) {     ss <- smooth.spline(X, Y)     return(ss$y) }  # Specify the valves that should be smoothed valves_to_smooth <- c(2, 20, 21, 23, 26)  # Initialize a smoothed copy of the data tdl_files_smooth <- tdl_files_clean  # Apply the smoothing function to the 12C and 13C signal from each valve for (valve in valves_to_smooth) {   for (column in c('Conc12C_Avg', 'Conc13C_Avg')) {     tdl_files_smooth <- smooth_tdl_data(       tdl_files_smooth,       column,       'valve_number',       valve,       spline_smoothing_function     )   } }  ### ### PROCESSING: ### Extracting new pieces of information from the data ###  # Use the data from the calibration valves to determine calibrated carbon # concentrations from all valves in each TDL cycle processed_smooth_tdl <- consolidate(by(   tdl_files_smooth,   tdl_files_smooth[, 'cycle_num'],   process_tdl_cycle_erml,   valve_column_name = 'valve_number',   noaa_valve = 2,   calibration_0_valve = 20,   calibration_1_valve = 21,   calibration_2_valve = 23,   calibration_3_valve = 26,   raw_12c_colname = 'Conc12C_Avg',   raw_13c_colname = 'Conc13C_Avg',   noaa_cylinder_co2_concentration = 294.996,   noaa_cylinder_isotope_ratio = -8.40,   calibration_isotope_ratio = -11.505 ))  ### ### SYNTHESIS: ### Using plots and statistics to help draw conclusions from the data ###  # Add columns indicating which which operations have been applied to each exdf tdl_files[ , 'data_type'] <- '01 raw data' tdl_files_clean[ , 'data_type'] <- '02 cleaned data' tdl_files_smooth[ , 'data_type'] <- '03 cleaned smoothed data'  # Make a big exdf object with the raw and smoothed data tdl_compare <- rbind(tdl_files, tdl_files_clean, tdl_files_smooth)  # Keep only the valves that were smoothed tdl_compare <-   tdl_compare[tdl_compare[ , 'valve_number'] %in% valves_to_smooth, , TRUE]  # Plot the uncalibrated 12C concentration data from all the valves xyplot(   Conc12C_Avg ~ cycle_num | factor(valve_number),   group = data_type,   data = tdl_compare$main_data,   type = 'b',   pch = 20,   auto = TRUE,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('Uncalibrated 12C concentration (', tdl_compare$tdl_data$units$Conc12C_Avg, ')'),   main = 'Uncalibrated 12C concentrations' )  # Specify a single valve to plot valve_to_compare <- 26  # Get the comparison data from the single valve single_valve_compare <-   tdl_compare[tdl_compare[, 'valve_number'] == valve_to_compare, , TRUE]  # Plot the 12C concentration data from the single valve xyplot(   Conc12C_Avg ~ cycle_num,   group = data_type,   data = single_valve_compare$main_data,   type = 'b',   pch = 20,   auto = TRUE,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('Uncalibrated 12C concentration (', single_valve_compare$units$Conc12C_Avg, ')'),   main = paste('Uncalibrated 12C concentrations from valve', valve_to_compare) )  # Specify a single valve to plot valve_to_plot <- 12  # Get the processed data from the single valve single_valve_smooth <- processed_smooth_tdl$tdl_data[   processed_smooth_tdl$tdl_data[, 'valve_number'] == valve_to_plot, , TRUE]  # Plot the 12C concentration data from the single valve xyplot(   Conc12C_Avg + calibrated_12c ~ cycle_num,   data = single_valve_smooth$main_data,   type = 'b',   pch = 20,   auto = TRUE,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('12C concentration (', single_valve_smooth$units$Conc12C_Avg, ')'),   main = paste('12C concentrations from valve', valve_to_plot) )  # Plot the 12C gain factor determined during the calibration process xyplot(   gain_12CO2 ~ cycle_num,   data = processed_smooth_tdl$calibration_12CO2$main_data,   type = 'b',   pch = 16,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('12C gain factor (', processed_smooth_tdl$calibration_12CO2$units$gain_12CO2, ')') )"},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/combining_with_other_packages.html","id":"overview","dir":"Articles > Web_only","previous_headings":"","what":"Overview","title":"Combining PhotoGEA With Other Packages","text":"many approaches fitting otherwise processing pieces gas exchange data, several R packages (plantecophys, plantecowrap, photosynthesis) written implement methods. R packages excellent resources provide access well-tested peer-reviewed fitting methods. hand, generally provide tools full data analysis pipeline. Instead, packages assume user already solved problems data translation validation; words, assume user already appropriately validated data set available one R data structures. address issue, possible use functions packages within context PhotoGEA. case, PhotoGEA can used load data, validate , apply functions subsets data, collect results, described Developing Data Analysis Pipeline vignette. key combining another package PhotoGEA create “wrappers” package’s functions. wrapper type function whose main purpose call another function making minimal calculations . Wrappers can created many different purposes, discussed Wikipedia. context, wrappers used reformat inputs outputs function another package become compatible functions PhotoGEA. example, vignette demonstrate create two wrappers varying complexity fitaci function plantecophys package. general ideas introduced can also used create wrappers functions, although details creating wrapper heavily dependent details function wrapped. Note creating wrapper fitting function another package essentially special case designing customized processing function, topic also covered Creating Processing Tools vignette.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/combining_with_other_packages.html","id":"loading-packages","dir":"Articles > Web_only","previous_headings":"","what":"Loading Packages","title":"Combining PhotoGEA With Other Packages","text":"always, first step load packages using. addition PhotoGEA, also use plantecophys lattice packages. plantecophys lattice packages installed R setup, can install typing install.packages('plantecophys') /install.packages('lattice').","code":"# Load required packages library(PhotoGEA) library(plantecophys) library(lattice)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/combining_with_other_packages.html","id":"loading-and-validating-data","dir":"Articles > Web_only","previous_headings":"","what":"Loading and Validating Data","title":"Combining PhotoGEA With Other Packages","text":"example, load set C3 -Ci curves used Analyzing C3 -Ci Curves vignette, perform steps organizing cleaning data. See vignette details steps. brevity, commands included , can found end vignette Commands Document.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/combining_with_other_packages.html","id":"creating-a-minimal-wrapper","dir":"Articles > Web_only","previous_headings":"","what":"Creating a Minimal Wrapper","title":"Combining PhotoGEA With Other Packages","text":"fitaci function plantecophys package tool fitting single C3 CO2 response curve, can thought alternative fit_c3_aci function PhotoGEA. Analyzing C3 -Ci Curves vignette, following command used apply fit_c3_aci response curves data set consolidate results curve convenient list tables: Ideally, like able use similar command apply plantecophys::fitaci curves. However, plantecophys::fitaci different type input data table (uses data frame fit_c3_aci uses exdf) produces different type output (returns acifit object fit_c3_aci returns list exdf objects). (also differences discussed later.) situation, discussed previously, can use wrapper function make plantecophys::fitaci behave like PhotoGEA::fit_c3_aci can used way. one way create wrapper: Much code fit_c3_aci_plantecophys devoted converting replicate_exdf input exdf object data.frame returning list data.frame objects created return value fitaci. One subtelty code use identifier_columns function. default, output fitaci includes important information like modeled assimilation rates values key C3 parameters. However, include “identifying” information essential keeping results organized. (case, values species plot columns.) identifier_columns function PhotoGEA provides simple way retrieve information replicate_exdf input. accomplish , determines columns single value returns singular values columns. Using identifier_columns rather directly accessing values species plot makes fit_c3_aci_plantecophys function flexible. fact, fitting functions PhotoGEA package make use identifier_columns keep track important pieces “metadata.” Another important point “regularized” fitting results always including Tp, even fitted. general, easier work functions always produce output quantities. Now can apply function curves data set. Note need specify value varnames input argument plantecophys::fitaci columns different names default ones. can accomplished following command, makes use .exdf consolidate Analyzing C3 -Ci Curves vignette: results can now examined using commands similar ones used Analyzing C3 -Ci Curves vignette:  things notice commands resulting outputs: plotting command , subtract Rd Ac, Aj, Ap plantecophys::fitaci uses different definitions rates equivalent Ac + Rd, Aj + Rd, Ap + Rd notation. results, Tp Ap NA fitTPU argument plantecophys::fitaci left default value FALSE. attempt include Ap plot, lattice::xyplot simply plot anything values NA.","code":"c3_aci_results <- consolidate(by(   licor_data,                       # The `exdf` object containing the curves   licor_data[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_c3_aci,                       # The function to apply to each chunk of `licor_data`   fixed = c(NA, NA, NA, NA),        # Additional argument passed to `fit_c3_aci`   cj_crossover_min = 100,           # Wj must be > Wc when Cc < 100 ppm   cj_crossover_max = 550            # Wj must be < Wc when Cc > 550 ppm )) # Make a minimal wrapper for `plantecophys::fitaci` fit_c3_aci_plantecophys <- function(   replicate_exdf, # an `exdf` object representing a single A-Ci curve   ...             # additional named arguments to be passed to `fitaci` ) {   # Call `plantecophys::fitaci` by passing the `replicate_exdf$main_data`   # data frame as the `data` input argument   fit_res <- plantecophys::fitaci(replicate_exdf$main_data, ...)    # Get the identifier columns from the original exdf object as a data frame   replicate_identifiers <- identifier_columns(replicate_exdf$main_data)    # Get a data frame with the fitted values of assimilation and append the   # identifier columns   fits <- fit_res$df   fits <- cbind(replicate_identifiers, fits)    # `plantecophys::fitaci` returns absurdly high values of `Ap` when it cannot   # get a good estimate for `Tp`. These can cause problems when plotting the   # results, so we replace any `Ap` values above 500 micromol / m^2 / s with   # NA.   fits[fits$Ap > 500, 'Ap'] <- NA    # Create a data frame with the parameter values   parameters <- data.frame(     Vcmax          = fit_res$par[1, 1],     Jmax           = fit_res$par[2, 1],     Rd             = fit_res$par[3, 1]   )    parameters$Tp <- if (fit_res$fitTPU) {     fit_res$par[4, 1]   } else {     NA   }    parameters <- cbind(replicate_identifiers, parameters)    # Return a list of two data frames: `fits` and `parameters`   return(list(     fits = fits,     parameters = parameters   )) } # Fit each curve c3_aci_results <- consolidate(by(   licor_data,                       # The `exdf` object containing the curves   licor_data[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_c3_aci_plantecophys,          # The function to apply to each chunk of `licor_data`   varnames = list(                  # Additional argument to `fit_c3_aci_plantecophys`     ALEAF = 'A',     Tleaf = 'TleafCnd',     Ci = 'Ci',     PPFD = 'Qin',     Rd = 'Rd'   ) )) # Plot each fit xyplot(   Ameas + (Ac - Rd) + (Aj - Rd) + (Ap - Rd) + Amodel ~ Ci_original | curve_identifier,   data = c3_aci_results$fits,   type = 'l',   auto.key = list(space = 'right'),   grid = TRUE,   xlab = 'Intercellular CO2 concentration (ppm)',   ylab = 'Assimilation rate (micromol / m^2 / s)',   par.settings = list(     superpose.line = list(col = multi_curve_colors()),     superpose.symbol = list(col = multi_curve_colors())   ) ) # View the parameter values columns_for_viewing <-   c('instrument', 'species', 'plot', 'Vcmax', 'Jmax', 'Rd', 'Tp')  c3_aci_parameters <-   c3_aci_results$parameters[ , columns_for_viewing]  print(c3_aci_parameters) #>   instrument species plot     Vcmax     Jmax        Rd Tp #> 1      ripe1 soybean   5a 126.61884 229.5225 0.8502736 NA #> 2      ripe1 tobacco    1 128.90039 272.3661 0.5237317 NA #> 3      ripe1 tobacco    2 109.78883 244.9742 0.6525278 NA #> 4      ripe2 soybean    1  99.85103 158.7873 0.3908915 NA #> 5      ripe2 soybean   5b 115.84216 189.9087 1.6311796 NA #> 6      ripe2 tobacco    4  83.51227 178.1061 0.3925865 NA"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/combining_with_other_packages.html","id":"creating-a-fancier-wrapper","dir":"Articles > Web_only","previous_headings":"","what":"Creating a Fancier Wrapper","title":"Combining PhotoGEA With Other Packages","text":"wrapper quite useful allows us easily apply fitaci many response curves full data set automatically combine results using consolidate functions. However, improved making changes : Provide better default values column names. Check units important columns. Include outputs calculated fitaci. Return list exdf objects rather list data frames. Return net assimilation rates. example complex wrapper bit user-friendly previous one. wrapper, explicitly break code several sections devoted checking inputs, calling fitaci appropriate units, collecting outputs: code wrapper now gotten significantly longer, several new benefits user, following: units input columns checked. wrapper returns exdf objects include units. assimilation rates also standardized net rates. fit residuals included output. writing wrapper used often, may worth taking time add nicer features like ones. wrapper, can fit curves dataset examine results using following code, simpler previous version:  ’s also easy plot residuals now:","code":"# Make a better wrapper for `plantecophys::fitaci` fit_c3_aci_plantecophys <- function(   replicate_exdf, # an `exdf` object representing a single A-Ci curve   a_column_name = 'A',   tleaf_column_name = 'TleafCnd',   ci_column_name = 'Ci',   qin_column_name = 'Qin',   rd_column_name = 'Rd',   useRd = FALSE,   ... # additional named arguments to be passed to `fitaci` ) {   ### Check inputs    if (!is.exdf(replicate_exdf)) {       stop('fit_c3_aci_plantecophys requires an exdf object')   }    # Make sure the required variables are defined and have the correct units   required_variables <- list()   required_variables[[a_column_name]] <- 'micromol m^(-2) s^(-1)'   required_variables[[tleaf_column_name]] <- \"degrees C\"   required_variables[[ci_column_name]] <- 'micromol mol^(-1)'   required_variables[[qin_column_name]] <- 'micromol m^(-2) s^(-1)'    if (useRd) {     # Only check the existence and units of the `Rd` column if it will be used     required_variables[[rd_column_name]] <- 'micromol m^(-2) s^(-1)'   }    check_required_variables(replicate_exdf, required_variables)    # Make sure the user didn't supply their own `varnames` because we will   # automatically define it from the other column name inputs   if ('varnames' %in% names(list(...))) {     stop('do not supply `varnames` when calling fit_c3_aci_plantecophys')   }    ### Call function from external packge with appropriate units    fit_res <- plantecophys::fitaci(     replicate_exdf$main_data,     varnames = list(         ALEAF = a_column_name,         Tleaf = tleaf_column_name,         Ci = ci_column_name,         PPFD = qin_column_name,         Rd = rd_column_name     ),     useRd = useRd,     ...   )    ### Collect outputs    # Get the identifier columns from the original exdf object   replicate_identifiers <- identifier_columns(replicate_exdf)    # Get a data frame with the fitted values of assimilation and convert it to an   # `exdf` object, setting the category to `fit_c3_aci_plantecophys` and   # specifying the units for each column   fits <- exdf(fit_res$df)    fits <- document_variables(     fits,     c('fit_c3_aci_plantecophys', 'Ci',          'micromol mol^(-1)'),     c('fit_c3_aci_plantecophys', 'Ameas',       'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Amodel',      'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Ac',          'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Aj',          'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Ap',          'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Rd',          'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'VPD',         'kPa'),     c('fit_c3_aci_plantecophys', 'Tleaf',       'degrees C'),     c('fit_c3_aci_plantecophys', 'Cc',          'micromol mol^(-1)'),     c('fit_c3_aci_plantecophys', 'PPFD',        'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Patm',        'kPa'),     c('fit_c3_aci_plantecophys', 'Ci_original', 'micromol mol^(-1)')   )    # Append the identifier columns to the fits   fits <- cbind(replicate_identifiers, fits)    # `plantecophys::fitaci` returns absurdly high values of `Ap` when it cannot   # get a good estimate for `Tp`. These can cause problems when plotting the   # results, so we replace any `Ap` values above 500 micromol / m^2 / s with   # NA.   fits[fits[, 'Ap'] > 500, 'Ap'] <- NA    # Convert `plantecophys::fitaci` outputs to net CO2 assimilation rates for   # consistency with `fit_c3_aci`.   fits[, 'Ac'] <- fits[, 'Ac'] - fits[, 'Rd']   fits[, 'Aj'] <- fits[, 'Aj'] - fits[, 'Rd']   fits[, 'Ap'] <- fits[, 'Ap'] - fits[, 'Rd']    # Add a column for the residuals   fits <- set_variable(     fits,     'A_residuals',     'micromol m^(-2) s^(-1)',     'fit_c3_aci_plantecophys',     fits[, 'Ameas'] - fits[, 'Amodel']   )    # Create an exdf object with the parameter values that are included in the   # fitting result. Note that we do not include RMSE because it is not   # calculated correctly.   parameters <- exdf(data.frame(     Ci_transition  = as.numeric(fit_res$Ci_transition),     Ci_transition2 = as.numeric(fit_res$Ci_transition2),     Tcorrect       = fit_res$Tcorrect,     Rd_measured    = fit_res$Rd_measured,     GammaStar      = fit_res$GammaStar,     Km             = fit_res$Km,     kminput        = fit_res$kminput,     gstarinput     = fit_res$gstarinput,     fitmethod      = fit_res$fitmethod,     citransition   = fit_res$citransition,     gmeso          = fit_res$gmeso,     fitTPU         = fit_res$fitTPU,     alphag         = fit_res$alphag,     Vcmax          = fit_res$par[1, 1],     Vcmax_err      = fit_res$par[1, 2],     Jmax           = fit_res$par[2, 1],     Jmax_err       = fit_res$par[2, 2],     Rd             = fit_res$par[3, 1],     Rd_err         = fit_res$par[3, 2],     ci_star        = fit_res$Ci(0),     A_transition   = fit_res$Photosyn(Ci=fit_res$Ci_transition)$ALEAF   ))    # The value of `Tp` and its error will depend on `fitTPU`   parameters[, 'Tp'] <- if (fit_res$fitTPU) {     fit_res$par[4, 1]   } else {     NA   }    parameters[, 'TPU_err'] <- if (fit_res$fitTPU) {     fit_res$par[4, 2]   } else {     NA   }    # Document the parameter units   parameters <- document_variables(     parameters,     c('fit_c3_aci_plantecophys', 'Ci_transition',  'micromol mol^(-1)'),     c('fit_c3_aci_plantecophys', 'Ci_transition2', 'micromol mol^(-1)'),     c('fit_c3_aci_plantecophys', 'Tcorrect',       ''),     c('fit_c3_aci_plantecophys', 'Rd_measured',    ''),     c('fit_c3_aci_plantecophys', 'GammaStar',      'micromol mol^(-1)'),     c('fit_c3_aci_plantecophys', 'Km',             'micromol mol^(-1)'),     c('fit_c3_aci_plantecophys', 'kminput',        ''),     c('fit_c3_aci_plantecophys', 'gstarinput',     ''),     c('fit_c3_aci_plantecophys', 'fitmethod',      ''),     c('fit_c3_aci_plantecophys', 'citransition',   'micromol mol^(-1)'),     c('fit_c3_aci_plantecophys', 'gmeso',          'mol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'fitTPU',         ''),     c('fit_c3_aci_plantecophys', 'alphag',         'dimensionless'),     c('fit_c3_aci_plantecophys', 'Vcmax',          'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Vcmax_err',      'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Jmax',           'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Jmax_err',       'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Rd',             'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Rd_err',         'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Tp',             'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'TPU_err',        'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'ci_star',        'micromol mol^(-1)'),     c('fit_c3_aci_plantecophys', 'A_transition',   'micromol m^(-2) s^(-1)')   )    # Append the identifier columns to the parameters   parameters <- cbind(replicate_identifiers, parameters)    # Return a list of two data frames: `fits` and `parameters`   return(list(       fits = fits,       parameters = parameters   )) } # Fit each curve c3_aci_results <- consolidate(by(   licor_data,                       # The `exdf` object containing the curves   licor_data[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_c3_aci_plantecophys           # The function to apply to each chunk of `licor_data` ))  # Plot each fit xyplot(   Ameas + Ac + Aj + Ap + Amodel ~ Ci_original | curve_identifier,   data = c3_aci_results$fits$main_data,   type = 'l',   auto.key = list(space = 'right'),   grid = TRUE,   xlab = 'Intercellular CO2 concentration (ppm)',   ylab = 'Assimilation rate (micromol / m^2 / s)',   par.settings = list(     superpose.line = list(col = multi_curve_colors()),     superpose.symbol = list(col = multi_curve_colors())   ) ) # View the parameter values columns_for_viewing <-   c('instrument', 'species', 'plot', 'Vcmax', 'Jmax', 'Rd', 'Tp')  c3_aci_parameters <-   c3_aci_results$parameters[ , columns_for_viewing, TRUE]  print(c3_aci_parameters) #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>   instrument [UserDefCon] (NA) species [UserDefCon] (NA) plot [UserDefCon] (NA) #> 1                        ripe1                   soybean                     5a #> 2                        ripe1                   tobacco                      1 #> 3                        ripe1                   tobacco                      2 #> 4                        ripe2                   soybean                      1 #> 5                        ripe2                   soybean                     5b #> 6                        ripe2                   tobacco                      4 #>   Vcmax [fit_c3_aci_plantecophys] (micromol m^(-2) s^(-1)) #> 1                                                126.61884 #> 2                                                128.90039 #> 3                                                109.78883 #> 4                                                 99.85103 #> 5                                                115.84216 #> 6                                                 83.51227 #>   Jmax [fit_c3_aci_plantecophys] (micromol m^(-2) s^(-1)) #> 1                                                229.5225 #> 2                                                272.3661 #> 3                                                244.9742 #> 4                                                158.7873 #> 5                                                189.9087 #> 6                                                178.1061 #>   Rd [fit_c3_aci_plantecophys] (micromol m^(-2) s^(-1)) #> 1                                             0.8502736 #> 2                                             0.5237317 #> 3                                             0.6525278 #> 4                                             0.3908915 #> 5                                             1.6311796 #> 6                                             0.3925865 #>   Tp [fit_c3_aci_plantecophys] (micromol m^(-2) s^(-1)) #> 1                                                    NA #> 2                                                    NA #> 3                                                    NA #> 4                                                    NA #> 5                                                    NA #> 6                                                    NA # Plot the residuals xyplot(   A_residuals ~ Ci_original | curve_identifier,   data = c3_aci_results$fits$main_data,   type = 'b',   pch = 16,   grid = TRUE,   xlab = paste0('Intercellular CO2 concentration (',     c3_aci_results$fits$units$Ci_original, ')'),   ylab = paste0('Assimilation rate residual (measured - fitted)\\n(',     c3_aci_results$fits$units$A_residuals, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/combining_with_other_packages.html","id":"commands-from-this-document","dir":"Articles > Web_only","previous_headings":"","what":"Commands From This Document","title":"Combining PhotoGEA With Other Packages","text":"following code chunk includes central commands used throughout document. compiled make easy copy/paste text file initialize script.","code":"# Load required packages library(PhotoGEA) library(plantecophys) library(lattice)  # Define a vector of paths to the files we wish to load file_paths <- c(   PhotoGEA_example_file_path('c3_aci_1.xlsx'),   PhotoGEA_example_file_path('c3_aci_2.xlsx') )  # Load each file, storing the result in a list licor_exdf_list <- lapply(file_paths, function(fpath) {   read_gasex_file(fpath, 'time') })  # Get the names of all columns that are present in all of the Licor files columns_to_keep <- do.call(identify_common_columns, licor_exdf_list)  # Extract just these columns licor_exdf_list <- lapply(licor_exdf_list, function(x) {   x[ , columns_to_keep, TRUE] })  # Use `rbind` to combine all the data licor_data <- do.call(rbind, licor_exdf_list)  # Create a new identifier column formatted like `instrument - species - plot` licor_data[ , 'curve_identifier'] <-   paste(licor_data[ , 'instrument'], '-', licor_data[ , 'species'], '-', licor_data[ , 'plot'])  # Make sure the data meets basic requirements check_response_curve_data(licor_data, 'curve_identifier', 16, 'CO2_r_sp')  # Remove points with duplicated `CO2_r_sp` values and order by `Ci` licor_data <- organize_response_curve_data(     licor_data,     'curve_identifier',     c(9, 10),     'Ci' )  # Only keep points where stability was achieved licor_data <- licor_data[licor_data[, 'Stable'] == 2, , TRUE]  # Remove any curves that have fewer than three remaining points npts <- by(licor_data, licor_data[, 'curve_identifier'], nrow) ids_to_keep <- names(npts[npts > 2]) licor_data <- licor_data[licor_data[, 'curve_identifier'] %in% ids_to_keep, , TRUE]  # Remove points where `instrument` is `ripe1` and `CO2_r_sp` is 1800 licor_data <- remove_points(   licor_data,   list(instrument = 'ripe1', CO2_r_sp = 1800) )  # Make a better wrapper for `plantecophys::fitaci` fit_c3_aci_plantecophys <- function(   replicate_exdf, # an `exdf` object representing a single A-Ci curve   a_column_name = 'A',   tleaf_column_name = 'TleafCnd',   ci_column_name = 'Ci',   qin_column_name = 'Qin',   rd_column_name = 'Rd',   useRd = FALSE,   ... # additional named arguments to be passed to `fitaci` ) {   ### Check inputs    if (!is.exdf(replicate_exdf)) {       stop('fit_c3_aci_plantecophys requires an exdf object')   }    # Make sure the required variables are defined and have the correct units   required_variables <- list()   required_variables[[a_column_name]] <- 'micromol m^(-2) s^(-1)'   required_variables[[tleaf_column_name]] <- \"degrees C\"   required_variables[[ci_column_name]] <- 'micromol mol^(-1)'   required_variables[[qin_column_name]] <- 'micromol m^(-2) s^(-1)'    if (useRd) {     # Only check the existence and units of the `Rd` column if it will be used     required_variables[[rd_column_name]] <- 'micromol m^(-2) s^(-1)'   }    check_required_variables(replicate_exdf, required_variables)    # Make sure the user didn't supply their own `varnames` because we will   # automatically define it from the other column name inputs   if ('varnames' %in% names(list(...))) {     stop('do not supply `varnames` when calling fit_c3_aci_plantecophys')   }    ### Call function from external packge with appropriate units    fit_res <- plantecophys::fitaci(     replicate_exdf$main_data,     varnames = list(         ALEAF = a_column_name,         Tleaf = tleaf_column_name,         Ci = ci_column_name,         PPFD = qin_column_name,         Rd = rd_column_name     ),     useRd = useRd,     ...   )    ### Collect outputs    # Get the identifier columns from the original exdf object   replicate_identifiers <- identifier_columns(replicate_exdf)    # Get a data frame with the fitted values of assimilation and convert it to an   # `exdf` object, setting the category to `fit_c3_aci_plantecophys` and   # specifying the units for each column   fits <- exdf(fit_res$df)    fits <- document_variables(     fits,     c('fit_c3_aci_plantecophys', 'Ci',          'micromol mol^(-1)'),     c('fit_c3_aci_plantecophys', 'Ameas',       'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Amodel',      'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Ac',          'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Aj',          'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Ap',          'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Rd',          'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'VPD',         'kPa'),     c('fit_c3_aci_plantecophys', 'Tleaf',       'degrees C'),     c('fit_c3_aci_plantecophys', 'Cc',          'micromol mol^(-1)'),     c('fit_c3_aci_plantecophys', 'PPFD',        'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Patm',        'kPa'),     c('fit_c3_aci_plantecophys', 'Ci_original', 'micromol mol^(-1)')   )    # Append the identifier columns to the fits   fits <- cbind(replicate_identifiers, fits)    # `plantecophys::fitaci` returns absurdly high values of `Ap` when it cannot   # get a good estimate for `Tp`. These can cause problems when plotting the   # results, so we replace any `Ap` values above 500 micromol / m^2 / s with   # NA.   fits[fits[, 'Ap'] > 500, 'Ap'] <- NA    # Convert `plantecophys::fitaci` outputs to net CO2 assimilation rates for   # consistency with `fit_c3_aci`.   fits[, 'Ac'] <- fits[, 'Ac'] - fits[, 'Rd']   fits[, 'Aj'] <- fits[, 'Aj'] - fits[, 'Rd']   fits[, 'Ap'] <- fits[, 'Ap'] - fits[, 'Rd']    # Add a column for the residuals   fits <- set_variable(     fits,     'A_residuals',     'micromol m^(-2) s^(-1)',     'fit_c3_aci_plantecophys',     fits[, 'Ameas'] - fits[, 'Amodel']   )    # Create an exdf object with the parameter values that are included in the   # fitting result. Note that we do not include RMSE because it is not   # calculated correctly.   parameters <- exdf(data.frame(     Ci_transition  = as.numeric(fit_res$Ci_transition),     Ci_transition2 = as.numeric(fit_res$Ci_transition2),     Tcorrect       = fit_res$Tcorrect,     Rd_measured    = fit_res$Rd_measured,     GammaStar      = fit_res$GammaStar,     Km             = fit_res$Km,     kminput        = fit_res$kminput,     gstarinput     = fit_res$gstarinput,     fitmethod      = fit_res$fitmethod,     citransition   = fit_res$citransition,     gmeso          = fit_res$gmeso,     fitTPU         = fit_res$fitTPU,     alphag         = fit_res$alphag,     Vcmax          = fit_res$par[1, 1],     Vcmax_err      = fit_res$par[1, 2],     Jmax           = fit_res$par[2, 1],     Jmax_err       = fit_res$par[2, 2],     Rd             = fit_res$par[3, 1],     Rd_err         = fit_res$par[3, 2],     ci_star        = fit_res$Ci(0),     A_transition   = fit_res$Photosyn(Ci=fit_res$Ci_transition)$ALEAF   ))    # The value of `Tp` and its error will depend on `fitTPU`   parameters[, 'Tp'] <- if (fit_res$fitTPU) {     fit_res$par[4, 1]   } else {     NA   }    parameters[, 'TPU_err'] <- if (fit_res$fitTPU) {     fit_res$par[4, 2]   } else {     NA   }    # Document the parameter units   parameters <- document_variables(     parameters,     c('fit_c3_aci_plantecophys', 'Ci_transition',  'micromol mol^(-1)'),     c('fit_c3_aci_plantecophys', 'Ci_transition2', 'micromol mol^(-1)'),     c('fit_c3_aci_plantecophys', 'Tcorrect',       ''),     c('fit_c3_aci_plantecophys', 'Rd_measured',    ''),     c('fit_c3_aci_plantecophys', 'GammaStar',      'micromol mol^(-1)'),     c('fit_c3_aci_plantecophys', 'Km',             'micromol mol^(-1)'),     c('fit_c3_aci_plantecophys', 'kminput',        ''),     c('fit_c3_aci_plantecophys', 'gstarinput',     ''),     c('fit_c3_aci_plantecophys', 'fitmethod',      ''),     c('fit_c3_aci_plantecophys', 'citransition',   'micromol mol^(-1)'),     c('fit_c3_aci_plantecophys', 'gmeso',          'mol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'fitTPU',         ''),     c('fit_c3_aci_plantecophys', 'alphag',         'dimensionless'),     c('fit_c3_aci_plantecophys', 'Vcmax',          'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Vcmax_err',      'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Jmax',           'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Jmax_err',       'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Rd',             'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Rd_err',         'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'Tp',             'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'TPU_err',        'micromol m^(-2) s^(-1)'),     c('fit_c3_aci_plantecophys', 'ci_star',        'micromol mol^(-1)'),     c('fit_c3_aci_plantecophys', 'A_transition',   'micromol m^(-2) s^(-1)')   )    # Append the identifier columns to the parameters   parameters <- cbind(replicate_identifiers, parameters)    # Return a list of two data frames: `fits` and `parameters`   return(list(       fits = fits,       parameters = parameters   )) }  # Fit each curve c3_aci_results <- consolidate(by(   licor_data,                       # The `exdf` object containing the curves   licor_data[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_c3_aci_plantecophys           # The function to apply to each chunk of `licor_data` ))  # Plot each fit xyplot(   Ameas + Ac + Aj + Ap + Amodel ~ Ci_original | curve_identifier,   data = c3_aci_results$fits$main_data,   type = 'l',   auto.key = list(space = 'right'),   grid = TRUE,   xlab = 'Intercellular CO2 concentration (ppm)',   ylab = 'Assimilation rate (micromol / m^2 / s)',   par.settings = list(     superpose.line = list(col = multi_curve_colors()),     superpose.symbol = list(col = multi_curve_colors())   ) )  # View the parameter values columns_for_viewing <-   c('instrument', 'species', 'plot', 'Vcmax', 'Jmax', 'Rd', 'Tp')  c3_aci_parameters <-   c3_aci_results$parameters[ , columns_for_viewing, TRUE]  print(c3_aci_parameters)  # Plot the residuals xyplot(   A_residuals ~ Ci_original | curve_identifier,   data = c3_aci_results$fits$main_data,   type = 'b',   pch = 16,   grid = TRUE,   xlab = paste0('Intercellular CO2 concentration (',     c3_aci_results$fits$units$Ci_original, ')'),   ylab = paste0('Assimilation rate residual (measured - fitted)\\n(',     c3_aci_results$fits$units$A_residuals, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/creating_your_own_processing_tools.html","id":"overview","dir":"Articles > Web_only","previous_headings":"","what":"Overview","title":"Creating Your Own Processing Tools","text":"PhotoGEA package contains many functions processing gas exchange data, apply_gm fit_c3_aci. (complete list available Developing Data Analysis Pipeline vignette.) However, may wish perform kind processing already available PhotoGEA. case, possible create processing tools compatible functions PhotoGEA help loading data, validating data, processing sets multiple reponse curves, analyzing results. vignette, provide example showing best practices creating processing tools. create tool may useful others like share , contact PhotoGEA package maintainer adding function package.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/creating_your_own_processing_tools.html","id":"loading-packages","dir":"Articles > Web_only","previous_headings":"","what":"Loading Packages","title":"Creating Your Own Processing Tools","text":"always, first step load packages using. addition PhotoGEA, also use lattice package. lattice package installed R setup, can install typing install.packages('lattice').","code":"# Load required packages library(PhotoGEA) library(lattice)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/creating_your_own_processing_tools.html","id":"loading-and-validating-data","dir":"Articles > Web_only","previous_headings":"","what":"Loading and Validating Data","title":"Creating Your Own Processing Tools","text":"example, load set C3 -Ci curves used Analyzing C3 -Ci Curves vignette, perform steps organizing cleaning data. See vignette details steps. brevity, commands included , can found end vignette Commands Document.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/creating_your_own_processing_tools.html","id":"choosing-a-model-to-use","dir":"Articles > Web_only","previous_headings":"","what":"Choosing a Model To Use","title":"Creating Your Own Processing Tools","text":"example, develop function fits rectangular hyperbola -Ci curve. rectangular hyperbola equation form f(x) = y_max * x / (x + x_half). can understand great deal type equation examining form: x large, x + x_half can approximated x, case, function reduces y_max * x / x = y_max. words, function reaches constant value y_max x large. x x_half, function’s value y_max * x_half / (x_half +   x_half) = y_max / 2. words, x_half value x function reaches half maximum value. x small, x + x_half can approximated x_half. case, function reduces y_max * x / x_half. words, function straight line slope y_max / x_half x small. x exactly zero, function also zero. mind, can see rectangular hyperbola begins linear portion flattens constant value. generally similar shape -Ci curve, might reasonable use equation fitting. type model characterized “empirical” model (contrast mechanistic process-based model) underlying explanation equation good fit. Thus, considered simpler alternative Farquhar-von-Caemmerer-Berry model used fit_c3_aci function. applying -Ci curve, want replace independent variable x Ci calculated value net assimilation . One caveat generally negative Ci zero low, rectangular hyperbola never returns negative values. get better fit, helpful include respiration constant value subtracted hyperbola: = A_max * Ci / (Ci + Ci_half) - RL.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/creating_your_own_processing_tools.html","id":"general-suggestions-for-photogea-fitting-functions","dir":"Articles > Web_only","previous_headings":"","what":"General Suggestions for PhotoGEA Fitting Functions","title":"Creating Your Own Processing Tools","text":"creating PhotoGEA fitting function, good idea follow rules, ensure function compatible + consolidate similar inputs outputs fitting functions: first input argument exdf object represents one “unit” data; case, single -Ci curve. argument often called replicate_exdf reminder represents type object . first argument checked make sure exdf; can done using .exdf. name important column exdf object passed input argument default value. function check make sure important column exdf object expected units; check can accomplished check_required_variables function PhotoGEA. function return list named exdf objects outputs; fitting functions return exdf objects called fits parameters. fits return object copy original data additional columns fitted values fit residuals. columns include identifying information curve species event; information can obtained identifier_columns function PhotoGEA. columns include statistics describe quality fit, root mean squared error; information can obtained residual_stats function PhotoGEA. columns include best-fit values model’s parameters information may important user. exdf objects returned function fully documented units relevant column. category exdf column created function set name provide record column calculated. problems detected checking inputs cause errors. fit fails, function return NA results rather causing error. Otherwise, cause problems fitting many curves , since process disrupted errors thrown. general, structure output (e.g. number exdf objects list, names exdf objects list, columns exdf object) always , matter function’s inputs matter fitting results . outputs relevant particular fit just set NA. Provide default values many input arguments possible. (default provided replicate_exdf, course.) next section, create fitting function meets criteria.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/creating_your_own_processing_tools.html","id":"writing-a-fitting-function","dir":"Articles > Web_only","previous_headings":"","what":"Writing A Fitting Function","title":"Creating Your Own Processing Tools","text":"write function fits rectangular hyperbola -Ci curve follows suggestions outlined : split code three main sections corresponding main steps taken processing function: Check inputs: check type replicate_exdf units columns accessed subsequent processing. Perform processing operations: actually perform fit get results default form. Collect document outputs: reorganize fit results two exdf objects corresponding fits parameters, make sure units documented. section ends returning results list named exdf objects. make fit, chosen use nls, function base R performs nonlinear least-squares fitting. function fairly straightforward use, quite popular. requires initial guess values model’s parameters, initial_guess input argument included fit_hyperbola allowing user specify starting guess. One issue nls throw error fit successful. Dealing possible errors necessitates extra code. First, wrap call nls tryCatch, later decide return fit failure; just return NA variables normally determined fitting procedure. One improvement made provide way generate better initial guess starting parameter values, left brevity.","code":"# Define a custom fitting function fit_hyperbola <- function(   replicate_exdf,   a_column_name = 'A',   ci_column_name = 'Ci',   initial_guess = list(A_max = 40, Ci_half = 100, RL = 1) ) {   ### Check inputs    if (!is.exdf(replicate_exdf)) {       stop(\"fit_hyperbola requires an exdf object\")   }    # Make sure the required variables are defined and have the correct units   required_variables <- list()   required_variables[[a_column_name]] <- \"micromol m^(-2) s^(-1)\"   required_variables[[ci_column_name]] <- \"micromol mol^(-1)\"    check_required_variables(replicate_exdf, required_variables)    # Extract the values of several important columns   A <- replicate_exdf[, a_column_name]   Ci <- replicate_exdf[, ci_column_name]    ### Perform processing operations    # Wrap `stats::nls` in a `tryCatch` block so we can indicate fit failures by   # setting `aci_fit` to `NULL`.   aci_fit <- tryCatch(     {       stats::nls(A ~ A_max * Ci / (Ci + Ci_half) - RL, start = initial_guess)     },     error = function(cond) {       print('Having trouble fitting an A-Ci curve:')       print(identifier_columns(replicate_exdf))       print('Giving up on the fit :(')       print(cond)       return(NULL)     },     warning = function(cond) {       print('Having trouble fitting an A-Ci curve:')       print(identifier_columns(replicate_exdf))       print('Giving up on the fit :(')       print(cond)       return(NULL)     }   )    ### Collect and document outputs    # Extract the fit results and add the fits and residuals to the exdf object     if (is.null(aci_fit)) {         A_max <- NA         A_max_err <- NA         Ci_half <- NA         Ci_half_err <- NA         RL <- NA         RL_err <- NA         replicate_exdf[, paste0(a_column_name, '_fit')] <- NA         replicate_exdf[, paste0(a_column_name, '_residuals')] <- NA     } else {         fit_summary <- summary(aci_fit)         A_max <- fit_summary$coefficients[1,1]         A_max_err <- fit_summary$coefficients[1,2]         Ci_half <- fit_summary$coefficients[2,1]         Ci_half_err <- fit_summary$coefficients[2,2]         RL <- fit_summary$coefficients[3,1]         RL_err <- fit_summary$coefficients[3,2]          replicate_exdf[, paste0(a_column_name, '_fit')] <-           A_max * Ci / (Ci + Ci_half) - RL          replicate_exdf[, paste0(a_column_name, '_residuals')] <-           fit_summary$residuals     }      # Document the columns that were added to the replicate exdf     replicate_exdf <- document_variables(         replicate_exdf,         c('fit_hyperbola', paste0(a_column_name, '_fit'),       'micromol m^(-2) s^(-1)'),         c('fit_hyperbola', paste0(a_column_name, '_residuals'), 'micromol m^(-2) s^(-1)')     )      # Get the replicate identifier columns     replicate_identifiers <- identifier_columns(replicate_exdf)      # Attach the residual stats to the identifiers     replicate_identifiers <- cbind(         replicate_identifiers,         residual_stats(             replicate_exdf[, paste0(a_column_name, '_residuals')],             replicate_exdf$units[[a_column_name]],             3         )     )      # Add the values of the fitted parameters     replicate_identifiers[, 'A_max'] <- A_max     replicate_identifiers[, 'A_max_err'] <- A_max_err     replicate_identifiers[, 'Ci_half'] <- Ci_half     replicate_identifiers[, 'Ci_half_err'] <- Ci_half_err     replicate_identifiers[, 'RL'] <- RL     replicate_identifiers[, 'RL_err'] <- RL_err      # Document the columns that were added     replicate_identifiers <- document_variables(         replicate_identifiers,         c('fit_hyperbola', 'A_max',       'micromol m^(-2) s^(-1)'),         c('fit_hyperbola', 'A_max_err',   'micromol m^(-2) s^(-1)'),         c('fit_hyperbola', 'Ci_half',     'micromol mol^(-1)'),         c('fit_hyperbola', 'Ci_half_err', 'micromol mol^(-1)'),         c('fit_hyperbola', 'RL',          'micromol m^(-2) s^(-1)'),         c('fit_hyperbola', 'RL_err',      'micromol m^(-2) s^(-1)')     )      return(list(       fits = replicate_exdf,       parameters = replicate_identifiers     )) }"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/creating_your_own_processing_tools.html","id":"using-the-fitting-function","dir":"Articles > Web_only","previous_headings":"","what":"Using the Fitting Function","title":"Creating Your Own Processing Tools","text":"Now can use new fitting just use processing function PhotoGEA. use fit response curves example data set, examine results plotting fits, plotting residuals, viewing parameter values. commands nearly identical ones Analyzing C3 -Ci Curves vignette.","code":"# Fit each curve c3_aci_results <- consolidate(by(   licor_data,                       # The `exdf` object containing the curves   licor_data[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_hyperbola                     # The function to apply to each chunk of `licor_data` ))  # Plot each fit xyplot(   A + A_fit ~ Ci | curve_identifier,   data = c3_aci_results$fits$main_data,   type = 'l',   auto.key = list(space = 'right'),   grid = TRUE,   xlab = 'Intercellular CO2 concentration (ppm)',   ylab = 'Assimilation rate (micromol / m^2 / s)',   par.settings = list(     superpose.line = list(col = multi_curve_colors()),     superpose.symbol = list(col = multi_curve_colors())   ) ) # Plot the residuals xyplot(   A_residuals ~ Ci | curve_identifier,   data = c3_aci_results$fits$main_data,   type = 'b',   pch = 16,   grid = TRUE,   xlab = paste0('Intercellular CO2 concentration (',     c3_aci_results$fits$units$Ci, ')'),   ylab = paste0('Assimilation rate residual (measured - fitted)\\n(',     c3_aci_results$fits$units$A_residuals, ')') ) # View the parameter values columns_for_viewing <-   c('instrument', 'species', 'plot', 'A_max', 'Ci_half', 'RL', 'RMSE')  c3_aci_parameters <-   c3_aci_results$parameters[ , columns_for_viewing, TRUE]  print(c3_aci_parameters) #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>   instrument [UserDefCon] (NA) species [UserDefCon] (NA) plot [UserDefCon] (NA) #> 1                        ripe1                   soybean                     5a #> 2                        ripe1                   tobacco                      1 #> 3                        ripe1                   tobacco                      2 #> 4                        ripe2                   soybean                      1 #> 5                        ripe2                   soybean                     5b #> 6                        ripe2                   tobacco                      4 #>   A_max [fit_hyperbola] (micromol m^(-2) s^(-1)) #> 1                                      128.99658 #> 2                                      115.27665 #> 3                                      108.00753 #> 4                                       67.50371 #> 5                                       82.51852 #> 6                                       74.40790 #>   Ci_half [fit_hyperbola] (micromol mol^(-1)) #> 1                                    560.2505 #> 2                                    286.3507 #> 3                                    380.7208 #> 4                                    146.5151 #> 5                                    303.7394 #> 6                                    211.0452 #>   RL [fit_hyperbola] (micromol m^(-2) s^(-1)) #> 1                                    11.89748 #> 2                                    20.57574 #> 3                                    14.89457 #> 4                                    19.17676 #> 5                                    13.73897 #> 6                                    17.46451 #>   RMSE [residual_stats] (micromol m^(-2) s^(-1)) #> 1                                       2.857247 #> 2                                       1.753694 #> 3                                       1.578398 #> 4                                       4.260341 #> 5                                       2.815101 #> 6                                       3.040083"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/creating_your_own_processing_tools.html","id":"more-examples","dir":"Articles > Web_only","previous_headings":"","what":"More Examples","title":"Creating Your Own Processing Tools","text":"Another example can found Combining PhotoGEA Packages vignette, discusses write wrappers functions packages. Essentially, specialized case ideas discussed vignette. Additional examples can found accessing source code built-processing functions provided PhotoGEA. One way see code simply type name function R terminal; example, fit_ball_berry. Although method convenient, downside comments original code included. alternate way view code GitHub, comments retained. example, source code fit_ball_berry can found accessing PhotoGEA GitHub page navigating R/fit_ball_berry.R.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/creating_your_own_processing_tools.html","id":"commands-from-this-document","dir":"Articles > Web_only","previous_headings":"","what":"Commands From This Document","title":"Creating Your Own Processing Tools","text":"following code chunk includes central commands used throughout document. compiled make easy copy/paste text file initialize script.","code":"# Load required packages library(PhotoGEA) library(lattice)  # Define a vector of paths to the files we wish to load file_paths <- c(   PhotoGEA_example_file_path('c3_aci_1.xlsx'),   PhotoGEA_example_file_path('c3_aci_2.xlsx') )  # Load each file, storing the result in a list licor_exdf_list <- lapply(file_paths, function(fpath) {   read_gasex_file(fpath, 'time') })  # Get the names of all columns that are present in all of the Licor files columns_to_keep <- do.call(identify_common_columns, licor_exdf_list)  # Extract just these columns licor_exdf_list <- lapply(licor_exdf_list, function(x) {   x[ , columns_to_keep, TRUE] })  # Use `rbind` to combine all the data licor_data <- do.call(rbind, licor_exdf_list)  # Create a new identifier column formatted like `instrument - species - plot` licor_data[ , 'curve_identifier'] <-   paste(licor_data[ , 'instrument'], '-', licor_data[ , 'species'], '-', licor_data[ , 'plot'])  # Make sure the data meets basic requirements check_response_curve_data(licor_data, 'curve_identifier', 16, 'CO2_r_sp')  # Remove points with duplicated `CO2_r_sp` values and order by `Ci` licor_data <- organize_response_curve_data(     licor_data,     'curve_identifier',     c(9, 10),     'Ci' )  # Only keep points where stability was achieved licor_data <- licor_data[licor_data[, 'Stable'] == 2, , TRUE]  # Remove any curves that have fewer than three remaining points npts <- by(licor_data, licor_data[, 'curve_identifier'], nrow) ids_to_keep <- names(npts[npts > 2]) licor_data <- licor_data[licor_data[, 'curve_identifier'] %in% ids_to_keep, , TRUE]  # Remove points where `instrument` is `ripe1` and `CO2_r_sp` is 1800 licor_data <- remove_points(   licor_data,   list(instrument = 'ripe1', CO2_r_sp = 1800) )  # Define a custom fitting function fit_hyperbola <- function(   replicate_exdf,   a_column_name = 'A',   ci_column_name = 'Ci',   initial_guess = list(A_max = 40, Ci_half = 100, RL = 1) ) {   ### Check inputs    if (!is.exdf(replicate_exdf)) {       stop(\"fit_hyperbola requires an exdf object\")   }    # Make sure the required variables are defined and have the correct units   required_variables <- list()   required_variables[[a_column_name]] <- \"micromol m^(-2) s^(-1)\"   required_variables[[ci_column_name]] <- \"micromol mol^(-1)\"    check_required_variables(replicate_exdf, required_variables)    # Extract the values of several important columns   A <- replicate_exdf[, a_column_name]   Ci <- replicate_exdf[, ci_column_name]    ### Perform processing operations    # Wrap `stats::nls` in a `tryCatch` block so we can indicate fit failures by   # setting `aci_fit` to `NULL`.   aci_fit <- tryCatch(     {       stats::nls(A ~ A_max * Ci / (Ci + Ci_half) - RL, start = initial_guess)     },     error = function(cond) {       print('Having trouble fitting an A-Ci curve:')       print(identifier_columns(replicate_exdf))       print('Giving up on the fit :(')       print(cond)       return(NULL)     },     warning = function(cond) {       print('Having trouble fitting an A-Ci curve:')       print(identifier_columns(replicate_exdf))       print('Giving up on the fit :(')       print(cond)       return(NULL)     }   )    ### Collect and document outputs    # Extract the fit results and add the fits and residuals to the exdf object     if (is.null(aci_fit)) {         A_max <- NA         A_max_err <- NA         Ci_half <- NA         Ci_half_err <- NA         RL <- NA         RL_err <- NA         replicate_exdf[, paste0(a_column_name, '_fit')] <- NA         replicate_exdf[, paste0(a_column_name, '_residuals')] <- NA     } else {         fit_summary <- summary(aci_fit)         A_max <- fit_summary$coefficients[1,1]         A_max_err <- fit_summary$coefficients[1,2]         Ci_half <- fit_summary$coefficients[2,1]         Ci_half_err <- fit_summary$coefficients[2,2]         RL <- fit_summary$coefficients[3,1]         RL_err <- fit_summary$coefficients[3,2]          replicate_exdf[, paste0(a_column_name, '_fit')] <-           A_max * Ci / (Ci + Ci_half) - RL          replicate_exdf[, paste0(a_column_name, '_residuals')] <-           fit_summary$residuals     }      # Document the columns that were added to the replicate exdf     replicate_exdf <- document_variables(         replicate_exdf,         c('fit_hyperbola', paste0(a_column_name, '_fit'),       'micromol m^(-2) s^(-1)'),         c('fit_hyperbola', paste0(a_column_name, '_residuals'), 'micromol m^(-2) s^(-1)')     )      # Get the replicate identifier columns     replicate_identifiers <- identifier_columns(replicate_exdf)      # Attach the residual stats to the identifiers     replicate_identifiers <- cbind(         replicate_identifiers,         residual_stats(             replicate_exdf[, paste0(a_column_name, '_residuals')],             replicate_exdf$units[[a_column_name]],             3         )     )      # Add the values of the fitted parameters     replicate_identifiers[, 'A_max'] <- A_max     replicate_identifiers[, 'A_max_err'] <- A_max_err     replicate_identifiers[, 'Ci_half'] <- Ci_half     replicate_identifiers[, 'Ci_half_err'] <- Ci_half_err     replicate_identifiers[, 'RL'] <- RL     replicate_identifiers[, 'RL_err'] <- RL_err      # Document the columns that were added     replicate_identifiers <- document_variables(         replicate_identifiers,         c('fit_hyperbola', 'A_max',       'micromol m^(-2) s^(-1)'),         c('fit_hyperbola', 'A_max_err',   'micromol m^(-2) s^(-1)'),         c('fit_hyperbola', 'Ci_half',     'micromol mol^(-1)'),         c('fit_hyperbola', 'Ci_half_err', 'micromol mol^(-1)'),         c('fit_hyperbola', 'RL',          'micromol m^(-2) s^(-1)'),         c('fit_hyperbola', 'RL_err',      'micromol m^(-2) s^(-1)')     )      return(list(       fits = replicate_exdf,       parameters = replicate_identifiers     )) }  # Fit each curve c3_aci_results <- consolidate(by(   licor_data,                       # The `exdf` object containing the curves   licor_data[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_hyperbola                     # The function to apply to each chunk of `licor_data` ))  # Plot each fit xyplot(   A + A_fit ~ Ci | curve_identifier,   data = c3_aci_results$fits$main_data,   type = 'l',   auto.key = list(space = 'right'),   grid = TRUE,   xlab = 'Intercellular CO2 concentration (ppm)',   ylab = 'Assimilation rate (micromol / m^2 / s)',   par.settings = list(     superpose.line = list(col = multi_curve_colors()),     superpose.symbol = list(col = multi_curve_colors())   ) )  # Plot the residuals xyplot(   A_residuals ~ Ci | curve_identifier,   data = c3_aci_results$fits$main_data,   type = 'b',   pch = 16,   grid = TRUE,   xlab = paste0('Intercellular CO2 concentration (',     c3_aci_results$fits$units$Ci, ')'),   ylab = paste0('Assimilation rate residual (measured - fitted)\\n(',     c3_aci_results$fits$units$A_residuals, ')') )  # View the parameter values columns_for_viewing <-   c('instrument', 'species', 'plot', 'A_max', 'Ci_half', 'RL', 'RMSE')  c3_aci_parameters <-   c3_aci_results$parameters[ , columns_for_viewing, TRUE]  print(c3_aci_parameters)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/developing_a_data_analysis_pipeline.html","id":"overview","dir":"Articles > Web_only","previous_headings":"","what":"Overview","title":"Developing a Data Analysis Pipeline","text":"main purpose PhotoGEA package provide tools creating “data analysis pipeline” photosynthetic gas exchange data. Although base version R coupled popular packages like lattice ggplot2 provides excellent set general tools data analysis, specialized gas exchange data, using purpose can sometimes tedious usually requires writing various customized functions. PhotoGEA designed address gaps providing several specialized functions related photosynthetic gas exchange data. using functions, can spend time extracting important information data less time writing code. vignette, describe important functions PhotoGEA relate general data workflow “pipeline.” description given general, detailed examples can found vignettes Analyzing Ball-Berry Data. also discuss general strategies writing scripts customized data preferences.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/developing_a_data_analysis_pipeline.html","id":"key-steps-in-analyzing-data","dir":"Articles > Web_only","previous_headings":"","what":"Key Steps in Analyzing Data","title":"Developing a Data Analysis Pipeline","text":"convenient break process “data analysis” four key steps: Translation: Converting data original state convenient format can understood piece analysis software. Validation: Ensuring data meets basic requirements quality consistency. Processing: Performing operations extract new information data calculating values new quantities fitting curves. Synthesis: Drawing conclusions data, commonly done applying statistical operations computing averages across groups determining whether observed differences groups significant. “data analysis pipeline” refers relatively simple repeatable way perform steps set data. following sections, explain PhotoGEA package, conjunction base R popular packages, can used accomplish steps. Note: Documentation function mentioned vignette can obtained R’s built-help system, can accessed using ? command. example, get information read_gasex_file function, type ?read_gasex_file R terminal.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/developing_a_data_analysis_pipeline.html","id":"translation","dir":"Articles > Web_only","previous_headings":"Key Steps in Analyzing Data","what":"Translation","title":"Developing a Data Analysis Pipeline","text":"Since working exclusively R, translation refers process creating R objects instrument log files. PhotoGEA currently includes one core function related translation: read_gasex_file: Creates R data object log file created gas exchange measurement system Licor LI-6800 tunable diode laser. function produces “extended data frame” (exdf) objects R. exdf class similar regular data frame, main difference exdf object keeps track units associated column. data structure provides several key benefits analyzing gas exchange data, information available Working Extended Data Frames vignette. often case full data set spread across multiple files. , translating data R often involves combining multiple exdf objects (one file) together one object holds data. help , PhotoGEA package provides several functions can used select files via dialog windows: choose_input_files choose_input_licor_files (available Microsoft Windows) choose_input_tdl_files (available Microsoft Windows) also provides identify_common_columns function, can used along rbind easily combine set exdf objects. operation described Combining Data Several Files section Working Extended Data Frames vignette. process translation “sets stage” validation, processing, synthesis steps sense determines structure data. words, translation functions produce exdf objects, many functions used remaining data analysis steps also designed work exdf objects.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/developing_a_data_analysis_pipeline.html","id":"validation","dir":"Articles > Web_only","previous_headings":"Key Steps in Analyzing Data","what":"Validation","title":"Developing a Data Analysis Pipeline","text":"phrase originated computer science applies many human endeavors, including data analysis: “Garbage , garbage .” context can understand mean processing synthesis apply data produce meaningless results data meet certain requirements quality consistency. example, try fitting straight line set curved data:  case, fitting procedure report errors, even returns fairly high value R2 (0.7540145), clear linear model applicable data. words, case “garbage ,” produced set “garbage .” goal data validation ensure subsequent processing appropriate; words, avoid “garbage ” scenario. Validation often consists three parts: Ensuring data set properly organized subsets (applicable). Identifying problematic points data set. “Cleaning” data set removing points. many ways validate data, methods can broadly categorized automated vs. manual objective vs. subjective. examples: Plotting raw data locate abnormal points example manual subjective form validation, since requires visually take look. Removing points raw data Li-6800’s stability criteria met example automated objective validation, since can proceed without judegement human. Typically, best results achieved using mix multiple forms validation. PhotoGEA package includes several functions help data validation: check_response_curve_data: data set represents multiple “response curves,” function can used make sure response curve can properly located curves follow sequence “driving” variable values. organize_response_curve_data: , data set represents multiple “response curves,” function can used remove certain points curve reorder data convenient way plotting. identify_tdl_cycles: data set represents measurements tunable diode laser, function can used identify complete cycles within data gas handling system periodically measures gas multiple lines. remove_points: function simplifies process removing individual points even entire response curves data set found unreliable. exclude_outliers: function can used remove points measurement conditions unusual; example, leaf temperature value recorded Li-6800 significantly different recorded temperatures points response curve. addition functions, basic operations subsetting plotting can used help validation; see Working Extended Data Frames vignette details subsetting plotting data exdf objects.","code":"# Generate some data using a cubic function X <- seq(from = 0, to = 10, length.out = 21) Y <- (X - 3) * (X - 5) * (X - 7)  # Fit a linear model to the data linear_fit <- lm(Y ~ X)  # Plot the fit results xyplot(   linear_fit$fitted.values + linear_fit$model$Y ~ linear_fit$model$X,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = 'X',   ylab = 'Y',   auto.key = list(space = 'top', text = c('linear fit', 'observed')) )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/developing_a_data_analysis_pipeline.html","id":"processing","dir":"Articles > Web_only","previous_headings":"Key Steps in Analyzing Data","what":"Processing","title":"Developing a Data Analysis Pipeline","text":"processing step, new information extracted raw data data set. PhotoGEA package includes many functions specialized processing photosynthetic gas exchange data. Broadly, fall two types: Functions calculate values new variables values ones already included data set. Functions apply fitting procedure single response curves within full data set. general, “processing” step require several functions, depend strongly type measurements made; example, -Ci curves measured C3 plants require different type processing -Ci curves measured C4 plants. functions designed applied exdf objects. case, exdf objects provide large advantage regular data frames include information units; fact, functions check units required variables proceeding make sure results correct.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/developing_a_data_analysis_pipeline.html","id":"functions-for-calculating-new-variable-values","dir":"Articles > Web_only","previous_headings":"Key Steps in Analyzing Data > Processing","what":"Functions for Calculating New Variable Values","title":"Developing a Data Analysis Pipeline","text":"PhotoGEA package includes following functions calculating values new variables values variables already exist data set: apply_gm: Calculates values chloroplast mesophyll CO2 concentration. calculate_temperature_response: Calculates temperature-dependent values key photosynthetic parameters. calculate_ball_berry_index: Calculates Ball-Berry index values net assimilation, relative humidity leaf surface, CO2 concentration leaf surface. calculate_c3_assimilation: Calculates assimilation rates using Farquhar-von-Caemmerer-Berry model C3 photosynthesis. calculate_c3_limitations_grassi: Calculates limitations C3 photosynthesis using Grassi & Magnani (2005) framework. calculate_c3_limitations_warren: Calculates limitations C3 photosynthesis using Warren et al. (2003) framework. calculate_c4_assimilation: Calculate assimilation rates using S. von Caemmerer’s model C4 photosynthesis. calculate_gamma_star: Calculates CO2 compensation point absence day respiration leaf temperature Rubisco specificity. calculate_gas_properties: Calculates gas properties included default Licor log files, H2O concentration leaf surface stomatal conductance CO2. calculate_gm_busch calculate_gm_ubierna: Calculates mesophyll conductance using two slightly different models. calculate_isotope_discrimination: Calculates photosynthetic carbon isotope discrimination. calculate_leakiness_ubierna: Calculates bundle-sheath leakiness CO2. calculate_ternary_correction: Calculates ternary gas mixture correction factors. calculate_total_pressure: Calculates total pressure Licor measurement chamber. estimate_operating_point: Estimates internal CO2 concentrations assimilation rates atmospheric CO2 concentrations. functions generally treat row exdf object independent observation, can applied objects include data many plants response curves.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/developing_a_data_analysis_pipeline.html","id":"functions-for-fitting-response-curves","dir":"Articles > Web_only","previous_headings":"Key Steps in Analyzing Data > Processing","what":"Functions for Fitting Response Curves","title":"Developing a Data Analysis Pipeline","text":"PhotoGEA package includes following functions fitting individual response curves sets response curves: fit_laisk: Estimates RL Ci_star set response curves using Laisk method. fit_ball_berry: Calculates linear fit stomatal conductance H2O vs. Ball-Berry index. fit_c3_aci: Calculates nonlinear fit net CO2 assimilation vs. chloroplastic CO2 concentration. fit_c3_variable_j: Calculates nonlinear fit net CO2 assimilation vs. chloroplastic CO2 concentration, estimating mesophyll conductance chlorophyll fluorescence data. fit_c4_aci: Calculates nonlinear fit net CO2 assimilation vs. partial pressure CO2 mesophyll. fit_medlyn: Calculates nonlinear fit stomatal conductance H2O using Medlyn model. functions generally assume input exdf object represents single response curve, return optimized parameter values fitted values measured varaibles; example, fit_ball_berry performs fit single Ball-Berry curve returns Ball-Berry intercept, Ball-Berry slope, fitted values stomatal conductance. functions applied directly exdf object contains full set multiple response curves, assume input single response curve. However, can used conjunction consolidate functions automatically split large exdf individual curves, apply fitting function curve, combine results fit; see Processing Multiple Pieces Extended Data Frame section Working Extended Data Frames vignette details .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/developing_a_data_analysis_pipeline.html","id":"functions-for-calibrating-tdl-data","dir":"Articles > Web_only","previous_headings":"Key Steps in Analyzing Data > Processing","what":"Functions for Calibrating TDL Data","title":"Developing a Data Analysis Pipeline","text":"PhotoGEA package includes following functions calibrating TDL data: process_tdl_cycle_erml: Designed TDL ERML. process_tdl_cycle_polynomial: Applies correction based polynomial fit readings two reference tanks. fitting functions , functions generally assume input exdf object represents data single TDL cycle, must used along consolidate processing full TDL data set.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/developing_a_data_analysis_pipeline.html","id":"developing-custom-processing-functions","dir":"Articles > Web_only","previous_headings":"Key Steps in Analyzing Data > Processing","what":"Developing Custom Processing Functions","title":"Developing a Data Analysis Pipeline","text":"PhotoGEA package also includes several tools can helpful developing custom processing functions: check_required_variables: Can used make sure exdf object contains certain columns columns expected units. identifier_columns: Can used identify columns exdf object whose values constant. residual_stats: Calculates several key statistics residuals fit. functions used extensively within PhotoGEA package’s built-processing tools. also two vignettes discussing use : Creating Processing Tools Combining PhotoGEA Packages.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/developing_a_data_analysis_pipeline.html","id":"synthesis","dir":"Articles > Web_only","previous_headings":"Key Steps in Analyzing Data","what":"Synthesis","title":"Developing a Data Analysis Pipeline","text":"synthesis step, statistical operations used draw conclusions data, visualizations generated make easier understand. PhotoGEA package includes tools basic operations: exclude_outliers: function splits exdf object subsets according values one identifier columns, determines rows subset value certain column outlier, removes rows. example, function used “clean” output Ball-Berry fitting procedure excluding curves species Ball-Berry slope outlier. basic_stats: function splits exdf object subsets according values one identifier columns, calculates mean standard deviation applicable column object. example, function used calculate average value Ball-Berry slope intercept species present data set. barchart_with_errorbars: function can used create barchart height bar average value set measurements error bars determined standard error. xyplot_avg_rc: function can used plot average response curves created averaging individual curves measured multiple plants. pdf_print: function can used switch “exploratory” plots (R graphics windows) “final” plots (PDFs) settings script optimized plots ready sharing others. complex statistical operations can performed functions R packages onewaytests DescTools.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/developing_a_data_analysis_pipeline.html","id":"creating-data-analysis-scripts","dir":"Articles > Web_only","previous_headings":"","what":"Creating Data Analysis Scripts","title":"Developing a Data Analysis Pipeline","text":"R script essentially just collection R commands stored plain-text document, usually .R extension. commands script can copied pasted R terminal run code, code can executed automatically using source function. Writing scripts can save lot time making code reusable, can serve record exact steps used analyzing data. PhotoGEA package includes several vignettes go detailed examples data analysis, end vignettes includes collection code used vignette. code designed start script. encouraged copy make necessary modifications might required apply data. great way get started analyzing data R. general, two types scripts might consider making: General-purpose scripts can apply many different data sets. Narrow scripts apply one particular data set.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/developing_a_data_analysis_pipeline.html","id":"general-purpose-scripts","dir":"Articles > Web_only","previous_headings":"Creating Data Analysis Scripts","what":"General-Purpose Scripts","title":"Developing a Data Analysis Pipeline","text":"general-purpose script script designed apply particular type data (example, C3 CO2 response curves) particular set data. kind script include minimal data validation process “cleaning” data often specific particular data set. kind script avoid hard-coding particular file names; instead, make use choose_input_files, choose_input_licor_files, choose_input_tdl_files functions can flexibly applied different groups data files. main reason use script like take quick first look new set data. script well-written always include “identifying” user constants Licor files (e.g. species, event, replicate, etc), possible basic investigation data just minutes. begin analyze different types data, may develop collection general purpose scripts. recommended store dedicated directory include data files.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/developing_a_data_analysis_pipeline.html","id":"narrow-scripts","dir":"Articles > Web_only","previous_headings":"Creating Data Analysis Scripts","what":"Narrow Scripts","title":"Developing a Data Analysis Pipeline","text":"narrow script designed apply particular set data. kind script include data cleaning steps apply one set data. kind script use hard-coded file names clarify files used , typically stored directory corresponding data files. Often, narrow script can formed copying general-purpose script modifying hard-code file names include data cleaning steps. main reason use script like create reproducible record exact steps took analyze data. way, never forget . need make change analysis, simple just modify part script. Trust : save lot time future self. addition saving time, kind script let easily share analysis researchers. fact, dedicated analysis script specifies versions package uses can later included data publish, making simple fulfill requirements “open science.” great deal research showing papers easily reproducible analysis (facilitated availability data scripts) cited often. example, see following: Piwowar, Day, Fridsma (2007) Bueno de Mesquita et al. (2003) Dorch, Drachen, Ellegaard (2015) Henneken Accomazzi (2011) Popkin (2019)","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/frequent_questions.html","id":"how-do-i-install-the-latest-release-of-photogea","dir":"Articles > Web_only","previous_headings":"","what":"How Do I Install the Latest Release of PhotoGEA?","title":"Frequently Asked Questions","text":"PhotoGEA available CRAN, easiest way install latest release type following within R terminal: may short period time new version released yet available CRAN. case, latest release can installed directly main branch GitHub repository typing following: Note method requires remotes package, can installed within R typing install.packages('remotes').","code":"install.packages('PhotoGEA') remotes::install_github('eloch216/PhotoGEA')"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/frequent_questions.html","id":"how-do-i-install-an-old-version-of-photogea","dir":"Articles > Web_only","previous_headings":"","what":"How Do I Install an Old Version of PhotoGEA?","title":"Frequently Asked Questions","text":"PhotoGEA releases tagged GitHub, tag names formatted vX.Y.Z, X.Y.Z version number. , remotes::install_github can used install old versions within R, supplying appropriate tag name ref input argument. example, version 1.0.0 can installed follows: Note command requires remotes package, can installed within R typing install.packages('remotes').","code":"remotes::install_github('eloch216/PhotoGEA', ref = 'v1.0.0')"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/frequent_questions.html","id":"how-do-i-install-the-development-version-of-photogea","dir":"Articles > Web_only","previous_headings":"","what":"How Do I Install the Development Version of PhotoGEA?","title":"Frequently Asked Questions","text":"development version PhotoGEA contains latest changes, although may “work progress” subject suddent changes without warning. can always found unreleased branch GitHub, package can installed branch follows: Note command requires remotes package, can installed within R typing install.packages('remotes').","code":"remotes::install_github('eloch216/PhotoGEA', ref = 'unreleased')"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/frequent_questions.html","id":"how-do-i-install-from-a-local-copy-of-the-repository","dir":"Articles > Web_only","previous_headings":"","what":"How Do I Install From a Local Copy of the Repository?","title":"Frequently Asked Questions","text":"PhotoGEA package can installed local copy repository running following command R session working directory set root directory PhotoGEA repository: can helpful developers wish locally test changes package code.","code":"install.packages('.', repos = NULL, type = 'SOURCE')"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/frequent_questions.html","id":"what-should-i-do-when-check_response_curve_data-fails","dir":"Articles > Web_only","previous_headings":"","what":"What Should I Do When check_response_curve_data Fails?","title":"Frequently Asked Questions","text":"beginning work new data set, fairly common encounter problems cause check_response_curve_data fail. common issues : manual log button accidentally pressed measuring, causing response curve extra point. One “User Constant” updated starting measure new curve, causing two curves identifying metadata. curve started, needed ended early, resulting curve fewer points expected. exactly kinds issues check_response_curve_data designed detect. may feel irritating encounter errors, ’s better know issues extra log points user constants early analysis, cause additional downstream issues. cases, often simplest fix issues manually editing log files Excel. easy way delete extra rows alter values user constants. altering log files, always good idea keep “original” version case changes need reverted. Sometimes check_response_curve_data fails different reason – example, perhaps different setpoint sequences intentionally used measuring curves, perhaps already cleaned data Excel. cases, please see “Response Curves Different Numbers Points?” “Clean Data Excel?” sections article.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/frequent_questions.html","id":"what-if-my-response-curves-have-different-numbers-of-points","dir":"Articles > Web_only","previous_headings":"","what":"What if My Response Curves Have Different Numbers of Points?","title":"Frequently Asked Questions","text":"analysis guides use data sets response curve number points, making easy apply check_response_curve_data organize_response_curve_data. However, data sets may sometimes curves measured using different sequences setpoints. deal situation, one strategy split full set groups expected use sequences, separately check organize group, finally recombine groups back together. code snippets show two examples accomplished.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/frequent_questions.html","id":"splitting-response-curves-according-to-the-number-of-points-in-each-curve","dir":"Articles > Web_only","previous_headings":"What if My Response Curves Have Different Numbers of Points?","what":"Splitting Response Curves According to the Number of Points in Each Curve","title":"Frequently Asked Questions","text":"following code replace calls check_response_curve_data organize_response_curve_data user guides. code originally written set -Ci curves used different numbers recovery points. user wished keep final recovery point use subsequent analysis. curves used following sequences CO2_r setpoint values: 16 points: 400, 300, 200, 120, 70, 30, 10, 400, 400, 400, 600, 800, 1200, 1500, 1800, 400 18 points: 400, 300, 200, 120, 70, 30, 10, 400, 400, 400, 400, 400, 600, 800, 1200, 1500, 1800, 400 19 points: 400, 300, 200, 120, 70, 30, 10, 400, 400, 400, 400, 400, 400, 600, 800, 1200, 1500, 1800, 400","code":"# Add a new column called `curve_npts` that stores the number of points in each # response curve licor_data <- do.call(rbind, by(licor_data, licor_data[, 'curve_identifier'], function(x) {   x[, 'curve_npts'] <- nrow(x)   x }))  # Choose points to remove, depending on how many points are in the curve pts_to_remove <- list(   '16' = c(1, 8:9,  16),   '18' = c(1, 8:11, 18),   '19' = c(1, 8:12, 19) )  # Check and process each group of curves depending on how many points are in the # curve licor_exdf_list_processed <- by(licor_data, licor_data[, 'curve_npts'], function(x) {   # Get the number of points in these curves   npts <- x[1, 'curve_npts']    # Make sure info is specified for this group of curves   if (!as.character(npts) %in% names(pts_to_remove)) {     stop('Points to remove were not specified for npts = `', npts, '`')   }    # Make sure the data meets basic requirements   check_response_curve_data(x, 'curve_identifier', npts, 'CO2_r_sp')    # Remove points with duplicated `CO2_r_sp` values and order by `Ci`   organize_response_curve_data(     x,     'curve_identifier',     pts_to_remove[[as.character(npts)]],     'Ci'   ) })  # Use `rbind` to recombine all the data licor_data <- do.call(rbind, licor_exdf_list_processed)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/frequent_questions.html","id":"splitting-response-curves-according-to-the-date-they-were-measured-and-the-number-of-points-in-each-curve","dir":"Articles > Web_only","previous_headings":"What if My Response Curves Have Different Numbers of Points?","what":"Splitting Response Curves According to the Date They Were Measured and the Number of Points in Each Curve","title":"Frequently Asked Questions","text":"code replace calls check_response_curve_data organize_response_curve_data user guides. code originally written set -Ci curves used different sequences CO2_r setpoints different days. curves used following sequences CO2_r setpoint values: 2023-03-21: 18 points: 400, 300, 200, 150, 100, 75, 50, 40, 30, 20, 10, 400, 400, 600, 800, 1000, 1200, 1500 2023-03-23: 19 points: 400, 300, 200, 150, 100, 75, 50, 40, 30, 20, 10, 400, 400, 500, 600, 800, 1000, 1200, 1500 2023-03-24: 19 points: 400, 300, 200, 150, 100, 75, 50, 40, 30, 20, 400, 400, 450, 500, 600, 800, 1000, 1200, 1500","code":"# Add a new column called `curve_npts` that stores the number of points in each # response curve licor_data <- do.call(rbind, by(licor_data, licor_data[, 'curve_identifier'], function(x) {   x[, 'curve_npts'] <- nrow(x)   x }))  # Add a new column called `date_ymd` that stores the date formatted as # YYYY-MM-DD licor_data[, 'date_ymd'] <- paste(   substring(licor_data[, 'date'], 1, 4),   substring(licor_data[, 'date'], 5, 6),   substring(licor_data[, 'date'], 7, 8),   sep = '-' )  # Add a new column called `date_ymd_npts` that combines the date and the number # of points licor_data[, 'date_ymd_npts'] <-   paste(licor_data[, 'date_ymd'], licor_data[, 'curve_npts'], sep = ' - ')  # Choose points to remove, depending on the date the curve was measured and the # number of points it contains pts_to_remove <- list(   '2023-03-21 - 18' = c(12, 13),   '2023-03-23 - 19' = c(12, 13),   '2023-03-24 - 19' = c(11, 12) )  # Check and process each group of curves depending on the date and the number of # points licor_exdf_list_processed <- by(licor_data, licor_data[, 'date_ymd_npts'], function(x) {   # Get the date and number of points in these curves   date_ymd_npts <- x[1, 'date_ymd_npts']   npts <- x[1, 'curve_npts']    # Make sure info is specified for this group of curves   if (!date_ymd_npts %in% names(pts_to_remove)) {     stop('Points to remove were not specified for date_ymd_npts = `', date_ymd_npts, '`')   }    # Make sure the data meets basic requirements   check_response_curve_data(x, 'curve_identifier', npts, 'CO2_r_sp')    # Remove points with duplicated `CO2_r_sp` values and order by `Ci`   organize_response_curve_data(     x,     'curve_identifier',     pts_to_remove[[date_ymd_npts]],     'Ci'   ) })  # Use `rbind` to recombine all the data licor_data <- do.call(rbind, licor_exdf_list_processed)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/frequent_questions.html","id":"what-if-i-clean-my-data-in-excel","dir":"Articles > Web_only","previous_headings":"","what":"What if I Clean My Data in Excel?","title":"Frequently Asked Questions","text":"user guides, organize_response_curve_data remove_points functions used remove recovery points points sets response curves. However, also possible remove points Excel reading log files R. case, necessary make small alterations code used user guides. One consideration cleaning curves Excel, likely curves number points follow sequence setpoint values. , checks check_response_curve_data likely fail. case, recommend setting expected_npts 0 (default value) error_on_failure FALSE calling check_response_curve_data. provide potentially useful information number points curve, won’t throw error cause script stop running. Another consideration organize_response_curve_data needed remove points curves. Yet, features, reordering points calculating average values, still useful. case, recommend setting measurement_numbers_to_remove c() leaving arguments -. Putting together produce something like following code, replace regular calls check_response_curve_data organize_response_curve_data user guides:","code":"# Print info about the number of points in each curve to make sure # `curve_identifier` is able to properly split the set into individual curves check_response_curve_data(licor_data, 'curve_identifier', error_on_failure = FALSE)  # Reorder by `Ci` and calculate average values of leaf temperature and Qin licor_data <- organize_response_curve_data(     licor_data,     'curve_identifier',     c(),     'Ci',     columns_to_average = c('TleafCnd', 'Qin') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/frequent_questions.html","id":"what-if-i-have-log-files-from-a-licor-li-6400-pp-systems-ciras-or-other-gas-exchange-measurement-system","dir":"Articles > Web_only","previous_headings":"","what":"What if I Have Log Files From a Licor LI-6400, PP Systems CIRAS, or Other Gas Exchange Measurement System?","title":"Frequently Asked Questions","text":"moment, PhotoGEA can read plaintext Excel files created Licor LI-6800 gas exchange measurement systems, functions reading log files instruments. Fortunately, R packages , GasanalyzeR. Using function another package little complicated, generally use data structures variable names PhotoGEA. , reading file another package, typically extra “conversion” needs take place. following example shows create wrapper read_6400_xls function gasanalyzer R package. also provides simple function “detects” file type, mix Licor LI-6400 LI-6800 log files used. code example replace lines use read_gasex_file create licor_exdf_list user guides. time article written (April 4, 2025), read_6400_xls function available CRAN version gasanalyzer package. Instead, package must installed directly GitLab repository get latest version. can done calling following command R: example processes columns absolutely essential fitting -Ci curves. Depending goals, may need modify code include columns.","code":"remotes::install_gitlab('plantphys/gasanalyzer') # Helper function for reading 6400 Excel files. This is a wrapper for the # read_6400_xls function from the gasanalyzer package that converts the output # into a format usable by PhotoGEA. # # Debug option: If DEBUG_PRINT is set to TRUE below, the raw column names will # be printed immediately after the file is loaded. This may be helpful if there # are other columns (such as user constants) that also need to be renamed. read_6400_xls_wrapper <- function(fpath) {     # Read the contents of the file     rawdata <- gasanalyzer::read_6400_xls(fpath)      # Optional debug printing     DEBUG_PRINT <- FALSE     if (DEBUG_PRINT) {       print(colnames(rawdata))     }      # Rename a few columns so they meet PhotoGEA's expectations; the \"new\"     # PhotoGEA column name is on the left, and the \"original\" gasanalyzer     # column name is on the right.     new_column_names <- list(         A = 'GasEx.A',         Ca = 'GasEx.Ca',         Ci = 'GasEx.Ci',         DeltaPcham = 'Meas.DeltaPcham',         gsw = 'GasEx.gsw',         oxygen = 'Const.Oxygen',         Pa = 'Meas.Pa',         Qin = 'LeafQ.Qin',         TleafCnd = 'GasEx.TleafCnd'     )      for (i in seq_along(new_column_names)) {         gasanalyzer_name <- new_column_names[[i]]         photogea_name    <- names(new_column_names)[i]          colnames(rawdata)[colnames(rawdata) == gasanalyzer_name] <- photogea_name     }      # Drop units and convert to a regular data frame     rawdata_df <- as.data.frame(units::drop_units(rawdata))      # Convert to an exdf object     exdf_obj <- exdf(rawdata_df)      # Supply units for a few columns so they meet PhotoGEA's expectations, and     # return     document_variables(         exdf_obj,         c('GasEx', 'A',          'micromol m^(-2) s^(-1)'),         c('GasEx', 'Ca',         'micromol mol^(-1)'),         c('GasEx', 'Ci',         'micromol mol^(-1)'),         c('Meas',  'DeltaPcham', 'kPa'),         c('GasEx', 'gsw',        'mol m^(-2) s^(-1)'),         c('in',    'oxygen',     'percent'),         c('Meas',  'Pa',         'kPa'),         c('LeafQ', 'Qin',        'micromol m^(-2) s^(-1)'),         c('GasEx', 'TleafCnd',   'degrees C')     ) }  # Helper function that tries to read a file using PhotoGEA::read_gasex_file, but # then uses `read_6400_xls_wrapper` if there is an error. read_gasex_file_plus_6400 <- function(fpath) {   cat(paste0(     '\\nAttempting to read `', fpath, '` using PhotoGEA::read_gasex_file\\n'   ))    tryCatch(     read_gasex_file(fpath),     error = function(e) {       cat(paste0(         '\\nAn error occurred. Attempting to read `', fpath,         '` using gasanalyzer::read_6400_xls\\n'       ))        read_6400_xls_wrapper(fpath)     }   ) }  # Load each file, storing the result in a list licor_exdf_list <- lapply(file_paths, function(fpath) {   read_gasex_file_plus_6400(fpath) })"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/frequent_questions.html","id":"what-if-my-files-dont-have-user-constants-or-other-metadata","dir":"Articles > Web_only","previous_headings":"","what":"What if My Files Don’t Have User Constants or Other Metadata?","title":"Frequently Asked Questions","text":"Please see Guide Licor LI-6800 User Constants.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/publications.html","id":"overview","dir":"Articles > Web_only","previous_headings":"","what":"Overview","title":"PhotoGEA Publications","text":"page contains list publications using PhotoGEA R package, including links publicly-available analysis scripts whenever possible. missing publications, please let us know!","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/publications.html","id":"publications-about-photogea","dir":"Articles > Web_only","previous_headings":"","what":"Publications About PhotoGEA","title":"PhotoGEA Publications","text":"PhotoGEA R package first described : Lochocki, E. B., Salesse-Smith, C. E. & McGrath, J. M. “PhotoGEA: R Package Closer Fitting Photosynthetic Gas Exchange Data Non-Gaussian Confidence Interval Estimation.” Plant, Cell & Environment (2025). DOI:10.1111/pce.15501 PhotoGEA version: v1.1.0 Analysis scripts: https://github.com/ripeproject/PhotoGEA-paper/ use PhotoGEA work, please cite publication specify version package used.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/publications.html","id":"publications-using-photogea","dir":"Articles > Web_only","previous_headings":"","what":"Publications Using PhotoGEA","title":"PhotoGEA Publications","text":"Salesse-Smith, C. E. et al. “Greater mesophyll conductance leaf photosynthesis field modified cell wall porosity thickness via AtCGR3 expression tobacco.” Plant Biotechnology Journal 22, 2504–2517 (2024). DOI:10.1111/pbi.14364 PhotoGEA used : Calculating mesophyll conductance tunable diode laser absorption measurements (calculate_gm_busch), C3A-Ci fitting (fit_c3_aci), C3A-Ci + CF Variable J fitting (fit_c3_variable_j) PhotoGEA version: v0.10.0 Analysis scripts: https://github.com/ripeproject/CGR3-tobacco-2024 Pelech, E. ., Stutz, S. S., Wang, Y., Lochocki, E. B. & Long, S. P. “Selected Higher Mesophyll Conductance Domesticating Soybean?” Plant, Cell & Environment 48, 1594–1607 (2025). DOI:10.1111/pce.15206 PhotoGEA used : Calculating limitations C3 photosynthesis (calculate_c3_limitations_grassi calculate_c3_limitations_warren) PhotoGEA version: v1.0.0 Analysis scripts: https://doi.org/10.13012/B2IDB-7809185_V2 Salesse-Smith, C. E. et al. “Adapting C4 photosynthesis atmospheric change increasing productivity elevating Rubisco content sorghum sugarcane.” Proceedings National Academy Sciences 122, e2419943122 (2025). DOI:10.1073/pnas.2419943122 PhotoGEA used : Fitting C4A-Ci curves using mechanistic model (fit_c4_aci), reading plotting induction curves (read_gasex_file) PhotoGEA version: v0.11.0 Analysis scripts: https://github.com/cabbi-bio/sorghum-sugarcane-RBCS-RAF1-2024","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/working_with_extended_data_frames.html","id":"overview","dir":"Articles > Web_only","previous_headings":"","what":"Overview","title":"Working With Extended Data Frames","text":"extended data frame (abbreviated exdf) class special data structure defined PhotoGEA package. many ways, exdf object equivalent data frame, major difference exdf object includes units “category” column. exdf class originally created way represent contents Licor Excel file R structure. Licor Excel files, data arranged table column name, units, category; example, column values net assimilation rate called , units micromol / m^2 / s, categorized GasEx variable. Illustration comparing data frames (left) extended data frames (right). exdf objects keep track units column, functions acting exdf objects able check important variables correct units, ensuring output produce correct. Additionally, category column can used store important information , function used calculate values. example, calculate_ball_berry_index function takes exdf object input (1) checks whether net assimilation, relative humidity, CO2 concentration columns object expected units, (2) adds new column containing values Ball-Berry index, (3) uses category new column indicate calculated calculate_ball_berry_index. Thus, exdf objects provide clear method ensuring requirements units met making calculations retaining record values new columns calculated. important properties, nearly functions PhotoGEA package create modify exdf objects rather regular data frames. following sections, vignette demonstrate create exdf objects, extract information , modify contents. Note: , assume basic familiarity common R data structures like lists, vectors, data frames. unfamiliar , may helpful consult another online guide tutorial Data Structures chapter Advanced R.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/working_with_extended_data_frames.html","id":"loading-packages","dir":"Articles > Web_only","previous_headings":"","what":"Loading Packages","title":"Working With Extended Data Frames","text":"always, first step load packages using. addition PhotoGEA, also use lattice package generating plots. lattice package installed R setup, can install typing install.packages('lattice').","code":"# Load required packages library(PhotoGEA) library(lattice)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/working_with_extended_data_frames.html","id":"basic-properties-of-an-extended-data-frame","dir":"Articles > Web_only","previous_headings":"","what":"Basic Properties of an Extended Data Frame","title":"Working With Extended Data Frames","text":"technical point view, exdf object simply R list following properties: must contain elements named main_data, units, categories. required elements must data frame. required elements must column names, can thought column names exdf object whole. units data frame must contain just one row, whose values specify units column. categories element must one row containing category column. main_data data frame can number rows contains main data exdf object. function .exdf can used check whether R object extended data frame. default, performs simple check information returned class function, also option perform detailed check requirement listed . information, type ?.exdf R terminal access help menu entry .exdf. Besides three required elements, also possible exdf object additional entries filename stores name file used create exdf. restrictions types “extra” elements; numeric values, strings, vectors, data frames, lists, etc. course, named main_data, units, categories.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/working_with_extended_data_frames.html","id":"creating-extended-data-frames","dir":"Articles > Web_only","previous_headings":"","what":"Creating Extended Data Frames","title":"Working With Extended Data Frames","text":"three main ways create exdf object: three separate data frames specifying main data, units, categories new exdf object. single data frame representing main data new exdf object; case, units categories initialized NA. data file Licor Excel file tunable diode laser (TDL) output file. following sections, demonstrate methods.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/working_with_extended_data_frames.html","id":"specifying-main-data-units-and-categories","dir":"Articles > Web_only","previous_headings":"Creating Extended Data Frames","what":"Specifying Main Data, Units, and Categories","title":"Working With Extended Data Frames","text":"example first method, create extended data frame called exdf_1 two columns named B. two columns units m s categories Cat1 Cat2, respectively. can view nicely-formatted version object using print command: Notice column descriptor printed version formatted name [category] (units).","code":"exdf_1 <- exdf(   data.frame(A = c(3, 2, 7, 9), B = c(4, 5, 1, 8)),   data.frame(A = 'm', B = 's'),   data.frame(A = 'Cat1', B = 'Cat2') ) print(exdf_1) #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>   A [Cat1] (m) B [Cat2] (s) #> 1            3            4 #> 2            2            5 #> 3            7            1 #> 4            9            8"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/working_with_extended_data_frames.html","id":"initializing-with-default-units-and-categories","dir":"Articles > Web_only","previous_headings":"Creating Extended Data Frames","what":"Initializing with Default Units and Categories","title":"Working With Extended Data Frames","text":"example second method, create extended data frame called exdf_2 two columns named B, won’t specify units categories. , can print data frame: units categories initialized default values NA, can supply new units categories using document_variables function: Now exdf_2 identical exdf_1: Sometimes method convenient previous one.","code":"exdf_2 <- exdf(data.frame(A = c(3, 2, 7, 9), B = c(4, 5, 1, 8))) print(exdf_2) #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>   A [NA] (NA) B [NA] (NA) #> 1           3           4 #> 2           2           5 #> 3           7           1 #> 4           9           8 exdf_2 <- document_variables(exdf_2, c('Cat1', 'A', 'm'), c('Cat2', 'B', 's')) identical(exdf_1, exdf_2) #> [1] TRUE"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/working_with_extended_data_frames.html","id":"reading-from-an-instrument-log-file","dir":"Articles > Web_only","previous_headings":"Creating Extended Data Frames","what":"Reading From an Instrument Log File","title":"Working With Extended Data Frames","text":"example third method, create extended data frame Microsoft Excel file containing Licor measurements. new object many columns rows, won’t print . However, can confirm indeed properly-defined exdf object:","code":"exdf_3 <- read_gasex_file(   PhotoGEA_example_file_path('ball_berry_1.xlsx') ) is.exdf(exdf_3, TRUE) #> [1] TRUE"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/working_with_extended_data_frames.html","id":"writing-to-and-reading-from-csv-files","dir":"Articles > Web_only","previous_headings":"","what":"Writing to and Reading From CSV Files","title":"Working With Extended Data Frames","text":"exdf object can saved CSV file using write.csv.exdf function. example, Licor log file discussed can saved CSV file follows: CSV files created using write.csv.exdf can read later using read.csv.exdf, create exdf object information file. example, CSV file created last command can read follows: Writing exdf CSV file reading preserves information, including categories, units, column names. , exdf_4 identical exdf_3.","code":"write.csv.exdf(exdf_3, file = 'ball_berry_1.csv') exdf_4 <- read.csv.exdf('ball_berry_1.csv')"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/working_with_extended_data_frames.html","id":"extracting-information-from-extended-data-frames","dir":"Articles > Web_only","previous_headings":"","what":"Extracting Information from Extended Data Frames","title":"Working With Extended Data Frames","text":"three main ways extract information extended data frame: “top-level” elements main_data units can directly accessed. Columns subsets main_data element can accessed. extended data frame subset original data can obtained. following sections, demonstrate possibilities. also described help page can accessed within R typing ?extract.exdf.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/working_with_extended_data_frames.html","id":"accessing-top-level-elements","dir":"Articles > Web_only","previous_headings":"Extracting Information from Extended Data Frames","what":"Accessing Top-Level Elements","title":"Working With Extended Data Frames","text":"extended data frame technically just list, “top-level” elements can viewed using names, $, [[. example, top-level elements can retrieved using names: see exdf objects three required elements: main_data, units, categories. exdf_3 “extra” elements automatically created read_gasex_file function. top-level elements accessed name using $ [[ operators:","code":"names(exdf_1) #> [1] \"main_data\"  \"units\"      \"categories\"  names(exdf_3) #>  [1] \"main_data\"         \"units\"             \"categories\"        #>  [4] \"preamble\"          \"data_row\"          \"user_remarks\"      #>  [7] \"file_name\"         \"file_type\"         \"instrument_type\"   #> [10] \"timestamp_colname\" exdf_1$units #>   A B #> 1 m s  exdf_3[['file_name']] #> [1] \"/home/runner/work/_temp/Library/PhotoGEA/extdata/ball_berry_1.xlsx\""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/working_with_extended_data_frames.html","id":"accessing-the-main-data-frame","dir":"Articles > Web_only","previous_headings":"Extracting Information from Extended Data Frames","what":"Accessing The Main Data Frame","title":"Working With Extended Data Frames","text":"colnames [ operator applied exdf object, act directly object’s main_data element. example, following commands equivalent ways access column names exdf_1: Likewise, following commands equivalent ways extract column exdf_1 vector: usually preferable apply functions exdf object rather main_data element since resulting code cleaner.","code":"colnames(exdf_1) #> [1] \"A\" \"B\"  colnames(exdf_1$main_data) #> [1] \"A\" \"B\" exdf_1[, 'A'] #> [1] 3 2 7 9  exdf_1$main_data[, 'A'] #> [1] 3 2 7 9  exdf_1$main_data$A #> [1] 3 2 7 9"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/working_with_extended_data_frames.html","id":"creating-a-subset","dir":"Articles > Web_only","previous_headings":"Extracting Information from Extended Data Frames","what":"Creating a Subset","title":"Working With Extended Data Frames","text":"Sometimes necessary extract subset exdf object. example, may wish extract just rows exdf_1 value column greater 5, keeping columns. can accomplished follows, using syntax nearly identical syntax extracting subset data frame: critical specify return_exdf = TRUE; otherwise, command instead return subset exdf object’s main_data element, discussed Accessing Main Data Frame:","code":"exdf_1[exdf_1[, 'A'] > 5, , return_exdf = TRUE] #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>   A [Cat1] (m) B [Cat2] (s) #> 3            7            1 #> 4            9            8 is.exdf(exdf_1[exdf_1[, 'A'] > 5, , TRUE]) #> [1] TRUE  is.data.frame(exdf_1[exdf_1[, 'A'] > 5, ]) #> [1] TRUE"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/working_with_extended_data_frames.html","id":"modifying-extended-data-frames","dir":"Articles > Web_only","previous_headings":"","what":"Modifying Extended Data Frames","title":"Working With Extended Data Frames","text":"case extracting information, possible modify “top-level” elements exdf object well contents main_data. following sections provide examples types operations.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/working_with_extended_data_frames.html","id":"modifying-top-level-elements","dir":"Articles > Web_only","previous_headings":"Modifying Extended Data Frames","what":"Modifying Top-Level Elements","title":"Working With Extended Data Frames","text":"Top-level elements can added modified using [[<- $<- list. example, change file_name element exdf_3 add new top-level element: can confirm changes:","code":"exdf_3$file_name <- 'new_file_name.xlsx'  exdf_3[['new_element']] <- 5 exdf_3$file_name #> [1] \"new_file_name.xlsx\"  exdf_3$new_element #> [1] 5"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/working_with_extended_data_frames.html","id":"modifying-the-main-data","dir":"Articles > Web_only","previous_headings":"Modifying Extended Data Frames","what":"Modifying the Main Data","title":"Working With Extended Data Frames","text":"contents main_data exdf object can modified using [<- operator. example, add 1 value column exdf_2: also add new column called C: case, units category new column initialized NA: units category new column can modified later document_variables Initializing Default Units Categories. Alternatively, set_variable function can used set value, units, category column extended data frame one step. use function add new column called D units kg category cat4 whose value 20: set_variable function also advanced abilities set separate values column different subsets extended data frame; information, see help menu entry typing ?set_variable. Important note: generally bad idea directly modify main_data can cause problems. example, try adding another new column called E using following code: Now, exdf_2 longer properly defined exdf object E column exdf_2$main_data present exdf_2$units exdf_2$categories. may prevent functions working properly; example, print properly display E column. subtle problem can detected using .exdf consistency_check set TRUE:","code":"exdf_2[, 'A'] <- exdf_2[, 'A'] + 1 exdf_2[, 'C'] <- 7 print(exdf_2) #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>   A [Cat1] (m) B [Cat2] (s) C [NA] (NA) #> 1            4            4           7 #> 2            3            5           7 #> 3            8            1           7 #> 4           10            8           7 exdf_2 <- set_variable(exdf_2, 'D', 'kg', 'cat4', 20)  print(exdf_2) #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>   A [Cat1] (m) B [Cat2] (s) C [NA] (NA) D [cat4] (kg) #> 1            4            4           7            20 #> 2            3            5           7            20 #> 3            8            1           7            20 #> 4           10            8           7            20 exdf_2$main_data$E <- 17 print(exdf_2) #> Error in .subset2(x, i, exact = exact): subscript out of bounds  is.exdf(exdf_2) #> [1] TRUE  is.exdf(exdf_2, TRUE) #> Warning in is.exdf(exdf_2, TRUE): `x$main_data`, `x$units`, and `x$categories` #> must have the same column names #> [1] FALSE"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/working_with_extended_data_frames.html","id":"common-patterns","dir":"Articles > Web_only","previous_headings":"","what":"Common Patterns","title":"Working With Extended Data Frames","text":"explain common ways exdf objects created, modified, otherwise used.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/working_with_extended_data_frames.html","id":"combining-data-from-several-files","dir":"Articles > Web_only","previous_headings":"Common Patterns","what":"Combining Data From Several Files","title":"Working With Extended Data Frames","text":"quite common one data set spread across multiple data files; example, multiple Licors used measure response curves set plants, one data file machine. hand, data much easier process analyze stored single exdf object. Thus, common take following steps script: Define vector file names identify files loaded. Use lapply read_gasex_file load file, producing list exdf objects. Identify common columns using identify_common_columns; words, determine columns present exdf objects. Limit exdf object just common columns using [ operator return_exdf set TRUE. Use rbind combine exdf objects single exdf containing data files. process, steps 3 4 required exdf objects combined rbind different columns. way combining can visualized stacking tables top vertically, makes sense columns. common Licor files differences columns, steps usually necessary. Even files columns, taking steps cause issues, ’s harm always . following image illustrates process visually set three files. Illustration combining multiple tables using identify_common_columns rbind. example, YY ZZ columns present tables, removed tables vertically stacked. following example code accomplishes steps: pattern (files loaded, truncated common columns, combined) found analysis scripts, one Analyzing Ball-Berry Data vignette. Now data files combined one exdf object, ’s easy perform calculations . example, can calculate total pressure, additional gas properties, Ball-Berry index: example, vector files load defined manually typing file names; files can also selected interactively using choose_input_files, choose_input_licor_files, choose_input_tdl_files functions.","code":"# Define a vector of paths to the files we wish to load file_paths <- c(   PhotoGEA_example_file_path('ball_berry_1.xlsx'),   PhotoGEA_example_file_path('ball_berry_2.xlsx') )  # Load each file, storing the result in a list licor_exdf_list <- lapply(file_paths, function(fpath) {read_gasex_file(fpath)})  # Get the names of all columns that are present in all of the Licor files columns_to_keep <- do.call(identify_common_columns, licor_exdf_list)  # Extract just these columns licor_exdf_list <- lapply(licor_exdf_list, function(x) {   x[ , columns_to_keep, TRUE] })  # Use `rbind` to combine all the data licor_data <- do.call(rbind, licor_exdf_list) # Calculate the total pressure in the Licor chamber licor_data <- calculate_total_pressure(licor_data)  # Calculate additional gas properties, including `RHleaf` and `Csurface` licor_data <- calculate_gas_properties(licor_data)  # Calculate the Ball-Berry index licor_data <- calculate_ball_berry_index(licor_data)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/working_with_extended_data_frames.html","id":"processing-multiple-pieces-of-an-extended-data-frame","dir":"Articles > Web_only","previous_headings":"Common Patterns","what":"Processing Multiple Pieces of an Extended Data Frame","title":"Working With Extended Data Frames","text":"common exdf object contain data represents multiple “chunks,” response curves, can located using value one “identifier” columns like event, replicate, species, etc. scenario, often desirable apply function, fitting function, chunk data set. concrete example, licor_data exdf created Combining Data Several Files contains several Ball-Berry curves, fit_ball_berry function applies fitting procedure one curve determine values Ball-Berry parameters. can apply fit_ball_berry curve data simple way? Often easiest route use function. function requires four inputs: exdf object containing multiple “chunks” data. One vectors whose values can used split exdf chunks. function appled chunk. additional arguments passed function. information, split exdf object chunks apply function one. return value list, list element output one function call, applied one chunk. information, access built-help system entry typing ?.exdf. show can used apply Ball-Berry fitting procedure curve licor_data: fit_ball_berry function returns list two exdf objects named fits parameters, return value complicated object: list lists exdf objects; words, nested list. can see structure follows: much easier work information reorganized separately combining fits parameters elements. Fortunately, can easily done consolidate function. function collect second-level elements names combine using rbind: can now see instead nested list, list two exdf objects: common apply consolidate functions line make code concise. Afterwards, elements resulting list can separated make additional analysis easier: pattern (function applied multiple curves using consolidate ) found analysis scripts, one Analyzing Ball-Berry Data vignette. following image illustrates process visually. Illustration processing multiple parts table using consolidate. id column either 1 2, processing function returns list two tables called fits parameters.","code":"by_result <- by(   licor_data,                                          # exdf object   list(licor_data[, 'species'], licor_data[, 'plot']), # identifier columns   fit_ball_berry                                       # function to apply to chunks ) str(by_result, max.level = 2) #> List of 8 #>  $ soybean.1 :List of 2 #>   ..$ parameters: #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':    1 obs. of  81 variables: #>   ..$ fits      : #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':    7 obs. of  255 variables: #>  $ soybean.1a:List of 2 #>   ..$ parameters: #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':    1 obs. of  80 variables: #>   ..$ fits      : #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':    7 obs. of  255 variables: #>  $ soybean.1b:List of 2 #>   ..$ parameters: #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':    1 obs. of  78 variables: #>   ..$ fits      : #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':    7 obs. of  255 variables: #>  $ tobacco.2 :List of 2 #>   ..$ parameters: #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':    1 obs. of  78 variables: #>   ..$ fits      : #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':    7 obs. of  255 variables: #>  $ soybean.5 :List of 2 #>   ..$ parameters: #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':    1 obs. of  78 variables: #>   ..$ fits      : #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':    7 obs. of  255 variables: #>  $ tobacco.5 :List of 2 #>   ..$ parameters: #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':    1 obs. of  80 variables: #>   ..$ fits      : #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':    7 obs. of  255 variables: #>  $ soybean.5a:List of 2 #>   ..$ parameters: #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':    1 obs. of  82 variables: #>   ..$ fits      : #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':    7 obs. of  255 variables: #>  $ soybean.5c:List of 2 #>   ..$ parameters: #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':    1 obs. of  82 variables: #>   ..$ fits      : #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':    7 obs. of  255 variables: consolidate_by_result <- consolidate(by_result) str(consolidate_by_result, max.level = 1) #> List of 2 #>  $ parameters: #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':    8 obs. of  77 variables: #>  $ fits      : #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':    56 obs. of  255 variables: ball_berry_result <- consolidate(by(   licor_data,   list(licor_data[, 'species'], licor_data[, 'plot']),   fit_ball_berry,   'gsw', 'bb_index' ))  ball_berry_fits <- ball_berry_result$fits ball_berry_parameters <- ball_berry_result$parameters"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/working_with_extended_data_frames.html","id":"plotting-data-from-an-extended-data-frame","dir":"Articles > Web_only","previous_headings":"Common Patterns","what":"Plotting Data From an Extended Data Frame","title":"Working With Extended Data Frames","text":"exdf object contains multiple curves, often convenient plot using xyplot function lattice package. plotting tool makes easy put curve panel, group curves identifier event species. case, common pass main_data element exdf object data argument lattice::xyplot since works data frames:  exdf objects include units column, also possible add axis labels. can accomplished using paste0 function, can create character strings values variables. example, create string describing gsw column follows: labels can included plot :  pattern (main_data element exdf object passed lattice::xyplot units element used create informative axis labels) found analysis scripts, one Analyzing Ball-Berry Data vignette.","code":"xyplot(   gsw ~ bb_index | species,   group = plot,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto.key = list(space = 'right'),   grid = TRUE ) paste0('Stomatal conductance to H2O (', licor_data$units$gsw, ')') #> [1] \"Stomatal conductance to H2O (mol m^(-2) s^(-1))\" xyplot(   gsw ~ bb_index | species,   group = plot,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto.key = list(space = 'right'),   grid = TRUE,   xlab = paste0('Ball-Berry index (', licor_data$units$bb_index, ')'),   ylab = paste0('Stomatal conductance to H2O (', licor_data$units$gsw, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/web_only/working_with_extended_data_frames.html","id":"how-to-find-more-information","dir":"Articles > Web_only","previous_headings":"","what":"How To Find More Information","title":"Working With Extended Data Frames","text":"S3 methods defined exdf class can viewed using methods function: However, include functions related exdf class. Others can identified typing ??exdf within R environment. Finally, vignettes PhotoGEA package include many examples exdf objects can created used analyzing photosynthetic gas exchange data.","code":"methods(class = 'exdf') #>  [1] [                        [<-                      as.data.frame            #>  [4] by                       cbind                    check_required_variables #>  [7] consolidate              dim                      dimnames                 #> [10] dimnames<-               document_variables       exclude_outliers         #> [13] factorize_id_column      identifier_columns       identify_common_columns  #> [16] length                   print                    rbind                    #> [19] split                    str                      #> see '?methods' for accessing help and source code"},{"path":"https://eloch216.github.io/PhotoGEA/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edward B. Lochocki. Maintainer, author. Coralie E. Salesse-Smith. Author. Justin M. McGrath. Author. PhotoGEA authors. Copyright holder.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lochocki E, Salesse-Smith C, McGrath J (2025). PhotoGEA: Photosynthetic Gas Exchange Analysis. R package version 1.3.1, https://eloch216.github.io/PhotoGEA/, https://github.com/eloch216/PhotoGEA. Lochocki E, Salesse-Smith C, McGrath J (2025). “PhotoGEA: R Package Closer Fitting Photosynthetic Gas Exchange Data Non-Gaussian Confidence Interval Estimation.” Plant, Cell & Environment. doi:10.1111/pce.15501.","code":"@Manual{,   title = {PhotoGEA: Photosynthetic Gas Exchange Analysis},   author = {Edward B. Lochocki and Coralie E. Salesse-Smith and Justin M. McGrath},   year = {2025},   note = {R package version 1.3.1, https://eloch216.github.io/PhotoGEA/},   url = {https://github.com/eloch216/PhotoGEA}, } @Article{,   author = {Edward B. Lochocki and Coralie E. Salesse-Smith and Justin M. McGrath},   doi = {10.1111/pce.15501},   journal = {Plant, Cell & Environment},   title = {PhotoGEA: An R Package for Closer Fitting of Photosynthetic Gas Exchange Data With Non-Gaussian Confidence Interval Estimation},   year = {2025}, }"},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/index.html","id":"overview","dir":"","previous_headings":"PhotoGEA","what":"Overview","title":"Photosynthetic Gas Exchange Analysis","text":"PhotoGEA (short photosynthetic gas exchange analysis) R package provides suite tools loading, processing, analyzing photosynthetic gas exchange data. See Lochocki, Salesse-Smith, & McGrath (2025) information.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/index.html","id":"installation","dir":"","previous_headings":"PhotoGEA","what":"Installation","title":"Photosynthetic Gas Exchange Analysis","text":"PhotoGEA available CRAN, easiest way install latest release type following within R terminal: See Frequently Asked Questions alternative installation methods.","code":"install.packages('PhotoGEA')"},{"path":"https://eloch216.github.io/PhotoGEA/index.html","id":"usage","dir":"","previous_headings":"PhotoGEA","what":"Usage","title":"Photosynthetic Gas Exchange Analysis","text":"best way learn using PhotoGEA visit PhotoGEA website click Get started link top menu bar. website includes documentation functions data sets included package, well articles describe general features several important use cases.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/index.html","id":"example-scripts","dir":"","previous_headings":"PhotoGEA","what":"Example Scripts","title":"Photosynthetic Gas Exchange Analysis","text":"PhotoGEA Publications page includes links publicly-available analysis scripts used peer-reviewed publications. may useful source ideas. Several example scripts also provided example_scripts directory source code repository. run one scripts, set working directory folder contains local copy script use source command execute code script. guarantees made scripts run machine compatible data, may also useful source ideas.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/index.html","id":"license","dir":"","previous_headings":"PhotoGEA","what":"License","title":"Photosynthetic Gas Exchange Analysis","text":"PhotoGEA R package, documentation, associated example scripts licensed MIT license.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/PhotoGEA.html","id":null,"dir":"Reference","previous_headings":"","what":"The PhotoGEA R package — PhotoGEA","title":"The PhotoGEA R package — PhotoGEA","text":"PhotoGEA (short photosynthetic gas   exchange analysis) R package provides suite   tools loading, processing, analyzing photosynthetic gas exchange data.   See Lochocki, Salesse-Smith, & McGrath (2025) [doi:10.1111/pce.15501 ]   information. best way learn using PhotoGEA visit   PhotoGEA website   click   Get Started   link top menu bar. website includes documentation   functions data sets included package, well articles   describe general features several important use cases.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/PhotoGEA_example_file_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Locate a PhotoGEA example file on your computer — PhotoGEA_example_file_path","title":"Locate a PhotoGEA example file on your computer — PhotoGEA_example_file_path","text":"convenience function locates examples files included PhotoGEA   package (see example_data_files). function intended   use PhotoGEA examples documentation, users need use   analysis scripts.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/PhotoGEA_example_file_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locate a PhotoGEA example file on your computer — PhotoGEA_example_file_path","text":"","code":"PhotoGEA_example_file_path(example_file_name)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/PhotoGEA_example_file_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Locate a PhotoGEA example file on your computer — PhotoGEA_example_file_path","text":"example_file_name name example file included PhotoGEA package.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/PhotoGEA_example_file_path.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Locate a PhotoGEA example file on your computer — PhotoGEA_example_file_path","text":"PhotoGEA package includes several instrument log files use examples   documentation. full list can found article   example_data_files. PhotoGEA installed, example   files stored locally R package directory (  PhotoGEA/extdata subdirectory), generally different   path every computer. PhotoGEA_example_file_path function simply   locates one files returns full file path. loading files analysis, function used.   Instead, either: Directly write absolute file paths Directly write relative file paths Use one convenience functions PhotoGEA select files           via pop-window, choose_input_licor_files directly writing relative file paths, consider using   file.path function base R, ensure paths   properly formatted operating system. example, instead   writing 'Documents\\file.xlsx', write   file.path('Documents', 'file.xlsx'). make easier   share analysis scripts people may using different   operating systems.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/PhotoGEA_example_file_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locate a PhotoGEA example file on your computer — PhotoGEA_example_file_path","text":"full path PhotoGEA example file.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/PhotoGEA_example_file_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Locate a PhotoGEA example file on your computer — PhotoGEA_example_file_path","text":"","code":"PhotoGEA_example_file_path('c3_aci_1.xlsx') #> [1] \"/home/runner/work/_temp/Library/PhotoGEA/extdata/c3_aci_1.xlsx\""},{"path":"https://eloch216.github.io/PhotoGEA/reference/apply_gm.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate CO2 concentration in the chloroplast or mesophyll — apply_gm","title":"Calculate CO2 concentration in the chloroplast or mesophyll — apply_gm","text":"Calculates CO2 concentration chloroplast mesophyll, CO2 drawdown   across stomata, CO2 drawdown across mesophyll. function   can accomodate alternative column names variables taken Licor   file case change point future. function also   checks units required column produce error   units incorrect.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/apply_gm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate CO2 concentration in the chloroplast or mesophyll — apply_gm","text":"","code":"apply_gm(     exdf_obj,     gmc_at_25 = '',     photosynthesis_type = 'C3',     calculate_drawdown = TRUE,     a_column_name = 'A',     ca_column_name = 'Ca',     ci_column_name = 'Ci',     gmc_norm_column_name = 'gmc_norm',     total_pressure_column_name = 'total_pressure',     perform_checks = TRUE,     return_exdf = TRUE   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/apply_gm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate CO2 concentration in the chloroplast or mesophyll — apply_gm","text":"exdf_obj exdf object, typically representing data Licor gas exchange     measurement system. gmc_at_25 mesophyll conductance CO2 diffusion 25 degrees C, expressed     mol m^(-2) s^(-1) bar^(-1). absence reliable     information, gmc_at_25 often assumed infinitely large.     gmc_at_25 number, must column     exdf_obj called gmc_at_25 appropriate units. numeric     value supplied overwrite values gmc_at_25     column exdf_obj exists. photosynthesis_type string indicating type photosynthesis considered (either     'C3' 'C4'). calculate_drawdown logical value indicating whether calculate drawdown values. a_column_name name column exdf_obj contains net     assimilation micromol m^(-2) s^(-1). ca_column_name name column exdf_obj contains ambient CO2     concentration chamber micromol mol^(-1). ci_column_name name column exdf_obj contains intercellular     CO2 concentration micromol mol^(-1). gmc_norm_column_name name column exdf_obj contains normalized     mesophyll conductance values (units     normalized gmc 25 degrees C). total_pressure_column_name name column exdf_obj contains total pressure     bar. perform_checks logical value indicating whether check units required columns.     almost always TRUE. option disable checks     intended used fit_c3_aci calls     function, since performing checks many times repeatedly slows     fitting procedure. return_exdf logical value indicating whether return exdf object.     almost always TRUE. option return vector mainly     intended used  fit_c3_aci calls function,     since creating exdf object return slow fitting     procedure.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/apply_gm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate CO2 concentration in the chloroplast or mesophyll — apply_gm","text":"C3 plant, mesophyll conductance CO2 (gmc) said   conductance satisfying following one-dimensional flux-conductance   equation: (1) = gmc * (PCi - PCc) net CO2 assimilation rate, PCi partial   pressure CO2 intercellular spaces, PCc partial   pressure CO2 chloroplast.  key underlying assumption   equation flow CO2 reached steady state; case,   flow across stomata equal flow across mesophyll. equation can rearranged calculate PCc: (2) PCc = PCi - / gmc version equation can found many places, example,   Equation 4 Sharkey et al. \"Fitting photosynthetic carbon dioxide response   curves C3 leaves\" Plant, Cell & Environment 30, 1035–1040 (2007)   [doi:10.1111/j.1365-3040.2007.01710.x ]. common express partial pressures microbar   assimilation rate micromol m^(-2) s^(-1); case, units   mesophyll conductance become mol m^(-2) s^(-1) bar^(-1). Licor measurement systems provide CO2 levels relative concentrations   units parts per million (ppm), equivalently,   micromol mol^(-1). Concentrations partial pressures related   total gas pressure according : (3) partial_pressure = total_pressure * relative_concentration Thus, also possible calculate CO2 concentration   choloroplast (Cc) using following equation: (4) Cc = Ci - / (gmc * P) Ci intercellular CO2 concentration P   total pressure. function, Equation (4) used calculate Cc,   total pressure given sum atmospheric pressure   chamber overpressure. plant photosynthesizing, draws CO2 chloroplasts,   flow driven concentration gradient. words, CO2 flows   ambient air across stomata intercellular spaces   across mesophyll chloroplast, decrease CO2   concentration step. Sometimes useful calculate changes,   usually referred \"CO2 drawdown\" values. , addition   Ci, function (optionally) calculates drawdown CO2 across   stomata (drawndown_cs = Ca - Ci) drawdown CO2 across   mesophyll (drawdown_cm = Ci - Cc). _Note_: mesophyll conductance specified typical Licor files,   usually must added using set_variable calling   apply_gm. C4 plant, mesophyll conductance instead refers conductance   associated flow CO2 intercellular spaces   mesophyll (rather chloroplast). case, equations   just require small modification Pcc Cc   replaced PCm Cm, partial pressure concentration   CO2 mesophyll.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/apply_gm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate CO2 concentration in the chloroplast or mesophyll — apply_gm","text":"return value depends value return_exdf: return_exdf TRUE, return value           exdf object based exdf_obj following           columns, calculated described : Pci Ci           (C3 plants) PCm Cm (C4 plants),           drawndown_s, drawdown_cm. category           new columns apply_gm indicate           created using function. return_exdf FALSE, return value list           single named element (internal_c), contains values           Cc Cm numeric vector.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/apply_gm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate CO2 concentration in the chloroplast or mesophyll — apply_gm","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('ball_berry_1.xlsx') )  # Calculate the total pressure in the Licor chamber licor_file <- calculate_total_pressure(licor_file)  # Calculate temperature-dependent parameter values, including gmc_norm licor_file <- calculate_temperature_response(licor_file, c3_temperature_param_sharkey)  # Calculate Cc and drawdowns assuming a mesophyll conductance of # 1 mol / m^2 / s / bar at 25 degrees C licor_file <- apply_gm(licor_file, 1)  licor_file$units$Cc      # View the units of the new `Cc` column #> [1] \"micromol mol^(-1)\" licor_file$categories$Cc # View the category of the new `Cc` column #> [1] \"apply_gm\" licor_file[, 'Cc']       # View the values of the new `Cc` column #>  [1] 227.9750 264.4588 238.0217 214.3254 266.2391 289.8527 348.1129 284.2256 #>  [9] 289.2213 285.1018 324.0571 295.4103 313.8207 344.2157 256.2342 295.6076 #> [17] 303.3559 294.7550 328.8761 247.5899 326.4344 218.9675 229.7293 245.0303 #> [25] 276.8719 310.5874 304.1105 250.1419"},{"path":"https://eloch216.github.io/PhotoGEA/reference/as.data.frame.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an exdf object to a data frame — as.data.frame.exdf","title":"Convert an exdf object to a data frame — as.data.frame.exdf","text":"Converts exdf object data frame appending units   categories top column exdf object's   main_data data frame. Typically function used displaying   contents exdf object; fact, used internally   View, write.csv, functions. main_data   exdf object x can accessed directly (without including   units categories first row) via x[['main_data']]   list element.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/as.data.frame.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an exdf object to a data frame — as.data.frame.exdf","text":"","code":"# S3 method for class 'exdf' as.data.frame(x, ...)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/as.data.frame.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an exdf object to a data frame — as.data.frame.exdf","text":"x exdf object. ... Unused.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/as.data.frame.exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an exdf object to a data frame — as.data.frame.exdf","text":"data frame formed x.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/as.data.frame.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an exdf object to a data frame — as.data.frame.exdf","text":"","code":"simple_exdf <- exdf(data.frame(A = 1), data.frame(A = 'u'), data.frame(A = 'c')) as.data.frame(simple_exdf) # Includes units and categories in the first rows #>   A #> 1 c #> 2 u #> 3 1 simple_exdf[['main_data']] # Just returns the main data #>   A #> 1 1"},{"path":"https://eloch216.github.io/PhotoGEA/reference/barchart_with_errorbars.html","id":null,"dir":"Reference","previous_headings":"","what":"Barcharts with error bars — barchart_with_errorbars","title":"Barcharts with error bars — barchart_with_errorbars","text":"barchart_with_errorbars wrapper lattice::barchart   includes error bars chart, bwplot_wrapper simple   wrapper lattice::bwplot gives function signature   barchart_with_errorbars.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/barchart_with_errorbars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Barcharts with error bars — barchart_with_errorbars","text":"","code":"barchart_with_errorbars(     Y,     X,     eb_width = 0.2,     eb_lwd = 1,     eb_col = 'black',     na.rm = TRUE,     remove_outliers = FALSE,     ...   )    bwplot_wrapper(Y, X, ...)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/barchart_with_errorbars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Barcharts with error bars — barchart_with_errorbars","text":"Y numeric vector. X vector length Y can used factor     split Y one distinct subsets. eb_width width error bars. eb_lwd line width (thickness) error bars. eb_col color error bars. na.rm logical value indicating whether remove NA values     calculating means standard errors. remove_outliers logical value indicating whether remove outliers using     exclude_outliers calculating means standard errors. ... Additional arguments passed lattice::barchart     lattice::bwplot.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/barchart_with_errorbars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Barcharts with error bars — barchart_with_errorbars","text":"barchart_with_errorbars function uses tapply   calculate mean standard error subset Y   determined values X. words, means <-   tapply(Y, X, mean), similar standard errors. mean values   represented bars final plot, standard error used   create error bars located mean +/- standard_error. bwplot_wrapper function simple wrapper   lattice::bwplot gives input arguments   barchart_with_errorbars. words, X Y   vectors can used create barchart using barchart_with_errorbars   box-whisker plot bwplot_wrapper.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/barchart_with_errorbars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Barcharts with error bars — barchart_with_errorbars","text":"trellis object created lattice::barchart   lattice::bwplot.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/barchart_with_errorbars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Barcharts with error bars — barchart_with_errorbars","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('ball_berry_1.xlsx') )  # Plot the average assimilation value for each species. (Note: this is not a # meaningful calculation since we are combining assimilation values measured # at different PPFD.) barchart_with_errorbars(   licor_file[, 'A'],   licor_file[, 'species'],   ylim = c(0, 50),   xlab = 'Species',   ylab = paste0('Net assimilation (', licor_file$units$A, ')') )   # Make a box-whisker plot using the same data. (Note: this is not a meaningful # plot since we are combining assimilation values measured at different PPFD.) bwplot_wrapper(   licor_file[, 'A'],   licor_file[, 'species'],   ylim = c(0, 50),   xlab = 'Species',   ylab = paste0('Net assimilation (', licor_file$units$A, ')') )   # Another way to create the plots. This method illustrates the utility of the # bwplot_wrapper function. plot_parameters <- list(   Y = licor_file[, 'A'],   X = licor_file[, 'species'],   ylim = c(0, 50),   xlab = 'Species',   ylab = paste0('Net assimilation (', licor_file$units$A, ')') ) do.call(barchart_with_errorbars, plot_parameters)  do.call(bwplot_wrapper, plot_parameters)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/basic_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate basic stats (mean and standard error) — basic_stats","title":"Calculate basic stats (mean and standard error) — basic_stats","text":"Calculates basic stats (mean standard error) applicable column   exdf object split according values one   identifier columns.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/basic_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate basic stats (mean and standard error) — basic_stats","text":"","code":"basic_stats(     exdf_obj,     identifier_columns,     na.rm = TRUE   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/basic_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate basic stats (mean and standard error) — basic_stats","text":"exdf_obj exdf object. identifier_columns name(s) one columns vector list can used     split exdf_obj chunks. na.rm logical value indicating whether remove NA values     calculating means standard errors.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/basic_stats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate basic stats (mean and standard error) — basic_stats","text":"function first splits exdf_obj chunks according   values identifier_columns. chunk, columns   single unique value identified excluded statistical   calculations. remaining numeric columns, mean standard error   calculated.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/basic_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate basic stats (mean and standard error) — basic_stats","text":"exdf object including mean standard error   applicable column, row represents one value   identifier_columns. column names determined appending   '_avg' '_stderr' original names.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/basic_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate basic stats (mean and standard error) — basic_stats","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('ball_berry_1.xlsx') )  # Calculate the average assimilation and stomatal conductance values for each # species. (Note: this is not a meaningful calculation!) basic_stats(   licor_file[ , c('species', 'K', 'A', 'gsw'), TRUE],   'species' ) #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>   species [UserDefCon] (NA) K [Const] (NA) #> 1                   soybean            0.5 #> 2                   tobacco            0.5 #>   A_avg [GasEx] (micromol m^(-2) s^(-1)) #> 1                               23.82305 #> 2                               17.95311 #>   A_stderr [GasEx] (micromol m^(-2) s^(-1)) gsw_avg [GasEx] (mol m^(-2) s^(-1)) #> 1                                  2.470260                           0.4043737 #> 2                                  3.026751                           0.2192409 #>   gsw_stderr [GasEx] (mol m^(-2) s^(-1)) #> 1                             0.04320554 #> 2                             0.02502419"},{"path":"https://eloch216.github.io/PhotoGEA/reference/by.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to an exdf object split by one or more factors — by.exdf","title":"Apply a function to an exdf object split by one or more factors — by.exdf","text":"Divides exdf object groups defined one factors   applies function group.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/by.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to an exdf object split by one or more factors — by.exdf","text":"","code":"# S3 method for class 'exdf' by(data, INDICES, FUN, ...)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/by.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function to an exdf object split by one or more factors — by.exdf","text":"data exdf object. INDICES factor list factors. FUN function whose first input argument exdf object. ... Additional arguments passed FUN.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/by.exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function to an exdf object split by one or more factors — by.exdf","text":"Splits data chunks x values INDICES   calls FUN(x, ...) chunk; returns list   element output call FUN.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/by.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function to an exdf object split by one or more factors — by.exdf","text":"","code":"# Read a Licor file, split it into chunks according to the `species` column, # and count the number of measurements for each species licor_file <- read_gasex_file(   PhotoGEA_example_file_path('ball_berry_1.xlsx') )  by(licor_file, licor_file[, 'species'], nrow) #> $soybean #> [1] 21 #>  #> $tobacco #> [1] 7 #>"},{"path":"https://eloch216.github.io/PhotoGEA/reference/c3_temperature_param_bernacchi.html","id":null,"dir":"Reference","previous_headings":"","what":"C3 temperature response parameters from Bernacchi et al. — c3_temperature_param_bernacchi","title":"C3 temperature response parameters from Bernacchi et al. — c3_temperature_param_bernacchi","text":"Parameters describing temperature response important C3 photosynthetic   parameters, intended passed   calculate_temperature_response function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/c3_temperature_param_bernacchi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"C3 temperature response parameters from Bernacchi et al. — c3_temperature_param_bernacchi","text":"","code":"c3_temperature_param_bernacchi"},{"path":"https://eloch216.github.io/PhotoGEA/reference/c3_temperature_param_bernacchi.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"C3 temperature response parameters from Bernacchi et al. — c3_temperature_param_bernacchi","text":"List 12 named elements represent variable whose   temperature-dependent value can calculated using Arrhenius equation,   Johnson-Eyring-Williams equation, polynomial equation: Gamma_star_at_25: value chloroplastic CO2 concentration           CO2 gains Rubisco carboxylation exactly balanced           CO2 losses Rubisco oxygenation (Gamma_star) 25           degrees C. Gamma_star_norm: Gamma_star normalized value           25 degrees C. gmc_norm: mesophyll conductance CO2 diffusion           (gmc) normalized value 25 degrees C. J_norm: electron transport rate (J) normalized           value 25 degrees C. Kc_at_25: Michaelis-Menten constant rubisco           carboxylation (Kc) 25 degrees C. Kc_norm: Kc normalized value 25 degrees C. Ko_at_25: Michaelis-Menten constant rubisco oxygenation           (Ko) 25 degrees C. Ko_norm: Ko normalized value 25 degrees C. RL_norm: rate non-photorespiratory CO2 release           light (RL) normalized value 25 degrees C. Tp_norm: maximum rate triose phosphate utilization           (Tp) normalized value 25 degrees C. Vcmax_norm: maximum rate rubisco carboxylation           (Vcmax) normalized value 25 degrees C. Vomax_norm: maximum rate rubisco oxygenation           (Vomax) normalized Vcmax 25 degrees C. turn, elements list least 2 named elements: type: type temperature response units: units corresponding variable.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/c3_temperature_param_bernacchi.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"C3 temperature response parameters from Bernacchi et al. — c3_temperature_param_bernacchi","text":"Many parameters normalized values 25 degrees C.   Vomax normalized value Vcmax 25 degrees C.   variables include _norm names indicate . Arrhenius parameters J obtained Bernacchi et al. (2003).   , use values determined chlorophyll fluorescence measured   plants grown 25 degrees C (Table 1). Although Bernacchi et al. (2003)   reports values Jmax, assume Jmax   light-dependent values J follow temperature response   function refer J compatibility   c3_temperature_param_sharkey. Johnson-Eyring-Williams parameters gmc obtained Bernacchi   et al. (2002). Bernacchi papers early 2000s specify temperature   response Tp, instead use Johnson-Eyring-Williams   response Sharkey et al. (2007). Another option use flat   temperature response; words, assume Tp constant   temperature. done following code, takes   flat response parameters c3_temperature_param_flat:   within(c3_temperature_param_bernacchi, {Tp_norm = c3_temperature_param_flat$Tp_norm}) Arrhenius parameters variables obtained Bernacchi   et al. (2001). References:  Bernacchi, C. J., Singsaas, E. L., Pimentel, C., Jr, . R. P. & Long,           S. P. \"Improved temperature response functions models           Rubisco-limited photosynthesis\" Plant, Cell & Environment 24, 253–259           (2001) [doi:10.1111/j.1365-3040.2001.00668.x ]. Bernacchi, C. J., Portis, . R., Nakano, H., von Caemmerer, S. & Long,           S. P. \"Temperature Response Mesophyll Conductance. Implications           Determination Rubisco Enzyme Kinetics Limitations           Photosynthesis Vivo\" Plant Physiology 130, 1992–1998 (2002)           [doi:10.1104/pp.008250 ]. Bernacchi, C. J., Pimentel, C. & Long, S. P. \"vivo temperature           response functions parameters required model RuBP-limited           photosynthesis\" Plant, Cell & Environment 26, 1419–1430 (2003)           [doi:10.1046/j.0016-8025.2003.01050.x ]. Sharkey, T. D., Bernacchi, C. J., Farquhar, G. D. & Singsaas, E. L.           \"Fitting photosynthetic carbon dioxide response curves C3 leaves\"           Plant, Cell & Environment 30, 1035–1040 (2007)           [doi:10.1111/j.1365-3040.2007.01710.x ].","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/c3_temperature_param_flat.html","id":null,"dir":"Reference","previous_headings":"","what":"C3 temperature response parameters for a flat response — c3_temperature_param_flat","title":"C3 temperature response parameters for a flat response — c3_temperature_param_flat","text":"Parameters specify flat temperature response (words,   dependence temperature) important C3 photosynthetic parameters,   intended passed calculate_temperature_response   function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/c3_temperature_param_flat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"C3 temperature response parameters for a flat response — c3_temperature_param_flat","text":"","code":"c3_temperature_param_flat"},{"path":"https://eloch216.github.io/PhotoGEA/reference/c3_temperature_param_flat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"C3 temperature response parameters for a flat response — c3_temperature_param_flat","text":"List 11 named elements represent variable whose   temperature-dependent value can calculated using Arrhenius equation   polynomial equation: Gamma_star_at_25: value chloroplastic CO2 concentration           CO2 gains Rubisco carboxylation exactly balanced           CO2 losses Rubisco oxygenation (Gamma_star) 25           degrees C. Gamma_star_norm: Gamma_star normalized value           25 degrees C. gmc_norm: mesophyll conductance CO2 diffusion           (gmc) normalized value 25 degrees C. J_norm: electron transport rate (J) normalized           value 25 degrees C. Kc_at_25: Michaelis-Menten constant rubisco           carboxylation (Kc) 25 degrees C. Kc_norm: Kc normalized value 25 degrees C. Ko_at_25: Michaelis-Menten constant rubisco oxygenation           (Ko) 25 degrees C. Ko_norm: Ko normalized value 25 degrees C. RL_norm: rate non-photorespiratory CO2 release           light (RL) normalized value 25 degrees C. Tp_norm: maximum rate triose phosphate utilization           (Tp) normalized value 25 degrees C. Vcmax_norm: maximum rate rubisco carboxylation           (Vcmax) normalized value 25 degrees C. turn, elements list least 2 named elements: type: type temperature response units: units corresponding variable.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/c3_temperature_param_flat.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"C3 temperature response parameters for a flat response — c3_temperature_param_flat","text":"Many parameters normalized values 25 degrees C.   variables include _norm names indicate . , activation energy values (Ea) set 0, means   values depend temperature. parameters specified   25 degrees C; values obtained Sharkey et al. (2007). (See   c3_temperature_param_sharkey.) References:  Sharkey, T. D., Bernacchi, C. J., Farquhar, G. D. & Singsaas, E. L.           \"Fitting photosynthetic carbon dioxide response curves C3 leaves\"           Plant, Cell & Environment 30, 1035–1040 (2007)           [doi:10.1111/j.1365-3040.2007.01710.x ].","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/c3_temperature_param_sharkey.html","id":null,"dir":"Reference","previous_headings":"","what":"C3 temperature response parameters from Sharkey et al. — c3_temperature_param_sharkey","title":"C3 temperature response parameters from Sharkey et al. — c3_temperature_param_sharkey","text":"Parameters describing temperature response important C3 photosynthetic   parameters, intended passed   calculate_temperature_response function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/c3_temperature_param_sharkey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"C3 temperature response parameters from Sharkey et al. — c3_temperature_param_sharkey","text":"","code":"c3_temperature_param_sharkey"},{"path":"https://eloch216.github.io/PhotoGEA/reference/c3_temperature_param_sharkey.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"C3 temperature response parameters from Sharkey et al. — c3_temperature_param_sharkey","text":"List 11 named elements represent variable whose   temperature-dependent value can calculated using Arrhenius equation   polynomial equation: Gamma_star_at_25: value chloroplastic CO2 concentration           CO2 gains Rubisco carboxylation exactly balanced           CO2 losses Rubisco oxygenation (Gamma_star) 25           degrees C. Gamma_star_norm: Gamma_star normalized value           25 degrees C. gmc_norm: mesophyll conductance CO2 diffusion           (gmc) normalized value 25 degrees C. J_norm: electron transport rate (J) normalized           value 25 degrees C. Kc_at_25: Michaelis-Menten constant rubisco           carboxylation (Kc) 25 degrees C. Kc_norm: Kc normalized value 25 degrees C. Ko_at_25: Michaelis-Menten constant rubisco oxygenation           (Ko) 25 degrees C. Ko_norm: Ko normalized value 25 degrees C. RL_norm: rate non-photorespiratory CO2 release           light (RL) normalized value 25 degrees C. Tp_norm: maximum rate triose phosphate utilization           (Tp) normalized value 25 degrees C. Vcmax_norm: maximum rate rubisco carboxylation           (Vcmax) normalized value 25 degrees C. turn, elements list least 2 named elements: type: type temperature response units: units corresponding variable.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/c3_temperature_param_sharkey.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"C3 temperature response parameters from Sharkey et al. — c3_temperature_param_sharkey","text":"Many parameters normalized values 25 degrees C.   variables include _norm names indicate . Response parameters obtained Sharkey et al. (2007).   publication, gas concentrations expressed partial pressures (  Pa kPa) rather mole fractions (micromol / mol   mmol / mol). However, consistency   c3_temperature_param_bernacchi, prefer use mole   fractions. convert concentration expressed partial pressure (P;   Pa) concentration expressed mole fraction (C;   micromol / mol), need value atmospheric pressure; use   typical value 101325 Pa. C = P / 101325 * 1e6   C = P * cf, cf = 1e6 / 101325 conversion factor.   correction can used convert kPa mmol / mol.   value cf can accessed using PhotoGEA:::c_pa_to_ppm. References:  Sharkey, T. D., Bernacchi, C. J., Farquhar, G. D. & Singsaas, E. L.           \"Fitting photosynthetic carbon dioxide response curves C3 leaves\"           Plant, Cell & Environment 30, 1035–1040 (2007)           [doi:10.1111/j.1365-3040.2007.01710.x ].","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/c4_temperature_param_flat.html","id":null,"dir":"Reference","previous_headings":"","what":"C4 temperature response parameters for a flat response — c4_temperature_param_flat","title":"C4 temperature response parameters for a flat response — c4_temperature_param_flat","text":"Parameters specify flat temperature response (words,   dependence temperature) important C4 photosynthetic parameters,   intended passed calculate_temperature_response   function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/c4_temperature_param_flat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"C4 temperature response parameters for a flat response — c4_temperature_param_flat","text":"","code":"c4_temperature_param_flat"},{"path":"https://eloch216.github.io/PhotoGEA/reference/c4_temperature_param_flat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"C4 temperature response parameters for a flat response — c4_temperature_param_flat","text":"List 10 named elements represent variable whose   temperature-dependent value can calculated using either Arrhenius   Gaussian equation: Vcmax_norm: maximum rate rubisco carboxylation           (Vcmax) normalized value 25 degrees C. Vpmax_norm: maximum rate PEP carboxylase activity           (Vpmax) normalized value 25 degrees C. RL_norm: respiration rate (RL) normalized           value Vcmax 25 degrees C. Kc: Michaelis-Menten constant rubisco carboxylation. Ko: Michaelis-Menten constant rubisco oxygenation. Kp: Michaelis-Menten constant PEP carboxylase. gamma_star: Half reciprocal rubisco specificity. ao: ratio solubility diffusivity O2 CO2. gmc_norm: mesophyll conductance CO2 diffusion normalized           value 25 degrees C. J_norm: electron transport rate J normalized           value 25 degrees C. list 4 named elements: type: type temperature response ('Arrhenius') c: (dimensionless) Arrhenius scaling factor. Ea: activation energy kJ / mol. units: units corresponding variable.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/c4_temperature_param_flat.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"C4 temperature response parameters for a flat response — c4_temperature_param_flat","text":"parameters (Vcmax, Vpmax, RL, gmc,   J) normalized values 25 degrees C.   variables include _norm names indicate . remaining parameters (Kc, Ko, Kp, gamma_star,   ao, gmc) normalized assumed   vary significantly species. , activation energy values (Ea) set 0, means   values depend temperature. Arrhenius scaling factors   c chosen reproduce parameter values 25 degrees C   specified von Caemmerer (2021).   (See c4_temperature_param_vc.) References:  von Caemmerer, S. \"Updating steady-state model C4           photosynthesis\" Journal Experimental Botany 72, 6003–6017 (2021)           [doi:10.1093/jxb/erab266 ].","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/c4_temperature_param_vc.html","id":null,"dir":"Reference","previous_headings":"","what":"C4 temperature response parameters from von Caemmerer — c4_temperature_param_vc","title":"C4 temperature response parameters from von Caemmerer — c4_temperature_param_vc","text":"Temperature response parameters describing temperature response   important C4 photosynthetic parameters, intended passed   calculate_temperature_response function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/c4_temperature_param_vc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"C4 temperature response parameters from von Caemmerer — c4_temperature_param_vc","text":"","code":"c4_temperature_param_vc"},{"path":"https://eloch216.github.io/PhotoGEA/reference/c4_temperature_param_vc.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"C4 temperature response parameters from von Caemmerer — c4_temperature_param_vc","text":"List 10 named elements represent variable whose   temperature-dependent value can calculated using either Arrhenius   Gaussian equation: Vcmax_norm: maximum rate rubisco carboxylation           (Vcmax) normalized value 25 degrees C. Vpmax_norm: maximum rate PEP carboxylase activity           (Vpmax) normalized value 25 degrees C. RL_norm: respiration rate (RL) normalized           value Vcmax 25 degrees C. Kc: Michaelis-Menten constant rubisco carboxylation. Ko: Michaelis-Menten constant rubisco oxygenation. Kp: Michaelis-Menten constant PEP carboxylase. gamma_star: Half reciprocal rubisco specificity. ao: ratio solubility diffusivity O2 CO2. gmc_norm: mesophyll conductance CO2 diffusion normalized           value 25 degrees C. J_norm: electron transport rate J normalized           value 25 degrees C. J_norm parameter calculated using Gaussian function   hence corresponding list element list 4 named elements: type: type temperature response ('Gaussian') optimum_rate: largest value parameter can take. t_opt: temperature optimum occurs           degrees C. sigma: width Gaussian degrees C. units: units corresponding variable. remaining elements list 4 named elements: type: type temperature response ('Arrhenius') c: (dimensionless) Arrhenius scaling factor. Ea: activation energy kJ / mol. units: units corresponding variable.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/c4_temperature_param_vc.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"C4 temperature response parameters from von Caemmerer — c4_temperature_param_vc","text":"parameters (Vcmax, Vpmax, RL, gmc,   J) normalized values 25 degrees C.   variables include _norm names indicate . remaining parameters (Kc, Ko, Kp, gamma_star,   ao) normalized assumed vary   significantly species. , Arrhenius scaling factors (c; dimensionless) activation   energy values (Ea; kJ / mol) obtained von Caemmerer (2021).   publication, overall scaling parameter specified   value 25 degrees C; scaling factors determined   information described documentation   calculate_temperature_response_arrhenius. Gaussian parameters (t_opt sigma) J_norm   also obtained von Caemmerer (2021), assuming J   Jmax follow temperature response. value   optimum_rate chosen J_norm equal 1   temperature 25 degrees C. References:  von Caemmerer, S. \"Updating steady-state model C4           photosynthesis\" Journal Experimental Botany 72, 6003–6017 (2021)           [doi:10.1093/jxb/erab266 ].","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_ball_berry_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Ball-Berry index — calculate_ball_berry_index","title":"Calculate the Ball-Berry index — calculate_ball_berry_index","text":"Calculates Ball-Berry index. function can accomodate alternative   column names variables taken Licor file case change   point future. function also checks units   required column produce error units incorrect.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_ball_berry_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Ball-Berry index — calculate_ball_berry_index","text":"","code":"calculate_ball_berry_index(     data_table,     a_column_name = 'A',     rhleaf_column_name = 'RHleaf',     csurface_column_name = 'Csurface'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_ball_berry_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Ball-Berry index — calculate_ball_berry_index","text":"data_table table-like R object data frame exdf. a_column_name name column data_table contains net     assimilation micromol m^(-2) s^(-1). rhleaf_column_name name column data_table contains relative     humidity leaf surface %. csurface_column_name name column data_table contains CO2     concentration leaf surface micromol mol^(-1).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_ball_berry_index.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the Ball-Berry index — calculate_ball_berry_index","text":"Ball-Berry index defined * h_s / c_s,   net assimilation rate, h_s relative humidity   leaf surface, c_s CO2 concentration leaf   surface. variable key part Ball-Berry model, assumes   stomatal conductance linearly related Ball-Berry index.   information, please see original publication describing model:   Ball, J. T., Woodrow, . E. Berry, J. . \"Model Predicting Stomatal   Conductance Contribution Control Photosynthesis   Different Environmental Conditions.\" \"Progress Photosynthesis Research:   Volume 4\" (1986) [doi:10.1007/978-94-017-0519-6_48 ]. Typically, relative humidity CO2 concentration leaf surface   included Licor output files. Instead, output files include   relative humidity CO2 concentration sample chamber, conditions   leaf surface may slightly different. required inputs can   calculated using calculate_gas_properties function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_ball_berry_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Ball-Berry index — calculate_ball_berry_index","text":"object based data_table includes Ball-Berry index   new column called bb_index. data_table exdf object, category new column   calculate_ball_berry_index indicate created   using function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_ball_berry_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Ball-Berry index — calculate_ball_berry_index","text":"","code":"# Read an example Licor file included in the PhotoGEA package, calculate the # total pressure, calculate additional gas properties, and finally calculate the # Ball-Berry index. licor_file <- read_gasex_file(   PhotoGEA_example_file_path('ball_berry_1.xlsx') )  licor_file <- calculate_total_pressure(licor_file)  licor_file <- calculate_gas_properties(licor_file)  licor_file <- calculate_ball_berry_index(licor_file)  licor_file$units$bb_index      # View the units of the new `bb_index` column #> [1] \"mol m^(-2) s^(-1)\" licor_file$categories$bb_index # View the category of the new `bb_index` column #> [1] \"calculate_ball_berry_index\" licor_file[,'bb_index']        # View the values of the new `bb_index` column #>  [1] 0.06487443 0.04217299 0.04717440 0.04230129 0.02995968 0.02208180 #>  [7] 0.01020448 0.09725402 0.07554299 0.06709379 0.04710046 0.04354188 #> [13] 0.03356910 0.02099952 0.09939125 0.06184597 0.05190328 0.05356902 #> [19] 0.03397142 0.02811785 0.01762407 0.05661131 0.04955238 0.04342732 #> [25] 0.03150718 0.02329131 0.02336237 0.01465243"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c3_assimilation.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate C3 assimilation rates — calculate_c3_assimilation","title":"Calculate C3 assimilation rates — calculate_c3_assimilation","text":"Calculates C3 assimilation rates based Farquhar-von-Caemmerer-Berry   model. function can accomodate alternative colum names variables   taken Licor files case change point future.   function also checks units required column produce   error units incorrect.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c3_assimilation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate C3 assimilation rates — calculate_c3_assimilation","text":"","code":"calculate_c3_assimilation(     data_table,     alpha_g,     alpha_old,     alpha_s,     alpha_t,     Gamma_star_at_25,     J_at_25,     Kc_at_25,     Ko_at_25,     RL_at_25,     Tp_at_25,     Vcmax_at_25,     Wj_coef_C = 4.0,     Wj_coef_Gamma_star = 8.0,     cc_column_name = 'Cc',     gamma_star_norm_column_name = 'Gamma_star_norm',     j_norm_column_name = 'J_norm',     kc_norm_column_name = 'Kc_norm',     ko_norm_column_name = 'Ko_norm',     oxygen_column_name = 'oxygen',     rl_norm_column_name = 'RL_norm',     total_pressure_column_name = 'total_pressure',     tp_norm_column_name = 'Tp_norm',     vcmax_norm_column_name = 'Vcmax_norm',     hard_constraints = 0,     perform_checks = TRUE,     return_table = TRUE,     ...   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c3_assimilation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate C3 assimilation rates — calculate_c3_assimilation","text":"data_table table-like R object data frame exdf. alpha_g dimensionless parameter 0 <= alpha_g <= 1, representing     proportion glycolate carbon taken photorespiratory pathway     glycine. alpha_g often assumed 0. alpha_g     number, must column data_table called alpha_g     appropriate units. numeric value supplied overwrite     values alpha_g column data_table exists. alpha_old dimensionless parameter 0 <= alpha_old <= 1, representing     fraction remaining glycolate carbon returned chloroplast     accounting carbon released CO2. alpha_old often     assumed 0. alpha_old number, must     column data_table called alpha_old appropriate units.     numeric value supplied overwrite values     alpha_old column data_table exists. alpha_s dimensionless parameter 0 <= alpha_s <= 0.75 * (1 - alpha_g)     representing proportion glycolate carbon taken     photorespiratory pathway serine. alpha_s often assumed 0.     alpha_s number, must column     data_table called alpha_s appropriate units. numeric     value supplied overwrite values alpha_s column     data_table exists. alpha_t dimensionless parameter 0 <= alpha_t <= 1 representing     proportion glycolate carbon taken photorespiratory pathway     CH2-THF. alpha_t often assumed 0. alpha_t     number, must column data_table called alpha_t     appropriate units. numeric value supplied overwrite     values alpha_t column data_table exists. Gamma_star_at_25 chloroplastic CO2 concentration CO2 gains Rubisco     carboxylation exactly balanced CO2 losses Rubisco oxygenation,     25 degrees C, expressed micromol mol^(-1).     Gamma_star_at_25 number, must column     data_table called Gamma_star_at_25 appropriate units.     numeric value supplied overwrite values     Gamma_star_at_25 column data_table exists. J_at_25 electron transport rate 25 degrees C, expressed     micromol m^(-2) s^(-1). Note _not_ Jmax,     general depend incident photosynthetically active flux density.     J_at_25 number, must column     data_table called J_at_25 appropriate units. numeric     value supplied overwrite values J_at_25 column     data_table exists. Kc_at_25 Michaelis-Menten constant Rubisco carboxylation 25 degrees C,     expressed micromol mol^(-1). Kc_at_25 number,     must column data_table called Kc_at_25     appropriate units. numeric value supplied overwrite values     Kc_at_25 column data_table exists. Ko_at_25 Michaelis-Menten constant Rubisco oxygenation 25 degrees C,     expressed mmol mol^(-1). Ko_at_25 number,     must column data_table called Ko_at_25     appropriate units. numeric value supplied overwrite values     Ko_at_25 column data_table exists. RL_at_25 respiration rate 25 degrees C, expressed     micromol m^(-2) s^(-1). RL_at_25 number,     must column data_table called RL_at_25     appropriate units. numeric value supplied overwrite values     RL_at_25 column data_table exists. Tp_at_25 maximum rate triphosphate utilization 25 degrees C, expressed     micromol m^(-2) s^(-1). Tp_at_25 number,     must column data_table called Tp_at_25     appropriate units. numeric value supplied overwrite values     Tp_at_25 column data_table exists. Vcmax_at_25 maximum rate rubisco carboxylation 25 degrees C, expressed     micromol m^(-2) s^(-1). Vcmax_at_25 number,     must column data_table called Vcmax_at_25     appropriate units. numeric value supplied overwrite     values Vcmax_at_25 column data_table exists. Wj_coef_C coefficient equation RuBP-regeneration-limited carboxylation,     whose value depends assumptions NADPH ATP requirements     RuBP regeneration. Wj_coef_Gamma_star coefficient equation RuBP-regeneration-limited carboxylation,     whose value depends assumptions NADPH ATP requirements     RuBP regeneration. cc_column_name name column data_table contains     chloroplastic CO2 concentration micromol mol^(-1). gamma_star_norm_column_name name column data_table contains normalized     Gamma_star values (units     normalized Gamma_star 25 degrees C). j_norm_column_name name column data_table contains normalized     J values (units normalized J 25 degrees C). kc_norm_column_name name column data_table contains normalized     Kc values (units normalized Kc 25 degrees C). ko_norm_column_name name column data_table contains normalized     Ko values (units normalized Ko 25 degrees C). oxygen_column_name name column data_table contains concentration     O2 ambient air, expressed percentage (commonly 21% 2%);     units must percent. rl_norm_column_name name column data_table contains normalized     RL values (units normalized RL 25 degrees C). total_pressure_column_name name column data_table contains total pressure     bar. tp_norm_column_name name column data_table contains normalized     Tp values (units normalized Tp 25 degrees C). vcmax_norm_column_name name column data_table contains normalized     Vcmax values (units     normalized Vcmax 25 degrees C). hard_constraints integer numerical value indicating types hard constraints     place values input parameters; see details. perform_checks logical value indicating whether check units required columns.     almost always TRUE. option disable checks     intended used fit_c3_aci calls     function, since performing checks many times repeatedly slows     fitting procedure. return_table logical value indicating whether return exdf object.     almost always TRUE. option return vector mainly     intended used  fit_c3_aci calls function,     since creating exdf object return slow fitting     procedure. ... Optional arguments; see .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c3_assimilation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate C3 assimilation rates — calculate_c3_assimilation","text":"Busch et al. (2018) Busch (2020) model: function generally follows Farquhar-von-Caemmerer-Berry model   described Busch et al. (2018) Busch (2020) modifications   described . formulation, steady-state net CO2 assimilation   rate calculated according = (1 - Gamma_star_agt / PCc) * Vc - RL, Gamma_star CO2 compensation point absence   non-photorespiratory CO2 release, Gamma_star_agt effective value   Gamma_star accounting glycolate carbon remaining cytosol,   PCc partial pressure CO2 chloroplast, Vc   RuBP carboxylation rate, RL rate non-photorespiratory CO2   release light. Gamma_star_agt given Gamma_star_agt = (1 - alpha_g + 2 * alpha_t) * Gamma_star, alpha_g alpha_t fractions glycolate carbon   leaving photorespiratory pathway glycine CH2-THF, respectively. model considers three potential values Vc correspond   limitations set three different processes: Rubisco activity, RuBP   regeneration, triose phopsphate utilization (TPU). Rubisco-limited   carboxylation rate Wc given Wc = PCc * Vcmax / (PCc + Kc * (1.0 + POc / Ko)), Vcmax maximum rate Rubisco carboxylation, Kc   Michaelis-Menten constant CO2, Ko Michaelis-Menten   constant O2, POc partial pressure O2   chloroplast. RuBP-regeneration-limited carboxylation rate Wj given Wj = PCc * J / (4 * PCc + Gamma_star_agt * (8 + 16 * alpha_g - 8 * alpha_t + 8 * alpha_s)), J potential electron transport rate given light   intensity alpha_s fraction glycolate carbon leaving   photorespiratory pathway serine. TPU-limited carboxylation rate given Wp = PCc * 3 * Tp / (PCc - Gamma_star_agt * (1 + 3 * alpha_g + 6 * alpha_t + 4 * alpha_s)), Tp maximum rate triose phosphate utilization. Note   equation applies PCc > Gamma_star_agt * (1 + 3 * alpha_g   + 6 * alpha_t + 4 * alpha_s); smaller values PCc, TPU   limit RuBP carboxylation rate Wp = Inf. (Lochocki & McGrath,   review). actual carboxylation rate typically chosen smallest   three potential rates: Vc = min{Wc, Wj, Wp}. equations , several variables depend leaf   temperature. particular, leaf-temperature-adjusted values   Gamma_star, J, Kc, Ko, RL, Tp,   Vcmax determined base values 25 degrees C   temperature-dependent multiplicative factor. Also note PCc calculated chloroplastic CO2   concentration Cc using total pressure (ambient pressure + chamber   overpressure). addition carboxylation assimilation rates already mentioned,   also possible calculate net CO2 assimilation rates determined   Rubisco activity, RuBP regeneration, TPU follows: Ac = (1 - Gamma_star_agt / PCc) * Wc - RL Aj = (1 - Gamma_star_agt / PCc) * Wj - RL Ap = (1 - Gamma_star_agt / PCc) * Wp - RL Busch model nitrogen restrictions: Note implementation described currently facilitate   inclusion nitrogen limitations (Equations 15-21 Busch et al.   (2018)). \"old\" model: older version model, alpha_g, alpha_s,   alpha_t replaced single parameter alpha_old.   publications refer simply alpha, follow   notation Busch et al. (2018) clarity. version,   disctinction Gamma_star_agt Gamma_star.   differences described . RuBP-regeneration-limited carboxylation rate Wj given Wj = PCc * J / (Wj_coef_C * PCc + Wj_coef_Gamma_star * Gamma_star), allowed Wj_coef_C Wj_coef_Gamma_star   variables rather taking fixed values (many sources).   necessary descriptions FvCB model use   values, different values due different assumptions   NADPH ATP requirements RuBP regeneration. TPU-limited carboxylation rate given Wp = PCc * 3 * Tp / (PCc - Gamma_star * (1 + 3 * alpha_old)), Note equation applies PCc > Gamma_star * (1 +   3 * alpha_old); smaller values PCc, TPU limit RuBP   carboxylation rate Wp = Inf. (Lochocki & McGrath, review). Using either version model: using calculate_c3_assimilation, possible use either   version model. Setting alpha_g, alpha_s,   alpha_t zero equivalent using older version model,   setting alpha_old = 0 equivalent using newer version   model. alpha parameters zero, effectively   difference two versions model. Attempting set nonzero   alpha_old either alpha_g, alpha_s, alpha_t   nonzero forbidden since represent mix two models;   values passed inputs, error thrown. Hard constraints: input parameters FvCB model hard constraints values   set biochemical physical interpretation; example,   Vcmax negative alpha_g must lie 0 1.   Yet, measurement noise, sometimes necessary use values   outside ranges fitting -Ci curve fit_c3_aci   fit_c3_variable_j. accomodate different potential use   cases, possible selectively apply hard constraints   specifying different values hard_constraints input argument:  hard_constraints = 0: Constraints placed inputs           user-supplied fit, oxygen. hard_constraints = 1: Includes constraints           hard_constraints 0, additional constraint           Cc values must non-negative. hard_constraints = 2: Includes constraints           hard_constraints 1, additional constraints           parameters can fitted. example, Vcmax_at_25 must           non-negative alpha_g must lie 0 1. input values violate specified constraints, error message   thrown. Optional arguments:  use_min_A: input argument called use_min_A           supplied value TRUE, \"minimum assimilation\"           variant FvCB model used. case,           calculated = min{Ac, Aj, Ap}. general, using           variant recommended.used investigate           errors may occur using minimal assimilation rate rather           minimal carboxylation rate. TPU_threshold: input argument called           TPU_threshold supplied numeric value           NULL, TPU limitations allowed values           Cc threshold. threshold used place           values discussed equations . general, using           option recommended. used investigate           errors may occur using fixed TPU threshold. use_FRL: input argument called use_FRL           supplied value TRUE, always           set Ac Cc < Gamma_star_agt. \"forced Rubisco           limitation\" can used along \"minimum assimilation\"           variant (use_min_A = TRUE). consider_depletion: input argument called           consider_depletion supplied value TRUE,           RuBP depletion considered additional potential           limiting process. case, Vc calculated           Vc = min{Wc, Wj, Wp, Wd}, Wd zero           Cc < Gamma_star Inf otherwise. Note value           Wd (Ad = (1 - Gamma_star / PCc) * Wd - RL)           always returned, regardless whether RuBP depletion considered           calculating . References:  Busch, Sage, & Farquhar, G. D. \"Plants increase CO2 uptake           assimilating nitrogen via photorespiratory pathway.\" Nature Plants           4, 46–54 (2018) [doi:10.1038/s41477-017-0065-x ]. Busch \"Photorespiration context Rubisco biochemistry, CO2           diffusion metabolism.\" Plant Journal 101, 919–939 (2020)           [doi:10.1111/tpj.14674 ]. von Caemmerer, S. \"Biochemical Models Leaf Photosynthesis\" (CSIRO           Publishing, 2000) [doi:10.1071/9780643103405 ]. Lochocki & McGrath \"Widely Used Variants           Farquhar-von-Caemmerer-Berry Model Can Cause Errors Parameter           Estimates Simulations.\" submitted.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c3_assimilation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate C3 assimilation rates — calculate_c3_assimilation","text":"return value depends value return_table: return_table TRUE, return value           exdf object following columns, calculated described           : Tp_tl, Vcmax_tl, RL_tl, J_tl,           Ac, Aj, Ap, , Vc, others.           category new columns           calculate_c3_assimilation indicate created           using function. return_table FALSE, return value list           following named elements: , Ac, Aj,           Ap, J_tl. element numeric vector. data_table exdf object, return value   data frame, units categories reported.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c3_assimilation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate C3 assimilation rates — calculate_c3_assimilation","text":"","code":"# Simulate a C3 A-Cc curve with specified leaf temperature and photosynthetic # parameters and plot the net assimilation rate along with the different # enzyme-limited rates inputs <- exdf(data.frame(   Cc = seq(1, 601, by = 6),   Tleaf = 30,   total_pressure = 1,   oxygen = 21 ))  inputs <- document_variables(   inputs,   c('', 'Cc',             'micromol mol^(-1)'),   c('', 'Tleaf',          'degrees C'),   c('', 'total_pressure', 'bar'),   c('', 'oxygen',         'percent') )  inputs <- calculate_temperature_response(inputs, c3_temperature_param_sharkey, 'Tleaf')  assim <- calculate_c3_assimilation(inputs, 0, 0, 0, 0, '', 150, '', '', 1, 12, 120)  lattice::xyplot(   Ac + Aj + Ap + An ~ inputs[, 'Cc'],   data = assim$main_data,   type = 'l',   grid = TRUE,   auto = TRUE,   xlab = paste0('Chloroplast CO2 concentration (', inputs$units$Cc, ')'),   ylab = paste0('Assimilation rate (', assim$units$An, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c3_limitations_grassi.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the relative limiting factors to C3 photosynthesis — calculate_c3_limitations_grassi","title":"Estimate the relative limiting factors to C3 photosynthesis — calculate_c3_limitations_grassi","text":"Uses method Grassi & Magnani (2005) estimate relative   limitations C3 photosynthesis due stomatal conductance, mesophyll   conductance, biochemistry. function can accomodate alternative   column names variables taken data file case change   point future. function also checks units   required column produce error units incorrect.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c3_limitations_grassi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the relative limiting factors to C3 photosynthesis — calculate_c3_limitations_grassi","text":"","code":"calculate_c3_limitations_grassi(     exdf_obj,     Wj_coef_C = 4.0,     Wj_coef_Gamma_star = 8.0,     cc_column_name = 'Cc',     gamma_star_column_name = 'Gamma_star_tl',     gmc_column_name = 'gmc_tl',     gsc_column_name = 'gsc',     kc_column_name = 'Kc_tl',     ko_column_name = 'Ko_tl',     oxygen_column_name = 'oxygen',     total_pressure_column_name = 'total_pressure',     vcmax_column_name = 'Vcmax_tl',     j_column_name = NULL   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c3_limitations_grassi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the relative limiting factors to C3 photosynthesis — calculate_c3_limitations_grassi","text":"exdf_obj exdf object representing gas exchange data. Wj_coef_C coefficient equation RuBP-regeneration-limited carboxylation,     whose value depends assumptions NADPH ATP requirements     RuBP regeneration; see calculate_c3_assimilation     information. Wj_coef_Gamma_star coefficient equation RuBP-regeneration-limited carboxylation,     whose value depends assumptions NADPH ATP requirements     RuBP regeneration; see calculate_c3_assimilation     information. cc_column_name name column exdf_obj contains chloroplastic     CO2 concentration micromol mol^(-1). Typically     values automatically calculated fit_c3_aci. gamma_star_column_name name column exdf_obj contains     Gamma_star values micromol mol^(-1). Typically     leaf-temperature dependent values automatically calculated     fit_c3_aci. gmc_column_name name column exdf_obj contains mesophyll     conductance CO2 mol m^(-2) s^(-1) bar^(-1). Typically     leaf-temperature adjusted values automatically calculated     fit_c3_aci. gsc_column_name name column exdf_obj contains stomatal     conductance CO2 mol m^(-2) s^(-1). Typically column     calculated using calculate_gas_properties. kc_column_name name column exdf_obj contains     Michaelis-Menten constant rubisco carboxylation     micromol mol^(-1). Typically leaf-temperature dependent     values automatically calculated fit_c3_aci. ko_column_name name column exdf_obj contains     Michaelis-Menten constant rubisco oxygenation     mmol mol^(-1). Typically leaf-temperature dependent     values automatically calculated fit_c3_aci. oxygen_column_name name column exdf_obj contains concentration     O2 ambient air, expressed percentage (commonly 21% 2%);     units must percent. total_pressure_column_name name column exdf_obj contains total pressure     bar. Typically calculated using     calculate_total_pressure. vcmax_column_name name column exdf_obj contains values     maximum Rubisco carboxylation rate (Vcmax)     micromol m^(-2) s^(-1). Typically leaf-temperature     adjusted values automatically calculated     fit_c3_aci. j_column_name name column exdf_obj contains values     RuBP regeneration rate (J) micromol m^(-2) s^(-1).     Typically leaf-temperature adjusted values     automatically calculated fit_c3_aci.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c3_limitations_grassi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate the relative limiting factors to C3 photosynthesis — calculate_c3_limitations_grassi","text":"analyzing interpreting C3 gas exchange data, often useful   estimate relative limitations assimilation due stomatal   conductance, mesophyll conductance, biochemistry. can done using   framework first introduced Grassi & Magnani (2005). framework,   relative limitation due stomatal conductance (ls) ls = [(g_t / g_sc) * (dAdC)] / [g_t + dAdC], relative limitation due mesophyll conductance (lm) lm = [(g_t / g_mc) * (dAdC)] / [g_t + dAdC], relative limitation due biochemistry (lb) ln = [g_t] / [g_t + dAdC], g_sc stomatal conductance CO2, g_mc   mesophyll conductance CO2, gt = 1 / (1 / g_mc + 1 / g_sc)   total conductance CO2, dAdC partial derivative   net CO2 assimilation rate () respect chloroplast CO2   concentration (Cc). can found Equation 7 Grassi &   Magnani (2005). equations derived assuming CO2 assimilation limited   Rubisco activity; words, net CO2 assimilation rate given   Ac = Vcmax * (Cc - Gamma_star) / (Cc + Km) - RL, Vcmax maximum Rubisco carboxylation rate,   Gamma_star CO2 compensation point absence day   respiration, RL day respiration rate, Km effective   Michaelis-Menten constant Rubisco carboxylation. turn, Km   given Km = Kc * (1 + O / Ko), Kc   Michaelis-Menten constant carboxylation, Ko Michaelis-Menten   constant oxygenation, O oxygen concentration   chloroplast. assumption, possible analytically determine partial   derivative dAdC: dAdC_rubisco = Vcmax * (Gamma_star + Km) / (Cc + Km)^2 case, limitation due \"biochemistry\" actually refers   limitation due value Vcmax. Note sometimes   derivative estimated initial slope measured -Ci curve rather   calculated analytically. (See, example, Pathare et al. (2023).)   However, take approach . Also note value   Vcmax can estimated using different approaches. example, Xiong   (2023) uses single-point gas exchange measurements. possible,   better use estimate fitting entire -Ci curve, shown   example . understand meaning limiting factors, note simultaneously   making small fractional increases g_sc, g_mc,   Vcmax generally cause associated small fractional increase   . limiting factors describe fraction increase   can attributed g_sc, g_mc,   Vcmax. example, ls = 0.2, lm = 0.3, lb = 0.5 mean   20 percent increase due increase   stomatal conductance, 30 percent due increase mesophyll conductance,   50 percent due increase Vcmax. Note ls,   lm, lb always add 1. Thus, one factors large, changes related parameter   produce relatively larger changes assimilation rate. case,   can said parameter setting large limit assimilation   rate. hand, factor small, small changes related   parameter produce relatively small changes , therefore   parameter setting large limit assimilation rate. also possible calculate dAdC assimilation limited   RuBP regeneration. case, Aj = J * (Cc - Gamma_star) / (4 * Cc + 8 * Gamma_star) - RL, J RuBP regeneration rate, limitation due   \"biochemistry\" actually refers limitation due value J   (rather Vcmax. equations can used   calculate limiting factors (ls, lm, lb),   partial derivative now given dAdC_j = J * Gamma_star * 12 / (4 * Cc + 8 * Gamma_star)^2. users want limitations assuming Rubisco-limited assimilation.   However, j_column_name NULL, values J   used calculate limiting factors assuming RuBP-regeneration-limited   assimilation. example additional factors can used, see   Sakoda et al. (2021). References: Grassi, G. & Magnani, F. \"Stomatal, mesophyll conductance biochemical   limitations photosynthesis affected drought leaf ontogeny ash   oak trees.\" Plant, Cell & Environment 28, 834–849 (2005)   [doi:10.1111/j.1365-3040.2005.01333.x ]. Pathare, V. S. et al. \"Altered cell wall hydroxycinnamate composition impacts   leaf- canopy-level CO2 uptake water use rice.\" Plant Physiology   kiad428 (2023) [doi:10.1093/plphys/kiad428 ]. Xiong, D. \"Leaf anatomy explain large variability mesophyll   conductance across C3 crop species.\" Plant Journal 113, 1035–1048 (2023)   [doi:10.1111/tpj.16098 ]. Sakoda, K., Yamori, W., Groszmann, M. & Evans, J. R. \"Stomatal, mesophyll   conductance, biochemical limitations photosynthesis induction.\"   Plant Physiology 185, 146–160 (2021)   [doi:10.1093/plphys/kiaa011 ].","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c3_limitations_grassi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the relative limiting factors to C3 photosynthesis — calculate_c3_limitations_grassi","text":"function returns exdf object based exdf_obj   several new columns representing partial derivatives limiting factors   discussed : dAdC_rubisco, ls_rubisco_grassi,   lm_rubisco_grassi, lb_rubisco_grassi.   j_column_name NULL, output also include   dAdC_j, ls_j_grassi, lm_j_grassi, lb_j_grassi.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c3_limitations_grassi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the relative limiting factors to C3 photosynthesis — calculate_c3_limitations_grassi","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('c3_aci_1.xlsx') )  # Define a new column that uniquely identifies each curve licor_file[, 'species_plot'] <-   paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )  # Organize the data licor_file <- organize_response_curve_data(     licor_file,     'species_plot',     c(9, 10, 16),     'CO2_r_sp' )  # Calculate the total pressure in the Licor chamber licor_file <- calculate_total_pressure(licor_file)  # Calculate additional gas properties licor_file <- calculate_gas_properties(licor_file)  # Calculate temperature-dependent values of C3 photosynthetic parameters licor_file <- calculate_temperature_response(licor_file, c3_temperature_param_bernacchi)  # Fit all curves in the data set. Here we use a faster optimizer than the # default one to ensure the example runs quickly. aci_results <- consolidate(by(   licor_file,   licor_file[, 'species_plot'],   fit_c3_aci,   Ca_atmospheric = 420,   optim_fun = optimizer_nmkb(1e-7),   fit_options = list(gmc_at_25 = 0.5) ))  # Get a subset of fitting results corresponding to the first measured point # in each curve (where CO2_r_sp = 400 ppm) aci_fit_subset <- aci_results$fits[aci_results$fits[, 'CO2_r_sp'] == 400, , TRUE]  # Calculate limiting factors aci_fit_subset <- calculate_c3_limitations_grassi(aci_fit_subset)  # View the limiting factors for each species / plot col_to_keep <- c(   'species', 'plot',                                            # identifiers   'ls_rubisco_grassi', 'lm_rubisco_grassi', 'lb_rubisco_grassi' # limitation info )  aci_fit_subset[ , col_to_keep, TRUE] #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>    species [UserDefCon] (NA) plot [UserDefCon] (NA) #> 8                    soybean                     5a #> 21                   tobacco                      1 #> 34                   tobacco                      2 #>    ls_rubisco_grassi [calculate_c3_limitations_grassi] (dimensionless) #> 8                                                            0.5089481 #> 21                                                           0.3651309 #> 34                                                                  NA #>    lm_rubisco_grassi [calculate_c3_limitations_grassi] (dimensionless) #> 8                                                            0.1426870 #> 21                                                           0.1917726 #> 34                                                                  NA #>    lb_rubisco_grassi [calculate_c3_limitations_grassi] (dimensionless) #> 8                                                            0.3483649 #> 21                                                           0.4430964 #> 34                                                                  NA  # One of these fits has NA for all the limiting factors, which causes problems # when making bar charts with some versions of the `lattice` package, so we # exclude that curve for plotting data_for_barchart <-   aci_fit_subset$main_data[aci_fit_subset$main_data$species_plot != 'tobacco - 2', ]  # Display as a bar chart lattice::barchart(   ls_rubisco_grassi + lm_rubisco_grassi + lb_rubisco_grassi ~ species_plot,   data = data_for_barchart,   stack = TRUE,   auto = TRUE,   ylab = 'Factors limiting assimilation' )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c3_limitations_warren.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the relative limiting factors to C3 photosynthesis — calculate_c3_limitations_warren","title":"Estimate the relative limiting factors to C3 photosynthesis — calculate_c3_limitations_warren","text":"Uses method Warren et al. (2003) estimate relative limitations   C3 photosynthesis due stomatal conductance mesophyll conductance.   function can accomodate alternative column names variables taken   data file case change point future.   function also checks units required column produce   error units incorrect.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c3_limitations_warren.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the relative limiting factors to C3 photosynthesis — calculate_c3_limitations_warren","text":"","code":"calculate_c3_limitations_warren(     exdf_obj,     Wj_coef_C = 4.0,     Wj_coef_Gamma_star = 8.0,     ca_column_name = 'Ca',     cc_column_name = 'Cc',     ci_column_name = 'Ci',     gamma_star_norm_column_name = 'Gamma_star_norm',     j_norm_column_name = 'J_norm',     kc_norm_column_name = 'Kc_norm',     ko_norm_column_name = 'Ko_norm',     oxygen_column_name = 'oxygen',     rl_norm_column_name = 'RL_norm',     total_pressure_column_name = 'total_pressure',     tp_norm_column_name = 'Tp_norm',     vcmax_norm_column_name = 'Vcmax_norm',     hard_constraints = 0,     ...   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c3_limitations_warren.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the relative limiting factors to C3 photosynthesis — calculate_c3_limitations_warren","text":"exdf_obj exdf object representing gas exchange data. Typically     exdf object returned fit_c3_aci;     expected columns alpha_g, Gamma_star,     J_at_25, RL_at_25, Tp, Vcmax_at_25. Wj_coef_C coefficient equation RuBP-regeneration-limited carboxylation,     whose value depends assumptions NADPH ATP requirements     RuBP regeneration; see calculate_c3_assimilation     information. Wj_coef_Gamma_star coefficient equation RuBP-regeneration-limited carboxylation,     whose value depends assumptions NADPH ATP requirements     RuBP regeneration; see calculate_c3_assimilation     information. ca_column_name name column exdf_obj contains ambient     CO2 concentration micromol mol^(-1). cc_column_name name column exdf_obj contains chloroplastic     CO2 concentration micromol mol^(-1). Typically     values automatically calculated fit_c3_aci. ci_column_name name column exdf_obj contains intercellular     CO2 concentration micromol mol^(-1). gamma_star_norm_column_name name column exdf_obj contains normalized     Gamma_star values (units     normalized Gamma_star 25 degrees C). Typically     leaf-temperature dependent values calculated using     calculate_temperature_response. j_norm_column_name name column exdf_obj contains normalized     J values (units normalized J 25 degrees C).     Typically leaf-temperature dependent values calculated using     calculate_temperature_response. kc_norm_column_name name column exdf_obj contains normalized     Kc values (units normalized Kc 25 degrees C).     Typically leaf-temperature dependent values calculated using     calculate_temperature_response. ko_norm_column_name name column exdf_obj contains normalized     Ko values (units normalized Ko 25 degrees C).     Typically leaf-temperature dependent values calculated using     calculate_temperature_response. oxygen_column_name name column exdf_obj contains concentration     O2 ambient air, expressed percentage (commonly 21% 2%);     units must percent. rl_norm_column_name name column exdf_obj contains normalized     RL values (units normalized RL 25 degrees C). total_pressure_column_name name column exdf_obj contains total pressure     bar. Typically calculated using     calculate_total_pressure. tp_norm_column_name name column exdf_obj contains normalized     Tp values (units normalized Tp 25 degrees C). vcmax_norm_column_name name column exdf_obj contains normalized     Vcmax values (units     normalized Vcmax 25 degrees C). hard_constraints passed calculate_c3_assimilation; see function     details. ... Additional arguments passed     calculate_c3_assimilation.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c3_limitations_warren.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate the relative limiting factors to C3 photosynthesis — calculate_c3_limitations_warren","text":"analyzing interpreting C3 gas exchange data, often useful   estimate relative limitations assimilation due stomatal   conductance mesophyll conductance. can done using framework first   introduced Warren et al. (2003). framework, relative limitation   due stomatal conductance (ls) ls = (An_inf_gsc - A_modeled) / An_inf_gsc relative limitation due mesophyll conductance (lm) lm = (An_inf_gmc - A_modeled) / An_inf_gmc. equations 10   11 Warren et al. (2003). equations A_modeled net assimilation rate calculated   using Farquhar-von-Caemmerer-Berry (FvCB) model measured value   chloroplast CO2 concentration (Cc). two assimilation   rates (An_inf_gsc An_inf_gmc) also calculated using   FvCB model, different assumptions: An_inf_gsc assumes   stomatal conductance infinite mesophyll conductance measured,   An_inf_gmc assumes mesophyll conductance infinite   stomatal conductance measured. words, ls expresses observed assimilation rate   fractional decrease relative hypothetical plant infinite stomatal   conductance, lm expresses observed assimilation rate   fractional decrease relative hypothetical plant infinite mesophyll   conductance. example, lm = 0.4, means observed assimilation   rate 40 percet lower hypothetical plant infinite mesophyll   conductance. mesophyll conductance increase (else remaining   ), lm decrease. case   estimations limiting factors, one used   calculate_c3_limitations_grassi. (See Leverett & Kromdijk   details.) actually calculate An_inf_gsc An_inf_gmc, first   necessary estimate corresponding values Cc occur   infinite stomatal mesophyll conductance. can done 1D   diffusion equation expressed using drawdown values: Cc = Ca - drawdown_cs - drawdown_cm, drawdown_cs = Ca - Ci drawdown CO2 across stomata   (assuming infinite boundary layer conductance)   drawdown_cm = Ci - Cc drawdown CO2 across mesophyll.   one conductance infinite, corresponding drawdown becomes zero. Thus,   : Cc_inf_gsc = Ca - 0 - (Ci - Cc) = Ca - Ci + Cc Cc_inf_gmc = Ca - (Ca - Ci) - 0 = Ci, Cc_inf_gsc value Cc occur   infinite stomatal conductance measured mesophyll conductance,   Cc_inf_gmc value Cc occur infinite   mesophyll conductance measured stomatal conductance. values Cc, Cc_inf_gsc, Cc_inf_gmc,   corresponding assimilation rates calculated using   calculate_c3_assimilation, limitation factors   calculated described . References: Warren, C. R. et al. \"Transfer conductance second growth Douglas-fir   (Pseudotsuga menziesii (Mirb.)Franco) canopies.\" Plant, Cell & Environment 26,   1215–1227 (2003) [doi:10.1046/j.1365-3040.2003.01044.x ]. Leverett, . & Kromdijk, J. \"long tortuous path towards improving   photosynthesis engineering elevated mesophyll conductance.\"   [doi:10.22541/au.170016201.13513761/v1 ].","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c3_limitations_warren.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the relative limiting factors to C3 photosynthesis — calculate_c3_limitations_warren","text":"function returns exdf object based exdf_obj   several new columns representing quantities discussed :   Cc_inf_gsc, Cc_inf_gmc, An_inf_gsc, An_inf_gmc,   ls_warren, lm_warren.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c3_limitations_warren.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the relative limiting factors to C3 photosynthesis — calculate_c3_limitations_warren","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('c3_aci_1.xlsx') )  # Define a new column that uniquely identifies each curve licor_file[, 'species_plot'] <-   paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )  # Organize the data licor_file <- organize_response_curve_data(     licor_file,     'species_plot',     c(9, 10, 16),     'CO2_r_sp' )  # Calculate the total pressure in the Licor chamber licor_file <- calculate_total_pressure(licor_file)  # Calculate additional gas properties licor_file <- calculate_gas_properties(licor_file)  # Calculate temperature-dependent values of C3 photosynthetic parameters licor_file <- calculate_temperature_response(licor_file, c3_temperature_param_bernacchi)  # Fit all curves in the data set. Here we use a faster optimizer than the # default one to ensure the example runs quickly. aci_results <- consolidate(by(   licor_file,   licor_file[, 'species_plot'],   fit_c3_aci,   Ca_atmospheric = 420,   optim_fun = optimizer_nmkb(1e-7) ))  # Get a subset of fitting results corresponding to the first measured point # in each curve (where CO2_r_sp = 400 ppm) aci_fit_subset <- aci_results$fits[aci_results$fits[, 'CO2_r_sp'] == 400, , TRUE]  # Calculate limiting factors aci_fit_subset <- calculate_c3_limitations_warren(aci_fit_subset)  # View the limiting factors for each species / plot col_to_keep <- c(   'species', 'plot',       # identifiers   'ls_warren', 'lm_warren' # limitation info )  aci_fit_subset[ , col_to_keep, TRUE] #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>    species [UserDefCon] (NA) plot [UserDefCon] (NA) #> 8                    soybean                     5a #> 21                   tobacco                      1 #> 34                   tobacco                      2 #>    ls_warren [calculate_c3_limitations_warren] (dimensionless) #> 8                                                           NA #> 21                                                          NA #> 34                                                          NA #>    lm_warren [calculate_c3_limitations_warren] (dimensionless) #> 8                                                           NA #> 21                                                          NA #> 34                                                          NA"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c3_variable_j.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate C3 variable J — calculate_c3_variable_j","title":"Calculate C3 variable J — calculate_c3_variable_j","text":"Calculates values mesophyll conductance chloroplast CO2 concentration   using \"variable J\" equation, originally described Harley et al.   (1992) modified Moualeu-Ngangue, Chen, & Stutzel (2016). function   can accomodate alternative colum names variables taken Licor   files case change point future. function also   checks units required column produce error   units incorrect.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c3_variable_j.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate C3 variable J — calculate_c3_variable_j","text":"","code":"calculate_c3_variable_j(     exdf_obj,     alpha_g,     alpha_s,     alpha_t,     Gamma_star_at_25,     RL_at_25,     tau,     Wj_coef_C = 4.0,     Wj_coef_Gamma_star = 8.0,     a_column_name = 'A',     ci_column_name = 'Ci',     gamma_star_norm_column_name = 'Gamma_star_norm',     phips2_column_name = 'PhiPS2',     qin_column_name = 'Qin',     rl_norm_column_name = 'RL_norm',     total_pressure_column_name = 'total_pressure',     hard_constraints = 0,     perform_checks = TRUE,     return_exdf = TRUE   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c3_variable_j.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate C3 variable J — calculate_c3_variable_j","text":"exdf_obj exdf object. alpha_g dimensionless parameter 0 <= alpha_g <= 1, representing     proportion glycolate carbon taken photorespiratory pathway     glycine. alpha_g often assumed 0. alpha_g     number, must column exdf_obj called alpha_g     appropriate units. numeric value supplied overwrite     values alpha_g column exdf_obj exists. alpha_s dimensionless parameter 0 <= alpha_s <= 0.75 * (1 - alpha_g)     representing proportion glycolate carbon taken     photorespiratory pathway serine. alpha_s often assumed 0.     alpha_s number, must column     exdf_obj called alpha_s appropriate units. numeric     value supplied overwrite values alpha_s column     exdf_obj exists. alpha_t dimensionless parameter 0 <= alpha_t <= 1 representing     proportion glycolate carbon taken photorespiratory pathway     CH2-THF. alpha_t often assumed 0. alpha_t     number, must column exdf_obj called alpha_t     appropriate units. numeric value supplied overwrite     values alpha_t column exdf_obj exists. Gamma_star_at_25 chloroplastic CO2 concentration CO2 gains Rubisco     carboxylation exactly balanced CO2 losses Rubisco oxygenation,     25 degrees C, expressed micromol mol^(-1).     Gamma_star_at_25 number, must column     exdf_obj called Gamma_star_at_25 appropriate units.     numeric value supplied overwrite values     Gamma_star_at_25 column exdf_obj exists. RL_at_25 respiration rate 25 degrees C, expressed     micromol m^(-2) s^(-1). RL_at_25 number,     must column exdf_obj called RL_at_25     appropriate units. numeric value supplied overwrite values     RL_at_25 column exdf_obj exists. tau proportionality factor used calculate RuBP regeneration rate     chlorophyll fluorescence measurements (dimensionless). tau     number, must column exdf_obj called tau     appropriate units. numeric value supplied overwrite     values tau column exdf_obj exists. Wj_coef_C coefficient equation RuBP-regeneration-limited carboxylation,     whose value depends assumptions NADPH ATP requirements     RuBP regeneration; see calculate_c3_assimilation     information. Wj_coef_Gamma_star coefficient equation RuBP-regeneration-limited carboxylation,     whose value depends assumptions NADPH ATP requirements     RuBP regeneration; see calculate_c3_assimilation     information. a_column_name name column exdf_obj contains net     assimilation micromol m^(-2) s^(-1). ci_column_name name column exdf_obj contains     intercellular CO2 concentration micromol mol^(-1). gamma_star_norm_column_name name column exdf_obj contains normalized     Gamma_star values (units     normalized Gamma_star 25 degrees C). phips2_column_name name column exdf_obj contains values     operating efficiency photosystem II (dimensionless). qin_column_name name column exdf_obj contains values     incident photosynthetically active flux density     micromol m^(-2) s^(-1). rl_norm_column_name name column exdf_obj contains normalized     RL values (units normalized RL 25 degrees C). total_pressure_column_name name column exdf_obj contains total pressure     bar. hard_constraints integer numerical value indicating types hard constraints     place values input parameters; see details. perform_checks logical value indicating whether check units required columns.     almost always TRUE. option disable checks     intended used fit_c3_variable_j calls     function, since performing checks many times repeatedly slows     fitting procedure. return_exdf logical value indicating whether return exdf object.     almost always TRUE. option return vector mainly     intended used  fit_c3_variable_j calls     function, since creating exdf object return slow     fitting procedure.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c3_variable_j.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate C3 variable J — calculate_c3_variable_j","text":"\"Variable J\" method way estimate chloroplast CO2 concentration   Cc mesophyll conductance CO2 gmc combined gas   exchange chlorophyll fluorescence measurements, originally   described Harley et al. (1992). main idea along Cc,   net CO2 assimilation rate (), day respiration rate (RL),   CO2 compensation point absence day respiration   (Gamma_star) determine actual RuBP regeneration rate   (J_actual) required support Calvin-Benson cycle: J_actual = (+ RL) * (4 * Cc + 8 * Gamma_star) / (Cc - Gamma_star) Equation 6 Harley et al. (1992). (Note: equation can   derived solving equation Aj FvCB model   J. However, relationship holds true even CO2 assimilation   limited RuBP regeneration. Hence, distinguish actual   regeneration rate J_actual maximum regeneration rate   given incident light level J.) equation can rewritten using 1D diffusion equation replace   Cc Cc = Ci - / gmc solving mesophyll   conductance. result Equation 7 Harley et al. (1992),   reproduce . importance Equation 7 calculates gmc   several quantities can measured using gas exchange (Ci,   , RL), quantity whose values can known beforehand   (Gamma_star), J_actual (can estimated   chlorophyll fluorescence measurements). update Equation 7 include   alpha_g alpha_s following Busch et al. (2018) (also see   calculate_c3_assimilation.) actual RuBP regeneration rate related incident   photosynthetically active flux density Qin operating efficiency   photosystem II PhiPSII according : J_actual = alpha_g * beta * Qin * PhiPSII, alpha_g leaf absorptance beta fraction   absorbed light energy directed photosystem II. Qin set   measurement conditions, PhiPSII can estimated chlorophyll   fluorescence. However, values alpha_g beta   generally unknown; beta particular difficult impossible   measure often assumed 0.5. Thus, Equation 7 Harley et   al. (1992) can used estimate gmc, practical   uncertainty associated determining value J_actual used   Equation 7. Moualeu-Ngangue, Chen, & Stutzel (2016) developed way address issue.   method paper replaces product alpha_g   beta single new parameter tau, uses estimate   actual RuBP regeneration fluoresence (J_F): J_F = tau * Qin * PhiPSII. new parameter tau assumed constant across -Ci curve,   treated unknown whose value determined fitting   procedure. function, supplied values Qin, PhiPSII,   tau used calculate values J_F. , values   J_F used along Equation 7 Harley et al. (1992)   calculate gmc. Finally, 1D diffusion equation used calculate   Cc. Hard constraints: input parameters Variable J equations hard constraints   values set biochemical physical interpretation;   example, RL negative tau must lie 0   1. Yet, measurement noise, sometimes necessary use   values outside ranges fitting -Ci curve   fit_c3_variable_j. accomodate different potential use cases,   possible selectively apply hard constraints specifying   different values hard_constraints input argument:  hard_constraints = 0: Constraints placed inputs           user-supplied fit, Qin. hard_constraints = 1: Includes constraints           hard_constraints 0, additional constraint           Ci values must non-negative. hard_constraints = 2: Includes constraints           hard_constraints 1, additional constraints           parameters can fitted. example, RL_at_25 must           non-negative tau must lie 0 1. input values violate specified constraints, error message   thrown. References: Harley, P. C., Loreto, F., Di Marco, G. & Sharkey, T. D. \"Theoretical           Considerations Estimating Mesophyll Conductance CO2 Flux           Analysis Response Photosynthesis CO2\" Plant Physiology           98, 1429–1436 (1992) [doi:10.1104/pp.98.4.1429 ]. Moualeu-Ngangue, D. P., Chen, T.-W. & Stutzel, H. \"new method           estimate photosynthetic parameters net assimilation           rate-intercellular space CO2 concentration (-Ci) curve           chlorophyll fluorescence measurements\" New Phytologist 213, 1543–1554           (2017) [doi:10.1111/nph.14260 ]. Busch, Sage, & Farquhar, G. D. \"Plants increase CO2 uptake           assimilating nitrogen via photorespiratory pathway.\" Nature Plants           4, 46–54 (2018) [doi:10.1038/s41477-017-0065-x ].","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c3_variable_j.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate C3 variable J — calculate_c3_variable_j","text":"return value depends value return_exdf: return_exdf TRUE, return value           exdf object following columns, calculated described           : J_F, gmc, Cc, tau,           RL_tl. category new columns           calculate_c3_variable_j indicate created           using function. return_exdf FALSE, return value list           following named elements: gmc, Cc, J_F.           element numeric vector.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c3_variable_j.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate C3 variable J — calculate_c3_variable_j","text":"","code":"# Read an example Licor file included in the PhotoGEA package. This file # includes gas exchange and chlorophyll fluorescence data. licor_file <- read_gasex_file(   PhotoGEA_example_file_path('c3_aci_1.xlsx') )  # Define a new column that uniquely identifies each curve licor_file[, 'species_plot'] <-   paste(licor_file[, 'species'], '-', licor_file[, 'plot'])  # Calculate the total pressure in the Licor chamber licor_file <- calculate_total_pressure(licor_file)  # Calculate temperature-dependent values of C3 photosynthetic parameters licor_file <- calculate_temperature_response(licor_file, c3_temperature_param_bernacchi)  # Calculate values of J_F, gmc, and Cc assuming alpha_g = alpha_s = alpha_t = 0, # RL_at_25 = 1.5, and tau = 0.55. vj_res <- calculate_c3_variable_j(licor_file, 0, 0, 0, '', 1.5, 0.55)  # Plot mesophyll conductance against Cc. Note: this information is not very # meaningful since the values of Gamma_star, tau and RL used above are # arbitrary. lattice::xyplot(   gmc ~ Cc | licor_file[, 'species_plot'],   data = vj_res$main_data,   type = 'b',   pch = 16,   auto = TRUE,   xlab = paste0('Chloroplast CO2 concentration (', vj_res$units$Cc, ')'),   ylab = paste0('Mesophyll conductance to CO2 (', vj_res$units$gmc, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c4_assimilation.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate C4 assimilation rates — calculate_c4_assimilation","title":"Calculate C4 assimilation rates — calculate_c4_assimilation","text":"Calculates C4 assimilation rates based von Caemmerer (2000) model.   function can accomodate alternative colum names variables taken   Licor files case change point future. function   also checks units required column produce error   units incorrect.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c4_assimilation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate C4 assimilation rates — calculate_c4_assimilation","text":"","code":"calculate_c4_assimilation(     exdf_obj,     alpha_psii,     gbs,     J_at_25,     RL_at_25,     Rm_frac,     Vcmax_at_25,     Vpmax_at_25,     Vpr,     x_etr = 0.4,     ao_column_name = 'ao',     gamma_star_column_name = 'gamma_star',     j_norm_column_name = 'J_norm',     kc_column_name = 'Kc',     ko_column_name = 'Ko',     kp_column_name = 'Kp',     oxygen_column_name = 'oxygen',     pcm_column_name = 'PCm',     rl_norm_column_name = 'RL_norm',     total_pressure_column_name = 'total_pressure',     vcmax_norm_column_name = 'Vcmax_norm',     vpmax_norm_column_name = 'Vpmax_norm',     hard_constraints = 0,     perform_checks = TRUE,     return_exdf = TRUE   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c4_assimilation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate C4 assimilation rates — calculate_c4_assimilation","text":"exdf_obj exdf object. alpha_psii fraction photosystem II activity bundle sheath     (dimensionless). alpha_psii number,     must column exdf_obj called alpha_psii     appropriate units. numeric value supplied overwrite values     alpha_psii column exdf_obj exists. gbs bundle sheath conductance CO2 mol m^(-2) s^(-1) bar^(-1).     gbs number, must column     exdf_obj called gbs appropriate units. numeric value     supplied overwrite values gbs column     exdf_obj exists. J_at_25 electron transport rate 25 degrees C, expressed     micromol m^(-2) s^(-1). Note _not_ Jmax,     general depend incident photosynthetically active flux density.     J_at_25 number, must column     exdf_obj called J_at_25 appropriate units. numeric     value supplied override values J_at_25 column     exdf_obj exists. RL_at_25 total rate mitochondrial respiration across mesophyll bundle     sheath 25 degrees C, expressed micromol m^(-2) s^(-1).     RL_at_25 number, must column     exdf_obj called RL_at_25 appropriate units. numeric     value supplied overwrite values RL_at_25 column     exdf_obj exists. Rm_frac fraction total mitochondrial respiration occurs     mesophyll. Rm_frac number, must column     exdf_obj called Rm_frac appropriate units. numeric     value supplied overwrite values Rm_frac column     exdf_obj exists. Vcmax_at_25 maximum rate rubisco carboxylation 25 degrees C, expressed     micromol m^(-2) s^(-1). Vcmax_at_25 number,     must column exdf_obj called Vcmax_at_25     appropriate units. numeric value supplied overwrite values     Vcmax_at_25 column exdf_obj exists. Vpmax_at_25 maximum rate PEP carboxylase activity 25 degrees C, expressed     micromol m^(-2) s^(-1). Vpmax_at_25 number,     must column exdf_obj called Vpmax_at_25     appropriate units. numeric value supplied overwrite values     Vpmax_at_25 column exdf_obj exists. Vpr rate PEP carboxylase regeneration, expressed     micromol m^(-2) s^(-1). Vpr number,     must column exdf_obj called Vpr appropriate     units. numeric value supplied overwrite values     Vpr column exdf_obj exists. x_etr fraction whole-chain electron transport occurring mesophyll     (dimensionless). See Equation 29 S. von Caemmerer (2021). ao_column_name name column exdf_obj contains dimensionless     ratio solubility diffusivity O2 CO2. gamma_star_column_name name column exdf_obj contains dimensionless     gamma_star values. j_norm_column_name name column exdf_obj contains normalized     Jmax values (units     normalized Jmax 25 degrees C). kc_column_name name column exdf_obj contains Michaelis-Menten     constant rubisco carboxylation microbar. ko_column_name name column exdf_obj contains Michaelis-Menten     constant rubisco oxygenation mbar. kp_column_name name column exdf_obj contains Michaelis-Menten     constant PEP carboxylase carboxylation microbar. oxygen_column_name name column exdf_obj contains concentration     O2 ambient air, expressed percentage (commonly 21% 2%);     units must percent. pcm_column_name name column exdf_obj contains partial pressure     CO2 mesophyll, expressed microbar. rl_norm_column_name name column exdf_obj contains normalized     RL values (units normalized RL 25 degrees C). total_pressure_column_name name column exdf_obj contains total pressure     bar. vcmax_norm_column_name name column exdf_obj contains normalized     Vcmax values (units     normalized Vcmax 25 degrees C). vpmax_norm_column_name name column exdf_obj contains normalized     Vpmax values (units     normalized Vpmax 25 degrees C). hard_constraints integer numerical value indicating types hard constraints     place values input parameters; see details. perform_checks logical value indicating whether check units required columns.     almost always TRUE. option disable checks     intended used fit_c4_aci calls     function, since performing checks many times repeatedly slows     fitting procedure. return_exdf logical value indicating whether return exdf object.     almost always TRUE. option return vector mainly     intended used  fit_c4_aci calls function,     since creating exdf object return slow fitting     procedure.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c4_assimilation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate C4 assimilation rates — calculate_c4_assimilation","text":"General Description Model function generally follows Sections 4.2.1 4.2.2 S. von Caemmerer   (2000), provides equations calculating enzyme-limited net   assimilation rate Ac, light- electron-transport limited rate   Aj, overall net assimilation rate C4 leaf.   (equations also reproduced S. von Caemmerer (2021), although   use equation numbers 2000 textbook . Also note   typo Equation 22 2021 paper.) enzyme-limited assimilation rate   model calculated according Equation 4.21: Ac = (-b - sqrt(b^2 - 4 * * c)) / (2 * ) parameters , b, c determined   Equations 4.22, 4.23, 4.24, respectively. equations fairly long,   reproduce . Similarly, light-limited rate Aj   also calculated according quadratic equation. Finally, overall   rate calculated smaller Ac Aj: = min(Ac, Aj) Approximation Full Equations complicated equations can approximiated simpler ones.   Ac, can use Equation 4.25: Ac = min(Vp + gbs * PCm - RLm, Vcmax - RL) Vp rate PEP carboxylation, gbs bundle   sheath conductance CO2, PCm partial pressure CO2   mesophyll, RLm rate mitochondrial respiration occuring   mesophyll, Vcmax maximum rate Rubisco carboxylation,   RL rate mitochondrial respiration occurring bundle   sheath mesophyll. Essentially, first term equation   (Vp + gbs * PCm - RLm) can thought PEP-carboxylase-limited   assimilation rate Ap, second term (Vcmax - RL)   Rubisco-limited rate Ar. PEP carboxylation rate Vp calculated according Equation 4.19: Vp = min(Pcm * Vpmax / (PCm + Kp), Vpr) Vpmax maximum rate PEP carboxylation, Kp   Michaelis-Menten constant PEP carboxylation, Vpr   carboxylation rate PEP carboxylase activity limited regeneration   rather carbon availability. Thus, can see approximation   actually calculates enzyme-limited rate smaller three separate   assimilation rates: Ac = min(Apc, Apr, Ar) Apc = Pcm * Vpmax / (PCm + Kp) + gbs * PCm - RLm rate due   carbon-limited PEP carboxylation, Apr = Vpr + gbs * PCm - RLm   rate due regeneration-limited PEP carboxylation, Ar = Vcmax - RL   rate due Rubisco-limited assimilation. example end documentation page, compare Apc,   Apr, Ar Ac calculated Equation 4.21.   example, clear approximation Ac = min(Apc, Apr, Ar)   quite accurate low values PCm, introduces significant   errors PCm increases. Thus, approximation can helpful   gaining intuitive understanding C4 photosynthesis,   used realistic calculations. precise, approximation reliable Vcmax   much larger gbs * Kc * (1 + POm / Ko), rarely case;   otherwise, limiting value high PCm smaller   Ar = Vcmax - RL. Conversely, gbs alpha_psii   set zero, approximation exact. Aj, simplified version Equation 4.45: Aj = min(x_etr * J / 2 - RLm + gbs * PCm, (1 - x_etr) * J / 3 - RL) x_etr fraction whole-chain electron transport occurring   mesophyll J electron transport rate. can therefore   think equation Aj = min(Ajm, Ajbs) Ajm mesophyll light-limited rate Ajbs   bundle sheath light-limited rate. given   Ajm = x_etr * J / 2 - RLm + gbs * PCm   (1 - x_etr) * J / 3 - RL case Ac,   approximation exact. Combining two simplifications, can see overall net   assimilation rate can approximated smallest five potential rates: = min(Apc, Apr, Ar, Ajm, Ajbs). important note potential rates   identical similar dependence PCm. specifically, Apr   Ajm identical dependence, Ar Ajbs.   gbs zero, four rates dependence   PCm. Thus, fitting point view, usually possible   distinguish potential limiting states. reason,   advisable fit one Vcmax, Vpr,   Jmax estimating parameters experimentally measured curve. Limiting Cases Approximate Equation bundle sheath conductance gbs generally small can   ignored simple analysis equations. case,   Pcm high, approximate equation Ac simplifies   : Ac = min(Vpmax - RLm, Vpr - RLm, Vcmax - RL) Since respiration costs also generally much smaller maximum   enzyme activity regeneration rates, enzyme-limited assimilation rate   high levels CO2 therefore determined smaller Vpmax,   Vpr, Vcmax. shown Table 4.1 textbook,   Vpmax typically much larger two rates, light-   CO2-saturated assimilation C4 leaves usually limited either   Vpr Vcmax. exact limiting factor can depend many   possible variables, temperature. example, see Wang (2008). lower values PCm, enzyme-limited net assimilation determined   CO2-limited PEP carboxylation according : = PCm * Vpmax / Kp - RLm approximated gbs * PCm = 0 PCm + Kp = Kp,   appropriate small values Pcm. Thus, can see low CO2   levels, assimilation linearly related PCm slope   Vpmax / Kp intercept -RLm. Respiration Table 4.1 von Caemmerer (2000) suggests RL = 0.01 * Vcmax   RLm = 0.5 * RL. allow flexibility, allow RL   specified independently Vcmax, also consider ratio   RLm / RL = Rm_frac variable (RLm calculated   RL according RLm = Rm_frac * RL). Rm_frac   set 1, distinction RL RLm. Hard constraints: input parameters C4 assimilation model hard constraints   values set biochemical physical interpretation;   example, Vcmax negative alpha_psii must lie   0 1. Yet, measurement noise, sometimes necessary   use values outside ranges fitting -Ci curve   fit_c4_aci. accomodate different potential use cases,   possible selectively apply hard constraints specifying different   values hard_constraints input argument:  hard_constraints = 0: Constraints placed inputs           user-supplied fit, Kc. hard_constraints = 1: Includes constraints           hard_constraints 0, additional constraint           PCm values must non-negative. hard_constraints = 2: Includes constraints           hard_constraints 1, additional constraints           parameters can fitted. example, Vcmax_at_25 must           non-negative alpha_psii must lie 0 1. input values violate specified constraints, error message   thrown. References  von Caemmerer, S. \"Biochemical Models Leaf Photosynthesis\" (CSIRO           Publishing, 2000) [doi:10.1071/9780643103405 ]. von Caemmerer, S. \"Updating steady-state model C4           photosynthesis.\" Journal Experimental Botany 72, 6003–6017 (2021)           [doi:10.1093/jxb/erab266 ]. Wang, D., Portis, . R., Jr., Moose, S. P. & Long, S. P. \"Cool C4           Photosynthesis: Pyruvate Pi Dikinase Expression Activity           Corresponds Exceptional Cold Tolerance Carbon Assimilation           Miscanthus × giganteus.\" Plant Physiology 148, 557–567 (2008)           [doi:10.1104/pp.108.120709 ].","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c4_assimilation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate C4 assimilation rates — calculate_c4_assimilation","text":"return value depends value return_exdf: return_exdf TRUE, return value           exdf object following columns: alpha_psii,           gbs, J_at_25, Jmax_tl, J_tl,           Rm_frac, Vcmax_tl, Vpmax_tl, RL_tl,           RLm_tl, Vpc, Vpr, Vp, Apc,           Apr, Ap, Ar, Ajm, Ajbs, Ac,           Aj, , c4_assimilation_msg.           calculated described , several copies           input arguments name. c4_assimilation_msg           usually blank may contain information issues           inputs. category new columns           calculate_c4_assimilation indicate created           using function. return_exdf FALSE, return value numeric           vector containing calculated values .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c4_assimilation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate C4 assimilation rates — calculate_c4_assimilation","text":"","code":"# Simulate a C4 A-Cm curve with specified leaf temperature and photosynthetic # parameters and plot the net assimilation rate. npts <- 101  inputs <- exdf(data.frame(   PCm = seq(0, 500, length.out = npts),   Tleaf = 25,   Qin = 1800,   total_pressure = 1,   oxygen = 21 ))  inputs <- document_variables(   inputs,   c('', 'PCm',            'microbar'),   c('', 'Tleaf',          'degrees C'),   c('', 'Qin',            'micromol m^(-2) s^(-1)'),   c('', 'total_pressure', 'bar'),   c('', 'oxygen',         'percent') )  inputs <- calculate_temperature_response(inputs, c4_temperature_param_vc, 'Tleaf')  assim <- calculate_c4_assimilation(inputs, 0, 0.003, 250, 1, 0.5, 40, 200, 80)  # Now we can plot Ac, Apr, Apc, and Ar. From this plot, we can see that # replacing the complicated quadratic equation with a simple minimum yields # very different results. Although this approximation is helpful for # understanding C4 photosythesis, it should not be used for calculations. lattice::xyplot(   Apr + Apc + Ar + Ac ~ inputs[, 'PCm'],   data = assim$main_data,   type = 'l',   grid = TRUE,   auto = TRUE,   ylim = c(-5, 100),   xlab = paste0('Partial pressure of CO2 in the mesophyll (', inputs$units$PCm, ')'),   ylab = paste0('Net CO2 assimilation rate (', assim$units$An, ')') )   # Likewise, we can look at Ajm, Ajbs, and Aj lattice::xyplot(   Ajm + Ajbs + Aj ~ inputs[, 'PCm'],   data = assim$main_data,   type = 'l',   grid = TRUE,   auto = TRUE,   ylim = c(-5, 45),   xlab = paste0('Partial pressure of CO2 in the mesophyll (', inputs$units$PCm, ')'),   ylab = paste0('Net CO2 assimilation rate (', assim$units$An, ')') )   # Finally, we can see whether enzyme activity or light limits overall # assimilation. In this case, assimilation is always enzyme-limited. lattice::xyplot(   Ac + Aj + An ~ inputs[, 'PCm'],   data = assim$main_data,   type = 'l',   grid = TRUE,   auto = TRUE,   ylim = c(-5, 40),   xlab = paste0('Partial pressure of CO2 in the mesophyll (', inputs$units$PCm, ')'),   ylab = paste0('Net CO2 assimilation rate (', assim$units$An, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c4_assimilation_hyperbola.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate C4 assimilation rates using a hyperbola — calculate_c4_assimilation_hyperbola","title":"Calculate C4 assimilation rates using a hyperbola — calculate_c4_assimilation_hyperbola","text":"Calculates C4 assimilation rates based empirical hyperbolic model.   function can accomodate alternative colum names variables taken   Licor files case change point future. function   also checks units required column produce error   units incorrect.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c4_assimilation_hyperbola.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate C4 assimilation rates using a hyperbola — calculate_c4_assimilation_hyperbola","text":"","code":"calculate_c4_assimilation_hyperbola(     exdf_obj,     c4_curvature,     c4_slope,     rL,     Vmax,     ci_column_name = 'Ci',     hard_constraints = 0,     perform_checks = TRUE,     return_exdf = TRUE   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c4_assimilation_hyperbola.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate C4 assimilation rates using a hyperbola — calculate_c4_assimilation_hyperbola","text":"exdf_obj exdf object. c4_curvature empirical curvature parameter hyperbola (dimensionless).     c4_curvature number, must column     exdf_obj called c4_curvature appropriate units. numeric     value supplied overwrite values c4_curvature     column exdf_obj exists. c4_slope empirical slope parameter hyperbola (mol m^(-2) s^(-1)).     c4_slope number, must column     exdf_obj called c4_slope appropriate units. numeric     value supplied overwrite values c4_slope     column exdf_obj exists. rL respiration rate, expressed micromol m^(-2) s^(-1).     rL number, must column exdf_obj     called rL appropriate units. numeric value supplied     overwrite values rL column exdf_obj     exists. Vmax maximum gross assimilation rate, expressed     micromol m^(-2) s^(-1). Vmax number,     must column exdf_obj called Vmax appropriate     units. numeric value supplied overwrite values     Vmax column exdf_obj exists. ci_column_name name column exdf_obj contains intercellular     CO2 concentration, expressed micromol mol^(-1). hard_constraints integer numerical value indicating types hard constraints     place values input parameters; see details. perform_checks logical value indicating whether check units required columns.     almost always TRUE. option disable checks     intended used fit_c4_aci_hyperbola calls     function, since performing checks many times repeatedly slows     fitting procedure. return_exdf logical value indicating whether return exdf object.     almost always TRUE. option return vector mainly     intended used  fit_c4_aci_hyperbola calls     function, since creating exdf object return slow     fitting procedure.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c4_assimilation_hyperbola.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate C4 assimilation rates using a hyperbola — calculate_c4_assimilation_hyperbola","text":"General Description Model contrast mechanistic model implemented   calculate_c4_assimilation, simple empirical model   C4 assimilation based four-parameter hyperbola. model, net   CO2 assimilation rate () given = Ag - rL, Ag gross assimilation rate rL   respiration rate. turn, Ag given smaller root   following quadratic equation: curvature * Ag^2 - (Vinitial + Vmax) * Ag + Vinitial * Vmax = 0, 0 <= curvature <= 1 empirical curvature factor, Vmax   maximum gross assimilation rate, Vinitial represents   initial response Ag increases intercellular CO2   concentration (Ci): Vinitial = slope * Ci. slope another empirical factor. including respiration offset, also possible define two   quantities: maximum net CO2 assimilation rate (Amax)   initial net CO2 assimilation rate (Ainitial). given Amax = Vmax - rL Ainitial = Vinitial - rL. Overall, model exhibits linear response Ci   low Ci, flat plateau high Ci, smooth   transition regions. sharpess transition set   curvature. curvature = 1, model simplifies = min{Vinitial, Vmax} - rL = min{Ainitial, Amax}. curvature increases 1, transition becomes smoother.   curvature zero, approaches Amax   asymptotically, may reach Amax reasonable value   Ci. Code implementation function, curvature slope referred   c4_curvature c4_slope avoid potential ambiguity   models may also curvature slope parameters. Temperature response model represent photosynthetic mechanisms,   temperature response functions applied. Hard constraints input parameters model hard constraints values   set interpretation; example, Vmax   negative c4_curvature must lie 0 1. Yet,   measurement noise, sometimes necessary use values outside   ranges fitting -Ci curve fit_c4_aci_hyperbola.   accomodate different potential use cases, possible selectively apply   hard constraints specifying different values   hard_constraints input argument:  hard_constraints = 0: constraints applied. hard_constraints = 1: Checks whether Ci values           non-negative. hard_constraints = 2: Includes constraints           hard_constraints 1, additional constraints           parameters can fitted. example, Vmax must           non-negative c4_curvature must lie 0 1. input values violate specified constraints, error message   thrown.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c4_assimilation_hyperbola.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate C4 assimilation rates using a hyperbola — calculate_c4_assimilation_hyperbola","text":"return value depends value return_exdf: return_exdf TRUE, return value           exdf object following columns: Ag,           Ainitial, Amax, , c4_curvature,           c4_slope, rL, Vinitial, Vmax,           c4_assimilation_hyperbola_msg. calculated           described , several copies input arguments           name. c4_assimilation_hyperbola_msg usually           blank may contain information issues inputs.           category new columns           calculate_c4_assimilation_hyperbola indicate           created using function. return_exdf FALSE, return value numeric           vector containing calculated values .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_c4_assimilation_hyperbola.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate C4 assimilation rates using a hyperbola — calculate_c4_assimilation_hyperbola","text":"","code":"# Simulate a C4 A-Ci curve and plot the net assimilation rate. npts <- 101  inputs <- exdf(data.frame(   Ci = seq(0, 1000, length.out = npts),   total_pressure = 1 ))  inputs <- document_variables(   inputs,   c('', 'Ci',             'micromol mol^(-1)'),   c('', 'total_pressure', 'bar') )  assim <- calculate_c4_assimilation_hyperbola(inputs, 0.8, 0.5, 1.0, 55)  lattice::xyplot(   Ainitial + Amax + An ~ inputs[, 'Ci'],   data = assim$main_data,   type = 'l',   grid = TRUE,   auto = TRUE,   ylim = c(-5, 65),   xlab = paste0('Intercellular CO2 concentration (', inputs$units$Ci, ')'),   ylab = paste0('Net CO2 assimilation rate (', assim$units$An, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gamma_star.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Gamma_star from Rubisco specificity — calculate_gamma_star","title":"Calculate Gamma_star from Rubisco specificity — calculate_gamma_star","text":"Calculates CO2 compensation point absence non-photorespiratory   CO2 release (Gamma_star) Rubisco specificity (molarity   basis), oxygen concentration (percentage),   temperature-dependent solubilities CO2 O2 H2O.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gamma_star.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Gamma_star from Rubisco specificity — calculate_gamma_star","text":"","code":"calculate_gamma_star(     exdf_obj,     alpha_pr = 0.5,     oxygen_column_name = 'oxygen',     rubisco_specificity_column_name = 'rubisco_specificity_tl',     tleaf_column_name = 'TleafCnd'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gamma_star.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Gamma_star from Rubisco specificity — calculate_gamma_star","text":"exdf_obj exdf object. alpha_pr number CO2 molecules released photorespiratory cycle following     RuBP oxygenation. oxygen_column_name name column exdf_obj contains concentration     O2 ambient air, expressed percentage (commonly 21% 2%);     units must percent. rubisco_specificity_column_name name column exdf_obj contains Rubisco     specificity S_aq leaf temperature; units must     M / M, molarity M moles solute per mole     solvent. tleaf_column_name name column exdf_obj contains leaf     temperature degrees C.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gamma_star.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Gamma_star from Rubisco specificity — calculate_gamma_star","text":"CO2 compensation point absence non-photorespiratory CO2 release   (Gamma_star) partial pressure CO2 chloroplast   CO2 gains Rubisco carboxylation exactly balanced CO2 losses   Rubisco oxygenation; quantity plays key role many photosynthesis   calculations. One way calculate value use definition,   can found many places, Equation 2.17 von Caemmerer (2000): Gamma_star = alpha_pr * O / S, O partial pressure (mole fraction) oxygen   chloroplast, S Rubisco specificity gas basis,   alpha_pr number CO2 molecules released   photorespiratory cycle following RuBP oxygenation (usually assumed   0.5). Rubisco specificity often measured aqueous solution   concentrations O2 CO2 specified molarities (moles dissolved   CO2 O2 per mole H2O). context, equation becomes Gamma_star_aq = alpha_pr * O_aq / S_aq, Gamma_star_aq O_aq molarities CO2 O2   corresponding Gamma_star O measurement   conditions S_aq specificity molarity basis. Henry's law can used relate two versions equation; Henry's   law states concentration dissolved gas proportional   partial pressure gas outside solution. proportionality factor   H called Henry's constant (sometimes solubility),   value depends temperature, gas species, factors. Using   Henry's law, can write Gamma_star_aq = Gamma_star_aq * H_CO2   O = O_aq * H_O2, H_CO2 Henry's constant CO2   dissolved H2O H_O2 Henry's constant O2 dissolved H2O.   replacements, can re-express equation : Gamma_star / H_CO2 = alpha_pr * (O / H_O2) / S_aq Solving Gamma_star, see : Gamma_star = (alpha_pr * O / S_aq) * (H_CO2 / H_O2). words, Rubisco specificity (measured molarity basis)   ratio two Henry's constants (H_CO2 / H_O2) play role   determining Gamma_star. equation also shows possible   relate S (specificity gas concentration basis)   S_aq S = S_aq * H_O2 / H_CO2. values H_O2 H_CO2 can calculated   temperature using Equation 18 Tromans (1998) Equation 4 Carroll   et al. (1991), respectively. calculate_gamma_star, assumed value specificity   S_aq measured otherwise determined leaf temperature;   leaf temperature used determine values two Henry's   constants. Sometimes necessary calculate temperature-dependent   value specificity using Arrhenius equation; can accomplished   via calculate_temperature_response_arrhenius function   PhotoGEA. Finally, important note Gamma_star can also directly   calculated using Arrhenius equation, rather using oxygen   concentration specificity. best approach determining value   Gamma_star particular situation generally depend   available information measurement conditions. References: von Caemmerer, S. \"Biochemical Models Leaf Photosynthesis.\"   (CSIRO Publishing, 2000) [doi:10.1071/9780643103405 ]. Carroll, J. J., Slupsky, J. D. Mather, . E. \"Solubility Carbon   Dioxide Water Low Pressure.\" Journal Physical Chemical Reference   Data 20, 1201–1209 (1991) [doi:10.1063/1.555900 ]. Tromans, D. \"Temperature pressure dependent solubility oxygen water:   thermodynamic analysis.\" Hydrometallurgy 48, 327–342 (1998)   [doi:10.1016/S0304-386X(98)00007-3 ].","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gamma_star.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Gamma_star from Rubisco specificity — calculate_gamma_star","text":"exdf object based exdf_obj includes following   additional columns, calculated described : Gamma_star_tl (  value Gamma_star leaf temperature), H_CO2,   H_O2, specificity_gas_basis. many choices   expressing Henry's constant values; express molalities per   unit pressure: (mol solute / kg H2O) / Pa. category   new columns calculate_gamma_star indicate   created using function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gamma_star.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Gamma_star from Rubisco specificity — calculate_gamma_star","text":"","code":"# Example 1: Calculate Gamma_star for each point in a gas exchange log file licor_data <- read_gasex_file(   PhotoGEA_example_file_path('licor_for_gm_site11.xlsx'), )  licor_data <- get_oxygen_from_preamble(licor_data)  licor_data <- set_variable(     licor_data,     'rubisco_specificity_tl',     'M / M',     value = 90 )  licor_data <- calculate_gamma_star(licor_data)  licor_data[, c('specificity_gas_basis', 'oxygen', 'Gamma_star_tl'), TRUE] #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>    specificity_gas_basis [calculate_gamma_star] (Pa / Pa) oxygen [in] (percent) #> 1                                                2378.089                    21 #> 2                                                2377.985                    21 #> 3                                                2378.894                    21 #> 4                                                2378.495                    21 #> 5                                                2378.103                    21 #> 6                                                2378.007                    21 #> 7                                                2378.321                    21 #> 8                                                2379.270                    21 #> 9                                                2378.403                    21 #> 10                                               2377.187                    21 #> 11                                               2374.764                    21 #> 12                                               2366.224                    21 #>    Gamma_star_tl [calculate_gamma_star] (micromol mol^(-1)) #> 1                                                  44.15310 #> 2                                                  44.15502 #> 3                                                  44.13815 #> 4                                                  44.14556 #> 5                                                  44.15284 #> 6                                                  44.15463 #> 7                                                  44.14879 #> 8                                                  44.13118 #> 9                                                  44.14726 #> 10                                                 44.16985 #> 11                                                 44.21492 #> 12                                                 44.37449  # Example 2: Calculate Gamma_star at 21% and 2% oxygen for a Rubisco whose # specificity was measured to be 100 M / M at 25 degrees C.  exdf_obj <- calculate_gamma_star(   exdf(     data.frame(       oxygen = c(2, 21),       rubisco_specificity_tl = c(100, 100),       TleafCnd = c(25, 25)     ),     data.frame(       oxygen = 'percent',       rubisco_specificity_tl = 'M / M',       TleafCnd = 'degrees C',       stringsAsFactors = FALSE     )   ) )  exdf_obj[, c('specificity_gas_basis', 'oxygen', 'Gamma_star_tl'), TRUE] #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>   specificity_gas_basis [calculate_gamma_star] (Pa / Pa) oxygen [NA] (percent) #> 1                                               2722.195                     2 #> 2                                               2722.195                    21 #>   Gamma_star_tl [calculate_gamma_star] (micromol mol^(-1)) #> 1                                                 3.673506 #> 2                                                38.571815  # Example 3: Here we recreate Figure 1 from Long, S. P. \"Modification of the # response of photosynthetic productivity to rising temperature by atmospheric # CO2 concentrations: Has its importance been underestimated?\" Plant, Cell and # Environment 14, 729–739 (1991). This is a fairly complicated example where # Arrhenius constants for Rubisco parameters are determined by fitting # published data and then used to determine the Rubisco specificity across a # range of temperatures.  # Specify leaf temperature and oxygen concentration leaf_temp <- seq(0, 50, by = 0.1)  exdf_obj <- exdf(   data.frame(     oxygen = rep_len(21, length(leaf_temp)),     TleafCnd = leaf_temp   ),   data.frame(     oxygen = 'percent',     TleafCnd = 'degrees C',     stringsAsFactors = FALSE   ) )  # Get Arrhenius constants for Rubisco parameters using data from Table 2 of # Jordan, D. B. and Ogren, W. L. \"The CO2/O2 specificity of ribulose # 1,5-bisphosphate carboxylase/oxygenase\" Planta 161, 308–313 (1984). rubisco_info <- data.frame(   temperature = c(7,    12,   15,   25,   30,   35),   Vc          = c(0.13, 0.36, 0.63, 1.50, 1.90, 2.90),   Kc          = c(2,    3,    4,    11,   14,   19),   Ko          = c(550,  510,  510,  500,  600,  540),   Vo          = c(0.24, 0.48, 0.69, 0.77, 1.1,  1.3) )  rubisco_info$x <- 1 / (8.314e-3 * (rubisco_info$temperature + 273.15))  lm_Vc <- stats::lm(log(Vc) ~ x, data = rubisco_info) lm_Kc <- stats::lm(log(Kc) ~ x, data = rubisco_info) lm_Ko <- stats::lm(log(Ko) ~ x, data = rubisco_info) lm_Vo <- stats::lm(log(Vo) ~ x, data = rubisco_info)  arrhenius_info <- list(   Vc = list(     c = as.numeric(lm_Vc$coefficients[1]),     Ea = -as.numeric(lm_Vc$coefficients[2]),     units = 'micromol / mg / min'   ),   Kc = list(     c = as.numeric(lm_Kc$coefficients[1]),     Ea = -as.numeric(lm_Kc$coefficients[2]),     units = 'microM'   ),   Ko = list(     c = as.numeric(lm_Ko$coefficients[1]),     Ea = -as.numeric(lm_Ko$coefficients[2]),     units = 'microM'   ),   Vo = list(     c = as.numeric(lm_Vo$coefficients[1]),     Ea = -as.numeric(lm_Vo$coefficients[2]),     units = 'micromol / mg / min'   ) )  # Get temperature-dependent values of Rubisco parameters using Arrhenius # equations exdf_obj <- calculate_temperature_response_arrhenius(   exdf_obj,   arrhenius_info )  # Calculate temperature-dependent specificity values exdf_obj <- set_variable(   exdf_obj,   'rubisco_specificity_tl',   units = 'M / M',   value = exdf_obj[, 'Vc'] * exdf_obj[, 'Ko'] /     (exdf_obj[, 'Vo'] * exdf_obj[, 'Kc']) )  # Calculate Gamma_star and Henry constants exdf_obj <- calculate_gamma_star(exdf_obj)  # Make a plot similar to Figure 1 from Long (1991) lattice::xyplot(   rubisco_specificity_tl + H_CO2 / H_O2 ~ TleafCnd,   data = exdf_obj$main_data,   auto = TRUE,   grid = TRUE,   type = 'l',   xlim = c(0, 50),   ylim = c(0, 250),   xlab = \"Temperature [ degrees C ]\",   ylab = \"Rubisco specificity or ratio of Henry's constants (H_CO2 / H_O2)\\n[ dimensionless ]\" )   # We can also make a plot of Gamma_star across this range lattice::xyplot(   Gamma_star_tl ~ TleafCnd,   data = exdf_obj$main_data,   auto = TRUE,   grid = TRUE,   type = 'l',   xlim = c(0, 50),   ylim = c(0, 120),   xlab = \"Temperature [ degrees C ]\",   ylab = paste('Gamma_star at leaf temperature [', exdf_obj$units$Gamma_star_tl, ']') )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gas_properties.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate gas properties that are typically not included in Licor files — calculate_gas_properties","title":"Calculate gas properties that are typically not included in Licor files — calculate_gas_properties","text":"Calculates gas properties typically included Licor files.   function can accomodate alternative column names variables taken   Licor file case change point future. function   also checks units required column produce error   units incorrect.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gas_properties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate gas properties that are typically not included in Licor files — calculate_gas_properties","text":"","code":"calculate_gas_properties(     licor_exdf,     a_column_name = 'A',     ca_column_name = 'Ca',     total_pressure_column_name = 'total_pressure',     e_column_name = 'E',     gbw_column_name = 'gbw',     gsw_column_name = 'gsw',     h2o_s_column_name = 'H2O_s',     tleaf_column_name = 'TleafCnd'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gas_properties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate gas properties that are typically not included in Licor files — calculate_gas_properties","text":"licor_exdf exdf object representing data Licor gas exchange     measurement system. a_column_name name column licor_exdf contains net     assimilation micromol m^(-2) s^(-1). ca_column_name name column licor_exdf contains ambient CO2     concentration chamber micromol mol^(-1). total_pressure_column_name name column licor_exdf contains total pressure     bar. e_column_name name column licor_exdf contains transpiration     rate mol m^(-2) s^(-1). gbw_column_name name column licor_exdf contains boundary layer     conductance water vapor mol m^(-2) s^(-1). gsw_column_name name column licor_exdf contains stomatal     conductance water vapor mol m^(-2) s^(-1). h2o_s_column_name name column licor_exdf contains sample cell     H2O concentration mmol mol^(-1). tleaf_column_name name column licor_exdf contains leaf     temperature degrees C.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gas_properties.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate gas properties that are typically not included in Licor files — calculate_gas_properties","text":"default, Licor file provides following gas concentrations   conductances: Water vapor conductance diffusion stomata (gsw). Water vapor conductance diffusion boundary layer           (gbw). Water vapor conductance diffusion leaf's intercellular           spaces ambient air; words, total conductance           water vapor (gtw). Water vapor concentration sample cell (H2O_s). CO2 conductance diffusion leaf's intercellular spaces           ambient air; words, total conductance CO2           (gtc). CO2 concentration sample cell, corrected chamber leaks          (Ca). CO2 concentration leaf's intercellular spaces (Ci). However, sometimes helpful know \"missing\" conductances   concentrations, example, calculating mesophyll conductances   Ball-Berry parameters. function adds missing values, along   related water vapor properties: Water vapor concentration sample surface (H2O_surf). Water vapor concentration leaf's intercellular spaces           (H2O_i). Saturation water vapor pressure leaf temperature           (SVPleaf). Relative humidity leaf surface (RHleaf). CO2 conductance diffusion stomata (gsc). CO2 conductance diffusion boundary layer (gbc). CO2 concentration leaf surface (Cs). Equations used calculations equations used calculate quantities can found Licor   Li-6800 manual (Appendix C), relies heavily Appendix 2   following paper: von Caemmerer, S. & Farquhar, G. D. \"relationships   biochemistry photosynthesis gas exchange leaves\"   Planta 153, 376–387 (1981) [doi:10.1007/BF00384257 ] Equation C-79 Licor manual describes total flow water vapor   leaf interior ambient air using gtw, H2O_i,   H2O_s, transpiration rate E: (1) gtw = E * (1000 - (H2O_i + H2O_s) / 2) / (H2O_i - H2O_s) steady-state conditions, flux H2O molecules across portion   gas flow identical E, can also apply equation   flow water vapor leaf surface ambient air: (2) gbw = E * (1000 - (H2O_surf + H2O_s) / 2) / (H2O_surf - H2O_s) Equation (2) can solved H2O_surf: (3) H2O_surf = (E * (1000 - H2O_s / 2) + gbw * H2O_s) / (gbw + E / 2) Equation C-70 Licor manual describes calculate saturation water   vapor pressure air temperature. leaf surface, air temperature   leaf temperature (Tleaf; degrees C),   can determine SVPleaf using Equation C-70 follows: (4) SVPleaf = 0.6135 * e^((17.502 * Tleaf) / (240.97 + Tleaf)) gas exchange measurements, assume water vapor saturated   leaf's intecellular spaces, can determine H2O_i   SVPleaf relationship partial pressure molar gas   concentration: (5) H2O_i = SVPleaf / Pcham = SVPleaf / (Pa + deltaPcham) Pcham th total pressure sample chamber, Pa   atmospheric pressure, deltaPcham chamber overpressure.   related Pcham = Pa + deltaPcham. relative humidity leaf surface RHleaf can determined   H2O_surf SVPleaf using definitions relative humidity   partial pressure: (6) RHleaf = Pwl / SVPleaf = H2O_surf * (Pa + deltaPcham) / SVPleaf Pwl, partial pressure H2O leaf surface, given   H2O_surf * Pcham. CO2 conductances stomata boundary layer can determined   corresponding H2O conductances using ratios molecular   diffusivities two molecules, explained vicinty Equation   C-106 Licor manual: (7) gsc = gsw / 1.6 (8) gbc = gbw / 1.37 Equation C-105 Licor manual describes flow CO2 ambient   air intercellular spaces: (9) C_i = ((gtc - E / 2) * Ca - ) / (gtc + E / 2) replaced C_s (CO2 concentration sample   chamber) Ca clarity. steady state conditions, flows   H2O CO2 identical E , respectively, can   also apply equation flow CO2 ambient air leaf   surface: (10) Csurface = ((gbc - E / 2) * Ca - ) / (gbc + E / 2) function uses Equations (3)-(8) (10) calculate desired values.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gas_properties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate gas properties that are typically not included in Licor files — calculate_gas_properties","text":"exdf object based licor_exdf includes following   additional columns, calculated described : H2O_surf,   SVPleaf, H2O_i, RHleaf, gsc, gbc,   Csurface. category new columns   calculate_gas_properties indicate created using   function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gas_properties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate gas properties that are typically not included in Licor files — calculate_gas_properties","text":"","code":"# Read an example Licor file included in the PhotoGEA package, calculate the # total pressure, and calculate additional gas properties. licor_file <- read_gasex_file(   PhotoGEA_example_file_path('ball_berry_1.xlsx') )  licor_file <- calculate_total_pressure(licor_file)  licor_file <- calculate_gas_properties(licor_file)  licor_file$units$RHleaf      # View the units of the new `RHleaf` column #> [1] \"%\" licor_file$categories$RHleaf # View the category of the new `RHleaf` column #> [1] \"calculate_gas_properties\" licor_file[,'RHleaf']        # View the values of the new `RHleaf` column #>  [1] 72.82992 73.97870 74.65520 73.30259 73.32851 73.76332 74.02142 83.24810 #>  [9] 82.76472 81.59332 82.83944 79.67378 79.80127 79.81986 81.01622 81.70109 #> [17] 81.91860 81.55661 81.12870 78.16409 77.93890 76.56099 78.22673 78.97098 #> [25] 78.41431 78.65405 79.31713 76.73647"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gm_busch.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate mesophyll conductance to CO2 diffusion — calculate_gm_busch","title":"Calculate mesophyll conductance to CO2 diffusion — calculate_gm_busch","text":"Calculates mesophyll conductance CO2 diffusion (gmc) combined   gas exchange isotope discrimination measurements described Busch   et al. (2020). function can accomodate alternative colum names   variables taken exdf_obj; also checks units   required column produce error units incorrect.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gm_busch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate mesophyll conductance to CO2 diffusion — calculate_gm_busch","text":"","code":"calculate_gm_busch(     exdf_obj,     e = -3,     f = 11,     e_star_equation = 20,     gm_type = 'dis',     a_bar_column_name = 'a_bar',     a_column_name = 'A',     ci_column_name = 'Ci',     co2_s_column_name = 'CO2_s',     csurface_column_name = 'Csurface',     delta_c13_r_column_name = 'delta_C13_r',     delta_obs_growth_column_name = 'Delta_obs_growth',     delta_obs_tdl_column_name = 'Delta_obs_tdl',     gamma_star_column_name = 'Gamma_star_tl',     rl_column_name = 'RL',     total_pressure_column_name = 'total_pressure',     t_column_name = 't'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gm_busch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate mesophyll conductance to CO2 diffusion — calculate_gm_busch","text":"exdf_obj exdf object. e isotopic fractionation day respiration ppt. f isotopic fractionation photorespiration ppt. e_star_equation equation Busch et al. (2020) use calculating e_star;     must 19 20. gm_type Determines whether day respiration assumed isotopically connected     CBB cycle (gm_type = 'con') isotopically disconnected     CBB cycle (gm_type = 'dis'). choice determine     equations used calculate mesophyll conductance; gm_type     'con', Equations 2 21 used; otherwise, Equations 13     22 used. a_bar_column_name name column exdf_obj contains weighted     isotopic fractionation across boundary layer stomata ppt.     Values a_bar typically calculated using     calculate_ternary_correction. a_column_name name column exdf_obj contains net CO2     assimilation rate micromol m^(-2) s^(-1). ci_column_name name column exdf_obj contains intercellular     CO2 concentration micromol mol^(-1). co2_s_column_name name column exdf_obj contains CO2     concentration sample line (outgoing air) micromol mol^(-1). csurface_column_name name column exdf_obj contains CO2     concentration leaf surface micromol mol^(-1). Values     Csurface typically calculated using     calculate_gas_properties. delta_c13_r_column_name name column exdf_obj contains CO2 isotope     ratio reference line (incoming air) ppt. delta_obs_growth_column_name name column exdf_obj contains observed     discrimination typical CO2 concentration plant's     environment growth (ppt). required     using Equation 20 e_star (see e_star_equation). delta_obs_tdl_column_name name column exdf_obj contains observed isotope     discrimination values ppt. gamma_star_column_name name column exdf_obj contains chloroplastic     CO2 concentration CO2 gains Rubisco carboxylation exactly     balanced CO2 losses Rubisco oxygenation, leaf temperature,     expressed micromol mol^(-1).  Values Gamma_star leaf     temperature typically calculated using     calculate_gamma_star     calculate_temperature_response. rl_column_name name column exdf_obj contains rate     non-photorespiratory CO2 release light,     micromol m^(-2) s^(-1). total_pressure_column_name name column exdf_obj contains total pressure     bar. t_column_name name column exdf_obj contains ternary     correction factor (dimensionless). Values t typically     calculated using calculate_ternary_correction","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gm_busch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate mesophyll conductance to CO2 diffusion — calculate_gm_busch","text":"function uses model photosynthetic discrimination 13C   C3 plants determine mesophyll conductance values described Busch et   al. (2020). paper provides two alternate ways calculate e_star,   two alternate ways calculate mesophyll conductance gmc;   function allows user choose . detail:  Isotopic fractionation due day respiration           (e_prime = e + e_star) calculated e_star given           either Equation 19 20 depending value           e_star_equation. Isotopic discrimination assuming infinite mesophyll conductance           (Delta_i) calculated setting Cc = Ci either           Equation 2 13, depending value gm_type. Mesophyll conductance CO2 (gmc) calculated using either           Equation 21 22, depending value gm_type. Note 1: Setting e_star_equation = 19 gm_type = 'con'   produce identical similar results calculate_gm_ubierna. Note 2: Using e_star_equation = 20 gm_type = 'dis'   expected accurate, discussed Busch et al. (2020); however,   aware method requires value Delta_obs_growth, may   always available unless intentionally measured. References: Busch, F. ., Holloway-Phillips, M., Stuart-Williams, H. Farquhar, G. D.   \"Revisiting carbon isotope discrimination C3 plants shows respiration rules   photosynthesis low.\" Nat. Plants 6, 245–258 (2020)   [doi:10.1038/s41477-020-0606-6 ].","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gm_busch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate mesophyll conductance to CO2 diffusion — calculate_gm_busch","text":"exdf object based exdf_obj includes following   additional columns, calculated described : e_prime,   e_star, Delta_i, gmc, well values   intermediate calculations Delta_i_term_1   Delta_i_term_2. category new columns   calculate_gm_busch indicate created using   function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gm_busch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate mesophyll conductance to CO2 diffusion — calculate_gm_busch","text":"","code":"## In this example we load gas exchange and TDL data files, calibrate the TDL ## data, pair the data tables together, and then calculate mesophyll conductance  # Read the TDL data file, making sure to interpret the time zone as US Central # time tdl_data <- read_gasex_file(   PhotoGEA_example_file_path('tdl_for_gm.dat'),   'TIMESTAMP',   list(tz = 'America/Chicago') )  # Identify cycles within the TDL data tdl_data <- identify_tdl_cycles(   tdl_data,   valve_column_name = 'valve_number',   cycle_start_valve = 20,   expected_cycle_length_minutes = 2.7,   expected_cycle_num_valves = 9,   timestamp_colname = 'TIMESTAMP' )  # Use reference tanks to calibrate the TDL data processed_tdl <- consolidate(by(   tdl_data,   tdl_data[, 'cycle_num'],   process_tdl_cycle_erml,   noaa_valve = 2,   calibration_0_valve = 20,   calibration_1_valve = 21,   calibration_2_valve = 23,   calibration_3_valve = 26,   noaa_cylinder_co2_concentration = 294.996,   noaa_cylinder_isotope_ratio = -8.40,   calibration_isotope_ratio = -11.505 ))  # Read the gas exchange data, making sure to interpret the time stamp in the US # Central time zone licor_data <- read_gasex_file(   PhotoGEA_example_file_path('licor_for_gm_site11.xlsx'),   'time',   list(tz = 'America/Chicago') )  # Get TDL valve information from Licor file name; for this TDL system, the # reference valve is 12 when the sample valve is 11 licor_data <- get_sample_valve_from_filename(licor_data, list('11' = 12))  # Get oxygen info from the Licor file preamble (needed for calculate_gamma_star) licor_data <- get_oxygen_from_preamble(licor_data)  # Pair the Licor and TDL data by locating the TDL cycle corresponding to each # Licor measurement licor_data <- pair_gasex_and_tdl(licor_data, processed_tdl$tdl_data)  # Calculate total pressure (needed for calculate_gas_properties) licor_data <- calculate_total_pressure(licor_data)  # Calculate Csurface (needed for calculate_ternary_correction) licor_data <- calculate_gas_properties(licor_data)  # Calculate ternary correction licor_data <- calculate_ternary_correction(licor_data)  # Set Rubisco specificity (needed for calculate_gamma_star) licor_data <- set_variable(     licor_data,     'rubisco_specificity_tl',     'M / M',     value = 90 )  # Calculate Gamma_star (needed for calculate_gm_busch) licor_data <- calculate_gamma_star(licor_data)  # Calculate isotope discrimination (needed for calculate_gm_busch) licor_data <- calculate_isotope_discrimination(licor_data)  # Set Delta_obs_growth to the average of Delta_obs_tdl over the first 6 points, # where the ambient CO2 concentration was set to the atmospheric value (420 ppm) # (needed for calculate_gm_busch). licor_data <- set_variable(   licor_data,   'Delta_obs_growth',   'ppt',   value = mean(licor_data[1:6, 'Delta_obs_tdl']) )  # Set respiration (needed for calculate_gm_busch) licor_data <- set_variable(   licor_data,   'RL',   'micromol m^(-2) s^(-1)',   value = 1.2 )  # Calculate mesophyll conductance licor_data <- calculate_gm_busch(licor_data)  # Calculate Cc using the new values of mesophyll conductance licor_data <- calculate_temperature_response(   licor_data,   c3_temperature_param_flat['gmc_norm'] )  licor_data <- set_variable(   licor_data,   'gmc_at_25',   units = licor_data$units$gmc,   value = licor_data[, 'gmc'] )  licor_data <- apply_gm(licor_data)  # View some of the results licor_data[, c('replicate', 'CO2_s', 'Delta_obs_tdl', 'e_prime', 'gmc', 'Ci', 'Cc')] #>    replicate   CO2_s Delta_obs_tdl     e_prime       gmc       Ci        Cc #> 1          1 417.363      8.039825 -0.18823755 0.1741137 286.7663 101.17189 #> 2          1 420.552      8.137268 -0.19234146 0.1842765 276.9970 102.18116 #> 3          1 418.796      7.893969  0.22659156 0.1673504 291.8317  99.70574 #> 4          1 419.493      8.029239  0.04858619 0.1692784 291.1437 101.74081 #> 5          1 420.102      8.964915 -0.79223714 0.1802174 293.7559 116.20312 #> 6          1 421.133      8.673921 -0.50309810 0.1734677 295.9070 112.18043 #> 7          1 262.873      6.434975  2.07663004 0.1596937 182.7755  55.63881 #> 8          1 262.720      6.747186  1.59617713 0.1656192 181.1386  58.38280 #> 9          1 262.633      6.326945  2.46892812 0.1623944 179.6180  54.31518 #> 10         1 262.271      6.358834  2.17658584 0.1497082 191.7498  55.81379 #> 11         1 262.112      7.450206  0.92544892 0.1536710 199.2717  66.86048 #> 12         1 262.176      6.843263  1.42169819 0.1425367 204.1826  61.70023"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gm_ubierna.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate mesophyll conductance to CO2 diffusion — calculate_gm_ubierna","title":"Calculate mesophyll conductance to CO2 diffusion — calculate_gm_ubierna","text":"Calculates mesophyll conductance CO2 diffusion (gmc) combined   gas exchange isotope discrimination measurements described Ubierna   et al. (2018). function can accomodate alternative colum names   variables taken exdf_obj; also checks units   required column produce error units incorrect.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gm_ubierna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate mesophyll conductance to CO2 diffusion — calculate_gm_ubierna","text":"","code":"calculate_gm_ubierna(     exdf_obj,     e = -3,     f = 11,     a_bar_column_name = 'a_bar',     a_column_name = 'A',     ci_column_name = 'Ci',     co2_s_column_name = 'CO2_s',     csurface_column_name = 'Csurface',     delta_c13_r_column_name = 'delta_C13_r',     delta_obs_tdl_column_name = 'Delta_obs_tdl',     gamma_star_column_name = 'Gamma_star_tl',     rl_column_name = 'RL',     total_pressure_column_name = 'total_pressure',     t_column_name = 't'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gm_ubierna.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate mesophyll conductance to CO2 diffusion — calculate_gm_ubierna","text":"exdf_obj exdf object. e isotopic fractionation day respiration ppt. f isotopic fractionation photorespiration ppt. a_bar_column_name name column exdf_obj contains weighted     isotopic fractionation across boundary layer stomata ppt.     Values a_bar typically calculated using     calculate_ternary_correction. a_column_name name column exdf_obj contains net CO2     assimilation rate micromol m^(-2) s^(-1). ci_column_name name column exdf_obj contains intercellular     CO2 concentration micromol mol^(-1). co2_s_column_name name column exdf_obj contains CO2     concentration sample line (outgoing air) micromol mol^(-1). csurface_column_name name column exdf_obj contains CO2     concentration leaf surface micromol mol^(-1). Values     Csurface typically calculated using     calculate_gas_properties. delta_c13_r_column_name name column exdf_obj contains CO2 isotope     ratio reference line (incoming air) ppt. delta_obs_tdl_column_name name column exdf_obj contains observed isotope     discrimination values ppt. gamma_star_column_name name column exdf_obj contains chloroplastic     CO2 concentration CO2 gains Rubisco carboxylation exactly     balanced CO2 losses Rubisco oxygenation, leaf temperature,     expressed micromol mol^(-1).  Values Gamma_star leaf     temperature typically calculated using     calculate_gamma_star     calculate_temperature_response. rl_column_name name column exdf_obj contains rate     non-photorespiratory CO2 release light,     micromol m^(-2) s^(-1). total_pressure_column_name name column exdf_obj contains total pressure     bar. t_column_name name column exdf_obj contains ternary     correction factor (dimensionless). Values t typically     calculated using calculate_ternary_correction","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gm_ubierna.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate mesophyll conductance to CO2 diffusion — calculate_gm_ubierna","text":"function uses comprehensive model photosynthetic discrimination   13C C3 plants calculate mesophyll conductance, described   Ubierna et al. (2018). particular, following equations source   implemented code:  Isotopic fractionation due day respiration (e_prime)           calculated using Equations 28 30. Isotopic discrimination due photorespiration (Delta_f), due           day respiration (Delta_e), occur Ci = Cc           absence respiratory fractionation (Delta_i)           calculated using Equations 34, 33, 31, respectively. Mesophyll conductance CO2 diffusion (gmc) calculated           using Equation 44. equation broken two factors called           Delta_difference equation_top separately           returned output calculate_gm_ubierna. alternative method calculating gmc, see   calculate_gm_busch. References: Ubierna, N., Holloway-Phillips, M.-M. Farquhar, G. D. \"Using Stable Carbon   Isotopes Study C3 C4 Photosynthesis: Models Calculations.\"   Photosynthesis: Methods Protocols (ed. Covshoff, S.) 155–196 (Springer,   2018) [doi:10.1007/978-1-4939-7786-4_10 ].","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gm_ubierna.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate mesophyll conductance to CO2 diffusion — calculate_gm_ubierna","text":"exdf object based exdf_obj includes following   additional columns, calculated described : e_prime,   Delta_i, Delta_e, Delta_f, Delta_difference,   equation_top, gmc. category new   columns calculate_gm_ubierna indicate created   using function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gm_ubierna.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate mesophyll conductance to CO2 diffusion — calculate_gm_ubierna","text":"","code":"## In this example we load gas exchange and TDL data files, calibrate the TDL ## data, pair the data tables together, and then calculate mesophyll conductance  # Read the TDL data file, making sure to interpret the time zone as US Central # time tdl_data <- read_gasex_file(   PhotoGEA_example_file_path('tdl_for_gm.dat'),   'TIMESTAMP',   list(tz = 'America/Chicago') )  # Identify cycles within the TDL data tdl_data <- identify_tdl_cycles(   tdl_data,   valve_column_name = 'valve_number',   cycle_start_valve = 20,   expected_cycle_length_minutes = 2.7,   expected_cycle_num_valves = 9,   timestamp_colname = 'TIMESTAMP' )  # Use reference tanks to calibrate the TDL data processed_tdl <- consolidate(by(   tdl_data,   tdl_data[, 'cycle_num'],   process_tdl_cycle_erml,   noaa_valve = 2,   calibration_0_valve = 20,   calibration_1_valve = 21,   calibration_2_valve = 23,   calibration_3_valve = 26,   noaa_cylinder_co2_concentration = 294.996,   noaa_cylinder_isotope_ratio = -8.40,   calibration_isotope_ratio = -11.505 ))  # Read the gas exchange data, making sure to interpret the time stamp in the US # Central time zone licor_data <- read_gasex_file(   PhotoGEA_example_file_path('licor_for_gm_site11.xlsx'),   'time',   list(tz = 'America/Chicago') )  # Get TDL valve information from Licor file name; for this TDL system, the # reference valve is 12 when the sample valve is 11 licor_data <- get_sample_valve_from_filename(licor_data, list('11' = 12))  # Get oxygen info from the Licor file preamble (needed for calculate_gamma_star) licor_data <- get_oxygen_from_preamble(licor_data)  # Pair the Licor and TDL data by locating the TDL cycle corresponding to each # Licor measurement licor_data <- pair_gasex_and_tdl(licor_data, processed_tdl$tdl_data)  # Calculate total pressure (needed for calculate_gas_properties) licor_data <- calculate_total_pressure(licor_data)  # Calculate Csurface (needed for calculate_ternary_correction) licor_data <- calculate_gas_properties(licor_data)  # Calculate ternary correction licor_data <- calculate_ternary_correction(licor_data)  # Set Rubisco specificity (needed for calculate_gamma_star) licor_data <- set_variable(     licor_data,     'rubisco_specificity_tl',     'M / M',     value = 90 )  # Calculate Gamma_star (needed for calculate_gm_ubierna) licor_data <- calculate_gamma_star(licor_data)  # Calculate isotope discrimination (needed for calculate_gm_ubierna) licor_data <- calculate_isotope_discrimination(licor_data)  # Set respiration (needed for calculate_gm_ubierna) licor_data <- set_variable(   licor_data,   'RL',   'micromol m^(-2) s^(-1)',   value = 1.2 )  # Calculate mesophyll conductance licor_data <- calculate_gm_ubierna(licor_data)  # Calculate Cc using the new values of mesophyll conductance licor_data <- calculate_temperature_response(   licor_data,   c3_temperature_param_flat['gmc_norm'] )  licor_data <- set_variable(   licor_data,   'gmc_at_25',   units = licor_data$units$gmc,   value = licor_data[, 'gmc'] )  licor_data <- apply_gm(licor_data)  # View some of the results licor_data[, c('replicate', 'CO2_s', 'Delta_obs_tdl', 'gmc', 'Ci', 'Cc')] #>    replicate   CO2_s Delta_obs_tdl       gmc       Ci        Cc #> 1          1 417.363      8.039825 0.1741069 286.7663 101.16460 #> 2          1 420.552      8.137268 0.1842769 276.9970 102.18154 #> 3          1 418.796      7.893969 0.1673113 291.8317  99.66079 #> 4          1 419.493      8.029239 0.1692570 291.1437 101.71697 #> 5          1 420.102      8.964915 0.1803390 293.7559 116.32286 #> 6          1 421.133      8.673921 0.1735334 295.9070 112.25005 #> 7          1 262.873      6.434975 0.1593770 182.7755  55.38615 #> 8          1 262.720      6.747186 0.1653412 181.1386  58.17641 #> 9          1 262.633      6.326945 0.1620221 179.6180  54.02724 #> 10         1 262.271      6.358834 0.1494173 191.7498  55.54918 #> 11         1 262.112      7.450206 0.1535156 199.2717  66.72640 #> 12         1 262.176      6.843263 0.1423399 204.1826  61.50326"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_isotope_discrimination.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate photosynthetic isotope discrimination — calculate_isotope_discrimination","title":"Calculate photosynthetic isotope discrimination — calculate_isotope_discrimination","text":"Calculates photosynthetic carbon isotope discrimination combined gas   exchange tunable diode laser absorption spectroscopy measurements.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_isotope_discrimination.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate photosynthetic isotope discrimination — calculate_isotope_discrimination","text":"","code":"calculate_isotope_discrimination(     exdf_obj,     co2_r_column_name = 'CO2_r',     co2_s_column_name = 'CO2_s',     delta_C13_r_column_name = 'delta_C13_r',     delta_C13_s_column_name = 'delta_C13_s',     h2o_r_column_name = 'H2O_r',     h2o_s_column_name = 'H2O_s',     tdl_12C_r_column_name = 'calibrated_12c_r',     tdl_12C_s_column_name = 'calibrated_12c_s'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_isotope_discrimination.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate photosynthetic isotope discrimination — calculate_isotope_discrimination","text":"exdf_obj exdf object representing combined data gas exchange +     isotope discrimination measurement system. Typically exdf_obj     produced calling pair_gasex_and_tdl. co2_r_column_name name column exdf_obj contains CO2     concentration gas exchange reference line (incoming air) measured     gas exchange system micromol mol^(-1). co2_s_column_name name column exdf_obj contains CO2     concentration gas exchange sample line (outgoing air)     micromol mol^(-1). delta_C13_r_column_name name column exdf_obj contains CO2 isotope     ratio gas exchange reference line (incoming air) ppt. delta_C13_s_column_name name column exdf_obj contains CO2 isotope     ratio gas exchange sample line (outgoing air) ppt. h2o_r_column_name name column exdf_obj contains H2O     concentration gas exchange reference line (incoming air) measured     gas exchange system mmol mol^(-1). h2o_s_column_name name column exdf_obj contains H2O     concentration gas exchange sample line (outgoing air) measured     gas exchange system mmol mol^(-1). tdl_12C_r_column_name name column exdf_obj contains 12CO2     concentration gas exchange reference line (incoming air) measured     TDL ppm. tdl_12C_s_column_name name column exdf_obj contains 12CO2     concentration gas exchange sample line (outgoing air) measured     TDL ppm.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_isotope_discrimination.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate photosynthetic isotope discrimination — calculate_isotope_discrimination","text":"described Ubierna et al. (2018), photosynthetic 13C discrimination can   determined combined gas exchange tunable diode laser (TDL)   absorption spectroscopy measurements according : Delta_obs = xsi * (delta_out - delta_in) / (1 + delta_out - xsi * (delta_out - delta_in)), Delta_obs observed discrimination, delta_in   delta_out carbon isotope ratios dry air flowing   leaf chamber. xsi given xsi = C_in / (C_in - C_out), C_in C_out mole fractions 12CO2 dry air   flowing leaf chamber. (See equations 5 6 Ubierna et   al. (2018)). practice, multiple options calculating Delta_obs   xsi CO2 concentrations measured gas exchange   system TDL. example, can alternately calculate xsi   xsi_tdl = C_in_tdl / (C_in_tdl - C_out_tdl)   xsi_gasex = C_in_gasex / (C_in_gasex - C_out_gasex). Likewise, can   also calculate Delta_obs_tdl using xsi_tdl   Delta_obs_gasex using xsi_gasex. TDL values typically   preferred subsequent calculations, can useful compare two   different versions consistency check; TDL gas exchange values   similar . two subtelties associated xsi_gasex. One gas   exchange system generally measures total CO2 concentration, just   12CO2 concentration. Typically much less 13CO2 12CO2   usually large source error. issue gas exchange system generally measures CO2   concentrations wet air. Thus, important use \"corrected\" values   CO2 concentrations account \"dilution effect\" due water vapor   air. effect described Licor LI-6400 manual: \"  correction don’t , least computing CO2 concentration   LI-6400. dilution effect simply : add molecules gas   (water vapor, example) mixture, fraction mixture   made something else (mole fraction CO2, instance)   decrease, since total number molecules mixture increased.   Now airsteam flowing though chamber containing transpiring leaf (  chamber sitting moist soil), definitely dilution.   However, ignore effect computing CO2 concentration, account   computing photosynthetic rate (soil CO2 efflux). Thus,   LI-6400 IRGA always indicating actual CO2 concentration,   CO2 concentration water vapor .\" account dilution effect, define \"corrected\" CO2 concentration   CO2_corrected = CO2 / (1 - H2O), H2O water vapor   concentration air. Note: TDL always measures concentrations dry   air, correction required. References: Ubierna, N., Holloway-Phillips, M.-M. Farquhar, G. D. \"Using Stable Carbon   Isotopes Study C3 C4 Photosynthesis: Models Calculations.\"   Photosynthesis: Methods Protocols (ed. Covshoff, S.) 155–196 (Springer,   2018) [doi:10.1007/978-1-4939-7786-4_10 ].","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_isotope_discrimination.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate photosynthetic isotope discrimination — calculate_isotope_discrimination","text":"exdf object based exdf_obj includes several new   columns: CO2_r_corrected, CO2_s_corrected,   Delta_obs_gasex, Delta_obs_tdl, xsi_gasex,   xsi_tdl.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_isotope_discrimination.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate photosynthetic isotope discrimination — calculate_isotope_discrimination","text":"","code":"## In this example we load gas exchange and TDL data files, calibrate the TDL ## data, pair the data tables together, and then calculate isotope ## discrimination  # Read the TDL data file, making sure to interpret the time zone as US Central # time tdl_data <- read_gasex_file(   PhotoGEA_example_file_path('tdl_for_gm.dat'),   'TIMESTAMP',   list(tz = 'America/Chicago') )  # Identify cycles within the TDL data tdl_data <- identify_tdl_cycles(   tdl_data,   valve_column_name = 'valve_number',   cycle_start_valve = 20,   expected_cycle_length_minutes = 2.7,   expected_cycle_num_valves = 9,   timestamp_colname = 'TIMESTAMP' )  # Use reference tanks to calibrate the TDL data processed_tdl <- consolidate(by(   tdl_data,   tdl_data[, 'cycle_num'],   process_tdl_cycle_erml,   noaa_valve = 2,   calibration_0_valve = 20,   calibration_1_valve = 21,   calibration_2_valve = 23,   calibration_3_valve = 26,   noaa_cylinder_co2_concentration = 294.996,   noaa_cylinder_isotope_ratio = -8.40,   calibration_isotope_ratio = -11.505 ))  # Read the gas exchange data, making sure to interpret the time stamp in the US # Central time zone licor_data <- read_gasex_file(   PhotoGEA_example_file_path('licor_for_gm_site11.xlsx'),   'time',   list(tz = 'America/Chicago') )  # Get TDL valve information from Licor file name; for this TDL system, the # reference valve is 12 when the sample valve is 11 licor_data <- get_sample_valve_from_filename(licor_data, list('11' = 12))  # Pair the Licor and TDL data by locating the TDL cycle corresponding to each # Licor measurement licor_data <- pair_gasex_and_tdl(licor_data, processed_tdl$tdl_data)  # Calculate isotope discrimination licor_data <- calculate_isotope_discrimination(licor_data)  # View some of the results licor_data[, c('A', 'xsi_gasex', 'xsi_tdl', 'Delta_obs_gasex', 'Delta_obs_tdl')] #>           A xsi_gasex  xsi_tdl Delta_obs_gasex Delta_obs_tdl #> 1  32.01867  2.510456 2.540888        7.942769      8.039825 #> 2  31.91890  2.521554 2.543284        8.067182      8.137268 #> 3  31.85562  2.523357 2.554531        7.796886      7.893969 #> 4  31.76382  2.530288 2.558995        7.938451      8.029239 #> 5  31.69923  2.535830 2.566007        8.858551      8.964915 #> 6  31.57078  2.546019 2.577742        8.566263      8.673921 #> 7  20.11287  2.514564 2.521923        6.416078      6.434975 #> 8  20.13905  2.511140 2.487037        6.813021      6.747186 #> 9  20.15698  2.509569 2.513636        6.316644      6.326945 #> 10 20.16227  2.508597 2.514022        6.345027      6.358834 #> 11 20.16253  2.509236 2.515784        7.430670      7.450206 #> 12 20.12078  2.514499 2.521075        6.825291      6.843263"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_jmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate maximum electron transport rate — calculate_jmax","title":"Calculate maximum electron transport rate — calculate_jmax","text":"Calculates maximum electron transport rates (Jmax) estimates   electron transport rate (J) particular values incident light   (Qin). function typically used fit_c3_aci,   fit_c3_variable_j, fit_c4_aci used   estimate values J.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_jmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate maximum electron transport rate — calculate_jmax","text":"","code":"calculate_jmax(     data_table,     alpha_j_at_25 = 'column',     theta_j_at_25 = 'column',     alpha_j_norm_column_name = 'alpha_j_norm',     qin_column_name = 'Qin_avg',     theta_j_norm_column_name = 'theta_j_norm',     tleaf_column_name = 'TleafCnd_avg',     ...   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_jmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate maximum electron transport rate — calculate_jmax","text":"data_table table-like R object data frame exdf. alpha_j_at_25 apparent quantum efficiency electron transport alpha_j 25     degrees C (dimensionless). alpha_j_at_25 number,     must column data_table called alpha_j_at_25     appropriate units. numeric value supplied overwrite values     alpha_j_at_25 column data_table exists. theta_j_at_25 empirical curvature parameter theta_j_at_25 25 degrees C     (dimensionless). theta_j_at_25 number, must     column data_table called theta_j_at_25 appropriate     units. numeric value supplied overwrite values     theta_j_at_25 column data_table exists. alpha_j_norm_column_name name column data_table contains normalized     alpha_j values (units     normalized alpha_j 25 degrees C). qin_column_name name column data_table contains values     incident photosynthetically active flux density     micromol m^(-2) s^(-1). theta_j_norm_column_name name column data_table contains normalized     theta_j values (units     normalized theta_j 25 degrees C). tleaf_column_name name column data_table contains leaf     temperature units degrees C. ... Optional arguments; see .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_jmax.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate maximum electron transport rate — calculate_jmax","text":"Basic Requirements: function requires data_table contains columns called   J_at_25 J_tl_avg, included output   one PhotoGEA fitting functions (fit_c3_aci,   fit_c3_variable_j, fit_c4_aci).   used calculate values Jmax 25 degrees C leaf   temperature. columns J confidence intervals included   data_table (J_at_25_upper, J_at_25_lower,   J_tl_avg_upper, J_tl_avg_lower), corresponding confidence   intervals Jmax also calculated. default, function take values alpha_j   theta_j columns data_table names. data_table exdf object, units checked   columns used calculations. Overview Jmax Calculations: potential electron transport rate going support RuBP regeneration   (J) depends available light energy. J quickly increases   incident photosynthetically active photon flux density (Qin)   low light levels, gradually reaching plateau high values   Qin. Although mathematical representations used (Walker   et al. 2021), dependence typically represented non-rectangular   hyperbola: J = (I2 + Jmax - sqrt[(I2 + Jmax)^2 - 4 * theta_j * I2 * Jmax]) /   (2 * theta_j), (Eq. 1) Jmax maximum value J achieved   infinitely large Qin, 0 < theta_j <= 1 empirical   curvature parameter, I2 useful energy absorbed   photosystem II. turn, I2 calculated I2 = alpha_j * Qin, alpha_j apparent quantum efficiency electron transport.   alpha_j often defined alpha_j = absorptance * phi_psii,max * beta_psii, absorptance leaf absorptance, phi_psii,max   maximum quantum yield photosytem II, beta_psii fraction   light energy partitioned photosystem II. Equation 1 can understood \"smooth minimum\" two potential rates   electron transport: I2 (increases linearly Qin)   Jmax (independent Qin). lower light levels,   I2 smaller rate, J approximately equal   I2; high light levels, Jmax smaller rate,   J approximately equal Jmax. intermediate values   Qin, J smoothly transitions I2 Jmax. equation often solved Jmax, thus necessary   consider conditions solution appropriate. One key   property Equation 1 largest possible value J   given Qin I2, occurs Jmax much   larger I2. words, considered function   Jmax, range function Equation 1 0 <= J <= I2. Equation 1 can solved Jmax, enabling calculations Jmax   estimates J: Jmax = J * (I2 - theta_j * J) / (I2 - J) (Eq. 2) range function Equation 1 0 <= J <= I2,   domain inverse function (defined Equation 2) also   0 <= J <= I2. words, Jmax can calculated using   Equation 2 J < I2. Otherwise, value Jmax   can reproduce value J given value   alpha_j. restriction can also derived rigorously; see   Detailed algebra section information. J >= I2, calculate_jmax function return NA   value Jmax. behavior can bypassed setting   optional input argument ignore_restriction TRUE,   recommended outside pedagogical purposes. See Example 2   demonstration goes wrong Equation 2 used J >= I2. Note issue significant lower light levels. example,   assuming typical value alpha_j (0.293), I2   Qin = 1800 micromol / m^2 / s 527.4 micromol / m^2 / s. Values   J typically smaller , estimate Jmax can   almost always made. curve measured Qin = 300,   I2 87.9 micromol / m^2 / s, placing stronger   restriction values J Jmax can estimated. Say   best-fit value J 88.9 micromol / m^2 / s curve   measured Qin = 300 micromol / m^2 / s; case,   possible estimate Jmax, potentially indicating assumed   value alpha_j correct. Typical values: According von Caemmerer (2000), typical values absorptance,   phi_psii,max, beta_psii 0.85, 1 - 0.15, 0.5,   respectively, leading alpha_j = 0.36125, curvature parameter   theta_j typically 0.7. Bernacchi et al. (2003) reports phi_psii,max 0.6895   light-adapted leaves 25 degrees C, theta_j 25 degrees C   0.97875. Using value phi_psii,max typical values   absorptance beta_psii results alpha_j estimate   0.2930375. clear whether temperture response defined Bernacchi et al.   (2003) applicable C4 leaves. C4 leaves, may better use   temperature-independent estimates von Caemmerer (2000). PhotoGEA provides two Jmax parameter lists can passed   calculate_temperature_response:   jmax_temperature_param_bernacchi (implements Bernacchi et   al. 2003 values) jmax_temperature_param_flat (implements   von Caemmerer 2000 values). parameter lists calculate   values alpha_j_at_25, alpha_j_norm, theta_j_at_25,   theta_j_norm. Absorbed light basis: Values Jmax can also estimated absorbed   photosynthetically active photon flux density (Qabs). case,   can regroup terms definition I2 follows: I2 = (Qin * absorptance) * (phi_psii,max * beta_psii) = Qabs * alpha_j_abs, alpha_j_abs given phi_psii,max * beta_psii.   working basis, default value alpha_j 25 degrees C   divided assumed absorptance (0.85). example, default   value alpha_j_at_25 used Bernacchi et al. (2003) parameters   0.2930375, dividing 0.95 yielding alpha_j_abs   value 0.345. value passed directly   calculate_jmax via alpha_j_at_25 input argument, overriding   default value. Along change, also necessary   change name light column, likely Qabs_avg. PhotoGEA Uses Separate Function Jmax: principle, values Jmax estimated fitting   functions estimate J: fit_c3_aci,   fit_c3_variable_j, fit_c4_aci. Instead,   PhotoGEA requires users use separate function (calculate_jmax)   estimate Jmax. serves several purposes:  highlights estimates Jmax made using           equations C3 C4 leaves. leaves open possibility estimates Jmax,           based rectangular hyperbola instead           non-rectangular hyperbola used . emphasizes sometimes possible provide estimate           Jmax, depending values Qin,           alpha_j, J, requirement           J < I2 = alpha_j * Qin. last point especially important. Jmax varied   fitting process, J estimated Jmax using Equation 1,   restriction possible values J   obtained: J < alpha_j * Qin. potentially bias fitting   results, since may case best fit found   J outside range. words, keeping estimates Jmax separate fitting   process ensures values alpha_j theta_j   influence fits best-fit values J. important since   true values parameters particular leaf difficult   impossible determine. Detailed algebra: solve Equation 1 Jmax, arriving Equation 2.   algebra reproduced highlight important restriction   J < I2. First, multiply sides Equation 1 2 * theta_j: 2 * theta_j * J = I2 + Jmax - sqrt[(I2 + Jmax)^2 - 4 * theta_j * I2 * Jmax]. (Eq. 3) Next, isolate square root term one side: I2 + Jmax - 2 * theta_j * J = sqrt[(I2 + Jmax)^2 - 4 * theta_j * I2 * Jmax]. (Eq. 4) key point right hand side negative, since   square root real number never negative. Thus, left hand side also   negative. words, I2 + Jmax - 2 * theta_j * J >= 0. (Eq. 5) return restriction later. now, square sides   Equation 4: (I2 + Jmax)^2 - 4 * theta_j * J * (I2 + Jmax) + 4 * theta_j^2 * J^2 =   (I2 + Jmax)^2 - 4 * theta_j * I2 * Jmax. (Eq. 6) term (I2 + Jmax)^2 appears sides Equation 6 can   therefore cancelled . Grouping remaining terms contain   Jmax one side, : 4 * theta_j * Jmax * (I2 - J) = 4 * theta_j * J * (I2 - theta_j * J) (Eq. 7) Finally, provided I2 - J zero (words,   I2 equal J), can divide sides Equation 7   4 * theta_j * (I2 - J) obtain Equation 2 . Now, can use expression (Equation 2) replace Jmax   Equation 5: I2 + J * (I2 - theta_j * J) / (I2 - J) - 2 * theta_j * J >= 0. (Eq. 8) can converted single ratio follows: [(I2 - 2 * theta_j * J) * (I2 - J) + J * (I2 - theta_j * J)] / (I2 - J) >= 0. (Eq. 9) Multiplying factors numerator collecting like terms,   Equation 9 becomes [I2^2 - 2 * theta_j * I2 * J + theta_j * J^2] / (I2 - J) >= 0. (Eq. 10) theta_j must lie 0 1, theta_j^2 always   less equal theta_j. allows us place lower bound   value numerator left hand side Equation 10: I2^2 - 2 * theta_j * I2 * J + theta_j * J^2 >=   I2^2 - 2 * theta_j * I2 * J + theta_j^2 * J^2. (Eq. 11) right hand side Equation 11 can refactored: I2^2 - 2 * theta_j * I2 * J + theta_j * J^2 >=   (I2 - theta_j J)^2. (Eq. 12) right hand side Equation 12 can never negative, can   also conclude numerator left hand side Equation 10 can also   never negative. Thus, inequality Equation 10 satisfied whenever   denominator positive. words, whenever I2 - J > 0, ,   equivalently, J < I2. Thus, shown Equation 2 holds whenever J < I2, since,   inequality satisfied, Equation 5 also satisfied. Although , can shown I2 < J,   value Jmax calculated Equation 2 inverse J = (I2 + Jmax + sqrt[(I2 + Jmax)^2 - 4 * theta_j * I2 * Jmax]) /   (2 * theta_j) (Eq. 13) rather inverse Equation 1. Note difference: Equation 13,   square root term added I2 + Jmax rather subtracted.   \"smooth maximum\" function, rather smooth minimum. fact,   whenever I2 > Jmax, Equation 13 predict J > Jmax, clearly   nonsensical result. Likewise, inverse function Equation 13   predict values Jmax smaller J.   Example 2 shows can even return negative values Jmax,   clearly reasonable biological perspective. References:  von Caemmerer, S. \"Biochemical Models Leaf Photosynthesis\" (CSIRO           Publishing, 2000) [doi:10.1071/9780643103405 ]. Walker, . P. et al. \"Multi-hypothesis comparison Farquhar           Collatz photosynthesis models reveals unexpected influence           empirical assumptions leaf global scales.\" Global Change           Biology 27, 804–822 (2021) [doi:10.1111/gcb.15366 ]. Bernacchi, C. J., Pimentel, C. & Long, S. P. \"vivo temperature           response functions parameters required model RuBP-limited           photosynthesis\" Plant, Cell & Environment 26, 1419–1430 (2003)           [doi:10.1046/j.0016-8025.2003.01050.x ].","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_jmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate maximum electron transport rate — calculate_jmax","text":"return value table based data_table includes several   new columns: I2_at_25, Jmax_at_25, Jmax_at_25_msg,   I2_tl, Jmax_tl, Jmax_tl_msg. _msg columns   indicate error condition J >= I2 occurred. J confidence intervals provided inputs,   correspoding columns related Jmax, msg values;   example, Jmax_at_25_lower Jmax_at_25_lower_msg.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_jmax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate maximum electron transport rate — calculate_jmax","text":"","code":"## Example 1: Estimating Jmax after fitting several C3 A-Ci curves  # Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('c3_aci_1.xlsx') )  # Define a new column that uniquely identifies each curve licor_file[, 'species_plot'] <-   paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )  # Organize the data; we will need average values of leaf temperature and # incident PPFD in order to calculate Jmax later licor_file <- organize_response_curve_data(     licor_file,     'species_plot',     c(9, 10, 16),     'CO2_r_sp',     columns_to_average = c('TleafCnd', 'Qin') )  # Calculate the total pressure in the Licor chamber licor_file <- calculate_total_pressure(licor_file)  # Calculate temperature-dependent values of C3 photosynthetic parameters licor_file <- calculate_temperature_response(licor_file, c3_temperature_param_bernacchi)  # For these examples, we will use a faster (but sometimes less reliable) # optimizer so they run faster optimizer <- optimizer_nmkb(1e-7)  # Fit all curves in the data set (it is more common to do this) aci_results <- consolidate(by(   licor_file,   licor_file[, 'species_plot'],   fit_c3_aci,   Ca_atmospheric = 420,   optim_fun = optimizer ))  # Calculate temperature-dependent values of Jmax-related parameters aci_results$parameters <- calculate_temperature_response(     aci_results$parameters,     jmax_temperature_param_bernacchi,     'TleafCnd_avg' )  # Calculate Jmax aci_results$parameters <- calculate_jmax(aci_results$parameters)  # Print a few columns col_to_view <- c('species_plot', 'J_at_25', 'J_tl_avg', 'Jmax_at_25', 'Jmax_tl')  print(aci_results$parameters[, col_to_view, TRUE]) #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>   species_plot [NA] (NA) J_at_25 [fit_c3_aci] (micromol m^(-2) s^(-1)) #> 1           soybean - 5a                                      190.8859 #> 2            tobacco - 1                                      231.7749 #> 3            tobacco - 2                                      206.4820 #>   J_tl_avg [fit_c3_aci] (micromol m^(-2) s^(-1)) #> 1                                       268.1496 #> 2                                       319.2523 #> 3                                       285.9199 #>   Jmax_at_25 [calculate_jmax] (micromol m^(-2) s^(-1)) #> 1                                             192.8451 #> 2                                             234.9970 #> 3                                             208.8687 #>   Jmax_tl [calculate_jmax] (micromol m^(-2) s^(-1)) #> 1                                          275.7499 #> 2                                          331.4441 #> 3                                          294.7640  ## Example 2: Illustrating the importance of requiring I2 > J  # Define a data frame with input values npts <- 200 J_seq <- seq_len(npts)  jmax_df <- data.frame(   J_at_25 = J_seq,   J_tl_avg = J_seq,   alpha_j_norm = 1,   Qin_avg = 300,   theta_j_norm = 1,   TleafCnd_avg = 25 )  # Calculate Jmax values, overriding the default behavior so that values of Jmax # are returned even when I2 < J. jmax_df <- calculate_jmax(   jmax_df, alpha_j_at_25 = 0.293, theta_j_at_25 = 0.979,   ignore_restriction = TRUE )  # Plot the Jmax values, distinguishing between cases where J < I2 and where # J > I2. Here we can see that when J > I2, values of Jmax are smaller than J, # and can even be negative, which is clearly unreasonable from a biological # perspective. To highlight these considerations, J = I2 is plotted as a dashed # black line, Jmax = J is plotted as a black long-dashed line, and Jmax = 0 is # plotted as a solid black line. ymin <- -50 ymax <- 250  xmin <- min(J_seq) xmax <- max(J_seq)  I2 <- jmax_df$I2_at_25[1]  jmax_df$Jmax_at_25_msg[jmax_df$Jmax_at_25_msg == ''] <- 'J < I2'  lattice::xyplot(   Jmax_at_25 ~ J_at_25,   group = Jmax_at_25_msg,   data = jmax_df,   auto = TRUE,   type = 'l',   xlim = c(xmin, xmax),   ylim = c(ymin, ymax),   xlab = 'J (micromol / m^2 / s)',   ylab = 'Jmax (micromol / m^2 / s)',   panel = function(x, y, ...) {     lattice::panel.lines(c(0, 0) ~ c(xmin, xmax), lty = 1, col = 'black')     lattice::panel.lines(c(ymin, ymax) ~ c(I2, I2), lty = 2, col = 'black')     lattice::panel.lines(J_seq ~ J_seq, lty = 5, col = 'black')     lattice::panel.xyplot(x, y, ...)   } )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_leakiness_ubierna.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate leakiness — calculate_leakiness_ubierna","title":"Calculate leakiness — calculate_leakiness_ubierna","text":"Calculates leakiness (phi) combined gas exchange isotope   discrimination measurements described Ubierna et al. (2013).   function can accomodate alternative colum names variables taken   exdf_obj; also checks units required column   produce error units incorrect.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_leakiness_ubierna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate leakiness — calculate_leakiness_ubierna","text":"","code":"calculate_leakiness_ubierna(     exdf_obj,     e = -3,     a_bar_column_name = 'a_bar',     a_column_name = 'A',     ci_column_name = 'Ci',     co2_s_column_name = 'CO2_s',     csurface_column_name = 'Csurface',     delta_c13_r_column_name = 'delta_C13_r',     delta_obs_tdl_column_name = 'Delta_obs_tdl',     rl_column_name = 'RL',     t_column_name = 't'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_leakiness_ubierna.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate leakiness — calculate_leakiness_ubierna","text":"exdf_obj exdf object. e isotopic fractionation day respiration ppt. a_bar_column_name name column exdf_obj contains weighted     isotopic fractionation across boundary layer stomata ppt.     Values a_bar typically calculated using     calculate_ternary_correction. a_column_name name column exdf_obj contains net CO2     assimilation rate micromol m^(-2) s^(-1). ci_column_name name column exdf_obj contains intercellular     CO2 concentration micromol mol^(-1). co2_s_column_name name column exdf_obj contains CO2     concentration sample line (outgoing air) micromol mol^(-1). csurface_column_name name column exdf_obj contains CO2     concentration leaf surface micromol mol^(-1). Values     Csurface typically calculated using     calculate_gas_properties. delta_c13_r_column_name name column exdf_obj contains CO2 isotope     ratio reference line (incoming air) ppt. delta_obs_tdl_column_name name column exdf_obj contains observed isotope     discrimination values ppt. rl_column_name name column exdf_obj contains rate day     respiration micromol m^(-2) s^(-1). t_column_name name column exdf_obj contains ternary     correction factor (dimensionless). Values t typically     calculated using calculate_ternary_correction","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_leakiness_ubierna.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate leakiness — calculate_leakiness_ubierna","text":"function uses model photosynthetic discrimination 13C   C4 plants determine leakiness values, described Ubierna et al.   (2013). particular, following equations source   implemented code:  Isotopic fractionation due day respiration (e_prime)           calculated using Equation 21. Leakiness including respiratory photorespiratory fractionations           high light (phi_i) calculated using Equation 16. Leakiness including respiratory photorespiratory fractionations           Cs high light (phi_is) calculated using Equation           15. Leakiness ignoring respiratory photorespiratory fractionations           Cs (phi_sim) calculated using Equation 17. References: Ubierna, N., Sun, W., Kramer, D. M. Cousins, . B. \"efficiency C4   photosynthesis low light conditions Zea mays, Miscanthus x giganteus   Flaveria bidentis.\" Plant, Cell & Environment 36, 365–381 (2013)   [doi:10.1111/j.1365-3040.2012.02579.x ].","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_leakiness_ubierna.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate leakiness — calculate_leakiness_ubierna","text":"exdf object based exdf_obj includes following   additional columns, calculated described : e_prime,   phi_i, phi_is, phi_sim. category   new columns calculate_leakiness_ubierna indicate   created using function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_leakiness_ubierna.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate leakiness — calculate_leakiness_ubierna","text":"","code":"## In this example we load gas exchange and TDL data files, calibrate the TDL ## data, pair the data tables together, and then calculate leakiness. The ## results from this example are not meaningful because these measurements ## were not collected from C4 plants.  # Read the TDL data file, making sure to interpret the time zone as US Central # time tdl_data <- read_gasex_file(   PhotoGEA_example_file_path('tdl_for_gm.dat'),   'TIMESTAMP',   list(tz = 'America/Chicago') )  # Identify cycles within the TDL data tdl_data <- identify_tdl_cycles(   tdl_data,   valve_column_name = 'valve_number',   cycle_start_valve = 20,   expected_cycle_length_minutes = 2.7,   expected_cycle_num_valves = 9,   timestamp_colname = 'TIMESTAMP' )  # Use reference tanks to calibrate the TDL data processed_tdl <- consolidate(by(   tdl_data,   tdl_data[, 'cycle_num'],   process_tdl_cycle_erml,   noaa_valve = 2,   calibration_0_valve = 20,   calibration_1_valve = 21,   calibration_2_valve = 23,   calibration_3_valve = 26,   noaa_cylinder_co2_concentration = 294.996,   noaa_cylinder_isotope_ratio = -8.40,   calibration_isotope_ratio = -11.505 ))  # Read the gas exchange data, making sure to interpret the time stamp in the US # Central time zone licor_data <- read_gasex_file(   PhotoGEA_example_file_path('licor_for_gm_site11.xlsx'),   'time',   list(tz = 'America/Chicago') )  # Get TDL valve information from Licor file name; for this TDL system, the # reference valve is 12 when the sample valve is 11 licor_data <- get_sample_valve_from_filename(licor_data, list('11' = 12))  # Get oxygen info from the Licor file preamble (needed for calculate_gamma_star) licor_data <- get_oxygen_from_preamble(licor_data)  # Pair the Licor and TDL data by locating the TDL cycle corresponding to each # Licor measurement licor_data <- pair_gasex_and_tdl(licor_data, processed_tdl$tdl_data)  # Calculate total pressure (needed for calculate_gas_properties) licor_data <- calculate_total_pressure(licor_data)  # Calculate Csurface (needed for calculate_ternary_correction) licor_data <- calculate_gas_properties(licor_data)  # Calculate ternary correction licor_data <- calculate_ternary_correction(licor_data)  # Calculate isotope discrimination (needed for calculate_leakiness_ubierna) licor_data <- calculate_isotope_discrimination(licor_data)  # Set respiration (needed for calculate_leakiness_ubierna) licor_data <- set_variable(   licor_data,   'RL',   'micromol m^(-2) s^(-1)',   value = 1.2 )  # Calculate leakiness licor_data <- calculate_leakiness_ubierna(licor_data)  # View some of the results licor_data[, c('replicate', 'CO2_s', 'Delta_obs_tdl', 'phi_i', 'phi_sim')] #>    replicate   CO2_s Delta_obs_tdl     phi_i   phi_sim #> 1          1 417.363      8.039825 0.5647984 0.5652561 #> 2          1 420.552      8.137268 0.5787469 0.5791113 #> 3          1 418.796      7.893969 0.5548495 0.5550261 #> 4          1 419.493      8.029239 0.5625286 0.5627514 #> 5          1 420.102      8.964915 0.6097656 0.6098926 #> 6          1 421.133      8.673921 0.5935674 0.5936957 #> 7          1 262.873      6.434975 0.4796541 0.4793111 #> 8          1 262.720      6.747186 0.4966989 0.4966153 #> 9          1 262.633      6.326945 0.4760775 0.4752982 #> 10         1 262.271      6.358834 0.4709619 0.4705850 #> 11         1 262.112      7.450206 0.5193723 0.5192365 #> 12         1 262.176      6.843263 0.4874634 0.4875021"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_temperature_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate temperature-dependent parameter values — calculate_temperature_response","title":"Calculate temperature-dependent parameter values — calculate_temperature_response","text":"Calculate leaf-temperature-dependent values various parameters using   various temperature response functions.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_temperature_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate temperature-dependent parameter values — calculate_temperature_response","text":"","code":"calculate_temperature_response(     exdf_obj,     temperature_response_parameters,     tleaf_column_name = 'TleafCnd'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_temperature_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate temperature-dependent parameter values — calculate_temperature_response","text":"exdf_obj exdf object representing data Licor gas exchange     measurement system. temperature_response_parameters list, element describes temperature response parameter     value. name element must name parameter.     element must list , whose named elements must include type     temperature response function use (type), thee units     parameter (units), values necessary temperature response     parameters. See details. tleaf_column_name name column exdf_obj contains leaf temperature     units degrees C.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_temperature_response.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate temperature-dependent parameter values — calculate_temperature_response","text":"key photosynthetic parameters known vary temperature   according well-established temperature response functions   Arrhenius equation. calculate_temperature_response function can   used calculate temperature-dependent parameter values leaf   temperature. Depending type value supplied element   temperature_response_parameters, one several possible functions   used calculate temperature response: type 'Arrhenius',           calculate_temperature_response_arrhenius function           used. type 'Gaussian',           calculate_temperature_response_gaussian function           used. type 'Johnson',           calculate_temperature_response_johnson function           used. type 'Polynomial',           calculate_temperature_response_polynomial function           used. Values type case-sensitive. rare directly specify parameters; instead, typical   use one pre-set values included   c3_temperature_param_sharkey.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_temperature_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate temperature-dependent parameter values — calculate_temperature_response","text":"exdf object based exdf_obj includes one new column   element temperature_response_parameters,   temperature-dependent values new columns determined using   temperature values specified tleaf_column_name column.   category new columns calculate_temperature_response   indicate created using function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_temperature_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate temperature-dependent parameter values — calculate_temperature_response","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('ball_berry_1.xlsx') )  # In this example we will calculate temperature-dependent values of two # parameters: # # - The `Kc` parameter (in units of `micromol mol^(-1)`) will be calculated #   using an Arrhenius function with scaling constant `c` = 38.05 and activation #   energy `Ea` = 79.43 kJ / mol. # # - The `Jmax` parameter (in units of `micromol m^(-2) s^(-1)) will be #   using a Gaussian function with optimal temperature `t_opt` = 43 degrees C #   and width `sigma` = 16 degrees C. # # So the `temperature_response_parameters` list will contain two elements, # defined as follows:  trp <- list(   Kc = list(     type = 'Arrhenius',     c = 38.05,     Ea = 79.43,     units = 'micromol mol^(-1)'   ),   Jmax = list(     type = 'Gaussian',     optimum_rate = 4,     t_opt = 43,     sigma = 16,     units = 'micromol m^(-2) s^(-1)'   ) )  # Now we can calculate the values of Kc and Jmax at the measured leaf # temperatures recorded in the log file licor_file <- calculate_temperature_response(licor_file, trp)  licor_file$units$Kc      # View the units of the new `Kc` column #> [1] \"micromol mol^(-1)\" licor_file$categories$Kc # View the category of the new `Kc` column #> [1] \"calculate_temperature_response_arrhenius\" licor_file[,'Kc']        # View the values of the new `Kc` column #>  [1]  767.4637  711.9313  675.4765  663.2831  663.2278  656.3085  639.7526 #>  [8]  897.6007  829.9775  830.9330  810.6390  830.9928  830.1736  833.0697 #> [15]  972.8348  917.6827  886.6074  882.3539  879.3607  837.0317  868.3010 #> [22] 1009.1405  938.3377  891.6276  871.3303  879.3247  836.6192  833.9686  licor_file$units$Jmax      # View the units of the new `Jmax` column #> [1] \"micromol m^(-2) s^(-1)\" licor_file$categories$Jmax # View the category of the new `Jmax` column #> [1] \"calculate_temperature_response_gaussian\" licor_file[,'Jmax']        # View the values of the new `Jmax` column #>  [1] 2.284431 2.130094 2.023803 1.987372 1.987206 1.966336 1.915832 2.610843 #>  [9] 2.447311 2.449712 2.398141 2.449862 2.447804 2.455073 2.777885 2.656938 #> [17] 2.585136 2.575099 2.568006 2.464978 2.541577 2.853101 2.703194 2.596917 #> [25] 2.548850 2.567920 2.463949 2.457324"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_temperature_response_arrhenius.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate temperature-dependent values using Arrhenius equations — calculate_temperature_response_arrhenius","title":"Calculate temperature-dependent values using Arrhenius equations — calculate_temperature_response_arrhenius","text":"Calculate leaf-temperature-dependent values various parameters using   Arrhenius equations. rare users call function directly;   instead, used internally   calculate_temperature_response.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_temperature_response_arrhenius.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate temperature-dependent values using Arrhenius equations — calculate_temperature_response_arrhenius","text":"","code":"calculate_temperature_response_arrhenius(     exdf_obj,     arrhenius_parameters,     tleaf_column_name = 'TleafCnd'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_temperature_response_arrhenius.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate temperature-dependent values using Arrhenius equations — calculate_temperature_response_arrhenius","text":"exdf_obj exdf object representing data Licor gas exchange     measurement system. arrhenius_parameters list named lists. list element describe Arrhenius     scaling factor (c), activation energy kJ / mol (Ea),     units (units) variable follows Arrhenius     temperature dependence. name list element     corresponding name variable. tleaf_column_name name column exdf_obj contains leaf temperature     units degrees C.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_temperature_response_arrhenius.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate temperature-dependent values using Arrhenius equations — calculate_temperature_response_arrhenius","text":"Arrhenius equation often used calculate temperature dependence   rate chemical reaction. often stated follows: (1) rate = * exp(-Ea / (R * T)) \"pre-exponential factor\" sets overall scaling,   Ea activation energy, R ideal gas constant,   T temperature Kelvin. See, example,   Wikipedia page equation. photosynthesis research, common use alternative form   equation, pre-exponential factor rewritten   exponent = exp(c), c \"scaling factor\" whose value   can calculated according c = ln()).   formulation, equation becomes: (2) rate = exp(c) * exp(-Ea / (R * T)) = exp(c - Ea / (R * T)) advantage version natural logarithm rate   equal c - Ea / (R * T). means Arrhenius paramerer   values can easily determined linear fit log(rate)   1 / (R * T); c y-intercept -Ea slope. calculate_temperature_response_arrhenius, scaling factor   (c), activation energy (Ea), units (units)   variable must specified elements list, named   element arrhenius_parameters. example, variable called   Kc c = 38.05, Ea = 79.43, units   micromol mol^(-1), arrhenius_parameters argument   specified follows:   list(Kc = list(c = 38.05, Ea = 79.43, units = 'micromol mol^(-1)')). rare directly specify Arrhenius parameters; instead,   typical use one pre-set values included   c3_temperature_param_sharkey. Sometimes publication specify value variable 25 degrees C   instead Arrhenius scaling factor c. case,   \"trick\" determining value c. example, Arrhenius   exponent X 25 degrees C, following:   X = exp(c - Ea / (R * (25 + 273.15))), can solve algebraically   c follows: c = ln(X) + Ea / f,   f = R * (25 + 273.15). special case, parameters normalized   1 25 degrees C, c = Ea / f. value f can   accessed PhotoGEA:::f. Another common scenario may wish convert units variable   defined Arrhenius exponents. example, say Y determined   Arrhenius exponent, .e., Y = exp(c - Ea / (R * T)),   want convert Y different units via multiplicative conversion   factor cf. , new units, Y becomes   Y_new = cf * Y = cf * exp(c - (R * T)). algebra, possible   combine cf original value c   c_new = c + ln(cf). can continue calculating Y_new using   Arrhenius factor Y_new = exp(c_new - Ea / (R * T)).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_temperature_response_arrhenius.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate temperature-dependent values using Arrhenius equations — calculate_temperature_response_arrhenius","text":"exdf object based exdf_obj includes one new column   element arrhenius_parameters,   temperature-dependent values new columns determined using   temperature values specified tleaf_column_name column.   category new columns   calculate_temperature_response_arrhenius indicate   created using function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_temperature_response_arrhenius.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate temperature-dependent values using Arrhenius equations — calculate_temperature_response_arrhenius","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('ball_berry_1.xlsx') )  licor_file <- calculate_temperature_response_arrhenius(   licor_file,   list(Kc_norm = c3_temperature_param_sharkey$Kc_norm) )  licor_file$units$Kc_norm      # View the units of the new `Kc_norm` column #> [1] \"normalized to Kc at 25 degrees C\" licor_file$categories$Kc_norm # View the category of the new `Kc_norm` column #> [1] \"calculate_temperature_response_arrhenius\" licor_file[,'Kc_norm']        # View the values of the new `Kc_norm` column #>  [1] 1.910018 1.769200 1.676876 1.646016 1.645876 1.628370 1.586497 2.240778 #>  [9] 2.068778 2.071206 2.019640 2.071358 2.069276 2.076637 2.432435 2.291906 #> [17] 2.212798 2.201974 2.194358 2.086708 2.166221 2.525028 2.344517 2.225575 #> [25] 2.173927 2.194267 2.085659 2.078922"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_temperature_response_gaussian.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate temperature-dependent values using Gaussian equations — calculate_temperature_response_gaussian","title":"Calculate temperature-dependent values using Gaussian equations — calculate_temperature_response_gaussian","text":"Calculate leaf-temperature-dependent values various parameters using   Gaussian equations. rare users call function directly;   instead, used internally   calculate_temperature_response.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_temperature_response_gaussian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate temperature-dependent values using Gaussian equations — calculate_temperature_response_gaussian","text":"","code":"calculate_temperature_response_gaussian(     exdf_obj,     gaussian_parameters,     tleaf_column_name = 'TleafCnd'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_temperature_response_gaussian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate temperature-dependent values using Gaussian equations — calculate_temperature_response_gaussian","text":"exdf_obj exdf object representing data Licor gas exchange     measurement system. gaussian_parameters list named lists. list element describe optimal     temperature degrees C (t_opt), \"width\"     degrees C (sigma), units (units) variable     follows peaked Gaussian temperature dependence. name list     element corresponding name variable. tleaf_column_name name column exdf_obj contains leaf temperature     units degrees C.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_temperature_response_gaussian.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate temperature-dependent values using Gaussian equations — calculate_temperature_response_gaussian","text":"Gaussian equation sometimes used model temperature dependence   biochemical rate parameter. Typically expressed rate = optimal_rate * exp(-(T - T_opt)^2 / sigma^2) optimal_rate highest rate occurs optimal   temperature T_opt, T current temperature,   sigma represents \"width\" peak. technically, can   described difference temperature away optimal value   rate falls 37 percent (1/e) maximum. calculate_temperature_response_gaussian, optimal rate   (optimal_rate), optimal temperature (t_opt),   width (sigma), units (units) variable must   specified elements list, named element   gaussian_parameters. example, variable called   Jmax optimal_rate = 1, t_opt = 43, sigma = 26,   units micromol mol^(-1), gaussian_parameters argument   specified follows:   list(Jmax = list(optimal_rate = 1, t_opt = 43, sigma = 26, units =   'micromol mol^(-1)')). rare specify parameters directly; instead, typical   use one pre-set values included   c4_temperature_param_vc.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_temperature_response_gaussian.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate temperature-dependent values using Gaussian equations — calculate_temperature_response_gaussian","text":"exdf object based exdf_obj includes one new column   element gaussian_parameters,   temperature-dependent values new columns determined using   temperature values specified tleaf_column_name column.   category new columns   calculate_temperature_response_gaussian indicate   created using function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_temperature_response_gaussian.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate temperature-dependent values using Gaussian equations — calculate_temperature_response_gaussian","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('ball_berry_1.xlsx') )  licor_file <- calculate_temperature_response_gaussian(   licor_file,   list(J_norm = c4_temperature_param_vc$J_norm) )  licor_file$units$J_norm      # View the units of the new `J_norm` column #> [1] \"normalized to J at 25 degrees C\" licor_file$categories$J_norm # View the category of the new `J_norm` column #> [1] \"calculate_temperature_response_gaussian\" licor_file[,'J_norm']        # View the values of the new `J_norm` column #>  [1] 1.306239 1.272090 1.247669 1.239115 1.239076 1.234132 1.222031 1.374004 #>  [9] 1.340756 1.341254 1.330491 1.341285 1.340858 1.342365 1.406655 1.383141 #> [17] 1.368865 1.366850 1.365423 1.344413 1.360084 1.420960 1.392211 1.371224 #> [25] 1.361557 1.365406 1.344201 1.342831"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_temperature_response_johnson.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate temperature-dependent values using Johnson-Eyring-Williams equations — calculate_temperature_response_johnson","title":"Calculate temperature-dependent values using Johnson-Eyring-Williams equations — calculate_temperature_response_johnson","text":"Calculate leaf-temperature-dependent values various parameters using   Johnson-Eyring-Williams equations. rare users call function   directly; instead, used internally   calculate_temperature_response.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_temperature_response_johnson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate temperature-dependent values using Johnson-Eyring-Williams equations — calculate_temperature_response_johnson","text":"","code":"calculate_temperature_response_johnson(     exdf_obj,     johnson_parameters,     tleaf_column_name = 'TleafCnd'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_temperature_response_johnson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate temperature-dependent values using Johnson-Eyring-Williams equations — calculate_temperature_response_johnson","text":"exdf_obj exdf object representing data Licor gas exchange     measurement system. johnson_parameters list named lists. list element describe scaling factor     (c), enthalpy activation kJ / mol (Ha),     enthalpy deactivation kJ / mol (Hd), entropy     kJ / K / mol (S), units (units) variable     follows Johnson-Eyring-Williams temperature dependence. name     list element corresponding name variable. tleaf_column_name name column exdf_obj contains leaf temperature     units degrees C.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_temperature_response_johnson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate temperature-dependent values using Johnson-Eyring-Williams equations — calculate_temperature_response_johnson","text":"Johnson-Eyring-Williams equation often used calculate   temperature dependence rate chemical reaction. can stated   follows: rate = exp(c - Ha / (R * T)) / (1 + exp(S / R - Hd / (R * T))) c scaling factor sets overall magnitude   rate, Ha enthalpy activation, Hd enthalpy   deactivation, S entropy, R ideal gas constant,   T temperature Kelvin. equation exhibits peak; words, particular   temperature (optimal temperature) rate maximized. Thus,   often used place Arrhenius equation (see   calculate_temperature_response_arrhenius) photosynthetic   parameters exhibit decrease high temperatures. equation originally published Johnson, Eyring, & Williams (1942)   used model temperature dependence key photosynthetic   parameters, Harley et al. (1992), Bernacchi et al. (2003), Sharkey et   al. (2007), others. calculate_temperature_response_johnson, scaling factor   (c), enthalpy activation (Ha), enthalpy deactivation   (Hd), entopy (S), units (units) variable must   specified elements list, named element   johnson_parameters. example, variable called   Tp c = 21.46, Ha = 53.1, Hd = 201.8,   S = 0.65, units micromol mol^(-1),   johnson_parameters argument specified follows:   list(Tp = list(c = 21.46, Ha = 53.1, Hd = 201.8, S = 0.65, units =   'micromol mol^(-1)')). rare directly specify parameters; instead,   typical use one pre-set values included   c3_temperature_param_sharkey. References:  Johnson, F. H., Eyring, H. & Williams, R. W. \"nature enzyme           inhibitions bacterial luminescence: Sulfanilamide, urethane,           temperature pressure.\" Journal Cellular Comparative           Physiology 20, 247–268 (1942) [doi:10.1002/jcp.1030200302 ]. Harley, P. C., Thomas, R. B., Reynolds, J. F. & Strain, B. R.           \"Modelling photosynthesis cotton grown elevated CO2.\" Plant,           Cell & Environment 15, 271–282 (1992)           [doi:10.1111/j.1365-3040.1992.tb00974.x ]. Bernacchi, C. J., Pimentel, C. & Long, S. P. \"vivo temperature           response functions parameters required model RuBP-limited           photosynthesis.\" Plant, Cell & Environment 26, 1419–1430 (2003)           [doi:10.1046/j.0016-8025.2003.01050.x ]. Sharkey, T. D., Bernacchi, C. J., Farquhar, G. D. & Singsaas, E. L.           \"Fitting photosynthetic carbon dioxide response curves C3 leaves.\"           Plant, Cell & Environment 30, 1035–1040 (2007)           [doi:10.1111/j.1365-3040.2007.01710.x ].","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_temperature_response_johnson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate temperature-dependent values using Johnson-Eyring-Williams equations — calculate_temperature_response_johnson","text":"exdf object based exdf_obj includes one new column   element johnson_parameters, temperature-dependent   values new columns determined using temperature values   specified tleaf_column_name column. category   new columns calculate_temperature_response_johnson indicate   created using function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_temperature_response_johnson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate temperature-dependent values using Johnson-Eyring-Williams equations — calculate_temperature_response_johnson","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('ball_berry_1.xlsx') )  licor_file <- calculate_temperature_response_johnson(   licor_file,   list(Tp_norm = c3_temperature_param_sharkey$Tp_norm) )  licor_file$units$Tp_norm      # View the units of the new `Tp_norm` column #> [1] \"normalized to Tp at 25 degrees C\" licor_file$categories$Tp_norm # View the category of the new `Tp_norm` column #> [1] \"calculate_temperature_response_johnson\" licor_file[,'Tp_norm']        # View the values of the new `Tp_norm` column #>  [1] 1.326839 1.299281 1.276934 1.268687 1.268649 1.263793 1.251659 1.362874 #>  [9] 1.348922 1.349189 1.343067 1.349206 1.348977 1.349779 1.367378 1.365159 #> [17] 1.361272 1.360585 1.360078 1.350845 1.358042 1.365798 1.366671 1.362035 #> [25] 1.358625 1.360072 1.350736 1.350024"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_temperature_response_polynomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate temperature-dependent values using polynomial equations — calculate_temperature_response_polynomial","title":"Calculate temperature-dependent values using polynomial equations — calculate_temperature_response_polynomial","text":"Calculate leaf-temperature-dependent values various parameters using   polynomial equations. rare users call function directly;   instead, used internally   calculate_temperature_response.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_temperature_response_polynomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate temperature-dependent values using polynomial equations — calculate_temperature_response_polynomial","text":"","code":"calculate_temperature_response_polynomial(     exdf_obj,     polynomial_parameters,     tleaf_column_name = 'TleafCnd'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_temperature_response_polynomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate temperature-dependent values using polynomial equations — calculate_temperature_response_polynomial","text":"exdf_obj exdf object representing data Licor gas exchange     measurement system. polynomial_parameters list named lists. list element describe polynomial     coefficients (coef) units (units) variable     follows polynomial temperature dependence. name list element     corresponding name variable. tleaf_column_name name column exdf_obj contains leaf temperature     units degrees C.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_temperature_response_polynomial.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate temperature-dependent values using polynomial equations — calculate_temperature_response_polynomial","text":"Polynomial equations often used calculate temperature dependence   rates chemical reactions. example, second-order polynomial   given follows: (1) rate = R_0 + R_1 * T + R_2 * T^2 R_0, R_1, R_2 zeroth, first, second   order coefficients T temperature. Higher order polynomials   can also defined, order-N polynomial given (2) rate = R_0 + R_1 * T + R_2 * T^2 + ... + R_N * T^N general, order-N polynomial N coefficients, although   may zero. calculate_temperature_response_polynomial, coefficients   (coef) units (units) variable must specified   elements list, named element   polynomial_parameters. coefficients must specified numeric   vector, ith element represents ith coefficient.   example, dimensionless variable called theta calculated   according theta = 0.352 + 0.022 * T - 3.4e-4 * T^2,   polynomial_parameters argument supplied follows:   list(theta = list(coef = c(0.352, 0.022, -3.4e-4), units = 'dimensionless')). rare directly specify polynomial parameters; instead,   typical use one pre-set values included   jmax_temperature_param_bernacchi.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_temperature_response_polynomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate temperature-dependent values using polynomial equations — calculate_temperature_response_polynomial","text":"exdf object based exdf_obj includes one new column   element polynomial_parameters,   temperature-dependent values new columns determined using   temperature values specified tleaf_column_name column.   category new columns   calculate_temperature_response_polynomial indicate   created using function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_temperature_response_polynomial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate temperature-dependent values using polynomial equations — calculate_temperature_response_polynomial","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('ball_berry_1.xlsx') )  licor_file <- calculate_temperature_response_polynomial(   licor_file,   list(theta = list(coef = c(0.352, 0.022, -3.4e-4), units = 'dimensionless')) )  licor_file$units$theta      # View the units of the new `theta` column #> [1] \"dimensionless\" licor_file$categories$theta # View the category of the new `theta` column #> [1] \"calculate_temperature_response_polynomial\" licor_file[,'theta']        # View the values of the new `theta` column #>  [1] 0.7072826 0.7064481 0.7056548 0.7053399 0.7053384 0.7051479 0.7046554 #>  [8] 0.7078692 0.7077727 0.7077770 0.7076663 0.7077773 0.7077736 0.7077863 #> [15] 0.7075519 0.7078243 0.7078804 0.7078821 0.7078823 0.7078022 0.7078768 #> [22] 0.7072659 0.7077469 0.7078765 0.7078794 0.7078823 0.7078006 0.7077900"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_ternary_correction.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate ternary correction factor — calculate_ternary_correction","title":"Calculate ternary correction factor — calculate_ternary_correction","text":"Calculates ternary correction factor t used many carbon   isotope discrimination calculations.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_ternary_correction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate ternary correction factor — calculate_ternary_correction","text":"","code":"calculate_ternary_correction(     exdf_obj,     ci_column_name = 'Ci',     co2_s_column_name = 'CO2_s',     csurface_column_name = 'Csurface',     e_column_name = 'E',     gtc_column_name = 'gtc'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_ternary_correction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate ternary correction factor — calculate_ternary_correction","text":"exdf_obj exdf object containing photosynthetic gas exchange data. ci_column_name name column exdf_obj contains intercellular     CO2 concentration micromol mol^(-1). co2_s_column_name name column exdf_obj contains sample line     (incoming air) CO2 concentration micromol mol^(-1). csurface_column_name name column exdf_obj contains CO2     concentration leaf surface micromol mol^(-1).     typically calculated using calculate_gas_properties. e_column_name name column exdf_obj contains leaf     transpiration rate mol m^(-2) s^(-1). gtc_column_name name column exdf_obj contains total     conductance CO2 diffusion across boundary layer stomata series     mol m^(-2) s^(-1).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_ternary_correction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate ternary correction factor — calculate_ternary_correction","text":"photosynthetic gas exchange, separate fluxes CO2 H2O   flowing leaf. gases interact   air, forming ternary mixture. interactions must taken account   modeling carbon isotope discrimination. Typically done via   t, ternary correction factor first introduced Farquhar   Cernusak (2012). calculate t described Equations 9 10   Ubierna et al. (2018): t = alpha_ac * E / (2 * g_ac) a_bar = (a_b * (C_a - C_s) + a_s * (C_s - C_i)) / (C_a - C_i), E transpiration rate, g_ac total conductance   CO2 diffusion across boundary layer stomata series, a_bar   weighted fractionation across boundary layer stomata series,   a_b fractionation diffusion boundary layer,   a_s fractionation diffusion stomata,   C_a ambient CO2 concentration (wet air), C_s   CO2 concentration (wet air) leaf surface, C_i CO2   concentration (wet air) intercellular spaces. alpha_ac overall fractionation diffusion air;   alpha_ac a_bar related according un-numbered   equation Ubierna et al. (2018) appears just Equation 9: alpha_ac = 1 + a_bar References: Farquhar, G. D. Cernusak, L. . \"Ternary effects gas exchange   isotopologues carbon dioxide.\" Plant, Cell & Environment 35, 1221–1231   (2012) [doi:10.1111/j.1365-3040.2012.02484.x ]. Ubierna, N., Holloway-Phillips, M.-M. Farquhar, G. D. \"Using Stable Carbon   Isotopes Study C3 C4 Photosynthesis: Models Calculations.\"   Photosynthesis: Methods Protocols (ed. Covshoff, S.) 155–196 (Springer,   2018) [doi:10.1007/978-1-4939-7786-4_10 ].","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_ternary_correction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate ternary correction factor — calculate_ternary_correction","text":"exdf object based exdf_obj includes values   t, a_bar, alpha_ac calculated described .   category new column calculate_ternary_correction   indicate created using function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_ternary_correction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate ternary correction factor — calculate_ternary_correction","text":"","code":"## In this example we load a gas exchange data file and then calculate the ## ternary correction factor  # Read the gas exchange data licor_data <- read_gasex_file(   PhotoGEA_example_file_path('licor_for_gm_site11.xlsx'),   'time' )  # Calculate total pressure (needed for calculate_gas_properties) licor_data <- calculate_total_pressure(licor_data)  # Calculate Csurface (needed for calculate_ternary_correction) licor_data <- calculate_gas_properties(licor_data)  # Calculate ternary correction licor_data <- calculate_ternary_correction(licor_data)  # View some of the results licor_data[, c('replicate', 'A', 'E', 'Csurface', 't', 'a_bar', 'alpha_ac')] #>    replicate        A           E Csurface           t    a_bar alpha_ac #> 1          1 32.01867 0.003450230 393.8416 0.006807155 4.129839 1.004130 #> 2          1 31.91890 0.003043435 397.1493 0.006651168 4.155466 1.004155 #> 3          1 31.85562 0.003456022 395.3211 0.006658893 4.122659 1.004123 #> 4          1 31.76382 0.003453230 396.1048 0.006745036 4.126666 1.004127 #> 5          1 31.69923 0.003469264 396.7615 0.006681366 4.122898 1.004123 #> 6          1 31.57078 0.003475612 397.9187 0.006658639 4.121931 1.004122 #> 7          1 20.11287 0.003470594 248.0834 0.006682212 4.123033 1.004123 #> 8          1 20.13905 0.003448952 247.9251 0.006757688 4.127973 1.004128 #> 9          1 20.15698 0.003445242 247.8209 0.006864369 4.132360 1.004132 #> 10         1 20.16227 0.003577178 247.4354 0.006038269 4.084444 1.004084 #> 11         1 20.16253 0.003679090 247.2586 0.005523946 4.045448 1.004045 #> 12         1 20.12078 0.003814051 247.3068 0.005285017 4.015407 1.004015"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_total_pressure.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the total pressure in bar — calculate_total_pressure","title":"Calculate the total pressure in bar — calculate_total_pressure","text":"Calculates total pressure bar. Licor gas exchange measurement   systems report abient air pressure (Pa) chamber   overpressure (DeltaPcham) kPa; total pressure   chamber therefore given sum two columns. function can   accomodate alternative column names variables taken Licor log   files case change point future. function also   checks units required column produce error   units incorrect.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_total_pressure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the total pressure in bar — calculate_total_pressure","text":"","code":"calculate_total_pressure(     exdf_obj,     pa_column_name = 'Pa',     deltapcham_column_name = 'DeltaPcham'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_total_pressure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the total pressure in bar — calculate_total_pressure","text":"exdf_obj exdf object contains pressure measurements. pa_column_name name column exdf_obj contains ambient air     pressure kPa. deltapcham_column_name name column exdf_obj contains chamber     overpressure kPa.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_total_pressure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the total pressure in bar — calculate_total_pressure","text":"deltapcham_column_name NA, function simply   convert values pa_column_name units bar.   Otherwise, values pa_column_name   deltapcham_column_name columns added together converted   bar.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_total_pressure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the total pressure in bar — calculate_total_pressure","text":"exdf object based exdf_obj includes total   pressure values new column called total_pressure. category   new column calculate_total_pressure indicate   created using function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_total_pressure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the total pressure in bar — calculate_total_pressure","text":"","code":"# Read an example Licor file included in the PhotoGEA package and calculate the # total pressure. licor_file <- read_gasex_file(   PhotoGEA_example_file_path('ball_berry_1.xlsx') )  licor_file <- calculate_total_pressure(licor_file)  licor_file$units$total_pressure      # View the units of the new `total_pressure` column #> [1] \"bar\" licor_file$categories$total_pressure # View the category of the new `total_pressure` column #> [1] \"calculate_total_pressure\" licor_file[, 'total_pressure']       # View the values of the new `total_pressure` column #>  [1] 0.9925101 0.9925749 0.9926076 0.9926272 0.9924095 0.9924228 0.9924457 #>  [8] 0.9925986 0.9926574 0.9928725 0.9929653 0.9929991 0.9928978 0.9929064 #> [15] 0.9929203 0.9929226 0.9929827 0.9929333 0.9929934 0.9926874 0.9926688 #> [22] 0.9923497 0.9924241 0.9923444 0.9923882 0.9923838 0.9923927 0.9921658"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_wue.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate intrinsic water use efficiency — calculate_wue","title":"Calculate intrinsic water use efficiency — calculate_wue","text":"Calculates intrinsic water use efficiency (iWUE). function can   accomodate alternative column names variables taken data   file case change point future. function also   checks units required column produce error   units incorrect.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_wue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate intrinsic water use efficiency — calculate_wue","text":"","code":"calculate_wue(     exdf_obj,     calculate_c3 = FALSE,     a_column_name = 'A',     ca_column_name = 'Ca',     cc_column_name = 'Cc',     ci_column_name = 'Ci',     e_column_name = 'E',     gmc_column_name = 'gmc_tl',     gsw_column_name = 'gsw',     h2o_a_column_name = 'H2O_s',     h2o_i_column_name = 'H2O_i',     total_pressure_column_name = 'total_pressure'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_wue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate intrinsic water use efficiency — calculate_wue","text":"exdf_obj exdf object. calculate_c3 logical variable indicating whether calculate additional variables     can useful C3 plants (g_ratio drawdown_ct). Note     quantities require values mesophyll conductance Cc,     always possible calculate . a_column_name name column exdf_obj contains net CO2     assimilation rate micromol m^(-2) s^(-1). ca_column_name name column exdf_obj contains ambient     CO2 concentration micromol mol^(-1). cc_column_name name column exdf_obj contains chloroplastic     CO2 concentration micromol mol^(-1). Typically     calculated using apply_gm. ci_column_name name column exdf_obj contains intercellular     CO2 concentration micromol mol^(-1). e_column_name name column licor_exdf contains transpiration     rate mol m^(-2) s^(-1). gmc_column_name name column licor_exdf contains mesophyll     conductance CO2 leaf temperature mol m^(-2) s^(-1) bar^(-1). gsw_column_name name column licor_exdf contains stomatal     conductance water vapor mol m^(-2) s^(-1). h2o_a_column_name name column exdf_obj contains water vapor     concentration air surrounding leaf (.e., ambient water     vapor concentration) mmol mol^(-1). h2o_i_column_name name column exdf_obj contains water vapor     concentration leaf's intercellular air spaces     mmol mol^(-1). Typically value calculated using     calculate_gas_properties. total_pressure_column_name name column exdf_obj contains total pressure     bar. Typically value calculated using     calculate_total_pressure.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_wue.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate intrinsic water use efficiency — calculate_wue","text":"Leaf-level water use efficiency (lWUE) defined ratio net   CO2 assimilation () transpiration (E): lWUE = / E. quantity can also expressed terms water CO2 concentrations: lWUE = 0.6 * Ca * (1 - Ci / Ca) / (H2Oi - H2Oa). , Ca Ci atmospheric intercellular CO2   concentrations, H2Oa H2Oi atmospheric   intercellular water vapor concentrations. differences lWUE   measured different groups plants, can helpful separately   investigate Ci / Ca H2Oi - H2Oa see factor   driving differences. intrinsic water use efficiency iWUE measure leaf-level   water use efficiency, defined ratio   stomatal conductance H2O diffusion (gsw): iWUE = / gsw. C3 plants, iWUE can reexpressed iWUE = (gmc / gsw) / (1 + (gmc / gsw)) * (Ca - Cc), gmc mesophyll conductance CO2 diffusion Cc   chloroplast CO2 concentration. differences iWUE   measured different groups plants, can helpful separately   investigate gmc / gsw Ca - Cc see factor driving   differences. Note: measures water use efficiency depend directly indirectly   stomatal conductance. Stomata notoriously slow reach steady-state,   water use efficiency reliable steady-state. reason,   recommended analyze water use efficiency gas exchange measurements   stomatal conductance stabilized. -Ci -Q curve,   first measured point typically reached steady-state stomatal conductance.   hand, Ball-Berry curve, measured points   reached steady-state stomatal conductance. details quantities, see Leakey et al. \"Water Use   Efficiency Constraint Target Improving Resilience   Productivity C3 C4 Crops.\" Annual Review Plant Biology 70 (1):   781–808 (2019) [doi:10.1146/annurev-arplant-042817-040305 ]. function, following variables calculated: lWUE, given iWUE = / E Cia_ratio, given Cia_ratio = Ci / Ca drawdown_sw, given drawdown_sw = H2Oi - H2Oa (          drawdown water vapor across stomata) iWUE, given iWUE = / gsw g_ratio, given g_ratio = gmc / gsw drawdown_ct, given drawdown_ct = Ca - Cc (          total drawdown CO2 ambient air chloroplast) Note: g_ratio drawdown_ct calculated   calculate_c3 TRUE.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_wue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate intrinsic water use efficiency — calculate_wue","text":"exdf object based exdf_obj includes quantities   listed , along units. category new   columns calculate_wue indicate created using   function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_wue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate intrinsic water use efficiency — calculate_wue","text":"","code":"# Read an example Licor file included in the PhotoGEA package and calculate the # water use efficiency. licor_file <- read_gasex_file(   PhotoGEA_example_file_path('ball_berry_1.xlsx') )  licor_file <- calculate_total_pressure(licor_file)  licor_file <- calculate_temperature_response(licor_file, c3_temperature_param_sharkey)  licor_file <- calculate_gas_properties(licor_file)  licor_file <- apply_gm(licor_file, gmc_at_25 = 0.5)  licor_file <- calculate_wue(licor_file, calculate_c3 = TRUE)  licor_file$units$iWUE      # View the units of the new `iWUE` column #> [1] \"micromol CO2 / mol H2O\" licor_file$categories$iWUE # View the category of the new `iWUE` column #> [1] \"calculate_wue\" licor_file[, 'iWUE']       # View the values of the new `iWUE` column #>  [1]  91.19402  75.52585  90.68321 106.78757  78.24615  66.21068  33.68671 #>  [8]  52.19154  54.09650  58.52669  39.81239  57.99448  49.35733  33.84908 #> [15]  68.74848  53.75126  51.55032  56.41271  40.15597  92.38880  45.67573 #> [22] 102.10911  97.68654  89.89394  72.98826  54.17163  58.44461  94.55687"},{"path":"https://eloch216.github.io/PhotoGEA/reference/cbind.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine exdf objects by columns or rows — cbind.exdf","title":"Combine exdf objects by columns or rows — cbind.exdf","text":"Combines one exdf objects columns rows   main_data. rbind, errors occur column names   exdf objects, units categories   identical.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/cbind.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine exdf objects by columns or rows — cbind.exdf","text":"","code":"# S3 method for class 'exdf' cbind(..., deparse.level = 1)    # S3 method for class 'exdf' rbind(     ...,     deparse.level = 1,     make.row.names = TRUE,     stringsAsFactors = FALSE   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/cbind.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine exdf objects by columns or rows — cbind.exdf","text":"... Two exdf objects. deparse.level See associated documentation generic versions cbind     rbind. make.row.names See associated documentation generic version rbind. stringsAsFactors See associated documentation generic version rbind.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/cbind.exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine exdf objects by columns or rows — cbind.exdf","text":"Returns new exdf object.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/cbind.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine exdf objects by columns or rows — cbind.exdf","text":"","code":"# Make some simple exdf objects. 1 and 2 have the same number of rows but # different columns, while 1 and 3 have the same columns but different rows. simple_exdf_1 <- exdf(data.frame(A = 1), data.frame(A = 'au'), data.frame(A = 'ac')) simple_exdf_2 <- exdf(data.frame(B = 2), data.frame(B = 'bu'), data.frame(B = 'bc')) simple_exdf_3 <- exdf(data.frame(A = 2), data.frame(A = 'au'), data.frame(A = 'ac'))  cbind(simple_exdf_1) # will just return simple_exdf_1 #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>   A [ac] (au) #> 1           1 cbind(simple_exdf_1, simple_exdf_2) #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>   A [ac] (au) B [bc] (bu) #> 1           1           2  rbind(simple_exdf_1) # will just return simple_exdf_1 #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>   A [ac] (au) #> 1           1 rbind(simple_exdf_1, simple_exdf_3) #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>   A [ac] (au) #> 1           1 #> 2           2"},{"path":"https://eloch216.github.io/PhotoGEA/reference/check_required_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Make sure required variables exist — check_required_variables","title":"Make sure required variables exist — check_required_variables","text":"Checks whether input table required variables.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/check_required_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make sure required variables exist — check_required_variables","text":"","code":"check_required_variables(x, required_variables, check_NA = TRUE)    # S3 method for class 'data.frame' check_required_variables(x, required_variables, check_NA = TRUE)    # S3 method for class 'exdf' check_required_variables(x, required_variables, check_NA = TRUE)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/check_required_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make sure required variables exist — check_required_variables","text":"x table-like R object data frame exdf. required_variables set variables must included x columns. check_NA logical value indicating whether check columns     NA; see .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/check_required_variables.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make sure required variables exist — check_required_variables","text":"check_required_variables generic, methods defined data   frames exdf objects. x exdf, required_variables input argument   must list named strings, name element specifies   name column must included x, value   column specifies corresponding units column. value   NA, unit checking performed. x data.frame, required_variables input   argument can specified list (x exdf   object) character vector specifying names columns   included x. required variables checked follows: required variable columns missing table,           informative error message thrown. check_NA TRUE required variable columns           entirely NA, informative error message thrown. required variable colums incorrect units, informative           error message thrown. (applies exdf objects.) Otherwise, check_required_variables output produce   messages. function used internally many functions   PhotoGEA package check important columns make sure   correct units. example, see code apply_gm   typing PhotoGEA::apply_gm R terminal.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/check_required_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make sure required variables exist — check_required_variables","text":"check_required_variables function return anything.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/check_required_variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make sure required variables exist — check_required_variables","text":"","code":"# Create a simple exdf object simple_exdf <- exdf(   data.frame(A = c(3, 2, 7, 9), B = c(4, 5, 1, 8)),   data.frame(A = 'm', B = 's', stringsAsFactors = FALSE),   data.frame(A = 'Cat1', B = 'Cat2', stringsAsFactors = FALSE) )  # Confirm that columns named `A` and `B` are in the object, and that they have # units of `m` and `s`, respectively. check_required_variables(simple_exdf, list(A = 'm', B = 's'))  # Confirm that columns named `A` and `B` are in the object, but only check units # for the `A` column. check_required_variables(simple_exdf, list(A = 'm', B = NA))  # Use the data frame method on `simple_exdf$main_data` to confirm that columns # named `A` and `B` are present check_required_variables(simple_exdf$main_data, c('A', 'B'))"},{"path":"https://eloch216.github.io/PhotoGEA/reference/check_response_curve_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Check response curve data for common issues — check_response_curve_data","title":"Check response curve data for common issues — check_response_curve_data","text":"Checks make sure exdf object representing multiple   response curves meets basic expectations.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/check_response_curve_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check response curve data for common issues — check_response_curve_data","text":"","code":"check_response_curve_data(     licor_exdf,     identifier_columns,     expected_npts = 0,     driving_column = NULL,     driving_column_tolerance = 1.0,     col_to_ignore_for_inf = 'gmc',     error_on_failure = TRUE,     print_information = TRUE   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/check_response_curve_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check response curve data for common issues — check_response_curve_data","text":"licor_exdf exdf object representing data Licor gas exchange     measurement system. identifier_columns vector list strings representing names columns     licor_exdf , taken together, uniquely identify curve.     often includes names like plot, event, replicate, etc. expected_npts number points response curve.     expected_npts set 0, response curves expected     (unspecified) number points. expected_npts set     negative number, check skipped. driving_column name column systematically varied produce curve;     example, light response curve, typically Qin.     driving_column NULL, check skipped. driving_column_tolerance absolute tolerance deviation value     driving_column away mean across curves;     driving_column_tolerance can set Inf disable     check. col_to_ignore_for_inf columns ignore checking infinite values. Mesophyll     conductance (gmc) often set infinity intentionally     ignored performing check. completely disable check, set     col_to_ignore_for_inf NULL. error_on_failure logical value indicating whether send error message issue     detected. See details . print_information logical value indicating whether print additional information R     terminal issue detected. See details .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/check_response_curve_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check response curve data for common issues — check_response_curve_data","text":"function makes basic checks ensure Licor data includes   expected information include mistakes. problems   detected, function silent return value. problem   detected error_on_failure TRUE, function   throw error short message; error_on_failure   FALSE, function throw warning instead. problem   detected print_information TRUE, additional information   problem printed R terminal. function perform following checks, optional: col_to_ignore_for_inf NULL, numeric columns           licor_exdf infinite values, exception           columns designated col_to_ignore_for_inf. elements identifier_columns present columns           licor_exdf. driving_column NULL,           also present column licor_exdf. licor_exdf split chunks according values           identifier_columns. exdf file represents           response curves, chunk represent single curve           additional checks can performed: expected_npts >= 0, chunk                   number points. expected_npts > 0,                   chunk expected_npts points. driving_column NULL, code                   chunk sequence values column.                   allow small variations, nonzero                   driving_column_tolerance can specified. Using check_response_curve_data strictly necessary, can   helpful anyone else reading analysis code.   typical use cases: Average response curves: common calculate plot           average response curves, either manually using           xyplot_avg_rc. , makes sense           curve followed sequence driving variable.           case, check_response_curve_data can used confirm           curve used values CO2_r_sp (-Ci curve)           Qin (-Q curve). Removing recovery points: common wish remove one           recovery points set curves. safest way           confirm curves use sequence           setpoints; can sure , example, points 9 10           recovery points every curve. Making statement expectations: measured set           -Ci curves curve 16 points used sequence           CO2_r setpoints, record somewhere           notes. even meaningful use           check_response_curve_data script           expected_npts set 16. check passes, means           claim correct, also identifier           columns interpreted properly. Sometimes response curves large data set measured   sequence setpoints. different sequences used,   possible split groups separately run   check_response_curve_data group. scenario discussed   Frequently Asked Questions vignette. Even none situations relevant , may still   helpful run run check_response_curve_data   expected_npts set 0 error_on_failure set FALSE.   settings, curves different numbers points,   function print number points curve R terminal,   stop rest script running. can useful   detecting problems curve_identifier column. example,   longest curves set known 17 points,   check_response_curve_data identifies curve 34 points,   clear identifier accidentally used two different curves.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/check_response_curve_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check response curve data for common issues — check_response_curve_data","text":"check_response_curve_data function return anything.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/check_response_curve_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check response curve data for common issues — check_response_curve_data","text":"","code":"# Read an example Licor file included in the PhotoGEA package and check it. # This file includes several 7-point light-response curves that can be uniquely # identified by the values of its 'species' and 'plot' columns. Since these are # light-response curves, each one follows a pre-set sequence of `Qin` values. licor_file <- read_gasex_file(   PhotoGEA_example_file_path('ball_berry_1.xlsx') )  # Make sure there are no infinite values and that all curves have the same # number of points check_response_curve_data(licor_file, c('species', 'plot'))  # Make sure there are no inifinite values and that all curves have 7 points check_response_curve_data(licor_file, c('species', 'plot'), 7)  # Make sure there are no infinite values, that all curves have 7 points, and # that the values of the `Qin` column follow the same sequence in all curves # (to within 1.0 micromol / m^2 / s) check_response_curve_data(licor_file, c('species', 'plot'), 7, 'Qin', 1.0)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/choose_input_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Choosing input files — choose_input_files","title":"Choosing input files — choose_input_files","text":"Tools choosing input files via dialog windows.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/choose_input_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choosing input files — choose_input_files","text":"","code":"choose_input_files()    choose_input_licor_files()    choose_input_tdl_files()"},{"path":"https://eloch216.github.io/PhotoGEA/reference/choose_input_files.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Choosing input files — choose_input_files","text":"functions available interactive sessions; moreover,   choose_input_licor_files choose_input_tdl_files   available Microsoft Windows. choose_input_files prompt user select single           file, return full file paths files           directory extension. choose_input_licor_files can used select one           Microsoft Excel files (extension *.xlsx) plaintext           files (extension). choose_input_tdl_files can used select one TDL           data files (extension *.dat). outputs functions typically passed   read_gasex_file via lapply.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/choose_input_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choosing input files — choose_input_files","text":"character vector full file paths.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/choose_input_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Choosing input files — choose_input_files","text":"","code":"# Interactively select a single file and get full file paths to all # other files in the same directory that have the same extension if (interactive()) {   file_paths <- choose_input_files() }   # Interactively select one or more Licor Excel files and read each one to create # a list of exdf objects if (interactive() && .Platform$OS.type == \"windows\") {   lapply(choose_input_licor_files(), function(fname) {     read_gasex_file(fname, 'time')   }) }  # Interactively select one or more TDL data files and read each one to create a # list of exdf objects if (interactive() && .Platform$OS.type == \"windows\") {   lapply(choose_input_tdl_files(), function(fname) {     read_gasex_file(fname, 'TIMESTAMP')   }) }"},{"path":"https://eloch216.github.io/PhotoGEA/reference/confidence_intervals_c3_aci.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate confidence intervals for C3 A-Ci fitting parameters — confidence_intervals_c3_aci","title":"Calculate confidence intervals for C3 A-Ci fitting parameters — confidence_intervals_c3_aci","text":"Calculates confidence intervals parameters estimated C3 -Ci curve   fit. rare users call function directly, can   automatically applied curve calling fit_c3_aci.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/confidence_intervals_c3_aci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate confidence intervals for C3 A-Ci fitting parameters — confidence_intervals_c3_aci","text":"","code":"confidence_intervals_c3_aci(     replicate_exdf,     best_fit_parameters,     lower = list(),     upper = list(),     fit_options = list(),     sd_A = 1,     relative_likelihood_threshold = 0.147,     Wj_coef_C = 4.0,     Wj_coef_Gamma_star = 8.0,     a_column_name = 'A',     ci_column_name = 'Ci',     gamma_star_norm_column_name = 'Gamma_star_norm',     gmc_norm_column_name = 'gmc_norm',     j_norm_column_name = 'J_norm',     kc_norm_column_name = 'Kc_norm',     ko_norm_column_name = 'Ko_norm',     oxygen_column_name = 'oxygen',     rl_norm_column_name = 'RL_norm',     total_pressure_column_name = 'total_pressure',     tp_norm_column_name = 'Tp_norm',     vcmax_norm_column_name = 'Vcmax_norm',     cj_crossover_min = NA,     cj_crossover_max = NA,     hard_constraints = 0,     ...   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/confidence_intervals_c3_aci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate confidence intervals for C3 A-Ci fitting parameters — confidence_intervals_c3_aci","text":"replicate_exdf exdf object representing one CO2 response curve. best_fit_parameters exdf object representing best-fit parameters CO2 response     curve replicate_exdf, calculated fit_c3_aci. lower value passed fit_c3_aci generating     best_fit_parameters. upper value passed fit_c3_aci generating     best_fit_parameters. fit_options value passed fit_c3_aci generating     best_fit_parameters. sd_A value passed fit_c3_aci generating     best_fit_parameters. relative_likelihood_threshold threshold value relative likelihood used define boundaries     confidence intervals; see details . Wj_coef_C coefficient equation RuBP-regeneration-limited carboxylation,     whose value depends assumptions NADPH ATP requirements     RuBP regeneration; see calculate_c3_assimilation     information. Wj_coef_Gamma_star coefficient equation RuBP-regeneration-limited carboxylation,     whose value depends assumptions NADPH ATP requirements     RuBP regeneration; see calculate_c3_assimilation     information. a_column_name name column replicate_exdf contains net     assimilation micromol m^(-2) s^(-1). ci_column_name name column replicate_exdf contains     intercellular CO2 concentration micromol mol^(-1). gamma_star_norm_column_name name column replicate_exdf contains normalized     Gamma_star values (units     normalized Gamma_star 25 degrees C). gmc_norm_column_name name column replicate_exdf contains normalized     mesophyll conductance values (units     normalized gmc 25 degrees C). j_norm_column_name name column replicate_exdf contains normalized     J values (units normalized J 25 degrees C). kc_norm_column_name name column replicate_exdf contains normalized     Kc values (units normalized Kc 25 degrees C). ko_norm_column_name name column replicate_exdf contains normalized     Ko values (units normalized Ko 25 degrees C). oxygen_column_name name column exdf_obj contains concentration     O2 ambient air, expressed percentage (commonly 21% 2%);     units must percent. rl_norm_column_name name column replicate_exdf contains normalized     RL values (units normalized RL 25 degrees C). total_pressure_column_name name column replicate_exdf contains total     pressure bar. tp_norm_column_name name column replicate_exdf contains normalized     Tp values (units normalized Tp 25 degrees C). vcmax_norm_column_name name column replicate_exdf contains normalized     Vcmax values (units     normalized Vcmax 25 degrees C). cj_crossover_min minimum value Cc (ppm) Aj allowed become     overall rate-limiting factor. cj_crossover_min set     NA, restriction applied. cj_crossover_max maximim value Cc (ppm) Wj allowed     smaller Wc. cj_crossover_max set NA,     restriction applied. hard_constraints passed calculate_c3_assimilation; see function     details. ... Additional arguments passed calculate_c3_assimilation.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/confidence_intervals_c3_aci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate confidence intervals for C3 A-Ci fitting parameters — confidence_intervals_c3_aci","text":"maximum likelihood fitting, set parameter values associated   likelihood value. maximum likelihood known, also possible   define relative likelihood p according p = L / L_max.   set parameter values p exceeds threshold value   p_0 defines region parameter space called like \"relative   likelihood region.\" taking one-dimensional cuts parameter space,   boundaries relative likelihood region define relative likelihood   interval. calculate upper lower limits relative likelihood   intervals parameter. done fixing parameters   best-fit values, varying single parameter find interval   relative likelihood threshold value (set   relative_likelihood_threshold input argument). threshold   set 0.147, intervals equivalent 95% confidence   intervals situations. See Wikipedia page   relative likelihood   information. Internally, function uses error_function_c3_aci   calculate negative logarithm likelihood (-ln(L)). varies   fitting parameter independendently find values   ln(L) - ln(p_0) - ln(L_max) = 0. upper limit confidence interval found exceed ten times   upper limit specified fitting parameter, upper limit   condfidence interval taken infinity.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/confidence_intervals_c3_aci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate confidence intervals for C3 A-Ci fitting parameters — confidence_intervals_c3_aci","text":"exdf object based best_fit_parameters contains lower   upper bounds parameter; example, Vcmax_at_25   fit, best_fit_parameters contain new columns called   Vcmax_at_25_lower Vcmax_at_25_upper.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/confidence_intervals_c3_aci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate confidence intervals for C3 A-Ci fitting parameters — confidence_intervals_c3_aci","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('c3_aci_1.xlsx') )  # Define a new column that uniquely identifies each curve licor_file[, 'species_plot'] <-   paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )  # Organize the data licor_file <- organize_response_curve_data(     licor_file,     'species_plot',     c(9, 10, 16),     'CO2_r_sp' )  # Calculate the total pressure in the Licor chamber licor_file <- calculate_total_pressure(licor_file)  # Calculate temperature-dependent values of C3 photosynthetic parameters licor_file <- calculate_temperature_response(licor_file, c3_temperature_param_bernacchi)  # Fit just one curve from the data set one_result <- fit_c3_aci(   licor_file[licor_file[, 'species_plot'] == 'tobacco - 1', , TRUE],   calculate_confidence_intervals = FALSE )  # Calculate confidence limits for the fit parameters parameters_with_limits <- confidence_intervals_c3_aci(     licor_file[licor_file[, 'species_plot'] == 'tobacco - 1', , TRUE],     one_result$parameters )  # View confidence limits and best estimate for Vcmax_at_25 parameters_with_limits[, c('Vcmax_at_25_lower', 'Vcmax_at_25', 'Vcmax_at_25_upper')] #>   Vcmax_at_25_lower Vcmax_at_25 Vcmax_at_25_upper #> 1              -Inf    145.3333               Inf"},{"path":"https://eloch216.github.io/PhotoGEA/reference/confidence_intervals_c3_variable_j.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate confidence intervals for C3 Variable J fitting parameters — confidence_intervals_c3_variable_j","title":"Calculate confidence intervals for C3 Variable J fitting parameters — confidence_intervals_c3_variable_j","text":"Calculates confidence intervals parameters estimated C3 -Ci curve   fit. rare users call function directly, can   automatically applied curve calling   fit_c3_variable_j.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/confidence_intervals_c3_variable_j.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate confidence intervals for C3 Variable J fitting parameters — confidence_intervals_c3_variable_j","text":"","code":"confidence_intervals_c3_variable_j(     replicate_exdf,     best_fit_parameters,     lower = list(),     upper = list(),     fit_options = list(),     sd_A = 1,     relative_likelihood_threshold = 0.147,     Wj_coef_C = 4.0,     Wj_coef_Gamma_star = 8.0,     a_column_name = 'A',     ci_column_name = 'Ci',     gamma_star_norm_column_name = 'Gamma_star_norm',     j_norm_column_name = 'J_norm',     kc_norm_column_name = 'Kc_norm',     ko_norm_column_name = 'Ko_norm',     oxygen_column_name = 'oxygen',     phips2_column_name = 'PhiPS2',     qin_column_name = 'Qin',     rl_norm_column_name = 'RL_norm',     total_pressure_column_name = 'total_pressure',     tp_norm_column_name = 'Tp_norm',     vcmax_norm_column_name = 'Vcmax_norm',     cj_crossover_min = NA,     cj_crossover_max = NA,     hard_constraints = 0,     require_positive_gmc = 'positive_a',     gmc_max = Inf,     check_j = TRUE,     ...   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/confidence_intervals_c3_variable_j.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate confidence intervals for C3 Variable J fitting parameters — confidence_intervals_c3_variable_j","text":"replicate_exdf exdf object representing one CO2 response curve. best_fit_parameters exdf object representing best-fit parameters CO2 response     curve replicate_exdf, calculated     fit_c3_variable_j. lower value passed fit_c3_variable_j     generating best_fit_parameters. upper value passed fit_c3_variable_j     generating best_fit_parameters. fit_options value passed fit_c3_variable_j     generating best_fit_parameters. sd_A value passed fit_c3_variable_j     generating best_fit_parameters. relative_likelihood_threshold threshold value relative likelihood used define boundaries     confidence intervals; see details . Wj_coef_C coefficient equation RuBP-regeneration-limited carboxylation,     whose value depends assumptions NADPH ATP requirements     RuBP regeneration; see calculate_c3_assimilation     information. Wj_coef_Gamma_star coefficient equation RuBP-regeneration-limited carboxylation,     whose value depends assumptions NADPH ATP requirements     RuBP regeneration; see calculate_c3_assimilation     information. a_column_name name column replicate_exdf contains net     assimilation micromol m^(-2) s^(-1). ci_column_name name column replicate_exdf contains     intercellular CO2 concentration micromol mol^(-1). gamma_star_norm_column_name name column replicate_exdf contains normalized     Gamma_star values (units     normalized Gamma_star 25 degrees C). j_norm_column_name name column replicate_exdf contains normalized     J values (units normalized J 25 degrees C). kc_norm_column_name name column replicate_exdf contains normalized     Kc values (units normalized Kc 25 degrees C). ko_norm_column_name name column replicate_exdf contains normalized     Ko values (units normalized Ko 25 degrees C). oxygen_column_name name column exdf_obj contains concentration     O2 ambient air, expressed percentage (commonly 21% 2%);     units must percent. phips2_column_name name column replicate_exdf contains values     operating efficiency photosystem II (dimensionless). qin_column_name name column replicate_exdf contains values     incident photosynthetically active flux density     micromol m^(-2) s^(-1). rl_norm_column_name name column replicate_exdf contains normalized     RL values (units normalized RL 25 degrees C). total_pressure_column_name name column replicate_exdf contains total     pressure bar. tp_norm_column_name name column replicate_exdf contains normalized     Tp values (units normalized Tp 25 degrees C). vcmax_norm_column_name name column replicate_exdf contains normalized     Vcmax values (units     normalized Vcmax 25 degrees C). cj_crossover_min passed error_function_c3_variable_j. cj_crossover_max passed error_function_c3_variable_j. hard_constraints passed calculate_c3_assimilation     calculate_c3_variable_j; see functions details. require_positive_gmc passed error_function_c3_variable_j. gmc_max passed error_function_c3_variable_j. check_j passed error_function_c3_variable_j. ... Additional arguments passed calculate_c3_assimilation.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/confidence_intervals_c3_variable_j.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate confidence intervals for C3 Variable J fitting parameters — confidence_intervals_c3_variable_j","text":"maximum likelihood fitting, set parameter values associated   likelihood value. maximum likelihood known, also possible   define relative likelihood p according p = L / L_max.   set parameter values p exceeds threshold value   p_0 defines region parameter space called like \"relative   likelihood region.\" taking one-dimensional cuts parameter space,   boundaries relative likelihood region define relative likelihood   interval. calculate upper lower limits relative likelihood   intervals parameter. done fixing parameters   best-fit values, varying single parameter find interval   relative likelihood threshold value (set   relative_likelihood_threshold input argument). threshold   set 0.147, intervals equivalent 95% confidence   intervals situations. See Wikipedia page   relative likelihood   information. Internally, function uses error_function_c3_variable_j   calculate negative logarithm likelihood (-ln(L)). varies   fitting parameter independendently find values   ln(L) - ln(p_0) - ln(L_max) = 0. upper limit confidence interval found exceed ten times   upper limit specified fitting parameter, upper limit   condfidence interval taken infinity.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/confidence_intervals_c3_variable_j.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate confidence intervals for C3 Variable J fitting parameters — confidence_intervals_c3_variable_j","text":"exdf object based best_fit_parameters contains lower   upper bounds parameter; example, Vcmax_at_25   fit, best_fit_parameters contain new columns called   Vcmax_at_25_lower Vcmax_at_25_upper.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/confidence_intervals_c3_variable_j.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate confidence intervals for C3 Variable J fitting parameters — confidence_intervals_c3_variable_j","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('c3_aci_1.xlsx') )  # Define a new column that uniquely identifies each curve licor_file[, 'species_plot'] <-   paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )  # Organize the data licor_file <- organize_response_curve_data(     licor_file,     'species_plot',     c(9, 10, 16),     'CO2_r_sp' )  # Calculate the total pressure in the Licor chamber licor_file <- calculate_total_pressure(licor_file)  # Calculate temperature-dependent values of C3 photosynthetic parameters licor_file <- calculate_temperature_response(licor_file, c3_temperature_param_bernacchi)  # Fit just one curve from the data set, using a less reliable optimizer so the # example runs faster one_result <- fit_c3_variable_j(   licor_file[licor_file[, 'species_plot'] == 'tobacco - 1', , TRUE],   optim_fun = optimizer_nmkb(1e-7),   calculate_confidence_intervals = FALSE )  # Calculate confidence limits for the fit parameters parameters_with_limits <- confidence_intervals_c3_variable_j(     licor_file[licor_file[, 'species_plot'] == 'tobacco - 1', , TRUE],     one_result$parameters )  # View confidence limits and best estimate for Vcmax_at_25 parameters_with_limits[, c('Vcmax_at_25_lower', 'Vcmax_at_25', 'Vcmax_at_25_upper')] #>   Vcmax_at_25_lower Vcmax_at_25 Vcmax_at_25_upper #> 1              -Inf    171.1859               Inf"},{"path":"https://eloch216.github.io/PhotoGEA/reference/confidence_intervals_c4_aci.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate confidence intervals for C4 A-Ci fitting parameters — confidence_intervals_c4_aci","title":"Calculate confidence intervals for C4 A-Ci fitting parameters — confidence_intervals_c4_aci","text":"Calculates confidence intervals parameters estimated C4 -Ci curve   fit. rare users call function directly, can   automatically applied curve calling fit_c4_aci.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/confidence_intervals_c4_aci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate confidence intervals for C4 A-Ci fitting parameters — confidence_intervals_c4_aci","text":"","code":"confidence_intervals_c4_aci(     replicate_exdf,     best_fit_parameters,     lower = list(),     upper = list(),     fit_options = list(),     sd_A = 1,     relative_likelihood_threshold = 0.147,     x_etr = 0.4,     a_column_name = 'A',     ao_column_name = 'ao',     ci_column_name = 'Ci',     gamma_star_column_name = 'gamma_star',     gmc_norm_column_name = 'gmc_norm',     j_norm_column_name = 'J_norm',     kc_column_name = 'Kc',     ko_column_name = 'Ko',     kp_column_name = 'Kp',     oxygen_column_name = 'oxygen',     rl_norm_column_name = 'RL_norm',     total_pressure_column_name = 'total_pressure',     vcmax_norm_column_name = 'Vcmax_norm',     vpmax_norm_column_name = 'Vpmax_norm',     hard_constraints = 0   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/confidence_intervals_c4_aci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate confidence intervals for C4 A-Ci fitting parameters — confidence_intervals_c4_aci","text":"replicate_exdf exdf object representing one CO2 response curve. best_fit_parameters exdf object representing best-fit parameters CO2 response     curve replicate_exdf, calculated fit_c4_aci. lower value passed fit_c4_aci generating     best_fit_parameters. upper value passed fit_c4_aci generating     best_fit_parameters. fit_options value passed fit_c4_aci generating     best_fit_parameters. sd_A value passed fit_c4_aci generating     best_fit_parameters. relative_likelihood_threshold threshold value relative likelihood used define boundaries     confidence intervals; see details . x_etr fraction whole-chain electron transport occurring mesophyll     (dimensionless). See Equation 29 S. von Caemmerer (2021). a_column_name name column replicate_exdf contains net     assimilation micromol m^(-2) s^(-1). ao_column_name name column replicate_exdf contains     dimensionless ratio solubility diffusivity O2 CO2. ci_column_name name column replicate_exdf contains     intercellular CO2 concentration micromol mol^(-1). gamma_star_column_name name column replicate_exdf contains     dimensionless gamma_star values. gmc_norm_column_name name column replicate_exdf contains normalized     mesophyll conductance values (units     normalized gmc 25 degrees C). j_norm_column_name name column exdf_obj contains normalized     Jmax values (units     normalized Jmax 25 degrees C). kc_column_name name column replicate_exdf contains     Michaelis-Menten constant rubisco carboxylation microbar. ko_column_name name column replicate_exdf contains     Michaelis-Menten constant rubisco oxygenation mbar. kp_column_name name column replicate_exdf contains     Michaelis-Menten constant PEP carboxylase carboxylation     microbar. oxygen_column_name name column exdf_obj contains concentration     O2 ambient air, expressed percentage (commonly 21% 2%);     units must percent. rl_norm_column_name name column replicate_exdf contains normalized     RL values (units normalized RL 25 degrees C). total_pressure_column_name name column exdf_obj contains total pressure     bar. vcmax_norm_column_name name column replicate_exdf contains normalized     Vcmax values (units     normalized Vcmax 25 degrees C). vpmax_norm_column_name name column replicate_exdf contains normalized     Vpmax values (units     normalized Vpmax 25 degrees C). hard_constraints passed calculate_c4_assimilation; see function     details.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/confidence_intervals_c4_aci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate confidence intervals for C4 A-Ci fitting parameters — confidence_intervals_c4_aci","text":"maximum likelihood fitting, set parameter values associated   likelihood value. maximum likelihood known, also possible   define relative likelihood p according p = L / L_max.   set parameter values p exceeds threshold value   p_0 defines region parameter space called like \"relative   likelihood region.\" taking one-dimensional cuts parameter space,   boundaries relative likelihood region define relative likelihood   interval. calculate upper lower limits relative likelihood   intervals parameter. done fixing parameters   best-fit values, varying single parameter find interval   relative likelihood threshold value (set   relative_likelihood_threshold input argument). threshold   set 0.147, intervals equivalent 95% confidence   intervals situations. See Wikipedia page   relative likelihood   information. Internally, function uses error_function_c4_aci   calculate negative logarithm likelihood (-ln(L)). varies   fitting parameter independendently find values   ln(L) - ln(p_0) - ln(L_max) = 0. upper limit confidence interval found exceed ten times   upper limit specified fitting parameter, upper limit   condfidence interval taken infinity.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/confidence_intervals_c4_aci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate confidence intervals for C4 A-Ci fitting parameters — confidence_intervals_c4_aci","text":"exdf object based best_fit_parameters contains lower   upper bounds parameter; example, Vcmax_at_25   fit, best_fit_parameters contain new columns called   Vcmax_at_25_lower Vcmax_at_25_upper.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/confidence_intervals_c4_aci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate confidence intervals for C4 A-Ci fitting parameters — confidence_intervals_c4_aci","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('c4_aci_1.xlsx') )  # Define a new column that uniquely identifies each curve licor_file[, 'species_plot'] <-   paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )  # Organize the data licor_file <- organize_response_curve_data(     licor_file,     'species_plot',     c(9, 10, 16),     'CO2_r_sp' )  # Calculate temperature-dependent values of C4 photosynthetic parameters licor_file <- calculate_temperature_response(licor_file, c4_temperature_param_vc)  # Calculate the total pressure in the Licor chamber licor_file <- calculate_total_pressure(licor_file)  # Fit just one curve from the data set one_result <- fit_c4_aci(   licor_file[licor_file[, 'species_plot'] == 'maize - 5', , TRUE],   calculate_confidence_intervals = FALSE )  # Calculate confidence limits for the fit parameters parameters_with_limits <- confidence_intervals_c4_aci(     licor_file[licor_file[, 'species_plot'] == 'maize - 5', , TRUE],     one_result$parameters )  # View confidence limits and best estimate for Vcmax_at_25 parameters_with_limits[, c('Vcmax_at_25_lower', 'Vcmax_at_25', 'Vcmax_at_25_upper')] #>   Vcmax_at_25_lower Vcmax_at_25 Vcmax_at_25_upper #> 1          33.38873    33.90721          34.42717"},{"path":"https://eloch216.github.io/PhotoGEA/reference/confidence_intervals_c4_aci_hyperbola.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate confidence intervals for C4 A-Ci hyperbola fitting parameters — confidence_intervals_c4_aci_hyperbola","title":"Calculate confidence intervals for C4 A-Ci hyperbola fitting parameters — confidence_intervals_c4_aci_hyperbola","text":"Calculates confidence intervals parameters estimated C4 -Ci curve   fit. rare users call function directly, can   automatically applied curve calling   fit_c4_aci_hyperbola.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/confidence_intervals_c4_aci_hyperbola.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate confidence intervals for C4 A-Ci hyperbola fitting parameters — confidence_intervals_c4_aci_hyperbola","text":"","code":"confidence_intervals_c4_aci_hyperbola(     replicate_exdf,     best_fit_parameters,     lower = list(),     upper = list(),     fit_options = list(),     sd_A = 1,     relative_likelihood_threshold = 0.147,     a_column_name = 'A',     ci_column_name = 'Ci',     hard_constraints = 0   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/confidence_intervals_c4_aci_hyperbola.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate confidence intervals for C4 A-Ci hyperbola fitting parameters — confidence_intervals_c4_aci_hyperbola","text":"replicate_exdf exdf object representing one CO2 response curve. best_fit_parameters exdf object representing best-fit parameters CO2 response     curve replicate_exdf, calculated     fit_c4_aci_hyperbola. lower value passed fit_c4_aci_hyperbola     generating best_fit_parameters. upper value passed fit_c4_aci_hyperbola     generating best_fit_parameters. fit_options value passed fit_c4_aci_hyperbola     generating best_fit_parameters. sd_A value passed fit_c4_aci_hyperbola     generating best_fit_parameters. relative_likelihood_threshold threshold value relative likelihood used define boundaries     confidence intervals; see details . a_column_name name column replicate_exdf contains net     assimilation micromol m^(-2) s^(-1). ci_column_name name column exdf_obj contains intercellular     CO2 concentration, expressed micromol mol^(-1). hard_constraints passed calculate_c4_assimilation_hyperbola; see     function details.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/confidence_intervals_c4_aci_hyperbola.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate confidence intervals for C4 A-Ci hyperbola fitting parameters — confidence_intervals_c4_aci_hyperbola","text":"maximum likelihood fitting, set parameter values associated   likelihood value. maximum likelihood known, also possible   define relative likelihood p according p = L / L_max.   set parameter values p exceeds threshold value   p_0 defines region parameter space called like \"relative   likelihood region.\" taking one-dimensional cuts parameter space,   boundaries relative likelihood region define relative likelihood   interval. calculate upper lower limits relative likelihood   intervals parameter. done fixing parameters   best-fit values, varying single parameter find interval   relative likelihood threshold value (set   relative_likelihood_threshold input argument). threshold   set 0.147, intervals equivalent 95% confidence   intervals situations. See Wikipedia page   relative likelihood   information. Internally, function uses error_function_c4_aci_hyperbola   calculate negative logarithm likelihood (-ln(L)).   varies fitting parameter independendently find values   ln(L) - ln(p_0) - ln(L_max) = 0. upper limit confidence interval found exceed ten times   upper limit specified fitting parameter, upper limit   condfidence interval taken infinity.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/confidence_intervals_c4_aci_hyperbola.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate confidence intervals for C4 A-Ci hyperbola fitting parameters — confidence_intervals_c4_aci_hyperbola","text":"exdf object based best_fit_parameters contains lower   upper bounds parameter; example, Vmax fit,   best_fit_parameters contain new columns called Vmax_lower   Vmax_upper.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/confidence_intervals_c4_aci_hyperbola.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate confidence intervals for C4 A-Ci hyperbola fitting parameters — confidence_intervals_c4_aci_hyperbola","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('c4_aci_1.xlsx') )  # Define a new column that uniquely identifies each curve licor_file[, 'species_plot'] <-   paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )  # Organize the data licor_file <- organize_response_curve_data(     licor_file,     'species_plot',     c(9, 10, 16),     'CO2_r_sp' )  # Fit just one curve from the data set one_result <- fit_c4_aci_hyperbola(   licor_file[licor_file[, 'species_plot'] == 'maize - 5', , TRUE],   calculate_confidence_intervals = FALSE )  # Calculate confidence limits for the fit parameters parameters_with_limits <- confidence_intervals_c4_aci_hyperbola(     licor_file[licor_file[, 'species_plot'] == 'maize - 5', , TRUE],     one_result$parameters )  # View confidence limits and best estimate for Vmax parameters_with_limits[, c('Vmax_lower', 'Vmax', 'Vmax_upper')] #>   Vmax_lower     Vmax Vmax_upper #> 1   64.21675 65.12738   66.04023"},{"path":"https://eloch216.github.io/PhotoGEA/reference/consolidate.html","id":null,"dir":"Reference","previous_headings":"","what":"Consolidate a list of lists — consolidate","title":"Consolidate a list of lists — consolidate","text":"Consolidates list lists regular list combining like-named   elements.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/consolidate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Consolidate a list of lists — consolidate","text":"","code":"consolidate(x)    # S3 method for class 'data.frame' consolidate(x)    # S3 method for class 'exdf' consolidate(x)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/consolidate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Consolidate a list of lists — consolidate","text":"x list lists list_1, list_2, ..., list_N,   sub-list list_i elements named name_1,   name_2, ..., name_M.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/consolidate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Consolidate a list of lists — consolidate","text":"list elements named name_1, name_2, ..., name_M,   element created combining elements x   name using rbind; example, element name name_1   created calling rbind(list_1$name_1, list_2$name_1, ...,   list_N$name_1). calling rbind, element limited   columns common elements name.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/consolidate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Consolidate a list of lists — consolidate","text":"consolidate generic, methods defined nested   lists data frames exdf objects.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/consolidate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Consolidate a list of lists — consolidate","text":"","code":"# Example 1: Create a nested list of data frames and then consolidate them into # a regular list by combining the like-named elements nested_df_list <- list(   list_1 = list(     name_1 = data.frame(A = c(1, 2), B = c(0, 0)),     name_2 = data.frame(A = c(3, 4), B = c(0, 0)),     name_3 = data.frame(A = c(5, 6), B = c(0, 0))   ),   list_2 = list(     name_1 = data.frame(A = c(7, 8), B = c(0, 0)),     name_2 = data.frame(A = c(9, 10), B = c(0, 0)),     name_3 = data.frame(A = c(11, 12), B = c(0, 0))   ),   list_3 = list(     name_1 = data.frame(A = c(13, 14), B = c(0, 0)),     name_2 = data.frame(A = c(15, 16), B = c(0, 0)),     name_3 = data.frame(A = c(17, 18), B = c(0, 0))   ) )  str(nested_df_list) #> List of 3 #>  $ list_1:List of 3 #>   ..$ name_1:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A: num [1:2] 1 2 #>   .. ..$ B: num [1:2] 0 0 #>   ..$ name_2:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A: num [1:2] 3 4 #>   .. ..$ B: num [1:2] 0 0 #>   ..$ name_3:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A: num [1:2] 5 6 #>   .. ..$ B: num [1:2] 0 0 #>  $ list_2:List of 3 #>   ..$ name_1:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A: num [1:2] 7 8 #>   .. ..$ B: num [1:2] 0 0 #>   ..$ name_2:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A: num [1:2] 9 10 #>   .. ..$ B: num [1:2] 0 0 #>   ..$ name_3:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A: num [1:2] 11 12 #>   .. ..$ B: num [1:2] 0 0 #>  $ list_3:List of 3 #>   ..$ name_1:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A: num [1:2] 13 14 #>   .. ..$ B: num [1:2] 0 0 #>   ..$ name_2:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A: num [1:2] 15 16 #>   .. ..$ B: num [1:2] 0 0 #>   ..$ name_3:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A: num [1:2] 17 18 #>   .. ..$ B: num [1:2] 0 0  consolidated_df_list <- consolidate(nested_df_list)  str(consolidated_df_list) #> List of 3 #>  $ name_1:'data.frame':\t6 obs. of  2 variables: #>   ..$ A: num [1:6] 1 2 7 8 13 14 #>   ..$ B: num [1:6] 0 0 0 0 0 0 #>  $ name_2:'data.frame':\t6 obs. of  2 variables: #>   ..$ A: num [1:6] 3 4 9 10 15 16 #>   ..$ B: num [1:6] 0 0 0 0 0 0 #>  $ name_3:'data.frame':\t6 obs. of  2 variables: #>   ..$ A: num [1:6] 5 6 11 12 17 18 #>   ..$ B: num [1:6] 0 0 0 0 0 0  # Example 2: Create a nested list of `exdf` objects and then consolidate them # into a regular list by combining the like-named elements. Here, some of the # elements have columns not present in the others (for example, # `nested_exdf_list$list_3$name_1`). However, these \"extra\" columns are removed # before calling `rbind` and they do not appear in `consolidated_exdf_list`. nested_exdf_list <- list(   list_1 = list(     name_1 = exdf(data.frame(A = c(1, 2), B = c(0, 0))),     name_2 = exdf(data.frame(A = c(3, 4), B = c(0, 0))),     name_3 = exdf(data.frame(A = c(5, 6), B = c(0, 0)))   ),   list_2 = list(     name_1 = exdf(data.frame(A = c(7, 8), B = c(0, 0))),     name_2 = exdf(data.frame(A = c(9, 10), B = c(0, 0))),     name_3 = exdf(data.frame(A = c(11, 12), B = c(0, 0)))   ),   list_3 = list(     name_1 = exdf(data.frame(A = c(13, 14), B = c(0, 0), C = c(-1, -2))),     name_2 = exdf(data.frame(A = c(15, 16), B = c(0, 0), C = c(-1, -2))),     name_3 = exdf(data.frame(A = c(17, 18), B = c(0, 0), C = c(-1, -2)))   ) )  str(nested_exdf_list) #> List of 3 #>  $ list_1:List of 3 #>   ..$ name_1: #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A [NA] (NA): num [1:2] 1 2 #>   .. ..$ B [NA] (NA): num [1:2] 0 0 #>   ..$ name_2: #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A [NA] (NA): num [1:2] 3 4 #>   .. ..$ B [NA] (NA): num [1:2] 0 0 #>   ..$ name_3: #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A [NA] (NA): num [1:2] 5 6 #>   .. ..$ B [NA] (NA): num [1:2] 0 0 #>  $ list_2:List of 3 #>   ..$ name_1: #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A [NA] (NA): num [1:2] 7 8 #>   .. ..$ B [NA] (NA): num [1:2] 0 0 #>   ..$ name_2: #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A [NA] (NA): num [1:2] 9 10 #>   .. ..$ B [NA] (NA): num [1:2] 0 0 #>   ..$ name_3: #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A [NA] (NA): num [1:2] 11 12 #>   .. ..$ B [NA] (NA): num [1:2] 0 0 #>  $ list_3:List of 3 #>   ..$ name_1: #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':\t2 obs. of  3 variables: #>   .. ..$ A [NA] (NA): num [1:2] 13 14 #>   .. ..$ B [NA] (NA): num [1:2] 0 0 #>   .. ..$ C [NA] (NA): num [1:2] -1 -2 #>   ..$ name_2: #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':\t2 obs. of  3 variables: #>   .. ..$ A [NA] (NA): num [1:2] 15 16 #>   .. ..$ B [NA] (NA): num [1:2] 0 0 #>   .. ..$ C [NA] (NA): num [1:2] -1 -2 #>   ..$ name_3: #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':\t2 obs. of  3 variables: #>   .. ..$ A [NA] (NA): num [1:2] 17 18 #>   .. ..$ B [NA] (NA): num [1:2] 0 0 #>   .. ..$ C [NA] (NA): num [1:2] -1 -2  consolidated_exdf_list <- consolidate(nested_exdf_list)  str(consolidated_exdf_list) #> List of 3 #>  $ name_1: #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':\t6 obs. of  2 variables: #>   ..$ A [NA] (NA): num [1:6] 1 2 7 8 13 14 #>   ..$ B [NA] (NA): num [1:6] 0 0 0 0 0 0 #>  $ name_2: #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':\t6 obs. of  2 variables: #>   ..$ A [NA] (NA): num [1:6] 3 4 9 10 15 16 #>   ..$ B [NA] (NA): num [1:6] 0 0 0 0 0 0 #>  $ name_3: #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':\t6 obs. of  2 variables: #>   ..$ A [NA] (NA): num [1:6] 5 6 11 12 17 18 #>   ..$ B [NA] (NA): num [1:6] 0 0 0 0 0 0"},{"path":"https://eloch216.github.io/PhotoGEA/reference/csv.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and write CSV files representing an exdf object — csv.exdf","title":"Read and write CSV files representing an exdf object — csv.exdf","text":"Functions reading writing CSV files represent   exdf object.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/csv.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and write CSV files representing an exdf object — csv.exdf","text":"","code":"read.csv.exdf(file, ...)    write.csv.exdf(x, file, ...)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/csv.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and write CSV files representing an exdf object — csv.exdf","text":"file name file data read ; passed     read.csv. ... Additional arguments passed read.csv     write.csv. Note arguments     specified; error message sent used attempts set one     forbidden arguments. x exdf object written CSV file.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/csv.exdf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read and write CSV files representing an exdf object — csv.exdf","text":"exdf object can written CSV file directly calling   write.csv, approach causes column names   unintentionally modified. example, spaces replaced   periods. can potentially cause problems reloading data   CSV file. Instead, preferred use write.csv.exdf, modify   column names. writing CSV file, saved column names   first row, categories second row, units third   row, data remaining rows. resulting file can read using read.csv.exdf. , names,   categories, units read first three rows specified   file, data values remaining rows. exdf   object created information.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/csv.exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and write CSV files representing an exdf object — csv.exdf","text":"write.csv.exdf function return anything.   read.csv.exdf function returns exdf object   representing contents file.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/csv.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and write CSV files representing an exdf object — csv.exdf","text":"","code":"# Read a CSV file included with the PhotoGEA package; this file was created # using `write.csv.exdf`. licor_file <- read.csv.exdf(   PhotoGEA_example_file_path('ball_berry_1.csv') )  # Now rewrite this to a temporary CSV file tf <- tempfile(fileext = \".csv\") tf #> [1] \"/tmp/Rtmp41veGg/file1ef5434d28a5.csv\"  write.csv.exdf(licor_file, tf)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions — deprecated","title":"Deprecated functions — deprecated","text":"Deprecated functions fully removed future releases.   functions produce error called redirect user   suitable replacement.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions — deprecated","text":"","code":"read_tdl_file(...)    read_licor_file(...)    check_licor_data(...)    calculate_arrhenius(...)    calculate_peaked_gaussian(...)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated functions — deprecated","text":"... Additional arguments; currently unused.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/deprecated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated functions — deprecated","text":"None deprecated functions return anything.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/deprecated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deprecated functions — deprecated","text":"","code":"# These functions all throw errors, so we will wrap them in `tryCatch` here  tryCatch(   read_tdl_file(),   error = function(e) {print(e)} ) #> <simpleError in read_tdl_file(): `read_tdl_file` is deprecated and will be removed in a future release. Please use `read_gasex_file` instead. In most cases, `read_gasex_file(file_name)` (without any additional input arguments) should work.>  tryCatch(   read_licor_file(),   error = function(e) {print(e)} ) #> <simpleError in read_licor_file(): `read_licor_file` is deprecated and will be removed in a future release. Please use `read_gasex_file` instead. In most cases, `read_gasex_file(file_name)` (without any additional input arguments) should work.>  tryCatch(   check_licor_data(),   error = function(e) {print(e)} ) #> <simpleError in check_licor_data(): `check_licor_data` is deprecated and will be removed in a future release. It has been renamed to `check_response_curve_data`. Please use that function instead.>  tryCatch(   calculate_arrhenius(),   error = function(e) {print(e)} ) #> <simpleError in calculate_arrhenius(): `calculate_arrhenius` is deprecated and will be removed in a future release. It has been renamed to `calculate_temperature_response_arrhenius`. Please use that functioninstead.>  tryCatch(   calculate_peaked_gaussian(),   error = function(e) {print(e)} ) #> <simpleError in calculate_peaked_gaussian(): `calculate_peaked_gaussuan` is deprecated and will be removed in a future release. It has been renamed to `calculate_temperature_response_gaussian`. Please use that functioninstead.>"},{"path":"https://eloch216.github.io/PhotoGEA/reference/dim.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the dimension of an exdf object — dim.exdf","title":"Retrieve the dimension of an exdf object — dim.exdf","text":"Returns dimensions exdf object's main_data. Also   enables nrow ncol exdf objects.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/dim.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the dimension of an exdf object — dim.exdf","text":"","code":"# S3 method for class 'exdf' dim(x)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/dim.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the dimension of an exdf object — dim.exdf","text":"x exdf object.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/dim.exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the dimension of an exdf object — dim.exdf","text":"Returns dim(x[['main_data']]).","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/dim.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the dimension of an exdf object — dim.exdf","text":"","code":"simple_exdf <- exdf(data.frame(A = 1), data.frame(A = 'u'), data.frame(A = 'c'))  dim(simple_exdf) #> [1] 1 1 dim(simple_exdf[['main_data']]) # An equivalent command #> [1] 1 1  nrow(simple_exdf) #> [1] 1 ncol(simple_exdf) #> [1] 1"},{"path":"https://eloch216.github.io/PhotoGEA/reference/dimnames.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve or set the dimension names of an exdf object — dimnames.exdf","title":"Retrieve or set the dimension names of an exdf object — dimnames.exdf","text":"Returns sets dimension names exdf object's   main_data. setting names, column names exdf   object's units categories also set. Also enables   colnames rownames exdf objects.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/dimnames.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve or set the dimension names of an exdf object — dimnames.exdf","text":"","code":"# S3 method for class 'exdf' dimnames(x)    # S3 method for class 'exdf' dimnames(x) <- value"},{"path":"https://eloch216.github.io/PhotoGEA/reference/dimnames.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve or set the dimension names of an exdf object — dimnames.exdf","text":"x exdf object. value possible value dimnames(x)","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/dimnames.exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve or set the dimension names of an exdf object — dimnames.exdf","text":"Returns dimnames(x[['main_data']]).","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/dimnames.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve or set the dimension names of an exdf object — dimnames.exdf","text":"","code":"simple_exdf <- exdf(data.frame(A = 1), data.frame(A = 'u'), data.frame(A = 'c'))  dimnames(simple_exdf) #> [[1]] #> [1] \"1\" #>  #> [[2]] #> [1] \"A\" #>  dimnames(simple_exdf[['main_data']]) # An equivalent command #> [[1]] #> [1] \"1\" #>  #> [[2]] #> [1] \"A\" #>   colnames(simple_exdf) <- \"B\" rownames(simple_exdf) <- 2  colnames(simple_exdf) #> [1] \"B\" rownames(simple_exdf) #> [1] \"2\""},{"path":"https://eloch216.github.io/PhotoGEA/reference/document_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Document exdf columns by specifying units and categories — document_variables","title":"Document exdf columns by specifying units and categories — document_variables","text":"Adds new columns table-like object, sets/modifies units   categories columns exdf object.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/document_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Document exdf columns by specifying units and categories — document_variables","text":"","code":"document_variables(x, ...)    # S3 method for class 'data.frame' document_variables(x, ...)    # S3 method for class 'exdf' document_variables(x, ...)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/document_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Document exdf columns by specifying units and categories — document_variables","text":"x table-like R object data frame exdf. ... optional argument character vector three elements     describe column, first element category, second     name, third units. example, c('GasEx', '',     'micromol m^(-2) s^(-1)') specifies category units     column GasEx micromol m^(-2) s^(-1),     respectively. column name x,     added values initialized NA. Categories units     ignored x data frame.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/document_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Document exdf columns by specifying units and categories — document_variables","text":"object based x new /modified columns.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/document_variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Document exdf columns by specifying units and categories — document_variables","text":"","code":"# Create a simple exdf object with two columns (`A` and `B`) and default values # for its units and categories. simple_exdf <- exdf(data.frame(A = c(3, 2, 7, 9), B = c(4, 5, 1, 8)))  print(simple_exdf) #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>   A [NA] (NA) B [NA] (NA) #> 1           3           4 #> 2           2           5 #> 3           7           1 #> 4           9           8  # Specify units and categories for the `A` and `B` columns, and add a new `C` # column. document_variables(   simple_exdf,   c('cat1', 'A', 'm'), # The category of `A` is `cat1` and its units are `m`   c('cat2', 'B', 's'), # The category of `B` is `cat2` and its units are `s`   c('cat3', 'C', 'g')  # The category of `C` is `cat3` and its units are `g` ) #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>   A [cat1] (m) B [cat2] (s) C [cat3] (g) #> 1            3            4           NA #> 2            2            5           NA #> 3            7            1           NA #> 4            9            8           NA  # Do the same but for a data frame; in this case columns A and B will not be # altered, but a new column C will be added (and initialized to NA) document_variables(   simple_exdf$main_data,   c('cat1', 'A', 'm'), # The category of `A` is `cat1` and its units are `m`   c('cat2', 'B', 's'), # The category of `B` is `cat2` and its units are `s`   c('cat3', 'C', 'g')  # The category of `C` is `cat3` and its units are `g` ) #>   A B  C #> 1 3 4 NA #> 2 2 5 NA #> 3 7 1 NA #> 4 9 8 NA"},{"path":"https://eloch216.github.io/PhotoGEA/reference/error_function_c3_aci.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an error function for C3 A-Ci curve fitting — error_function_c3_aci","title":"Generate an error function for C3 A-Ci curve fitting — error_function_c3_aci","text":"Creates function returns error value (negative natural   logarithm likelihood) representing amount agreement   modeled measured values. function minimized,   likelihood maximized. Internally, function uses apply_gm calculate Cc,   uses link{calculate_c3_assimilation} calculate assimilation   rate values compared measured ones.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/error_function_c3_aci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an error function for C3 A-Ci curve fitting — error_function_c3_aci","text":"","code":"error_function_c3_aci(     replicate_exdf,     fit_options = list(),     sd_A = 1,     Wj_coef_C = 4.0,     Wj_coef_Gamma_star = 8.0,     a_column_name = 'A',     ci_column_name = 'Ci',     gamma_star_norm_column_name = 'Gamma_star_norm',     gmc_norm_column_name = 'gmc_norm',     j_norm_column_name = 'J_norm',     kc_norm_column_name = 'Kc_norm',     ko_norm_column_name = 'Ko_norm',     oxygen_column_name = 'oxygen',     rl_norm_column_name = 'RL_norm',     total_pressure_column_name = 'total_pressure',     tp_norm_column_name = 'Tp_norm',     vcmax_norm_column_name = 'Vcmax_norm',     cj_crossover_min = NA,     cj_crossover_max = NA,     hard_constraints = 0,     ...   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/error_function_c3_aci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an error function for C3 A-Ci curve fitting — error_function_c3_aci","text":"replicate_exdf exdf object representing one CO2 response curve. fit_options list named elements representing fit options use parameter.     Values supplied override default values (see details ).     element must 'fit', 'column', numeric value. value     'fit' means parameter fit; value     'column' means value parameter taken     column replicate_exdf name; numeric value means     parameter set value. example,     fit_options = list(alpha_g = 0, Vcmax_at_25 = 'fit', Tp_at_25 = 'column')     means alpha_g set 0, Vcmax_at_25 fit,     Tp_at_25 set values Tp_at_25 column     replicate_exdf. sd_A standard deviation measured values net CO2 assimilation     rate, expressed units micromol m^(-2) s^(-1). sd_A     number, must column replicate_exdf called     sd_A appropriate units. numeric value supplied     overwrite values sd_A column replicate_exdf     exists. Wj_coef_C coefficient equation RuBP-regeneration-limited carboxylation,     whose value depends assumptions NADPH ATP requirements     RuBP regeneration; see calculate_c3_assimilation     information. Wj_coef_Gamma_star coefficient equation RuBP-regeneration-limited carboxylation,     whose value depends assumptions NADPH ATP requirements     RuBP regeneration; see calculate_c3_assimilation     information. a_column_name name column replicate_exdf contains net     assimilation micromol m^(-2) s^(-1). ci_column_name name column replicate_exdf contains     intercellular CO2 concentration micromol mol^(-1). gamma_star_norm_column_name name column replicate_exdf contains normalized     Gamma_star values (units     normalized Gamma_star 25 degrees C). gmc_norm_column_name name column replicate_exdf contains normalized     mesophyll conductance values (units     normalized gmc 25 degrees C). j_norm_column_name name column replicate_exdf contains normalized     J values (units normalized J 25 degrees C). kc_norm_column_name name column replicate_exdf contains normalized     Kc values (units normalized Kc 25 degrees C). ko_norm_column_name name column replicate_exdf contains normalized     Ko values (units normalized Ko 25 degrees C). oxygen_column_name name column replicate_exdf contains     concentration O2 ambient air, expressed percentage (commonly     21% 2%); units must percent. rl_norm_column_name name column replicate_exdf contains normalized     RL values (units normalized RL 25 degrees C). total_pressure_column_name name column replicate_exdf contains total     pressure bar. tp_norm_column_name name column replicate_exdf contains normalized     Tp values (units normalized Tp 25 degrees C). vcmax_norm_column_name name column replicate_exdf contains normalized     Vcmax values (units     normalized Vcmax 25 degrees C). cj_crossover_min minimum value Cc (ppm) Aj allowed become     overall rate-limiting factor. cj_crossover_min set     NA, restriction applied. cj_crossover_max maximim value Cc (ppm) Wj allowed     smaller Wc. cj_crossover_max set NA,     restriction applied. hard_constraints passed calculate_c3_assimilation; see function     details. ... Additional arguments passed calculate_c3_assimilation.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/error_function_c3_aci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate an error function for C3 A-Ci curve fitting — error_function_c3_aci","text":"fitting -Ci curves using maximum likelihood approach, necessary   define function calculates likelihood given set   alpha_g, alpha_old, alpha_s, alpha_t,   Gamma_star_at_25, gmc_at_25, J_at_25, Kc_at_25,   Ko_at_25,  RL_at_25, Tp_at_25, Vcmax_at_25   values comparing model prediction measured curve. function   passed optimization algorithm determine values   produce largest likelihood. error_function_c3_aci returns function, based   particular -Ci curve set fitting options. possible just fit   subset available fitting parameters; default, fitting   parameters alpha_old, J_at_25, RL_at_25,   Tp_at_25, Vcmax_at_25. behavior can changed via   fit_options argument. practical reasons, function actually returns values -ln(L),   L likelihood. logarithm L simpler   calculate L , minus sign converts problem   maximization minimization, important optimizers   designed minimize value. Sometimes optimizer choose biologically unreasonable parameter values   nevertheless produce good fits supplied assimilation values.   common problem fit result may indicate Ac-limited assimilation   low CO2 values, case -Ci curves measured   saturating light. case, optional cj_crossover_min   cj_crossover_max can used constrain range Cc values   (ppm) Aj allowed overall rate limiting factor.   crossover Rubisco-limited RuBP-regeneration limited   assimilation occurs outside bounds (supplied), heavy   penalty added error function, preventing optimizer   choosing parameter values. penalty also added parameter combination   number, calculate_c3_assimilation produces error.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/error_function_c3_aci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an error function for C3 A-Ci curve fitting — error_function_c3_aci","text":"function one input argument guess, numeric   vector representing values parameters fitted (specified   fit_options input argument.) element guess   value one parameter (arranged alphabetical order.) example,   default settings, guess contain values alpha_old,   J_at_25, RL_at_25, Tp_at_25, Vcmax_at_25 (  order).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/error_function_c3_aci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an error function for C3 A-Ci curve fitting — error_function_c3_aci","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('c3_aci_1.xlsx') )  # Define a new column that uniquely identifies each curve licor_file[, 'species_plot'] <-   paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )  # Organize the data licor_file <- organize_response_curve_data(     licor_file,     'species_plot',     c(9, 10, 16),     'CO2_r_sp' )  # Calculate the total pressure in the Licor chamber licor_file <- calculate_total_pressure(licor_file)  # Calculate temperature-dependent values of C3 photosynthetic parameters licor_file <- calculate_temperature_response(licor_file, c3_temperature_param_bernacchi)  # Define an error function for one curve from the set error_fcn <- error_function_c3_aci(   licor_file[licor_file[, 'species_plot'] == 'tobacco - 1', , TRUE] )  # Evaluate the error for: #  alpha_old = 0 #  J_at_25 = 236 #  RL_at_25 = 4e-8 #  Tp_at_25 = 22.7 #  Vcmax_at_25 = 147 error_fcn(c(0, 236, 4e-8, 22.7, 147)) #> [1] 37.20282  # Make a plot of likelihood vs. Vcmax when other parameters are fixed to the # values above. vcmax_error_fcn <- function(Vcmax) {error_fcn(c(0, 236, 4e-8, 22.7, Vcmax))} vcmax_seq <- seq(135, 152, length.out = 41)  lattice::xyplot(   exp(-sapply(vcmax_seq, vcmax_error_fcn)) ~ vcmax_seq,   type = 'b',   xlab = 'Vcmax_at_25 (micromol / m^2 / s)',   ylab = 'Negative log likelihood (dimensionless)' )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/error_function_c3_variable_j.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an error function for C3 Variable J curve fitting — error_function_c3_variable_j","title":"Generate an error function for C3 Variable J curve fitting — error_function_c3_variable_j","text":"Creates function returns error value (negative natural   logarithm likelihood) representing amount agreement   modeled measured values. function minimized,   likelihood maximized. Internally, function uses link{calculate_c3_variable_j}   link{calculate_c3_assimilation} calculate assimilation rate values   compared measured ones.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/error_function_c3_variable_j.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an error function for C3 Variable J curve fitting — error_function_c3_variable_j","text":"","code":"error_function_c3_variable_j(     replicate_exdf,     fit_options = list(),     sd_A = 1,     Wj_coef_C = 4.0,     Wj_coef_Gamma_star = 8.0,     a_column_name = 'A',     ci_column_name = 'Ci',     gamma_star_norm_column_name = 'Gamma_star_norm',     j_norm_column_name = 'J_norm',     kc_norm_column_name = 'Kc_norm',     ko_norm_column_name = 'Ko_norm',     oxygen_column_name = 'oxygen',     phips2_column_name = 'PhiPS2',     qin_column_name = 'Qin',     rl_norm_column_name = 'RL_norm',     total_pressure_column_name = 'total_pressure',     tp_norm_column_name = 'Tp_norm',     vcmax_norm_column_name = 'Vcmax_norm',     cj_crossover_min = NA,     cj_crossover_max = NA,     hard_constraints = 0,     require_positive_gmc = 'positive_a',     gmc_max = Inf,     check_j = TRUE,     ...   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/error_function_c3_variable_j.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an error function for C3 Variable J curve fitting — error_function_c3_variable_j","text":"replicate_exdf exdf object representing one CO2 response curve. fit_options list named elements representing fit options use parameter.     Values supplied override default values (see details ).     element must 'fit', 'column', numeric value. value     'fit' means parameter fit; value     'column' means value parameter taken     column replicate_exdf name; numeric value means     parameter set value. example,     fit_options = list(alpha_g = 0, Vcmax_at_25 = 'fit', Tp_at_25 = 'column')     means alpha_g set 0, Vcmax_at_25 fit,     Tp_at_25 set values Tp_at_25 column     replicate_exdf. sd_A standard deviation measured values net CO2 assimilation     rate, expressed units micromol m^(-2) s^(-1). sd_A     number, must column replicate_exdf called     sd_A appropriate units. numeric value supplied     overwrite values sd_A column replicate_exdf     exists. Wj_coef_C coefficient equation RuBP-regeneration-limited carboxylation,     whose value depends assumptions NADPH ATP requirements     RuBP regeneration; see calculate_c3_assimilation     information. Wj_coef_Gamma_star coefficient equation RuBP-regeneration-limited carboxylation,     whose value depends assumptions NADPH ATP requirements     RuBP regeneration; see calculate_c3_assimilation     information. a_column_name name column replicate_exdf contains net     assimilation micromol m^(-2) s^(-1). ci_column_name name column replicate_exdf contains     intercellular CO2 concentration micromol mol^(-1). gamma_star_norm_column_name name column replicate_exdf contains normalized     Gamma_star values (units     normalized Gamma_star 25 degrees C). j_norm_column_name name column replicate_exdf contains normalized     J values (units normalized J 25 degrees C). kc_norm_column_name name column replicate_exdf contains normalized     Kc values (units normalized Kc 25 degrees C). ko_norm_column_name name column replicate_exdf contains normalized     Ko values (units normalized Ko 25 degrees C). oxygen_column_name name column replicate_exdf contains     concentration O2 ambient air, expressed percentage (commonly     21% 2%); units must percent. phips2_column_name name column replicate_exdf contains values     operating efficiency photosystem II (dimensionless). qin_column_name name column replicate_exdf contains values     incident photosynthetically active flux density     micromol m^(-2) s^(-1). rl_norm_column_name name column replicate_exdf contains normalized     RL values (units normalized RL 25 degrees C). total_pressure_column_name name column replicate_exdf contains total     pressure bar. tp_norm_column_name name column replicate_exdf contains normalized     Tp values (units normalized Tp 25 degrees C). vcmax_norm_column_name name column replicate_exdf contains normalized     Vcmax values (units     normalized Vcmax 25 degrees C). cj_crossover_min minimum value Cc (ppm) Aj allowed become     overall rate-limiting factor. cj_crossover_min set     NA, restriction applied. cj_crossover_max maximim value Cc (ppm) Wj allowed     smaller Wc. cj_crossover_max set NA,     restriction applied. hard_constraints passed calculate_c3_assimilation     calculate_c3_variable_j; see functions details. require_positive_gmc character string specifying method used requiring positive     values mesophyll conductance. Can 'none', '',     'positive_a'. See details. gmc_max maximum value mesophyll conductance considered     acceptable. See details. check_j logical (TRUE/FALSE) value indicating whether check whether     J_F > J_tl. See details. ... Additional arguments passed calculate_c3_assimilation.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/error_function_c3_variable_j.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate an error function for C3 Variable J curve fitting — error_function_c3_variable_j","text":"fitting -Ci + chlorophyll fluorescence curves using Variable J   method, necessary define function calculates likelihood   given set alpha_g, alpha_old, alpha_s,   alpha_t, Gamma_star, J_at_25, RL_at_25,   tau, Tp_at_25, Vcmax_at_25 values comparing   model prediction measured curve. function passed   optimization algorithm determine values produce   smallest error. error_function_c3_variable_j returns function,   based particular replicate set fitting options. possible   just fit subset available fitting parameters; default,   fitting parameters alpha_old, J_at_25, RL_at_25,   Tp_at_25, tau, Vcmax_at_25. behavior can   changed via fit_options argument. practical reasons, function actually returns values -ln(L),   L likelihood. logarithm L simpler   calculate L , minus sign converts problem   maximization minimization, important optimizers   designed minimize value. Sometimes optimizer choose biologically unreasonable parameter values   nevertheless produce good fits supplied assimilation values.   several options preventing optimizer choosing parameter   values: Enforcing Rubisco limitations: common problem fit           result may indicate Rubisc-limited assimilation low CO2 values,           case -Ci curves measured saturating           light. case, optional cj_crossover_min           cj_crossover_max can used constrain range           Cc values (ppm) Wj allowed overall           rate limiting factor. crossover Rubisco-limited           RuBP-regeneration limited carboxylation occurs outside bounds           (supplied), heavy penalty added error           function, preventing optimizer choosing parameter           values. Requiring positive gmc: Variable J method sometimes           predicts negative values mesophyll conductance (gmc).           values probably realistic, especially Cc           CO2 compensation point. require_positive_gmc           input argument can used penalize negative values gmc.           require_positive_gmc '', heavy penalty           added error function negative gmc           values. require_positive_gmc 'positive_a',           heavy penalty added error function           negative gmc values positive; negative           gmc negative allowed.           require_positive_gmc 'none', restrictions           disabled penalties added negative gmc. Preventing large values gmc: Variable J method sometimes           produces unreasonably high values gmc. gmc_max           argument can used address . predicted gmc           values exceed gmc_max positive, heavy           penalty added error function. Enforcing consistent RuBP regeneration rates: principle,           actual RuBP regeneration rate (J_F) always less           equal maximum value given Qin leaf           temperature (J_tl), equality occuring           assimilation RuBP-regeneration-limited. check_j           TRUE, heavy penalty added error function           parameter values J_F greater J_tl           point curve. penalty also added parameter combination   number, calculate_c3_variable_j   calculate_c3_assimilation produce error.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/error_function_c3_variable_j.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an error function for C3 Variable J curve fitting — error_function_c3_variable_j","text":"function one input argument guess, numeric   vector representing values parameters fitted (specified   fit_options input argument.) element guess   value one parameter (arranged alphabetical order.) example,   default settings, guess contain values alpha_old,   J_at_25, RL_at_25, tau, Tp_at_25,   Vcmax_at_25 (order).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/error_function_c3_variable_j.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an error function for C3 Variable J curve fitting — error_function_c3_variable_j","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('c3_aci_1.xlsx') )  # Define a new column that uniquely identifies each curve licor_file[, 'species_plot'] <-   paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )  # Organize the data licor_file <- organize_response_curve_data(     licor_file,     'species_plot',     c(9, 10, 16),     'CO2_r_sp' )  # Calculate the total pressure in the Licor chamber licor_file <- calculate_total_pressure(licor_file)  # Calculate temperature-dependent values of C3 photosynthetic parameters licor_file <- calculate_temperature_response(licor_file, c3_temperature_param_bernacchi)  # Define an error function for one curve from the set error_fcn <- error_function_c3_variable_j(   licor_file[licor_file[, 'species_plot'] == 'tobacco - 1', , TRUE] )  # Evaluate the error for: #  alpha_old = 1.9 #  J_at_25 = 270 #  RL_at_25 = 1.9 #  tau = 0.42 #  Tp_at_25 = 8.7 #  Vcmax_at_25 = 258 error_fcn(c(1.9, 270, 1.9, 0.42, 8.7, 258)) #> [1] 33.33817  # Make a plot of error vs. Tp_at_25 when the other parameters are fixed to the # values above. As Tp_at_25 increases, it eventually stops limiting the # assimilation rate and its value stops influencing the error. tpu_error_fcn <- function(Tp_at_25) {error_fcn(c(1.9, 270, 1.9, 0.42, Tp_at_25, 258))} tpu_seq <- seq(5, 12, by = 0.25)  lattice::xyplot(   sapply(tpu_seq, tpu_error_fcn) ~ tpu_seq,   type = 'b',   xlab = 'Tp at 25 degrees C (micromol / m^2 / s)',   ylab = 'Negative log likelihood (dimensionless)' )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/error_function_c4_aci.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an error function for C4 A-Ci curve fitting — error_function_c4_aci","title":"Generate an error function for C4 A-Ci curve fitting — error_function_c4_aci","text":"Creates function returns error value (negative natural   logarithm likelihood) representing amount agreement   modeled measured values. function minimized,   likelihood maximized. Internally, function uses apply_gm calculate Cc,   uses link{calculate_c4_assimilation} calculate assimilation   rate values compared measured ones.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/error_function_c4_aci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an error function for C4 A-Ci curve fitting — error_function_c4_aci","text":"","code":"error_function_c4_aci(     replicate_exdf,     fit_options = list(),     sd_A = 1,     x_etr = 0.4,     a_column_name = 'A',     ao_column_name = 'ao',     ci_column_name = 'Ci',     gamma_star_column_name = 'gamma_star',     gmc_norm_column_name = 'gmc_norm',     j_norm_column_name = 'J_norm',     kc_column_name = 'Kc',     ko_column_name = 'Ko',     kp_column_name = 'Kp',     oxygen_column_name = 'oxygen',     rl_norm_column_name = 'RL_norm',     total_pressure_column_name = 'total_pressure',     vcmax_norm_column_name = 'Vcmax_norm',     vpmax_norm_column_name = 'Vpmax_norm',     hard_constraints = 0   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/error_function_c4_aci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an error function for C4 A-Ci curve fitting — error_function_c4_aci","text":"replicate_exdf exdf object representing one CO2 response curve. fit_options list named elements representing fit options use parameter.     Values supplied override default values (see details ).     element must 'fit', 'column', numeric value. value     'fit' means parameter fit; value     'column' means value parameter taken     column replicate_exdf name; numeric value means     parameter set value. example,     fit_options = list(RL_at_25 = 0, Vcmax_at_25 = 'fit',     Vpmax_at_25 = 'column') means RL_at_25 set 0,     Vcmax_at_25 fit, Vpmax_at_25 set     values Vpmax_at_25 column replicate_exdf. sd_A standard deviation measured values net CO2 assimilation     rate, expressed units micromol m^(-2) s^(-1).     sd_A number, must column exdf_obj     called sd_A appropriate units. numeric value supplied     overwrite values sd_A column exdf_obj     exists. x_etr fraction whole-chain electron transport occurring mesophyll     (dimensionless). See Equation 29 S. von Caemmerer (2021). a_column_name name column replicate_exdf contains net     assimilation micromol m^(-2) s^(-1). ao_column_name name column replicate_exdf contains     dimensionless ratio solubility diffusivity O2 CO2. ci_column_name name column replicate_exdf contains     intercellular CO2 concentration micromol mol^(-1). gamma_star_column_name name column replicate_exdf contains     dimensionless gamma_star values. gmc_norm_column_name name column replicate_exdf contains normalized     mesophyll conductance values (units     normalized gmc 25 degrees C). j_norm_column_name name column exdf_obj contains normalized     Jmax values (units     normalized Jmax 25 degrees C). kc_column_name name column replicate_exdf contains     Michaelis-Menten constant rubisco carboxylation microbar. ko_column_name name column replicate_exdf contains     Michaelis-Menten constant rubisco oxygenation mbar. kp_column_name name column replicate_exdf contains     Michaelis-Menten constant PEP carboxylase carboxylation     microbar. oxygen_column_name name column exdf_obj contains concentration     O2 ambient air, expressed percentage (commonly 21% 2%);     units must percent. rl_norm_column_name name column replicate_exdf contains normalized     RL values (units normalized RL 25 degrees C). total_pressure_column_name name column exdf_obj contains total pressure     bar. vcmax_norm_column_name name column replicate_exdf contains normalized     Vcmax values (units     normalized Vcmax 25 degrees C). vpmax_norm_column_name name column replicate_exdf contains normalized     Vpmax values (units     normalized Vpmax 25 degrees C). hard_constraints passed calculate_c4_assimilation; see function     details.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/error_function_c4_aci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate an error function for C4 A-Ci curve fitting — error_function_c4_aci","text":"fitting -Ci curves, necessary define function calculates   likelihood given set alpha_psii, gbs,   gmc_at_25, J_at_25, RL_at_25, Rm_frac,   Vcmax_at_25, Vpmax_at_25, Vpr values comparing   model prediction measured curve. function passed   optimization algorithm determine values produce   smallest error. error_function_c4_aci returns function, based   particular -Ci curve set fitting options. possible just fit   subset available fitting parameters; default, fitting   parameters RL_at_25, Vcmax_at_25, Vpmax_at_25.   behavior can changed via fit_options argument. practical reasons, function actually returns values -ln(L),   L likelihood. logarithm L simpler   calculate L , minus sign converts problem   maximization minimization, important optimizers   designed minimize value. penalty added error value parameter combination   number, calculate_c4_assimilation   produces error.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/error_function_c4_aci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an error function for C4 A-Ci curve fitting — error_function_c4_aci","text":"function one input argument guess, numeric   vector representing values parameters fitted (specified   fit_options input argument.) element guess   value one parameter (arranged alphabetical order.) example,   default settings, guess contain values RL_at_25,   Vcmax_at_25, Vpmax_at_25 (order).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/error_function_c4_aci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an error function for C4 A-Ci curve fitting — error_function_c4_aci","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('c4_aci_1.xlsx') )  # Define a new column that uniquely identifies each curve licor_file[, 'species_plot'] <-   paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )  # Organize the data licor_file <- organize_response_curve_data(     licor_file,     'species_plot',     c(9, 10, 16),     'CO2_r_sp' )  # Calculate temperature-dependent values of C4 photosynthetic parameters licor_file <- calculate_temperature_response(licor_file, c4_temperature_param_vc)  # Calculate the total pressure in the Licor chamber licor_file <- calculate_total_pressure(licor_file)  # Define an error function for one curve from the set error_fcn <- error_function_c4_aci(   licor_file[licor_file[, 'species_plot'] == 'maize - 5', , TRUE] )  # Evaluate the error for RL_at_25 = 0, Vcmax_at_25 = 35, Vpmax_at_25 = 180 error_fcn(c(0, 35, 180)) #> [1] 140.3377  # Make a plot of error vs. Vcmax_at_25 when the other parameters are fixed to # the values above. vcmax_error_fcn <- function(Vcmax_at_25) {error_fcn(c(0, Vcmax_at_25, 180))} vcmax_seq <- seq(20, 50)  lattice::xyplot(   sapply(vcmax_seq, vcmax_error_fcn) ~ vcmax_seq,   type = 'b',   xlab = 'Vcmax at 25 degrees C (micromol / m^2 / s)',   ylab = 'Negative log likelihood (dimensionless)' )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/error_function_c4_aci_hyperbola.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an error function for C4 A-Ci curve fitting with a hyperbola — error_function_c4_aci_hyperbola","title":"Generate an error function for C4 A-Ci curve fitting with a hyperbola — error_function_c4_aci_hyperbola","text":"Creates function returns error value (negative natural   logarithm likelihood) representing amount agreement   modeled measured values. function minimized,   likelihood maximized. Internally, function uses   link{calculate_c4_assimilation_hyperbola} calculate assimilation   rate values compared measured ones.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/error_function_c4_aci_hyperbola.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an error function for C4 A-Ci curve fitting with a hyperbola — error_function_c4_aci_hyperbola","text":"","code":"error_function_c4_aci_hyperbola(     replicate_exdf,     fit_options = list(),     sd_A = 1,     a_column_name = 'A',     ci_column_name = 'Ci',     hard_constraints = 0   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/error_function_c4_aci_hyperbola.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an error function for C4 A-Ci curve fitting with a hyperbola — error_function_c4_aci_hyperbola","text":"replicate_exdf exdf object representing one CO2 response curve. fit_options list named elements representing fit options use parameter.     Values supplied override default values (see details ).     element must 'fit', 'column', numeric value. value     'fit' means parameter fit; value     'column' means value parameter taken     column replicate_exdf name; numeric value means     parameter set value. example,     fit_options = list(rL = 0, Vmax = 'fit', c4_curvature = 'column')     means rL set 0, Vmax fit,     c4_curvature set values c4_curvature     column replicate_exdf. sd_A standard deviation measured values net CO2 assimilation     rate, expressed units micromol m^(-2) s^(-1).     sd_A number, must column exdf_obj     called sd_A appropriate units. numeric value supplied     overwrite values sd_A column exdf_obj     exists. a_column_name name column replicate_exdf contains net     assimilation micromol m^(-2) s^(-1). ci_column_name name column exdf_obj contains intercellular     CO2 concentration, expressed micromol mol^(-1). hard_constraints passed calculate_c4_assimilation_hyperbola; see     function details.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/error_function_c4_aci_hyperbola.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate an error function for C4 A-Ci curve fitting with a hyperbola — error_function_c4_aci_hyperbola","text":"fitting -Ci curves, necessary define function calculates   likelihood given set c4_curvature, c4_slope,   rL, Vmax values comparing model prediction   measured curve. function passed optimization algorithm   determine values produce smallest error. error_function_c4_aci_hyperbola returns function,   based particular -Ci curve set fitting options. possible   just fit subset available fitting parameters; default,   fit. behavior can changed via fit_options argument. practical reasons, function actually returns values -ln(L),   L likelihood. logarithm L simpler   calculate L , minus sign converts problem   maximization minimization, important optimizers   designed minimize value. penalty added error value parameter combination   number,   calculate_c4_assimilation_hyperbola produces error.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/error_function_c4_aci_hyperbola.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an error function for C4 A-Ci curve fitting with a hyperbola — error_function_c4_aci_hyperbola","text":"function one input argument guess, numeric   vector representing values parameters fitted (specified   fit_options input argument.) element guess   value one parameter (arranged alphabetical order.) example,   default settings, guess contain values c4_curvature,   c4_slope, rL, Vmax (order).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/error_function_c4_aci_hyperbola.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an error function for C4 A-Ci curve fitting with a hyperbola — error_function_c4_aci_hyperbola","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('c4_aci_1.xlsx') )  # Define a new column that uniquely identifies each curve licor_file[, 'species_plot'] <-   paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )  # Organize the data licor_file <- organize_response_curve_data(     licor_file,     'species_plot',     c(9, 10, 16),     'CO2_r_sp' )  # Define an error function for one curve from the set error_fcn <- error_function_c4_aci_hyperbola(   licor_file[licor_file[, 'species_plot'] == 'maize - 5', , TRUE] )  # Evaluate the error for c4_curvature = 0.8, c4_slope = 0.5, rL = 1.0, Vmax = 65 error_fcn(c(0.8, 0.5, 1.0, 65)) #> [1] 439.4015  # Make a plot of error vs. Vmax when the other parameters are fixed to # the values above. vmax_error_fcn <- function(Vmax) {error_fcn(c(0.8, 0.5, 1.0, Vmax))} vmax_seq <- seq(55, 75)  lattice::xyplot(   sapply(vmax_seq, vmax_error_fcn) ~ vmax_seq,   type = 'b',   xlab = 'Vmax (micromol / m^2 / s)',   ylab = 'Negative log likelihood (dimensionless)' )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/estimate_licor_variance.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate variance of measured Licor values — estimate_licor_variance","title":"Estimate variance of measured Licor values — estimate_licor_variance","text":"Estimates variance standard deviation net CO2 assimilation rate   measured Licor Li-6800 similar portable photosynthesis system.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/estimate_licor_variance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate variance of measured Licor values — estimate_licor_variance","text":"","code":"estimate_licor_variance(     exdf_obj,     sd_CO2_r,     sd_CO2_s,     sd_flow,     sd_H2O_r,     sd_H2O_s,     a_column_name = 'A',     co2_r_column_name = 'CO2_r',     co2_s_column_name = 'CO2_s',     corrfact_column_name = 'CorrFact',     flow_column_name = 'Flow',     h2o_r_column_name = 'H2O_r',     h2o_s_column_name = 'H2O_s',     s_column_name = 'S'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/estimate_licor_variance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate variance of measured Licor values — estimate_licor_variance","text":"exdf_obj exdf object containing gas exchange data. sd_CO2_r standard deviation reference CO2 concentrations (CO2_r)     units micromol mol^(-1). sd_CO2_s standard deviation sample CO2 concentrations (CO2_s) units     micromol mol^(-1). sd_flow standard deviation flow rates (Flow) units     micromol s^(-1). sd_H2O_r standard deviation reference H2O concentrations (H2O_r)     units mmol mol^(-1). sd_H2O_s standard deviation reference H2O concentrations (H2O_r)     units mmol mol^(-1). a_column_name name column exdf_obj contains net CO2     assimilation rate micromol m^(-2) s^(-1). co2_r_column_name name column exdf_obj contains CO2     concentration reference line micromol mol^(-1). co2_s_column_name name column exdf_obj contains CO2     concentration reference line micromol mol^(-1). corrfact_column_name name column exdf_obj contains leak correction     factor (dimensionless) flow_column_name name column exdf_obj contains flow rate     air entering leaf chamber micromol s^(-1). h2o_r_column_name name column exdf_obj contains H2O     concentration reference line mmol mol^(-1). h2o_s_column_name name column exdf_obj contains H2O     concentration sample line mmol mol^(-1). s_column_name name column exdf_obj contains leaf chamber     area cm^2.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/estimate_licor_variance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate variance of measured Licor values — estimate_licor_variance","text":"Uses error propogation formula calculate influence variance   CO2_r, CO2_s, etc variance , calculated   Licor LI-6800.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/estimate_licor_variance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate variance of measured Licor values — estimate_licor_variance","text":"exdf object based exdf_obj includes additional   columns representing standard deviation measurements   (sd_A), individual terms comprising total variance   , var_CO2_r, var_CO2_s, etc.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/estimate_licor_variance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate variance of measured Licor values — estimate_licor_variance","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('c3_aci_1.xlsx') )  # Define a new column that uniquely identifies each curve licor_file[, 'species_plot'] <-   paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )  # Organize the data licor_file <- organize_response_curve_data(     licor_file,     'species_plot',     c(9, 10, 16),     'CO2_r_sp' )  # Estimate variance in measured A values licor_file <- estimate_licor_variance(   licor_file,   sd_CO2_r = 1,   sd_CO2_s = 0.1,   sd_flow = 0.2,   sd_H2O_r = 0.5,   sd_H2O_s = 0.1 )  # Plot each component of the total variance of A lattice::xyplot(     var_CO2_r + var_CO2_s + var_flow + var_H2O_r + var_H2O_s + var_A ~ Ci | species_plot,     data = licor_file$main_data,     type = 'b',     pch = 16,     auto = TRUE )   # Plot the standard deviation of A lattice::xyplot(     sd_A ~ Ci,     group = species_plot,     data = licor_file$main_data,     type = 'b',     pch = 16,     auto = TRUE )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/estimate_operating_point.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the operating point from an A-Ci curve — estimate_operating_point","title":"Estimate the operating point from an A-Ci curve — estimate_operating_point","text":"Uses linear interpolation estimate Cc, Ci,   atmospheric CO2 concentration data exdf object,   represent single -Ci curve. function can accomodate alternative   column names variables taken data file case change   point future. function also checks units   required column produce error units incorrect.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/estimate_operating_point.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the operating point from an A-Ci curve — estimate_operating_point","text":"","code":"estimate_operating_point(     aci_exdf,     Ca_atmospheric,     type = 'c3',     a_column_name = 'A',     ca_column_name = 'Ca',     cc_column_name = 'Cc',     ci_column_name = 'Ci',     pcm_column_name = 'PCm',     return_list = FALSE   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/estimate_operating_point.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the operating point from an A-Ci curve — estimate_operating_point","text":"aci_exdf exdf object representing one CO2 response curve. Ca_atmospheric atmospheric CO2 concentration (units micromol mol^(-1));     used estimate operating point. example,     approximate global average 2023 420 ppm,     correspond Ca_atmospheric = 420. type type photosynthesis: either 'c3' 'c4'. a_column_name name column aci_exdf contains net     assimilation micromol m^(-2) s^(-1). ca_column_name name column aci_exdf contains     ambient CO2 concentration micromol mol^(-1). cc_column_name name column aci_exdf contains     chloroplastic CO2 concentration micromol mol^(-1). ci_column_name name column aci_exdf contains     intercellular CO2 concentration micromol mol^(-1). pcm_column_name name column aci_exdf contains partial pressure     CO2 mesophyll, expressed microbar. return_list logical value indicating whether return results list.     users need use return_list = TRUE;     return_list = FALSE used internally functions     PhotoGEA package.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/estimate_operating_point.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate the operating point from an A-Ci curve — estimate_operating_point","text":"analyzing interpreting -Ci curves, often useful determine   values Ci correspond typical growth   conditions (Ca set atmospheric value). Together,   special values Ci specify \"operating point\"   leaf. However, variety practical reasons, -Ci curves actually   contain measurement point Ca atmospheric value.   Nevertheless, possible apply linear interpolation observed   Ci - Ca - Ca relations estimate operating point.   function automates procedure. also calculates operating   values Cc (c3 -Ci curves) PCm (c4   -Ci curves). function assumes aci_exdf represents single   -Ci curve. Typically, function directly called users   fitting functions fit_c3_aci fit_c4_aci   automatically use function determine operating point.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/estimate_operating_point.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the operating point from an A-Ci curve — estimate_operating_point","text":"return value depends return_list type. return_list FALSE, function returns exdf   object based aci_exdf includes identifier columns well   values Ca_atmospheric, operating_Ci, operating_An,   operating_Cc (operating_PCm) columns names. return_list TRUE, function returns list   following named elements: Ca_atmospheric, operating_Ci,   operating_An, operating_Cc (operating_PCm),   operating_exdf. first four numeric values described ,   operating_exdf exdf object one row can   passed calculate_c3_assimilation   calculate_c4_assimilation order estimate operating   photosynthesis model. Ca_atmospheric outside range Ca values   aci_exdf, operating point reasonably estimated;   case, warning occurs calculated return values set   NA. Ca_atmospheric NA, calculated return values   set NA warning occurs.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/estimate_operating_point.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the operating point from an A-Ci curve — estimate_operating_point","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('c3_aci_1.xlsx') )  # Define a new column that uniquely identifies each curve licor_file[, 'species_plot'] <-   paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )  # Organize the data licor_file <- organize_response_curve_data(     licor_file,     'species_plot',     c(9, 10, 16),     'CO2_r_sp' )  # Calculate temperature-dependent values of photosynthetic parameters licor_file <- calculate_temperature_response(licor_file, c3_temperature_param_sharkey)  # Calculate the total pressure in the Licor chamber licor_file <- calculate_total_pressure(licor_file)  # Calculate Cc, assuming an infinite mesophyll conductance (so `Cc` = `Ci`) licor_file <- apply_gm(licor_file, Inf)  # Determine the operating point for just one curve from the data set one_result <- estimate_operating_point(   licor_file[licor_file[, 'species_plot'] == 'tobacco - 1', , TRUE],   Ca_atmospheric = 420 )  one_result[, 'operating_Cc'] #> [1] 294.7032 one_result[, 'operating_Ci'] #> [1] 294.7032 one_result[, 'operating_An'] #> [1] 37.51608"},{"path":"https://eloch216.github.io/PhotoGEA/reference/example_data_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data files — example_data_files","title":"Example data files — example_data_files","text":"PhotoGEA package includes several data files can used   demonstrate different functions analysis techniques.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/example_data_files.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example data files — example_data_files","text":"following files included package: ball_berry_1.xlsx ball_berry_2.xlsx: Two log files           created Licor Li-6800 portable gas exchange measurement systems.           log files contain several Ball-Berry curves. Several user           constants defined logs can used identify           individual curves subsets curves: species, plot,           instrument. files used \"Analyzing           Ball-Berry Data\" vignette examples. ball_berry_1.csv: CSV version ball_berry_1.xlsx,           created reading Excel file           read_gasex_file saving using           write.csv.exdf. can done follows: tmp           <- read_gasex_file(PhotoGEA_example_file_path('ball_berry_1.xlsx'));           write.csv.exdf(tmp, 'ball_berry_1.csv') c3_aci_1.xlsx c3_aci_2.xlsx: Two log files           created Licor Li-6800 portable gas exchange measurement systems.           log files contain several C3 CO2 response (-Ci) curves.           Several user constants defined logs can used           identify individual curves subsets curves: species,           plot, instrument. files used           \"Analyzing C3 -Ci Curves\" vignette examples.           Remarks sheet c3_aci_2.xlsx deleted           original version test read_licor_6800_Excel. c4_aci_1.xlsx c4_aci_2.xlsx: Two log files           created Licor Li-6800 portable gas exchange measurement systems.           log files contain several C4 CO2 response (-Ci) curves.           Several user constants defined logs can used           identify individual curves subsets curves: species,           plot, instrument. files used           \"Analyzing C4 -Ci Curves\" vignette examples. tdl_sampling_1.dat tdl_sampling_2.dat: Two log files           created Campbell Scientific CR3000 data logger, representing data           tunable diode laser (TDL) system. files used           \"Analyzing TDL Data\" vignette examples. plaintext_licor_file: log file created Licor Li-6800           portable gas exchange measurement system. file contains several           CO2 response (-Ci) curves. Several user constants defined           log can used identify individual curves subsets           curves: species, plot, instrument. plaintext_licor_file_v2: log file based           plaintext_licor_file two separate [Data]           [Header] sections, log file closed           reopened halfway measurement sequence. licor_for_gm_site11.xlsx, licor_for_gm_site13.xslsx,           tdl_for_gm: Two Licor Li-6800 log files CR3000 TDL log           file, respectively. files used example loading           processing combined gas exchange isotope discrimination           measurements. Licor log file includes 6 points measured           CO2_r setpoint set 715 ppm 6 points setpoint           set 450 ppm. Since none data files published, noise added   original data. Thus, similar real measurements, useful   conclusions can drawn . installing `PhotoGEA`, copies files stored R   package directory (PhotoGEA/extdata subdirectory).   location unique computer, full paths files can   obtained using PhotoGEA_example_file_path function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/example_data_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example data files — example_data_files","text":"","code":"# Print full paths to the example files PhotoGEA_example_file_path('ball_berry_1.xlsx') #> [1] \"/home/runner/work/_temp/Library/PhotoGEA/extdata/ball_berry_1.xlsx\" PhotoGEA_example_file_path('ball_berry_2.xlsx') #> [1] \"/home/runner/work/_temp/Library/PhotoGEA/extdata/ball_berry_2.xlsx\" PhotoGEA_example_file_path('c3_aci_1.xlsx') #> [1] \"/home/runner/work/_temp/Library/PhotoGEA/extdata/c3_aci_1.xlsx\" PhotoGEA_example_file_path('c3_aci_2.xlsx') #> [1] \"/home/runner/work/_temp/Library/PhotoGEA/extdata/c3_aci_2.xlsx\" PhotoGEA_example_file_path('c4_aci_1.xlsx') #> [1] \"/home/runner/work/_temp/Library/PhotoGEA/extdata/c4_aci_1.xlsx\" PhotoGEA_example_file_path('c4_aci_2.xlsx') #> [1] \"/home/runner/work/_temp/Library/PhotoGEA/extdata/c4_aci_2.xlsx\" PhotoGEA_example_file_path('licor_for_gm_site11.xlsx') #> [1] \"/home/runner/work/_temp/Library/PhotoGEA/extdata/licor_for_gm_site11.xlsx\" PhotoGEA_example_file_path('licor_for_gm_site13.xlsx') #> [1] \"/home/runner/work/_temp/Library/PhotoGEA/extdata/licor_for_gm_site13.xlsx\" PhotoGEA_example_file_path('plaintext_licor_file') #> [1] \"/home/runner/work/_temp/Library/PhotoGEA/extdata/plaintext_licor_file\" PhotoGEA_example_file_path('plaintext_licor_file_v2') #> [1] \"/home/runner/work/_temp/Library/PhotoGEA/extdata/plaintext_licor_file_v2\" PhotoGEA_example_file_path('tdl_for_gm.dat') #> [1] \"/home/runner/work/_temp/Library/PhotoGEA/extdata/tdl_for_gm.dat\" PhotoGEA_example_file_path('tdl_sampling_1.dat') #> [1] \"/home/runner/work/_temp/Library/PhotoGEA/extdata/tdl_sampling_1.dat\" PhotoGEA_example_file_path('tdl_sampling_2.dat') #> [1] \"/home/runner/work/_temp/Library/PhotoGEA/extdata/tdl_sampling_2.dat\""},{"path":"https://eloch216.github.io/PhotoGEA/reference/exclude_outliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Exclude outliers from a data set — exclude_outliers","title":"Exclude outliers from a data set — exclude_outliers","text":"Excludes outliers data set using \"1.5 interquartile range\" rule.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/exclude_outliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exclude outliers from a data set — exclude_outliers","text":"","code":"exclude_outliers(x, col_for_analysis, INDICES, method = 'exclude')    # S3 method for class 'data.frame' exclude_outliers(x, col_for_analysis, INDICES, method = 'exclude')    # S3 method for class 'exdf' exclude_outliers(x, col_for_analysis, INDICES, method = 'exclude')"},{"path":"https://eloch216.github.io/PhotoGEA/reference/exclude_outliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exclude outliers from a data set — exclude_outliers","text":"x data table col_for_analysis name column x used determine outliers. INDICES factor list factors nrow(x) elements. method Specify whether remove rows x ('remove') replace     outlier values col_for_analysis NA ('exclude').","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/exclude_outliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exclude outliers from a data set — exclude_outliers","text":"function returns object formed x, results   depend value method. method 'remove', returned object modified copy   x rows value col_for_analysis   outlier removed. method 'exclude', returned object modified copy   x outlier values col_for_analysis   replaced NA.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/exclude_outliers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exclude outliers from a data set — exclude_outliers","text":"exclude_outliers generic, methods defined data frames   exdf objects. function uses simple rule detect outliers,   point deviates mean 1.5 * IQR,   IQR interquartile range, said outlier.   method also sometimes referred \"Tukey's Fences,\" seen   Wikipedia page outliers. data sets extreme outliers, may necessary exclude outliers   actually remove .","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/exclude_outliers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exclude outliers from a data set — exclude_outliers","text":"","code":"# Read a Licor file included with the PhotoGEA package; this file includes # several light response curves that can be identified by the 'species' and # 'plot' columns. licor_file <- read_gasex_file(   PhotoGEA_example_file_path('ball_berry_1.xlsx') )  # Remove points from each response curve in the data where the leaf temperature # is determined to be an outlier licor_file_clean <- exclude_outliers(   licor_file,   'TleafCnd',   list(licor_file[, 'species'], licor_file[, 'plot']),   method = 'remove' )  # Check to see how many points remain after removing outliers str(list('original' = nrow(licor_file), 'clean' = nrow(licor_file_clean))) #> List of 2 #>  $ original: int 28 #>  $ clean   : int 24"},{"path":"https://eloch216.github.io/PhotoGEA/reference/exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Extended data frame — exdf","title":"Extended data frame — exdf","text":"\"extended data frame\" (exdf) object similar data frame,   also contains information units categories   column.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extended data frame — exdf","text":"","code":"exdf(     main_data = data.frame(),     units = NULL,     categories = NULL,     ...   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extended data frame — exdf","text":"main_data data frame. units data frame columns main_data (subset     columns main_data) just one row, entry     describes units corresponding column main_data.     units NULL, initialized NA     column. units columns main_data present     units also initialized NA. categories data frame columns main_data (subset     columns main_data) just one row, entry     describes category corresponding column main_data.     categories NULL, initialized NA     column. categories columns main_data     present catgories also initialized NA. ... additional properties include entries resulting exdf     object; must passed named arguments.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/exdf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extended data frame — exdf","text":"exdf class originally created way represent   contents Licor Excel file R structure. Licor Excel files,   column name, units, category; example, column values   net assimilation rate called , units micromol / m^2   / s, categorized GasEx variable. technical point view, exdf object simply list   three required elements: main_data, units,   categories. data frame column   names, described . also possible exdf object   additional entries filename stores name   file used create exdf. Several S3 methods defined exdf objects, following   general guidance   Advanced R S3 classes: .exdf .data.frame.exdf print.exdf str.exdf length.exdf dim.exdf dimnames.exdf [.exdf [<-.exdf rbind.exdf cbind.exdf split.exdf .exdf Note column names main_data, units,   categories must unique; make.unique function can   useful ensuring .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extended data frame — exdf","text":"exdf object described .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extended data frame — exdf","text":"","code":"# Example 1: Creating a simple exdf object with two columns (`A` and `B`) and # default values for its units and categories. There are four values of each # variable. exdf(data.frame(A = c(3, 2, 7, 9), B = c(4, 5, 1, 8))) #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>   A [NA] (NA) B [NA] (NA) #> 1           3           4 #> 2           2           5 #> 3           7           1 #> 4           9           8  # Example 2: Creating a simple exdf object with two columns (`A` and `B`) that # have units of `m` and `s`, respectively, and categories of `Cat1` and `Cat2`, # respectively. There are four values of each variable. exdf(   data.frame(A = c(3, 2, 7, 9), B = c(4, 5, 1, 8)),   data.frame(A = 'm', B = 's'),   data.frame(A = 'Cat1', B = 'Cat2') ) #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>   A [Cat1] (m) B [Cat2] (s) #> 1            3            4 #> 2            2            5 #> 3            7            1 #> 4            9            8"},{"path":"https://eloch216.github.io/PhotoGEA/reference/extract.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Access or modify exdf elements — extract.exdf","title":"Access or modify exdf elements — extract.exdf","text":"Returns sets values elements exdf object.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/extract.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access or modify exdf elements — extract.exdf","text":"","code":"# S3 method for class 'exdf' x[i, j, return_exdf = FALSE]    # S3 method for class 'exdf' x[i, j] <- value"},{"path":"https://eloch216.github.io/PhotoGEA/reference/extract.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access or modify exdf elements — extract.exdf","text":"x exdf object. , j Indices specifying elements extract replace. Indices     numeric character vectors empty (missing)     NULL. return_exdf logical value indicating whether return value exdf     object. value Typically array-like R object similar class x.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/extract.exdf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Access or modify exdf elements — extract.exdf","text":"Since exdf object actually list named elements,   elements can accessed using [[ $ operators, list   named elements can obtained calling names. Elements main_data data frame exdf object can   accessed set using [ [<- operators. applied   exdf object, operators essentially shortcuts calling   operators object's main_data data frame. create new exdf object subset data contained   another exdf object, [ operator   return_exdf = TRUE can used.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/extract.exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access or modify exdf elements — extract.exdf","text":"return_exdf FALSE, access operator return   either vector data frame, depending dimension j.   return_exdf TRUE, access operator return   exdf object.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/extract.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access or modify exdf elements — extract.exdf","text":"","code":"# Create a small exdf object that includes an extra element in addition to the # required ones (`main_data`, `units`, and `categories`). small_exdf <- exdf(   data.frame(A = c(3, 2, 7, 9), B = c(4, 5, 1, 8)),   data.frame(A = 'm', B = 's'),   data.frame(A = 'Cat1', B = 'Cat2'),   extra_exdf_element = \"This is an example of an extra exdf element\" )  # Accessing elements of `small_exdf` names(small_exdf)     # Get the names of all elements of small_exdf #> [1] \"main_data\"          \"units\"              \"categories\"         #> [4] \"extra_exdf_element\" small_exdf[['units']] # View the units using the `[[` operator #>   A B #> 1 m s small_exdf$categories # View the categories using the `$` operator #>      A    B #> 1 Cat1 Cat2  # Accessing elements of `small_exdf$main_data` small_exdf[,1]   # Access the first column #> [1] 3 2 7 9 small_exdf[1,]   # Access the first row #>   A B #> 1 3 4 small_exdf[,'B'] # Access the column named 'B' #> [1] 4 5 1 8 small_exdf[1,2]  # Access element 1 of column 2 #> [1] 4  # Equivalent (but longer) commands for accessing elements of `small_exdf$main_data` small_exdf$main_data[,1]   # Access the first column #> [1] 3 2 7 9 small_exdf$main_data[1,]   # Access the first row #>   A B #> 1 3 4 small_exdf$main_data[,'B'] # Access the column named 'B' #> [1] 4 5 1 8 small_exdf$main_data[1,2]  # Access element 1 of column 2 #> [1] 4  # Replacing elements of `small_exdf$main_data` small_exdf[,'A'] <- seq_len(4)             # Replace column A with new values small_exdf[small_exdf[,'A'] > 2, 'B'] <- 0 # Replace some rows of column B with new values  # Creating a new exdf object with a subset of the data from small_exdf. Here we # specify `return_exdf = TRUE` so that the `[` operator returns an exdf object # instead of a data frame new_exdf <- small_exdf[small_exdf[,'A'] > 2, , TRUE] names(new_exdf) # Check that the `extra_exdf_element` is still present #> [1] \"main_data\"          \"units\"              \"categories\"         #> [4] \"extra_exdf_element\" print(new_exdf) # Check that only the rows with A > 2 are included #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>   A [Cat1] (m) B [Cat2] (s) #> 3            3            0 #> 4            4            0"},{"path":"https://eloch216.github.io/PhotoGEA/reference/factorize_id_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert ID column to a factor with a suitable ordering — factorize_id_column","title":"Convert ID column to a factor with a suitable ordering — factorize_id_column","text":"Converts ID column factor suitable ordering. particular,   function ensure IDs beginning WT (  control group name, case-insensitive) ordered   values. helpful plotting results according genotype.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/factorize_id_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert ID column to a factor with a suitable ordering — factorize_id_column","text":"","code":"factorize_id_column(x, ...)    # S3 method for class 'character' factorize_id_column(x, control_group_name = 'WT', ...)    # S3 method for class 'data.frame' factorize_id_column(x, id_column_name, control_group_name = 'WT', ...)    # S3 method for class 'exdf' factorize_id_column(x, id_column_name, control_group_name = 'WT', ...)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/factorize_id_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert ID column to a factor with a suitable ordering — factorize_id_column","text":"x Object ordered. id_column_name x data.frame exdf,     argument specifies column within table ordered. control_group_name string specifying name control group, 'WT'     'control'. ... Additional arguments (currently unused).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/factorize_id_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert ID column to a factor with a suitable ordering — factorize_id_column","text":"factorize_id_column.character returns character vector   factor appropriate ordering. factorize_id_column.data.frame factorize_id_column.exdf   return copy original table, one column (specified   id_column_name) converted factor   appropriate ordering.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/factorize_id_column.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert ID column to a factor with a suitable ordering — factorize_id_column","text":"choose ordering, unique identifier split three components:   initial control_group_name (present), final numeric value,   content two. , identifiers sorted   according three values, order control_group_name ->   content -> numeric value. Note capitalization initial   control_group_name values standardized match   user-specified version. system works well identifiers represent genotypes/events,   combine genotype/event replicate number.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/factorize_id_column.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert ID column to a factor with a suitable ordering — factorize_id_column","text":"","code":"# Identifiers that represent genotypes genotype_ids <- c('4', 'control', '2', 'CONTROL', '8')  factorize_id_column(genotype_ids, control_group_name = 'control') #> [1] 4       control 2       control 8       #> Levels: control 2 4 8  # Identifiers that represent `genotype - replicate` values replicate_ids <- c('4 - 4', 'wT - 2', 'a - 2', 'WT - 1', '4 - 8', 'wt - 9')  factorize_id_column(replicate_ids) #> [1] 4 - 4  WT - 2 a - 2  WT - 1 4 - 8  WT - 9 #> Levels: WT - 1 WT - 2 WT - 9 4 - 4 4 - 8 a - 2  # Data frame dat <- data.frame(replicate_id = replicate_ids, val = seq_along(replicate_ids))  # Display data in bar chart - note the order of the replicates lattice::barchart(val ~ replicate_id, data = dat)   # Display factorized data in bar chart - note the order of the replicates lattice::barchart(val ~ replicate_id, data = factorize_id_column(dat, 'replicate_id'))   # Extended data frame exdf_obj <- exdf(dat, units = data.frame(replicate_id = '', val = 'm / s'))  exdf_obj <- factorize_id_column(exdf_obj, 'replicate_id')  exdf_obj[, 'replicate_id'] #> [1] 4 - 4  WT - 2 a - 2  WT - 1 4 - 8  WT - 9 #> Levels: WT - 1 WT - 2 WT - 9 4 - 4 4 - 8 a - 2"},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_ball_berry.html","id":null,"dir":"Reference","previous_headings":"","what":"Fits the Ball-Berry model to an experimental curve — fit_ball_berry","title":"Fits the Ball-Berry model to an experimental curve — fit_ball_berry","text":"Calculates linear fit stomatal conductance vs. Ball-Berry index using   data exdf object. function can accomodate alternative   column names variables taken Licor file case change   point future. function also checks units   required column produce error units incorrect.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_ball_berry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fits the Ball-Berry model to an experimental curve — fit_ball_berry","text":"","code":"fit_ball_berry(     replicate_exdf,     bb_index_column_name = 'bb_index',     gsw_column_name = 'gsw'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_ball_berry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fits the Ball-Berry model to an experimental curve — fit_ball_berry","text":"replicate_exdf exdf object representing one Ball-Berry curve. bb_index_column_name name column replicate_exdf contains Ball-Berry     index mol m^(-2) s^(-1). gsw_column_name name column replicate_exdf contains stomatal     conductance water vapor mol m^(-2) s^(-1).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_ball_berry.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fits the Ball-Berry model to an experimental curve — fit_ball_berry","text":"Ball-Berry model simple way describe response leaf's   stomata assimilation rate local environmental conditions.   Specifically, predicts stomatal conductance water vapor using   following equation: gsw = bb_0 + bb_1 * * h_s / C_s gsw stomatal conductance, net assimilation   rate, h_s relative humidity leaf surface, C_s   CO2 concentration leaf surface. term * h_s / C_s   commonly referred Ball-Berry index, intercept   (bb_0) slope (bb_1) linear relationship   Ball-Berry parameters describe stomatal response. Although model certainly oversimplification, encode   important stomatal responses. example, humidity low, stomata   close, reducing stomatal conductance. Likewise, CO2 concentration   around leaf depleted, stomata open allow CO2 diffuse   leaf's interior, increasing somatal conductance. information   model possible alternatives, see following papers: Ball, J. T., Woodrow, . E. Berry, J. . \"Model Predicting           Stomatal Conductance Contribution Control           Photosynthesis Different Environmental Conditions.\" \"Progress           Photosynthesis Research: Volume 4\" (1986)           [doi:10.1007/978-94-017-0519-6_48 ]. Tardieu, F. Davies, W. J. \"Integration hydraulic chemical           signalling control stomatal conductance water status           droughted plants.\" Plant, Cell & Environment 16, 341–349 (1993).           [doi:10.1111/j.1365-3040.1993.tb00880.x ]. Leuning, R. \"critical appraisal combined           stomatal-photosynthesis model C3 plants.\" Plant, Cell &           Environment 18, 339–355 (1995)           [doi:10.1111/j.1365-3040.1995.tb00370.x ]. Dewar, R. C. \"Ball–Berry–Leuning Tardieu–Davies stomatal           models: synthesis extension within spatially aggregated picture           guard cell function.\" Plant, Cell & Environment 25, 1383–1398 (2002).           [doi:10.1046/j.1365-3040.2002.00909.x ]. Ball-Berry parameters typically determined measuring Ball-Berry   curve, one factors influence Ball-Berry index   systematically varied across range values. value, care   taken net assimilation stomatal conductance reached   steady-state values, values recorded. , linear fit   experimentally observed stomatal conductances function   Ball-Berry index performed extract estimates Ball-Berry   intercept slope. function uses lm perform fit. function assumes replicate_exdf represents single   Ball-Berry curve. fit multiple curves , function often used   along .exdf consolidate.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_ball_berry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fits the Ball-Berry model to an experimental curve — fit_ball_berry","text":"list two elements: fits: exdf object including measured values           fitted values stomatal conductance. fitted values           stored column whose name determined appending           '_fits' end gsw_column_name; typically,           'gsw_fits'. Also includes residuals           gsw_residuals column values Ball-Berry slope           intercept. parameters: exdf object including fitting           parameters R-squared values. Ball-Berry intercept stored           bb_intercept column Ball-Berry slope stored           bb_slope column. standard errors stored           bb_intercept_err bb_slope_err columns. R-squared           value p-value fit stored r_squared           p_value columns. statistical descriptors fit           calculated residual_stats also included.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_ball_berry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fits the Ball-Berry model to an experimental curve — fit_ball_berry","text":"","code":"# Read an example Licor file included in the PhotoGEA package, calculate # additional gas properties, calculate the Ball-Berry index, define a new column # that uniquely identifies each curve, and then perform a fit to extract the # Ball-Berry parameters from each curve. licor_file <- read_gasex_file(   PhotoGEA_example_file_path('ball_berry_1.xlsx') )  licor_file <- calculate_total_pressure(licor_file)  licor_file <- calculate_gas_properties(licor_file)  licor_file[,'species_plot'] <-   paste(licor_file[,'species'], '-', licor_file[,'plot'])  licor_file <- calculate_ball_berry_index(licor_file)  # Fit just one curve from the data set (it is rare to do this) one_result <- fit_ball_berry(   licor_file[licor_file[, 'species_plot'] == 'soybean - 1a', , TRUE] )  # Fit all curves in the data set (it is more common to do this) bb_results <- consolidate(by(   licor_file,   licor_file[, 'species_plot'],   fit_ball_berry ))  # View the fitting parameters for each species / plot col_to_keep <- c('species', 'plot', 'species_plot', 'bb_intercept', 'bb_slope', 'r_squared') bb_results$parameters[ , col_to_keep] #>   species plot species_plot bb_intercept bb_slope r_squared #> 1 soybean   1a soybean - 1a   0.10331765 3.995129 0.8469371 #> 2 soybean   1b soybean - 1b   0.10835188 6.492116 0.8394901 #> 3 soybean    5  soybean - 5   0.13085656 7.300232 0.9094708 #> 4 tobacco    2  tobacco - 2   0.09410874 3.613489 0.7186892  # View the fits for each species / plot plot_ball_berry_fit(bb_results, 'species_plot')"},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c3_aci.html","id":null,"dir":"Reference","previous_headings":"","what":"Fits a C3 assimilation model to an A-Ci curve — fit_c3_aci","title":"Fits a C3 assimilation model to an A-Ci curve — fit_c3_aci","text":"Fits Farquhar-von-Caemmerer-Berry model experimentally measured C3   -Ci curve. possible fit following parameters: alpha_g,   alpha_old, alpha_s, alpha_t, Gamma_star_at_25,   gmc_at_25, J_at_25, Kc_at_25, Ko_at_25,   RL_at_25, Tp_at_25, Vcmax_at_25. default, subset parameters actually fit:   alpha_old, J_at_25, RL_at_25, Tp_at_25,   Vcmax_at_25. can altered using fit_options argument,   described . Best-fit parameters found using maximum likelihood fitting,   optimizer (optim_fun) used minimize error function (defined   error_function_c3_aci). best-fit parameters found, confidence intervals calculated   using confidence_intervals_c3_aci, unreliable parameter   estimates removed. temperature-dependent parameters, best-fit values confidence intervals   returned 25 degrees C leaf temperature. See details.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c3_aci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fits a C3 assimilation model to an A-Ci curve — fit_c3_aci","text":"","code":"fit_c3_aci(     replicate_exdf,     Ca_atmospheric = NA,     a_column_name = 'A',     ca_column_name = 'Ca',     ci_column_name = 'Ci',     gamma_star_norm_column_name = 'Gamma_star_norm',     gmc_norm_column_name = 'gmc_norm',     j_norm_column_name = 'J_norm',     kc_norm_column_name = 'Kc_norm',     ko_norm_column_name = 'Ko_norm',     oxygen_column_name = 'oxygen',     rl_norm_column_name = 'RL_norm',     total_pressure_column_name = 'total_pressure',     tp_norm_column_name = 'Tp_norm',     vcmax_norm_column_name = 'Vcmax_norm',     sd_A = 'RMSE',     Wj_coef_C = 4.0,     Wj_coef_Gamma_star = 8.0,     optim_fun = optimizer_deoptim(200),     lower = list(),     upper = list(),     fit_options = list(),     cj_crossover_min = NA,     cj_crossover_max = NA,     relative_likelihood_threshold = 0.147,     hard_constraints = 0,     calculate_confidence_intervals = TRUE,     remove_unreliable_param = 2,     ...   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c3_aci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fits a C3 assimilation model to an A-Ci curve — fit_c3_aci","text":"replicate_exdf exdf object representing one CO2 response curve. Ca_atmospheric atmospheric CO2 concentration (units micromol mol^(-1));     used estimate_operating_point estimate     operating point. value NA disables feature. a_column_name name column replicate_exdf contains net     assimilation micromol m^(-2) s^(-1). ca_column_name name column replicate_exdf contains     ambient CO2 concentration micromol mol^(-1). ci_column_name name column replicate_exdf contains     intercellular CO2 concentration micromol mol^(-1). gamma_star_norm_column_name name column replicate_exdf contains normalized     Gamma_star values (units     normalized Gamma_star 25 degrees C). gmc_norm_column_name name column replicate_exdf contains normalized     mesophyll conductance values (units     normalized gmc 25 degrees C). j_norm_column_name name column replicate_exdf contains normalized     J values (units normalized J 25 degrees C). kc_norm_column_name name column replicate_exdf contains normalized     Kc values (units normalized Kc 25 degrees C). ko_norm_column_name name column replicate_exdf contains normalized     Ko values (units normalized Ko 25 degrees C). oxygen_column_name name column replicate_exdf contains     concentration O2 ambient air, expressed percentage (commonly     21% 2%); units must percent. rl_norm_column_name name column replicate_exdf contains normalized     RL values (units normalized RL 25 degrees C). total_pressure_column_name name column replicate_exdf contains total     pressure bar. tp_norm_column_name name column replicate_exdf contains normalized     Tp values (units normalized Tp 25 degrees C). vcmax_norm_column_name name column replicate_exdf contains normalized     Vcmax values (units     normalized Vcmax 25 degrees C). sd_A value standard deviation measured values, name     method determining deviation; currently, supported     option 'RMSE'. Wj_coef_C coefficient equation RuBP-regeneration-limited carboxylation,     whose value depends assumptions NADPH ATP requirements     RuBP regeneration; see calculate_c3_assimilation     information. Wj_coef_Gamma_star coefficient equation RuBP-regeneration-limited carboxylation,     whose value depends assumptions NADPH ATP requirements     RuBP regeneration; see calculate_c3_assimilation     information. optim_fun optimization function accepts following input arguments:     initial guess, error function, lower bounds, upper bounds.     return list following elements: par, convergence,     feval, convergence_msg. See optimizers     list available options. lower list named numeric elements representing lower bounds use     fitting. Values supplied override default values (see details     ). example, lower = list(Vcmax_at_25 = 10) sets lower     limit Vcmax_at_25 10 micromol / m^2 / s. upper list named numeric elements representing upper bounds use     fitting. Values supplied override default values (see details     ). example, upper = list(Vcmax_at_25 = 200) sets upper     limit Vcmax_at_25 200 micromol / m^2 / s. fit_options list named elements representing fit options use parameter.     Values supplied override default values (see details ).     element must 'fit', 'column', numeric value. value     'fit' means parameter fit; value     'column' means value parameter taken     column replicate_exdf name; numeric value means     parameter set value. example,     fit_options = list(alpha_g = 0, Vcmax_at_25 = 'fit', Tp_at_25 = 'column')     means alpha_g set 0, Vcmax_at_25 fit,     Tp_at_25 set values Tp_at_25 column     replicate_exdf. cj_crossover_min minimum value Cc (ppm) Aj allowed become     overall rate-limiting factor. cj_crossover_min set     NA, restriction applied. cj_crossover_max maximim value Cc (ppm) Wj allowed     smaller Wc. cj_crossover_max set NA,     restriction applied. relative_likelihood_threshold passed confidence_intervals_c3_aci     calculate_confidence_intervals TRUE. hard_constraints passed calculate_c3_assimilation; see function     details. calculate_confidence_intervals logical value indicating whether estimate confidence intervals     fitting parameters using confidence_intervals_c3_aci. remove_unreliable_param integer value indicating rules use identifying removing     unreliable parameter estimates. value 2 conservative     option. value 0 disables feature, typically     recommended. See details. ... Additional arguments passed calculate_c3_assimilation.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c3_aci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fits a C3 assimilation model to an A-Ci curve — fit_c3_aci","text":"function calls apply_gm   calculate_c3_assimilation calculate values net   assimilation. user-supplied optimization function used vary   values alpha_g, alpha_old, alpha_s, alpha_t,   Gamma_star_at_25, gmc_at_25, J_at_25, Kc_at_25,   Ko_at_25, RL_at_25, Tp_at_25, Vcmax_at_25   find ones best reproduce experimentally measured values net   assimilation. default, following options used fits: alpha_g: lower = 0, upper = 10, fit_option = 0 alpha_old: lower = 0, upper = 10, fit_option = 'fit' alpha_s: lower = 0, upper = 10, fit_option = 0 alpha_t: lower = 0, upper = 10, fit_option = 0 Gamma_star_at_25: lower = -20, upper = 200, fit_option = 'column' gmc_at_25: lower = -1, upper = 10,  fit_option = Inf J_at_25: lower = -50, upper = 1000, fit_option = 'fit' Kc_at_25: lower = -50, upper = 1000, fit_option = 'column' Ko_at_25: lower = -50, upper = 1000, fit_option = 'column' RL_at_25: lower = -10, upper = 100, fit_option = 'fit' Tp_at_25: lower = -10, upper = 100, fit_option = 'fit' Vcmax_at_25: lower = -50, upper = 1000, fit_option = 'fit' settings, \"new\" alpha parameters set 0; values   Gamma_star_at_25, Kc_at_25, Ko_at_25 taken   Gamma_star_at_25, Kc_at_25, Ko_at_25 columns   replicate_exdf; mesophyll conductance (gmc_at_25) set   inifinity (Cc = Ci); parameters fit   process (see fit_options ). bounds chosen liberally   avoid bias. initial guess parameters generated calling   initial_guess_c3_aci follows: cc_threshold_rd set 100 micromol / mol. alpha_g fit, alpha_g argument           initial_guess_c3_aci set 0.5; otherwise, argument           set value specified fit options. alpha_old fit, alpha_old argument           initial_guess_c3_aci set 0.5; otherwise, argument           set value specified fit options. alpha_s fit, alpha_s argument           initial_guess_c3_aci set 0.3 * (1 - alpha_g);           otherwise, argument set value specified fit           options. alpha_t fit, alpha_t argument           initial_guess_c3_aci set 0; otherwise, argument           set value specified fit options. Gamma_star_at_25 fit, Gamma_star_at_25           argument initial_guess_c3_aci set 40; otherwise,           argument set value specified fit options. gmc_at_25 fit, gmc_at_25 argument           initial_guess_c3_aci set 1; otherwise, argument           set value specified fit options. Kc_at_25 fit, Kc_at_25 argument           initial_guess_c3_aci set 400; otherwise,           argument set value specified fit options. Ko_at_25 fit, Ko_at_25 argument           initial_guess_c3_aci set 275; otherwise,           argument set value specified fit options. Note fixed values specified fit options override   values returned guessing function. fit made creating error function using   error_function_c3_aci minimizing value using   optim_fun, starting initial guess described .    optimizer_deoptim optimizer used default since   found reliably return great fits. However, slow optimizer. speed   important, consider reducing number generations using   optimizer_nmkb, aware optimizer likely   get stuck local minimum. photosynthesis model represented calculate_c3_assimilation   smooth sense small changes input parameters   necessarily cause changes outputs. related final step   calculations, overall assimilation rate taken   minimum three enzyme-limited rates. example, assimilation rate   never TPU-limited, modifying Tp_at_25 change model's   outputs. reason, derivative-based optimizers tend struggle   fitting C3 -Ci curves. Best results obtained using derivative-free   methods. Sometimes optimizer may choose set parameter values one   potential limiting carboxylation rates (Wc, Wj,   Wp) never smallest rate. case, corresponding   parameter estimates (Vcmax, J, alpha_old & Tp)   severely unreliable. indicated value 0   corresponding trust column(example, Vcmax_trust).   remove_unreliable_param 1 larger, parameter   estimates (corresponding rates) replaced NA   fitting results. also possible upper limit confidence interval   parameter infinity; indicates potentially unreliable parameter   estimate. indicated value 1 corresponding   trust column (example, Vcmax_trust).   remove_unreliable_param 2 larger, parameter   estimates (corresponding rates) replaced NA   fitting results. trust value fully reliable parameter estimates set 2   never replaced NA. best-fit parameters determined, function also   estimates operating value Cc atmospheric CO2   concentration atmospheric_ca using   estimate_operating_point, uses value estimate   modeled operating point via   calculate_c3_assimilation. also estimates   Akaike information criterion (AIC). function assumes replicate_exdf represents single   C3 -Ci curve. fit multiple curves , function often used   along .exdf consolidate.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c3_aci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fits a C3 assimilation model to an A-Ci curve — fit_c3_aci","text":"list three elements: fits: exdf object including original contents           replicate_exdf along several new columns: fitted values net assimilation stored                   column whose name determined appending '_fit'                   end a_column_name; typically,                   'A_fit'. Residuals (measured - fitted) stored column whose                   name determined appending '_residuals' end                   a_column_name; typically,                   'A_residuals'. Values fitting parameters 25 degrees C stored                   Gamma_star_at_25, gmc_at_25, J_at_25,                   Kc_at_25, Ko_at_25, RL_at_25,                   Tp_at_25, Vcmax_at_25 columns. outputs calculate_c3_assimilation                   stored columns usual names:                   alpha_g, alpha_old, alpha_s,                   alpha_t, Gamma_star_tl, gmc_tl,                   Kc_tl, Ko_tl, Tp_tl, Vcmax_tl,                   RL_tl, J_tl, Wc, Wj, Wp,                   Vc, Ac, Aj, Ap. fits_interpolated: exdf object including           calculated assimilation rates fine spacing Ci values           (step size 1 micromol mol^(-1)). parameters: exdf object including identifiers,           fitting parameters, convergence information -Ci curve: number points = Ac, = Aj,                   = Ap stored n_Ac_limiting,                   n_Aj_limiting, n_Ap_limiting columns. best-fit values stored alpha_g,                   alpha_old, alpha_s, alpha_t,                   Gamma_star_at_25, gmc_at_25, J_at_25,                   Kc_at_25, Ko_at_25, RL_at_25,                   Tp_at_25, Vcmax_at_25 columns.                   calculate_confidence_intervals TRUE, upper                   lower limits parameters also                   included. parameters depend leaf temperature, average                   leaf-temperature-dependent values stored                   Gamma_star_tl_avg, gmc_tl_avg, J_tl_avg,                   Kc_tl_avg, Ko_tl_avg, RL_tl_avg,                   Tp_tl_avg, Vcmax_tl_avg. Information operating point stored                   operating_Cc, operating_Ci, operating_An,                   operating_An_model. convergence column indicates whether fit                   successful (==0) optimizer encountered                   problem (!=0). feval column indicates many cost function                   evaluations required finding optimal parameter                   values. residual stats returned residual_stats                   included columns default names: dof,                   RSS, RMSE, etc. Akaike information criterion included AIC                   column.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c3_aci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fits a C3 assimilation model to an A-Ci curve — fit_c3_aci","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('c3_aci_1.xlsx') )  # Define a new column that uniquely identifies each curve licor_file[, 'species_plot'] <-   paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )  # Organize the data licor_file <- organize_response_curve_data(     licor_file,     'species_plot',     c(9, 10, 16),     'CO2_r_sp' )  # Calculate the total pressure in the Licor chamber licor_file <- calculate_total_pressure(licor_file)  # Calculate temperature-dependent values of C3 photosynthetic parameters licor_file <- calculate_temperature_response(licor_file, c3_temperature_param_bernacchi)  # For these examples, we will use a faster (but sometimes less reliable) # optimizer so they run faster optimizer <- optimizer_nmkb(1e-7)  # We can fit just one curve from the data set, although it is rare to do this one_result <- fit_c3_aci(   licor_file[licor_file[, 'species_plot'] == 'tobacco - 1', , TRUE],   Ca_atmospheric = 420,   optim_fun = optimizer )  # We can fit the same curve, but allow alpha_old and Gamma_star_at_25 to vary one_result_v2 <- fit_c3_aci(   licor_file[licor_file[, 'species_plot'] == 'tobacco - 1', , TRUE],   Ca_atmospheric = 420,   fit_options = list(Gamma_star_at_25 = 'fit', alpha_old = 'fit'),   optim_fun = optimizer )  # Fit all curves in the data set (it is more common to do this) aci_results <- consolidate(by(   licor_file,   licor_file[, 'species_plot'],   fit_c3_aci,   Ca_atmospheric = 420,   optim_fun = optimizer ))  # View the fitting parameters for each species / plot col_to_keep <- c(   'species', 'plot',                                       # identifiers   'n_Ac_limiting', 'n_Aj_limiting', 'n_Ap_limiting',       # number of points where                                                            #   each process is limiting   'Tp_at_25', 'J_at_25', 'RL_at_25', 'Vcmax_at_25',        # parameters scaled to 25 degrees C   'J_tl_avg', 'RL_tl_avg', 'Vcmax_tl_avg',                 # average temperature-dependent values   'operating_Ci', 'operating_An', 'operating_An_model',    # operating point info   'dof', 'RSS', 'MSE', 'RMSE', 'RSE',                      # residual stats   'convergence', 'convergence_msg', 'feval', 'optimum_val' # convergence info )  aci_results$parameters[ , col_to_keep, TRUE] #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>   species [UserDefCon] (NA) plot [UserDefCon] (NA) #> 1                   soybean                     5a #> 2                   tobacco                      1 #> 3                   tobacco                      2 #>   n_Ac_limiting [identify_c3_unreliable_points] () #> 1                                                8 #> 2                                                8 #> 3                                                9 #>   n_Aj_limiting [identify_c3_unreliable_points] () #> 1                                                5 #> 2                                                5 #> 3                                                4 #>   n_Ap_limiting [identify_c3_unreliable_points] () #> 1                                                0 #> 2                                                0 #> 3                                                0 #>   Tp_at_25 [fit_c3_aci] (micromol m^(-2) s^(-1)) #> 1                                             NA #> 2                                             NA #> 3                                             NA #>   J_at_25 [fit_c3_aci] (micromol m^(-2) s^(-1)) #> 1                                      190.8859 #> 2                                      231.7749 #> 3                                      206.4820 #>   RL_at_25 [fit_c3_aci] (micromol m^(-2) s^(-1)) #> 1                                      0.5770711 #> 2                                      0.8490820 #> 3                                      0.3815406 #>   Vcmax_at_25 [fit_c3_aci] (micromol m^(-2) s^(-1)) #> 1                                          144.5530 #> 2                                          157.7597 #> 3                                          124.2033 #>   J_tl_avg [fit_c3_aci] (micromol m^(-2) s^(-1)) #> 1                                       268.1496 #> 2                                       319.2523 #> 3                                       285.9199 #>   RL_tl_avg [fit_c3_aci] (micromol m^(-2) s^(-1)) #> 1                                       0.8149562 #> 2                                       1.1742260 #> 3                                       0.5306255 #>   Vcmax_tl_avg [fit_c3_aci] (micromol m^(-2) s^(-1)) #> 1                                           232.0402 #> 2                                           245.8747 #> 3                                           195.1092 #>   operating_Ci [estimate_operating_point] (micromol mol^(-1)) #> 1                                                    264.3297 #> 2                                                    294.7032 #> 3                                                    301.2673 #>   operating_An [estimate_operating_point] (micromol m^(-2) s^(-1)) #> 1                                                         31.00316 #> 2                                                         37.51608 #> 3                                                         31.57904 #>   operating_An_model [fit_c3_aci] (micromol m^(-2) s^(-1)) #> 1                                                 33.29502 #> 2                                                 40.46328 #> 3                                                 33.05702 #>   dof [residual_stats] (NA) RSS [residual_stats] ((micromol m^(-2) s^(-1))^2) #> 1                         8                                         149.01920 #> 2                         8                                          53.22941 #> 3                         8                                          49.78449 #>   MSE [residual_stats] ((micromol m^(-2) s^(-1))^2) #> 1                                         11.463015 #> 2                                          4.094570 #> 3                                          3.829576 #>   RMSE [residual_stats] (micromol m^(-2) s^(-1)) #> 1                                       3.385707 #> 2                                       2.023504 #> 3                                       1.956930 #>   RSE [residual_stats] (micromol m^(-2) s^(-1)) convergence [fit_c3_aci] () #> 1                                      4.315947                           0 #> 2                                      2.579472                           0 #> 3                                      2.494606                           0 #>   convergence_msg [fit_c3_aci] () feval [fit_c3_aci] () #> 1          Successful convergence                   243 #> 2          Successful convergence                   214 #> 3          Successful convergence                   218 #>   optimum_val [fit_c3_aci] () #> 1                    34.30052 #> 2                    27.60900 #> 3                    27.17410  # View the fits for each species / plot plot_c3_aci_fit(aci_results, 'species_plot', 'Ci')   # View the residuals for each species / plot lattice::xyplot(   A_residuals ~ Ci | species_plot,   data = aci_results$fits$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste0('Intercellular CO2 concentration (', aci_results$fits$units$Ci, ')'),   ylab = paste0('Assimilation rate residuals (', aci_results$fits$units$A_residuals, ')') )   # In some of the curves above, there are no points where carboxylation is TPU # limited. Estimates of Tp are therefore unreliable and are removed."},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c3_variable_j.html","id":null,"dir":"Reference","previous_headings":"","what":"Fits a C3 assimilation model to an A-Ci + CF curve — fit_c3_variable_j","title":"Fits a C3 assimilation model to an A-Ci + CF curve — fit_c3_variable_j","text":"Fits Farquhar-von-Caemmerer-Berry + Variable J model experimentally   measured C3 -Ci + CF curve. possible fit following parameters: alpha_g,   alpha_old, alpha_s, alpha_t, Gamma_star_at_25,   J_at_25, Kc_at_25, Ko_at_25 RL_at_25, tau,   Tp_at_25, Vcmax_at_25. default, subset parameters actually fit:   alpha_old, J_at_25, RL_at_25, tau,   Tp_at_25, Vcmax_at_25. can altered using   fit_options argument, described . Best-fit parameters found using maximum likelihood fitting,   optimizer (optim_fun) used minimize error function (defined   error_function_c3_variable_j). best-fit parameters found, confidence intervals calculated   using confidence_intervals_c3_variable_j, unreliable   parameter estimates removed. temperature-dependent parameters, best-fit values confidence intervals   returned 25 degrees C leaf temperature. See details.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c3_variable_j.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fits a C3 assimilation model to an A-Ci + CF curve — fit_c3_variable_j","text":"","code":"fit_c3_variable_j(     replicate_exdf,     Ca_atmospheric = NA,     a_column_name = 'A',     ca_column_name = 'Ca',     ci_column_name = 'Ci',     etr_column_name = 'ETR',     gamma_star_norm_column_name = 'Gamma_star_norm',     j_norm_column_name = 'J_norm',     kc_norm_column_name = 'Kc_norm',     ko_norm_column_name = 'Ko_norm',     oxygen_column_name = 'oxygen',     phips2_column_name = 'PhiPS2',     qin_column_name = 'Qin',     rl_norm_column_name = 'RL_norm',     total_pressure_column_name = 'total_pressure',     tp_norm_column_name = 'Tp_norm',     vcmax_norm_column_name = 'Vcmax_norm',     sd_A = 'RMSE',     Wj_coef_C = 4.0,     Wj_coef_Gamma_star = 8.0,     optim_fun = optimizer_deoptim(400),     lower = list(),     upper = list(),     fit_options = list(),     cj_crossover_min = NA,     cj_crossover_max = NA,     require_positive_gmc = 'positive_a',     gmc_max = Inf,     check_j = TRUE,     relative_likelihood_threshold = 0.147,     hard_constraints = 0,     calculate_confidence_intervals = TRUE,     remove_unreliable_param = 2,     ...   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c3_variable_j.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fits a C3 assimilation model to an A-Ci + CF curve — fit_c3_variable_j","text":"replicate_exdf exdf object representing one CO2 response curve. Ca_atmospheric atmospheric CO2 concentration (units micromol mol^(-1));     used estimate_operating_point estimate     operating point. value NA disables feature. a_column_name name column replicate_exdf contains net     assimilation micromol m^(-2) s^(-1). ca_column_name name column replicate_exdf contains     ambient CO2 concentration micromol mol^(-1). ci_column_name name column replicate_exdf contains     intercellular CO2 concentration micromol mol^(-1). etr_column_name name column rc_exdf contains electron     transport rate estimated measurement system     micromol m^(-2) s^(-1). gamma_star_norm_column_name name column replicate_exdf contains normalized     Gamma_star values (units     normalized Gamma_star 25 degrees C). j_norm_column_name name column replicate_exdf contains normalized     J values (units normalized J 25 degrees C). kc_norm_column_name name column replicate_exdf contains normalized     Kc values (units normalized Kc 25 degrees C). ko_norm_column_name name column replicate_exdf contains normalized     Ko values (units normalized Ko 25 degrees C). oxygen_column_name name column replicate_exdf contains     concentration O2 ambient air, expressed percentage (commonly     21% 2%); units must percent. phips2_column_name name column replicate_exdf contains values     operating efficiency photosystem II (dimensionless). qin_column_name name column replicate_exdf contains values     incident photosynthetically active flux density     micromol m^(-2) s^(-1). rl_norm_column_name name column replicate_exdf contains normalized     RL values (units normalized RL 25 degrees C). total_pressure_column_name name column replicate_exdf contains total     pressure bar. tp_norm_column_name name column replicate_exdf contains normalized     Tp values (units normalized Tp 25 degrees C). vcmax_norm_column_name name column replicate_exdf contains normalized     Vcmax values (units     normalized Vcmax 25 degrees C). sd_A value standard deviation measured values, name     method determining deviation; currently, supported     option 'RMSE'. Wj_coef_C coefficient equation RuBP-regeneration-limited carboxylation,     whose value depends assumptions NADPH ATP requirements     RuBP regeneration; see calculate_c3_assimilation     information. Wj_coef_Gamma_star coefficient equation RuBP-regeneration-limited carboxylation,     whose value depends assumptions NADPH ATP requirements     RuBP regeneration; see calculate_c3_assimilation     information. optim_fun optimization function accepts following input arguments:     initial guess, error function, lower bounds, upper bounds.     return list following elements: par, convergence,     feval, convergence_msg. default option     evolutionary optimizer runs slow tends find good fits     curves. optimizer_nmkb can also used; faster,     always find good fit. lower list named numeric elements representing lower bounds use     fitting. Values supplied override default values (see details     ). example, lower = list(Vcmax_at_25 = 10) sets lower     limit Vcmax_at_25 10 micromol / m^2 / s. upper list named numeric elements representing upper bounds use     fitting. Values supplied override default values (see details     ). example, upper = list(Vcmax_at_25 = 200) sets upper     limit Vcmax_at_25 200 micromol / m^2 / s. fit_options list named elements representing fit options use parameter.     Values supplied override default values (see details ).     element must 'fit', 'column', numeric value. value     'fit' means parameter fit; value     'column' means value parameter taken     column replicate_exdf name; numeric value means     parameter set value. example,     fit_options = list(alpha_g = 0, Vcmax_at_25 = 'fit', Tp_at_25 = 'column')     means alpha_g set 0, Vcmax_at_25 fit,     Tp_at_25 set values Tp_at_25 column     replicate_exdf. cj_crossover_min passed error_function_c3_variable_j. cj_crossover_max passed error_function_c3_variable_j. require_positive_gmc passed error_function_c3_variable_j. gmc_max passed error_function_c3_variable_j. check_j passed error_function_c3_variable_j. relative_likelihood_threshold passed confidence_intervals_c3_variable_j     calculate_confidence_intervals TRUE. hard_constraints passed calculate_c3_assimilation     calculate_c3_variable_j; see functions details. calculate_confidence_intervals logical value indicating whether estimate confidence intervals     fitting parameters using     confidence_intervals_c3_variable_j. remove_unreliable_param integer value indicating rules use identifying removing     unreliable parameter estimates. value 2 conservative     option. value 0 disables feature, typically     recommended. See details. ... Additional arguments passed calculate_c3_assimilation.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c3_variable_j.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fits a C3 assimilation model to an A-Ci + CF curve — fit_c3_variable_j","text":"function calls calculate_c3_variable_j   calculate_c3_assimilation calculate values net   assimilation. user-supplied optimization function used vary   values alpha_g, alpha_old, alpha_s, alpha_t,   Gamma_star_at_25, J_at_25, Kc_at_25, Ko_at_25,   RL_at_25, tau, Tp_at_25, Vcmax_at_25 find   ones best reproduce experimentally measured values net   assimilation. default, following options used fits: alpha_g: lower = 0, upper = 10, fit_option = 0 alpha_old: lower = 0, upper = 10, fit_option = 'fit' alpha_s: lower = 0, upper = 10, fit_option = 0 alpha_t: lower = 0, upper = 10, fit_option = 0 Gamma_star_at_25: lower = -20, upper = 200, fit_option = 'column' J_at_25: lower = -50, upper = 1000, fit_option = 'fit' Kc_at_25: lower = -50, upper = 1000, fit_option = 'column' Ko_at_25: lower = -50, upper = 1000, fit_option = 'column' RL_at_25: lower = -10, upper = 100, fit_option = 'fit' tau: lower = -10, upper = 10, fit_option = 'fit' Tp_at_25: lower = -10, upper = 100, fit_option = 'fit' Vcmax_at_25: lower = -50, upper = 1000, fit_option = 'fit' settings, \"new\" alpha parameters set 0; values   Gamma_star_at_25, Kc_at_25, Ko_at_25 taken   Gamma_star_at_25, Kc_at_25, Ko_at_25 columns   replicate_exdf; parameters fit process   (see fit_options ). bounds chosen liberally avoid   bias. initial guess parameters generated calling   initial_guess_c3_variable_j follows: cc_threshold_rd set 100 micromol / mol. alpha_g fit, alpha_g argument           initial_guess_c3_variable_j set 0.5; otherwise,           argument set value specified fit options. alpha_old fit, alpha_old argument           initial_guess_c3_variable_j set 0.5; otherwise,           argument set value specified fit options. alpha_s fit, alpha_s argument           initial_guess_c3_variable_j set           0.3 * (1 - alpha_g); otherwise, argument set           value specified fit options. alpha_t fit, alpha_t argument           initial_guess_c3_variable_j set 0; otherwise,           argument set value specified fit options. Gamma_star_at_25 fit, Gamma_star_at_25           argument initial_guess_c3_variable_j set 40;           otherwise, argument set value specified fit           options. Kc_at_25 fit, Kc_at_25 argument           initial_guess_c3_variable_j set 400; otherwise,           argument set value specified fit options. Ko_at_25 fit, Ko_at_25 argument           initial_guess_c3_variable_j set 275; otherwise,           argument set value specified fit options. Note fixed values specified fit options override   values returned guessing function. fit made creating error function using   error_function_c3_variable_j minimizing value using   optim_fun, starting initial guess described .   optimizer_deoptim optimizer used default since   found reliably return great fits. However, slow optimizer. speed   important, consider reducing number generations using   optimizer_nmkb, aware optimizer likely   get stuck local minimum. photosynthesis model used smooth sense small   changes input parameters necessarily cause changes   outputs. related final step calculations,   overall assimilation rate taken minimum three enzyme-limited   rates. example, assimilation rate never phosphate-limited,   modifying Tp_at_25 change model's outputs.   reason, derivative-based optimizers tend struggle fitting C3 -Ci   curves. Best results obtained using derivative-free methods. Sometimes optimizer may choose set parameter values one   potential limiting carboxylation rates (Wc, Wj,   Wp) never smallest rate. case, corresponding   parameter estimates (Vcmax, J, alpha & Tp)   severely unreliable. indicated value 0   corresponding trust column(example, Vcmax_trust).   remove_unreliable_param 1 larger, parameter   estimates (corresponding rates) replaced NA   fitting results. also possible upper limit confidence interval   parameter infinity; indicates potentially unreliable parameter   estimate. indicated value 1 corresponding   trust column (example, Vcmax_trust).   remove_unreliable_param 2 larger, parameter   estimates (corresponding rates) replaced NA   fitting results. trust value fully reliable parameter estimates set 2   never replaced NA. best-fit parameters determined, function also   estimates operating value `Cc atmospheric CO2   concentration atmospheric_ca using   estimate_operating_point, uses value estimate   modeled operating point via   calculate_c3_assimilation. also estimates   Akaike information criterion (AIC). function assumes replicate_exdf represents single   C3 -Ci curve. fit multiple curves , function often used   along .exdf consolidate.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c3_variable_j.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fits a C3 assimilation model to an A-Ci + CF curve — fit_c3_variable_j","text":"list two elements: fits: exdf object including original contents           replicate_exdf along several new columns: fitted values net assimilation stored                   column whose name determined appending '_fit'                   end a_column_name; typically,                   'A_fit'. Residuals (measured - fitted) stored column whose                   name determined appending '_residuals' end                   a_column_name; typically,                   'A_residuals'. Values fitting parameters 25 degrees C stored                   Gamma_star_at_25, J_at_25, Kc_at_25,                   Ko_at_25, RL_at_25, Tp_at_25,                   Vcmax_at_25 columns. outputs calculate_c3_variable_j                   calculate_c3_assimilation stored                   columns usual names: alpha_g,                   alpha_old, alpha_s, alpha_t,                   Gamma_star_tl, J_tl, Kc_tl, Ko_tl,                   RL_tl, tau, Tp_tl, Vcmax_tl,                   Ac, Aj, Ap, gmc, J_F,                   Cc. fits_interpolated: exdf object including           calculated assimilation rates fine spacing Ci values           (step size 1 micromol mol^(-1)). parameters: exdf object including identifiers,           fitting parameters, convergence information -Ci curve: number points = Ac, = Aj,                   = Ap stored n_Ac_limiting,                   n_Aj_limiting, n_Ap_limiting columns. best-fit values stored alpha_g,                   alpha_old, alpha_s, alpha_t,                   Gamma_star_at_25, J_at_25, Kc_at_25,                   Ko_at_25, RL_at_25, tau, Tp_at_25,                   Vcmax_at_25 columns.                   calculate_confidence_intervals TRUE, upper                   lower limits parameters also                   included. parameters depend leaf temperature, average                   leaf-temperature-dependent values stored                   Gamma_star_tl_avg, J_tl_avg, Kc_tl_avg,                   Ko_tl_avg, RL_tl_avg, Tp_tl_avg,                   Vcmax_tl_avg. Information operating point stored                   operating_Cc, operating_Ci, operating_An,                   operating_An_model. convergence column indicates whether fit                   successful (==0) optimizer encountered                   problem (!=0). feval column indicates many cost function                   evaluations required finding optimal parameter                   values. residual stats returned residual_stats                   included columns default names: dof,                   RSS, RMSE, etc. Akaike information criterion included AIC                   column.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c3_variable_j.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fits a C3 assimilation model to an A-Ci + CF curve — fit_c3_variable_j","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('c3_aci_1.xlsx') )  # Define a new column that uniquely identifies each curve licor_file[, 'species_plot'] <-   paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )  # Organize the data licor_file <- organize_response_curve_data(     licor_file,     'species_plot',     c(9, 10, 16),     'CO2_r_sp' )  # Calculate the total pressure in the Licor chamber licor_file <- calculate_total_pressure(licor_file)  # Calculate temperature-dependent values of C3 photosynthetic parameters licor_file <- calculate_temperature_response(licor_file, c3_temperature_param_bernacchi)  # For these examples, we will use a faster (but sometimes less reliable) # optimizer so they run faster optimizer <- optimizer_nmkb(1e-7)  # Fit just one curve from the data set (it is rare to do this). one_result <- fit_c3_variable_j(   licor_file[licor_file[, 'species_plot'] == 'tobacco - 1', , TRUE],   Ca_atmospheric = 420,   optim_fun = optimizer )  # Fit all curves in the data set (it is more common to do this). aci_results <- consolidate(by(   licor_file,   licor_file[, 'species_plot'],   fit_c3_variable_j,   Ca_atmospheric = 420,   optim_fun = optimizer ))  # View the fitting parameters for each species / plot col_to_keep <- c(   'species', 'plot',                                       # identifiers   'n_Ac_limiting', 'n_Aj_limiting', 'n_Ap_limiting',       # number of points where                                                            #   each process is limiting   'tau', 'Tp_at_25',                                       # parameters with temperature response   'J_at_25', 'RL_at_25', 'Vcmax_at_25',                    # parameters scaled to 25 degrees C   'J_tl_avg', 'RL_tl_avg', 'Vcmax_tl_avg',                 # average temperature-dependent values   'operating_Ci', 'operating_An', 'operating_An_model',    # operating point info   'dof', 'RSS', 'MSE', 'RMSE', 'RSE',                      # residual stats   'convergence', 'convergence_msg', 'feval', 'optimum_val' # convergence info )  aci_results$parameters[ , col_to_keep, TRUE] #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>   species [UserDefCon] (NA) plot [UserDefCon] (NA) #> 1                   soybean                     5a #> 2                   tobacco                      1 #> 3                   tobacco                      2 #>   n_Ac_limiting [identify_c3_unreliable_points] () #> 1                                                9 #> 2                                               10 #> 3                                                9 #>   n_Aj_limiting [identify_c3_unreliable_points] () #> 1                                                3 #> 2                                                3 #> 3                                                4 #>   n_Ap_limiting [identify_c3_unreliable_points] () #> 1                                                1 #> 2                                                0 #> 3                                                0 #>   tau [fit_c3_variable_j] (micromol m^(-2) s^(-1)) #> 1                                        0.4202992 #> 2                                        0.4202993 #> 3                                        0.4202992 #>   Tp_at_25 [fit_c3_variable_j] (micromol m^(-2) s^(-1)) #> 1                                                    NA #> 2                                                    NA #> 3                                                    NA #>   J_at_25 [fit_c3_variable_j] (micromol m^(-2) s^(-1)) #> 1                                                   NA #> 2                                                   NA #> 3                                                   NA #>   RL_at_25 [fit_c3_variable_j] (micromol m^(-2) s^(-1)) #> 1                                             0.4385477 #> 2                                             0.8163209 #> 3                                             0.7508444 #>   Vcmax_at_25 [fit_c3_variable_j] (micromol m^(-2) s^(-1)) #> 1                                                       NA #> 2                                                       NA #> 3                                                       NA #>   J_tl_avg [fit_c3_variable_j] (micromol m^(-2) s^(-1)) #> 1                                                    NA #> 2                                                    NA #> 3                                                    NA #>   RL_tl_avg [fit_c3_variable_j] (micromol m^(-2) s^(-1)) #> 1                                              0.6193295 #> 2                                              1.1289194 #> 3                                              1.0442328 #>   Vcmax_tl_avg [fit_c3_variable_j] (micromol m^(-2) s^(-1)) #> 1                                                        NA #> 2                                                        NA #> 3                                                        NA #>   operating_Ci [estimate_operating_point] (micromol mol^(-1)) #> 1                                                    264.3297 #> 2                                                    294.7032 #> 3                                                    301.2673 #>   operating_An [estimate_operating_point] (micromol m^(-2) s^(-1)) #> 1                                                         31.00316 #> 2                                                         37.51608 #> 3                                                         31.57904 #>   operating_An_model [fit_c3_variable_j] (micromol m^(-2) s^(-1)) #> 1                                                        30.36569 #> 2                                                        27.28351 #> 3                                                        22.67259 #>   dof [residual_stats] (NA) RSS [residual_stats] ((micromol m^(-2) s^(-1))^2) #> 1                         7                                          26.70037 #> 2                         7                                         418.25473 #> 3                         7                                         332.87510 #>   MSE [residual_stats] ((micromol m^(-2) s^(-1))^2) #> 1                                          2.053875 #> 2                                         32.173440 #> 3                                         25.605777 #>   RMSE [residual_stats] (micromol m^(-2) s^(-1)) #> 1                                       1.433135 #> 2                                       5.672164 #> 3                                       5.060215 #>   RSE [residual_stats] (micromol m^(-2) s^(-1)) #> 1                                      1.953033 #> 2                                      7.729856 #> 3                                      6.895911 #>   convergence [fit_c3_variable_j] () convergence_msg [fit_c3_variable_j] () #> 1                                  0                 Successful convergence #> 2                                  0                 Successful convergence #> 3                                  0                 Successful convergence #>   feval [fit_c3_variable_j] () optimum_val [fit_c3_variable_j] () #> 1                            7                              1e+10 #> 2                            7                              1e+10 #> 3                            7                              1e+10  # View the fits for each species / plot plot_c3_aci_fit(aci_results, 'species_plot', 'Ci')   # View the residuals for each species / plot lattice::xyplot(   A_residuals ~ Ci | species_plot,   data = aci_results$fits$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste0('Intercellular CO2 concentration (', aci_results$fits$units$Ci, ')'),   ylab = paste0('Assimilation rate residuals (', aci_results$fits$units$A_residuals, ')') )   # View the estimated mesophyll conductance values for each species / plot lattice::xyplot(   gmc ~ Ci | species_plot,   data = aci_results$fits$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste0('Intercellular CO2 concentration (', aci_results$fits$units$Ci, ')'),   ylab = paste0('Mesophyll conductance to CO2 (', aci_results$fits$units$gmc, ')'),   ylim = c(0, 2) )   # In some of the curves above, there are no points where carboxylation is TPU # limited. Estimates of Tp are therefore unreliable and are removed."},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c4_aci.html","id":null,"dir":"Reference","previous_headings":"","what":"Fits a C4 assimilation model to an A-Ci curve — fit_c4_aci","title":"Fits a C4 assimilation model to an A-Ci curve — fit_c4_aci","text":"Fits von Caemmerer model experimentally measured C4 -Ci curve. possible fit following parameters: alpha_psii, gbs,   gmc_at_25, J_at_25, RL_at_25, Rm_frac,   Vcmax_at_25, Vpmax_at_25, Vpr. default, subset parameters actually fit:   RL_at_25, Vcmax_at_25, Vpmax_at_25. can   altered using fit_options argument, described . Best-fit parameters found using maximum likelihood fitting,   optimizer (optim_fun) used minimize error function (defined   error_function_c4_aci). best-fit parameters found, confidence intervals calculated   using confidence_intervals_c4_aci, unreliable parameter   estimates removed. temperature-dependent parameters, best-fit values confidence intervals   returned 25 degrees C leaf temperature. See details.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c4_aci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fits a C4 assimilation model to an A-Ci curve — fit_c4_aci","text":"","code":"fit_c4_aci(     replicate_exdf,     Ca_atmospheric = NA,     ao_column_name = 'ao',     a_column_name = 'A',     ca_column_name = 'Ca',     ci_column_name = 'Ci',     gamma_star_column_name = 'gamma_star',     gmc_norm_column_name = 'gmc_norm',     j_norm_column_name = 'J_norm',     kc_column_name = 'Kc',     ko_column_name = 'Ko',     kp_column_name = 'Kp',     oxygen_column_name = 'oxygen',     rl_norm_column_name = 'RL_norm',     total_pressure_column_name = 'total_pressure',     vcmax_norm_column_name = 'Vcmax_norm',     vpmax_norm_column_name = 'Vpmax_norm',     sd_A = 'RMSE',     x_etr = 0.4,     optim_fun = optimizer_deoptim(200),     lower = list(),     upper = list(),     fit_options = list(),     relative_likelihood_threshold = 0.147,     hard_constraints = 0,     calculate_confidence_intervals = TRUE,     remove_unreliable_param = 2   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c4_aci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fits a C4 assimilation model to an A-Ci curve — fit_c4_aci","text":"replicate_exdf exdf object representing one CO2 response curve. Ca_atmospheric atmospheric CO2 concentration (units micromol mol^(-1));     used estimate_operating_point estimate     operating point. value NA disables feature. a_column_name name column replicate_exdf contains net     assimilation micromol m^(-2) s^(-1). ao_column_name name column exdf_obj contains dimensionless     ratio solubility diffusivity O2 CO2. ca_column_name name column replicate_exdf contains     ambient CO2 concentration micromol mol^(-1). ci_column_name name column replicate_exdf contains     intercellular CO2 concentration micromol mol^(-1). gamma_star_column_name name column exdf_obj contains dimensionless     gamma_star values. gmc_norm_column_name name column replicate_exdf contains normalized     mesophyll conductance values (units     normalized gmc 25 degrees C). j_norm_column_name name column exdf_obj contains normalized     J values (units     normalized J 25 degrees C). kc_column_name name column exdf_obj contains Michaelis-Menten     constant rubisco carboxylation microbar. ko_column_name name column exdf_obj contains Michaelis-Menten     constant rubisco oxygenation mbar. kp_column_name name column exdf_obj contains Michaelis-Menten     constant PEP carboxylase carboxylation microbar. oxygen_column_name name column exdf_obj contains concentration     O2 ambient air, expressed percentage (commonly 21% 2%);     units must percent. rl_norm_column_name name column exdf_obj contains normalized     RL values (units normalized RL 25 degrees C). total_pressure_column_name name column exdf_obj contains total pressure     bar. vcmax_norm_column_name name column exdf_obj contains normalized     Vcmax values (units     normalized Vcmax 25 degrees C). vpmax_norm_column_name name column exdf_obj contains normalized     Vpmax values (units     normalized Vpmax 25 degrees C). sd_A value standard deviation measured values, name     method determining deviation; currently, supported     option 'RMSE'. x_etr fraction whole-chain electron transport occurring mesophyll     (dimensionless). See Equation 29 S. von Caemmerer (2021). optim_fun optimization function accepts following input arguments:     initial guess, error function, lower bounds, upper bounds.     return list following elements: par, convergence,     feval, convergence_msg. See optimizers     list available options. lower list named numeric elements representing lower bounds use     fitting. Values supplied override default values (see details     ). example, lower = list(Vcmax_at_25 = 10) sets lower     limit Vcmax_at_25 10 micromol / m^2 / s. upper list named numeric elements representing upper bounds use     fitting. Values supplied override default values (see details     ). example, upper = list(Vcmax_at_25 = 200) sets upper     limit Vcmax_at_25 200 micromol / m^2 / s. fit_options list named elements representing fit options use parameter.     Values supplied override default values (see details ).     element must 'fit', 'column', numeric value. value     'fit' means parameter fit; value     'column' means value parameter taken     column exdf_obj name; numeric value means     parameter set value. example, fit_options =     list(RL_at_25 = 0, Vcmax_at_25 = 'fit', Vpr = 'column') means     RL_at_25 set 0, Vcmax_at_25 fit,     Vpr set values Vpr column     exdf_obj. relative_likelihood_threshold passed confidence_intervals_c4_aci     calculate_confidence_intervals TRUE. hard_constraints passed calculate_c4_assimilation; see function     details. calculate_confidence_intervals logical value indicating whether estimate confidence intervals     fitting parameters using confidence_intervals_c4_aci. remove_unreliable_param integer value indicating rules use identifying removing     unreliable parameter estimates. value 2 conservative     option. value 0 disables feature, typically     recommended. See details.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c4_aci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fits a C4 assimilation model to an A-Ci curve — fit_c4_aci","text":"function calls calculate_c4_assimilation calculate   values net assimilation. user-supplied optimization function used   vary values alpha_psii, gbs, gmc_at_25,   J_at_25, RL_at_25, Rm_frac, Vcmax_at_25,   Vpmax_at_25, Vpr find ones best reproduce   experimentally measured values net assimilation. default, following   options used fits: alpha_psii: lower = -1, upper = 10, fit_option = 0 gbs: lower = -1, upper = 10, fit_option = 0.003 gmc_at_25: lower = -1, upper = 10, fit_option = 1 J_at_25: lower = -50, upper = 1000, fit_option = 1000 RL_at_25: lower = -10, upper = 100, fit_option = 'fit' Rm_frac: lower = -10, upper = 10, fit_option = 0.5 Vcmax_at_25: lower = -50, upper = 1000, fit_option = 'fit' Vpmax_at_25: lower = -50, upper = 1000, fit_option = 'fit' Vpr: lower = -50, upper = 1000, fit_option = 1000 settings, J_at_25 Vpr set 1000 (net   assimilation essentially never limited light PEP carboxylase   regeneration), alpha_psii, gbs, gmc_at_25,   Rm_frac set default values used von Caemmerer (2000),   parameters fit process (see fit_options ).   bounds chosen liberally avoid bias. initial guess parameters generated calling   initial_guess_c4_aci follows: pcm_threshold_rlm set 40 microbar. alpha_psii fit, alpha_psii argument           initial_guess_c4_aci set 0.1; otherwise, argument           set value specified fit options. gbs fit, gbs argument           initial_guess_c4_aci set 0.003; otherwise, argument           set value specified fit options. gmc_at_25 fit, gmc_at_25 argument           initial_guess_c4_aci set 1; otherwise, argument           set value specified fit options. Rm_frac fit, Rm_frac argument           initial_guess_c4_aci set 0.5; otherwise, argument           set value specified fit options. Note fixed values specified fit options override   values returned guessing function. fit made creating error function using   error_function_c4_aci minimizing value using   optim_fun, starting initial guess described .    optimizer_deoptim optimizer used default since   found reliably return great fits. However, slow optimizer. speed   important, consider reducing number generations using   optimizer_nmkb, aware optimizer likely   get stuck local minimum. photosynthesis model represented calculate_c4_assimilation   smooth sense small changes input parameters   necessarily cause changes outputs. related calculation   PEP carboxylase activity Vp, taken minimum   Vpr Vpc. example, Vpr high Vp =   Vpc points along curve, modifying Vpr small amount   change model's outputs. Similar issues can occur calculating   minimum Ac Aj. ,   derivative-based optimizers tend struggle fitting C4 -Ci curves. Best   results obtained using derivative-free methods. Sometimes optimizer may choose set parameter values one   potential limiting rates Vpc Vpr never smallest rate.   case, corresponding parameter estimates (Vpmax   Vpr) severely unreliable. Likewise, may happen one   Ac Aj never smallest rate. case   corresponding parameter estimates (Vpmax, Vpr, Vcmax,   J) severely unreliable. indicated value   0 corresponding trust column(example,   Vcmax_trust). remove_unreliable_param 1 larger,   parameter estimates (corresponding rates) replaced   NA fitting results. also possible upper limit confidence interval   parameter infinity; indicates potentially unreliable parameter   estimate. indicated value 1 corresponding   trust column (example, Vcmax_trust).   remove_unreliable_param 2 larger, parameter   estimates (corresponding rates) replaced NA   fitting results. trust value fully reliable parameter estimates set 2   never replaced NA. best-fit parameters determined, function also   estimates operating value `PCm atmospheric CO2   concentration atmospheric_ca using   estimate_operating_point, uses value estimate   modeled operating point via   calculate_c4_assimilation. also estimates   Akaike information criterion (AIC). function assumes replicate_exdf represents single   C4 -Ci curve. fit multiple curves , function often used   along .exdf consolidate.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c4_aci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fits a C4 assimilation model to an A-Ci curve — fit_c4_aci","text":"list two elements: fits: exdf object including original contents           replicate_exdf along several new columns: fitted values net assimilation stored                   column whose name determined appending '_fit'                   end a_column_name; typically,                   'A_fit'. Residuals (measured - fitted) stored column whose                   name determined appending '_residuals' end                   a_column_name; typically,                   'A_residuals'. Values fitting parameters 25 degrees C stored                   gmc_at_25, J_at_25, RL_at_25,                   Vcmax_at_25, Vpmax_at_25, Vpr                   columns. outputs calculate_c4_assimilation                   stored columns usual names:                   alpha_psii, gbs, gmc_tl, Rm_Frac,                   Vcmax_tl, Vpmax_tl, RL_tl, RLm_tl,                   Vp, Apc, Apr, Ap, Ar,                   Ajm, Ajbs, Ac, Aj. fits_interpolated: exdf object including           calculated assimilation rates fine spacing Ci values           (step size 1 micromol mol^(-1)). parameters: exdf object including identifiers,           fitting parameters, convergence information -Ci curve: number points Vpc Vpr                   smallest potential carboxylation rate stored                   n_Vpc_smallest n_Vpr_smallest columns. best-fit values stored alpha_psii,                   gbs, gmc_at_25, J_at_25,                   RL_at_25, Rm_frac, Vcmax_at_25,                   Vpmax_at_25, Vpr columns.                   calculate_confidence_intervals TRUE, upper                   lower limits parameters also                   included. parameters depend leaf temperature, average                   leaf-temperature-dependent values stored                   X_tl_avg columns: gmc_tl_avg, J_tl_avg,                   Jmax_tl_avg, RL_tl_avg, Vcmax_tl_avg,                   Vpmax_tl_avg. average leaf temperature also stored                   Tleaf_avg column. Information operating point stored                   operating_PCm, operating_Ci,                   operating_An, operating_An_model. convergence column indicates whether fit                   successful (==0) optimizer encountered                   problem (!=0). feval column indicates many cost function                   evaluations required finding optimal parameter                   values. residual stats returned residual_stats                   included columns default names: dof,                   RSS, RMSE, etc. Akaike information criterion included AIC                   column.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c4_aci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fits a C4 assimilation model to an A-Ci curve — fit_c4_aci","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('c4_aci_1.xlsx') )  # Define a new column that uniquely identifies each curve licor_file[, 'species_plot'] <-   paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )  # Organize the data licor_file <- organize_response_curve_data(     licor_file,     'species_plot',     c(9, 10, 16),     'CO2_r_sp' )  # Calculate temperature-dependent values of C4 photosynthetic parameters licor_file <- calculate_temperature_response(licor_file, c4_temperature_param_vc)  # Calculate the total pressure in the Licor chamber licor_file <- calculate_total_pressure(licor_file)  # For these examples, we will use a faster (but sometimes less reliable) # optimizer so they run faster optimizer <- optimizer_nmkb(1e-7)  # Fit just one curve from the data set (it is rare to do this). one_result <- fit_c4_aci(   licor_file[licor_file[, 'species_plot'] == 'maize - 5', , TRUE],   Ca_atmospheric = 420,   optim_fun = optimizer )  # Fit all curves in the data set (it is more common to do this) aci_results <- consolidate(by(   licor_file,   licor_file[, 'species_plot'],   fit_c4_aci,   Ca_atmospheric = 420,   optim_fun = optimizer ))  # View the fitting parameters for each species / plot col_to_keep <- c(   'species', 'plot',                                       # identifiers   'RL_at_25', 'Vcmax_at_25', 'Vpmax_at_25', 'Vpr',         # parameters scaled to 25 degrees C   'RL_tl_avg', 'Vcmax_tl_avg', 'Vpmax_tl_avg',             # average temperature-dependent values   'operating_Ci', 'operating_An', 'operating_An_model',    # operating point info   'dof', 'RSS', 'MSE', 'RMSE', 'RSE',                      # residual stats   'convergence', 'convergence_msg', 'feval', 'optimum_val' # convergence info )  aci_results$parameters[ , col_to_keep, TRUE] #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>   species [UserDefCon] (NA) plot [UserDefCon] (NA) #> 1                     maize                      5 #> 2                   sorghum                      2 #> 3                   sorghum                      3 #>   RL_at_25 [fit_c4_aci] (micromol m^(-2) s^(-1)) #> 1                                     -2.9755380 #> 2                                      0.7310165 #> 3                                     -3.8073959 #>   Vcmax_at_25 [fit_c4_aci] (micromol m^(-2) s^(-1)) #> 1                                          33.90724 #> 2                                          42.62049 #> 3                                          35.99257 #>   Vpmax_at_25 [fit_c4_aci] (micromol m^(-2) s^(-1)) #> 1                                          158.2041 #> 2                                          149.4444 #> 3                                          124.2466 #>   Vpr [fit_c4_aci] (micromol m^(-2) s^(-1)) #> 1                                        NA #> 2                                        NA #> 3                                        NA #>   RL_tl_avg [fit_c4_aci] (micromol m^(-2) s^(-1)) #> 1                                       -4.754928 #> 2                                        1.133062 #> 3                                       -6.101133 #>   Vcmax_tl_avg [fit_c4_aci] (micromol m^(-2) s^(-1)) #> 1                                           58.81075 #> 2                                           71.31785 #> 3                                           62.63542 #>   Vpmax_tl_avg [fit_c4_aci] (micromol m^(-2) s^(-1)) #> 1                                           225.3214 #> 2                                           208.0087 #> 3                                           177.3176 #>   operating_Ci [estimate_operating_point] (micromol mol^(-1)) #> 1                                                    183.4839 #> 2                                                    166.2077 #> 3                                                    158.8843 #>   operating_An [estimate_operating_point] (micromol m^(-2) s^(-1)) #> 1                                                         52.35755 #> 2                                                         51.85285 #> 3                                                         51.32954 #>   operating_An_model [fit_c4_aci] (micromol m^(-2) s^(-1)) #> 1                                                 56.49683 #> 2                                                 58.59107 #> 3                                                 56.40279 #>   dof [residual_stats] (NA) RSS [residual_stats] ((micromol m^(-2) s^(-1))^2) #> 1                        10                                         217.81625 #> 2                        10                                         448.94801 #> 3                        10                                          48.82484 #>   MSE [residual_stats] ((micromol m^(-2) s^(-1))^2) #> 1                                         16.755096 #> 2                                         34.534462 #> 3                                          3.755757 #>   RMSE [residual_stats] (micromol m^(-2) s^(-1)) #> 1                                       4.093299 #> 2                                       5.876603 #> 3                                       1.937978 #>   RSE [residual_stats] (micromol m^(-2) s^(-1)) convergence [fit_c4_aci] () #> 1                                      4.667079                           0 #> 2                                      6.700358                           0 #> 3                                      2.209634                           0 #>   convergence_msg [fit_c4_aci] () feval [fit_c4_aci] () #> 1          Successful convergence                   160 #> 2          Successful convergence                   169 #> 3          Successful convergence                   135 #>   optimum_val [fit_c4_aci] () #> 1                    36.76777 #> 2                    41.46893 #> 3                    27.04758  # View the fits for each species / plot plot_c4_aci_fit(aci_results, 'species_plot', 'Ci', ylim = c(0, 100))   # View the residuals for each species / plot lattice::xyplot(   A_residuals ~ Ci | species_plot,   data = aci_results$fits$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', aci_results$fits$units$Ci, ']'),   ylab = paste('Assimilation rate residuals [', aci_results$fits$units$A_residuals, ']') )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c4_aci_hyperbola.html","id":null,"dir":"Reference","previous_headings":"","what":"Fits a hyperbolic C4 assimilation model to an experimental curve — fit_c4_aci_hyperbola","title":"Fits a hyperbolic C4 assimilation model to an experimental curve — fit_c4_aci_hyperbola","text":"Fits empirical hyperbola model experimentally measured C4 -Ci curve. possible fit following parameters: c4_curvature,   c4_slope, rL, Vmax. default, parameters fit. Best-fit parameters found using maximum likelihood fitting,   optimizer (optim_fun) used minimize error function (defined   error_function_c4_aci_hyperbola). best-fit parameters found, confidence intervals calculated   using confidence_intervals_c4_aci_hyperbola. See details.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c4_aci_hyperbola.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fits a hyperbolic C4 assimilation model to an experimental curve — fit_c4_aci_hyperbola","text":"","code":"fit_c4_aci_hyperbola(     replicate_exdf,     a_column_name = 'A',     ci_column_name = 'Ci',     sd_A = 'RMSE',     optim_fun = optimizer_nmkb(1e-7),     lower = list(),     upper = list(),     fit_options = list(),     relative_likelihood_threshold = 0.147,     hard_constraints = 0,     calculate_confidence_intervals = TRUE   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c4_aci_hyperbola.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fits a hyperbolic C4 assimilation model to an experimental curve — fit_c4_aci_hyperbola","text":"replicate_exdf exdf object representing one CO2 response curve. a_column_name name column replicate_exdf contains net     assimilation micromol m^(-2) s^(-1). ci_column_name name column replicate_exdf contains     intercellular CO2 concentration micromol mol^(-1). sd_A value standard deviation measured values, name     method determining deviation; currently, supported     option 'RMSE'. optim_fun optimization function accepts following input arguments:     initial guess, error function, lower bounds, upper bounds.     return list following elements: par, convergence,     feval, convergence_msg. See optimizers     list available options. lower list named numeric elements representing lower bounds use     fitting. Values supplied override default values (see details     ). example, lower = list(Vmax = 10) sets lower limit     Vmax 10 micromol / m^2 / s. upper list named numeric elements representing upper bounds use     fitting. Values supplied override default values (see details     ). example, upper = list(Vmax = 200) sets upper limit     Vmax 200 micromol / m^2 / s. fit_options list named elements representing fit options use parameter.     Values supplied override default values (see details ).     element must 'fit', 'column', numeric value. value     'fit' means parameter fit; value     'column' means value parameter taken     column exdf_obj name; numeric value means     parameter set value. example,     fit_options = list(rL = 0, Vmax = 'fit', c4_curvature = 'column')     means rL set 0, Vmax fit,     c4_curvature set values c4_curvature     column replicate_exdf. relative_likelihood_threshold passed confidence_intervals_c4_aci_hyperbola     calculate_confidence_intervals TRUE. hard_constraints passed calculate_c4_assimilation_hyperbola; see     function details. calculate_confidence_intervals logical value indicating whether estimate confidence intervals     fitting parameters using     confidence_intervals_c4_aci_hyperbola.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c4_aci_hyperbola.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fits a hyperbolic C4 assimilation model to an experimental curve — fit_c4_aci_hyperbola","text":"function calls calculate_c4_assimilation_hyperbola   calculate values net assimilation. user-supplied optimization function   used vary values c4_curvature, c4_slope, rL,   Vmax find ones best reproduce experimentally measured   values net assimilation. default, following options used   fits: c4_curvature: lower = -10, upper = 10, fit_option = 'fit' c4_slope: lower = -50, upper = 1000, fit_option = 'fit' rL: lower = -10, upper = 100, fit_option = 'fit' Vmax: lower = -50, upper = 1000, fit_option = 'fit' settings, parameters fit process (see   fit_options ). bounds chosen liberally avoid bias. initial guess parameters generated calling   initial_guess_c4_aci_hyperbola. Note fixed values   specified fit options override values returned guessing   function. fit made creating error function using   error_function_c4_aci_hyperbola minimizing value using   optim_fun, starting initial guess described .    optimizer_nmkb optimizer used default since   found reliably return great fits. However, fast optimizer can   get stuck local minima. seems returning bad fits, consider   using optimizer_deoptim optimizer instead, aware   fits take time complete. Unlike model represented calculate_c4_assimilation,   model calculate_c4_assimilation_hyperbola smooth   sense small changes input parameters cause small changes   outputs. , fairly easy model fit. function assumes replicate_exdf represents single   C4 -Ci curve. fit multiple curves , function often used   along .exdf consolidate.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c4_aci_hyperbola.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fits a hyperbolic C4 assimilation model to an experimental curve — fit_c4_aci_hyperbola","text":"list two elements: fits: exdf object including original contents           replicate_exdf along several new columns: fitted values net assimilation stored                   column whose name determined appending '_fit'                   end a_column_name; typically,                   'A_fit'. Residuals (measured - fitted) stored column whose                   name determined appending '_residuals' end                   a_column_name; typically,                   'A_residuals'. Values fitting parameters stored                   c4_curvature, c4_slope, rL,                   Vmax columns. outputs                   calculate_c4_assimilation_hyperbola                   stored columns usual names: Ag,                   Ainitial, Amax, , c4_curvature,                   c4_slope, rL, Vinitial, Vmax,                   c4_assimilation_hyperbola_msg. fits_interpolated: exdf object including           calculated assimilation rates fine spacing Ci values           (step size 1 micromol mol^(-1)). parameters: exdf object including identifiers,           fitting parameters, convergence information -Ci curve: best-fit values stored c4_curvature,                   c4_slope, rL, Vmax.                   calculate_confidence_intervals TRUE, upper                   lower limits parameters also                   included. convergence column indicates whether fit                   successful (==0) optimizer encountered                   problem (!=0). feval column indicates many cost function                   evaluations required finding optimal parameter                   values. residual stats returned residual_stats                   included columns default names: dof,                   RSS, RMSE, etc. Akaike information criterion included AIC                   column.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_c4_aci_hyperbola.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fits a hyperbolic C4 assimilation model to an experimental curve — fit_c4_aci_hyperbola","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('c4_aci_1.xlsx') )  # Define a new column that uniquely identifies each curve licor_file[, 'species_plot'] <-   paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )  # Organize the data licor_file <- organize_response_curve_data(     licor_file,     'species_plot',     c(9, 10, 16),     'CO2_r_sp' )  # Fit just one curve from the data set (it is rare to do this). one_result <- fit_c4_aci_hyperbola(   licor_file[licor_file[, 'species_plot'] == 'maize - 5', , TRUE] )  # Fit all curves in the data set (it is more common to do this) aci_results <- consolidate(by(   licor_file,   licor_file[, 'species_plot'],   fit_c4_aci_hyperbola ))  # View the fitting parameters for each species / plot col_to_keep <- c(   'species', 'plot',                                       # identifiers   'c4_curvature', 'c4_slope', 'rL', 'Vmax',                # best estimates for parameter values   'dof', 'RSS', 'MSE', 'RMSE', 'RSE',                      # residual stats   'convergence', 'convergence_msg', 'feval', 'optimum_val' # convergence info )  aci_results$parameters[ , col_to_keep, TRUE] #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>   species [UserDefCon] (NA) plot [UserDefCon] (NA) #> 1                     maize                      5 #> 2                   sorghum                      2 #> 3                   sorghum                      3 #>   c4_curvature [fit_c4_aci_hyperbola] (dimensionless) #> 1                                           0.6976615 #> 2                                           0.5614384 #> 3                                           0.5236451 #>   c4_slope [fit_c4_aci_hyperbola] (mol m^(-2) s^(-1)) #> 1                                           1.0100960 #> 2                                           0.9970135 #> 3                                           0.9282023 #>   rL [fit_c4_aci_hyperbola] (micromol m^(-2) s^(-1)) #> 1                                          1.3225714 #> 2                                          2.7695450 #> 3                                          0.7192808 #>   Vmax [fit_c4_aci_hyperbola] (micromol m^(-2) s^(-1)) #> 1                                             65.12738 #> 2                                             72.43272 #> 3                                             71.18932 #>   dof [residual_stats] (NA) RSS [residual_stats] ((micromol m^(-2) s^(-1))^2) #> 1                         9                                         104.63148 #> 2                         9                                         220.78920 #> 3                         9                                          27.39311 #>   MSE [residual_stats] ((micromol m^(-2) s^(-1))^2) #> 1                                          8.048575 #> 2                                         16.983784 #> 3                                          2.107162 #>   RMSE [residual_stats] (micromol m^(-2) s^(-1)) #> 1                                       2.837001 #> 2                                       4.121139 #> 3                                       1.451607 #>   RSE [residual_stats] (micromol m^(-2) s^(-1)) #> 1                                      3.409651 #> 2                                      4.952992 #> 3                                      1.744614 #>   convergence [fit_c4_aci_hyperbola] () #> 1                                     0 #> 2                                     0 #> 3                                     0 #>   convergence_msg [fit_c4_aci_hyperbola] () feval [fit_c4_aci_hyperbola] () #> 1                    Successful convergence                             318 #> 2                    Successful convergence                             263 #> 3                    Successful convergence                             359 #>   optimum_val [fit_c4_aci_hyperbola] () #> 1                              32.00192 #> 2                              36.85588 #> 3                              23.29093  # View the fits for each species / plot plot_c4_aci_hyperbola_fit(aci_results, 'species_plot', ylim = c(0, 100))   # View the residuals for each species / plot lattice::xyplot(   A_residuals ~ Ci | species_plot,   data = aci_results$fits$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste('Intercellular CO2 concentration [', aci_results$fits$units$Ci, ']'),   ylab = paste('Assimilation rate residuals [', aci_results$fits$units$A_residuals, ']') )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_laisk.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate RL and Ci_star using the Laisk method — fit_laisk","title":"Calculate RL and Ci_star using the Laisk method — fit_laisk","text":"Uses Laisk method estimate Ci_star RL. function   can accomodate alternative colum names variables taken log files   case change point future. function also checks   units required column produce error units   incorrect.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_laisk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate RL and Ci_star using the Laisk method — fit_laisk","text":"","code":"fit_laisk(     replicate_exdf,     ci_lower = 40,  # ppm     ci_upper = 120, # ppm     a_column_name = 'A',     ci_column_name = 'Ci',     ppfd_column_name = 'PPFD'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_laisk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate RL and Ci_star using the Laisk method — fit_laisk","text":"replicate_exdf exdf object containing multiple -Ci curves measured different     levels incident photosynthetically active photon flux density (PPFD). ci_lower Lower end Ci range used linear fits vs.     Ci. ci_upper Upper end Ci range used linear fits vs.     Ci. a_column_name name column replicate_exdf contains net CO2     assimilation rate micromol m^(-2) s^(-1). ci_column_name name column replicate_exdf contains     intercellular CO2 concentration Ci micromol mol^(-1). ppfd_column_name name column replicate_exdf can used split     individual response curves. Typically individial curves     measured different values incident light, log entries     'Qin' exactly . advised create new     column called 'PPFD' rounded values. example,     licor_data[, 'PPFD'] <- round(licor_data[, 'Qin']).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_laisk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate RL and Ci_star using the Laisk method — fit_laisk","text":"Laisk method way estimate RL Ci_star C3   plant. Definitions quantities description theory   underpinning method given . C3 plant, net CO2 assimilation rate given = Vc - Rp - RL, Vc rate RuBP carboxylation, Rp rate   carbon loss due photorespiration, RL rate carbon loss   due non-photorespiratory respiration (also known rate day   respiration, rate mitochondrial respiration, rate respiration   light). RuBP carboxylation photorespiration occur due   Rubisco activity, rates actually proportional : Rp = Vc * Gamma_star / Cc, Cc CO2 concentration chloroplast (Rubisco   located) Gamma_star discussed . Using expression,   net CO2 assimilation rate can written = Vc * (1 - Gamma_star / Cc) - RL. Cc equal Gamma_star, net assimilation rate   equal -RL. reason, Gamma_star usually referred   CO2 compensation point absence mitochondrial respiration. general, Cc related intercellular CO2 concentration   Ci according Ci = Cc + / gmc, gmc mesophyll conductance CO2 diffusion. Cc   equal Gamma_star, therefore   Ci = Gamma_star - RL / gmc. special value Ci referred   Ci_star, can understood value Ci   Cc = Gamma_star = -RL. Note values   Gamma_star Ci_star depend Rubisco properties, mesophyll   conductance, ambient O2 concentration, incident light   intensity. observations suggest method estimating RL leaf:   Measure vs. Ci curves several light intensities, find   value Ci curves intersect .   Ci_star, corresponding value equal   -RL. practice, unlikely measured curves exactly   intersect single point. method dealing issue   developed Walker & Ort (2015) described detail Busch et al.   (2024). Briefly, linear fit first made -Ci curve, enabling   calculation intercept-slope curve. another linear fit made   intercept-slope curve. intercept fit equal -RL   slope equal -Ci_star. Note: possible RL depends incident light intensity,   issue complicates application Laisk method. See   references details. References:  Yin, X., Sun, Z., Struik, P. C. & Gu, J. \"Evaluating new method           estimate rate leaf respiration light analysis           combined gas exchange chlorophyll fluorescence measurements.\"           Journal Experimental Botany 62, 3489–3499 (2011)           [doi:10.1093/jxb/err038 ]. Walker, B. J. & Ort, D. R. \"Improved method measuring           apparent CO2 photocompensation point resolves impact multiple           internal conductances CO2 net gas exchange.\" Plant, Cell &           Environment 38, 2462–2474 (2015)           [doi:10.1111/pce.12562 ]. Busch, F. . et al. \"guide photosynthetic gas exchang           measurements: Fundamental principles, best practice potential           pitfalls.\" Plant, Cell & Environment 47, 3344–3364 (2024)           [doi:10.1111/pce.14815 ].","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_laisk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate RL and Ci_star using the Laisk method — fit_laisk","text":"function returns list following named elements: first_fit_parameters: exdf object slope (          standard error), intercept (standard error), R-squared           value, p-value linear fit vs. Ci. included           laisk_slope, laisk_slope_err,           laisk_intercept, laisk_intercept_err, r_squared,           p_value columns. first_fits: exdf object based           replicate_exdf also includes fitted values           new column whose name a_column_name followed           _fit (example, A_fit). fits extrapolated           Ci = 0 can visually checked common           intersection point. second_fit_parameters: exdf object RL           (standard error), Ci_Star (standard error)           estimated linear fit laisk_intercept vs.           laisk_slope. Also includes R-squared p-value           fit. second_fit_parameters: exdf object based           first_fit_parameters also includes fitted values           laisk_intercept laisk_intercept_fit column. noted , estimated values RL Ci_star   included second_fit_parameters element returned list.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_laisk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate RL and Ci_star using the Laisk method — fit_laisk","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('c3_aci_1.xlsx') )  # Define a new column that uniquely identifies each curve licor_file[, 'species_plot'] <-   paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )  # Organize the data licor_file <- organize_response_curve_data(     licor_file,     'species_plot',     c(9, 10, 16),     'CO2_r_sp' )  # Apply the Laisk method. Note: this is a bad example because these curves were # measured at the same light intensity, but from different species. Because of # this, the results are not meaningful. laisk_results <- fit_laisk(   licor_file, 20, 150,   ppfd_column_name = 'species_plot' )  # Get estimated values print(laisk_results$second_fit_parameters[, 'RL']) #> [1] -1.617453 print(laisk_results$second_fit_parameters[, 'Ci_star']) #> [1] 69.37657  # Plot the linear fits of A vs. Ci plot_laisk_fit(laisk_results, 'instrument', 'first', ppfd_column_name = 'species_plot') #> Error in plot_laisk_fit(laisk_results, \"instrument\", \"first\", ppfd_column_name = \"species_plot\"): object 'laisk_results' not found  # Plot the linear fits of Laisk intercept vs. Laisk slope plot_laisk_fit(laisk_results, 'instrument', 'second', ppfd_column_name = 'species_plot') #> Error in plot_laisk_fit(laisk_results, \"instrument\", \"second\", ppfd_column_name = \"species_plot\"): object 'laisk_results' not found"},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_medlyn.html","id":null,"dir":"Reference","previous_headings":"","what":"Fits the Medlyn model to an experimental curve — fit_medlyn","title":"Fits the Medlyn model to an experimental curve — fit_medlyn","text":"Fits measured values stomatal conductance using Medlyn model.   function can accomodate alternative column names variables taken   gas exchange log files case change point future.   function also checks units required column produce   error units incorrect.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_medlyn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fits the Medlyn model to an experimental curve — fit_medlyn","text":"","code":"fit_medlyn(     replicate_exdf,     a_column_name = 'A',     csurface_column_name = 'Csurface',     gsw_column_name = 'gsw',     vpdleaf_column_name = 'VPDleaf'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_medlyn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fits the Medlyn model to an experimental curve — fit_medlyn","text":"replicate_exdf exdf object representing one Ball-Berry curve. a_column_name name column replicate_exdf contains net     assimilation micromol m^(-2) s^(-1). csurface_column_name name column replicate_exdf contains     CO2 concentration leaf surface micromol mol^(-1). gsw_column_name name column replicate_exdf contains stomatal     conductance water vapor mol m^(-2) s^(-1). vpdleaf_column_name name column replicate_exdf contains vapor     pressure deficit leaf surface kPa.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_medlyn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fits the Medlyn model to an experimental curve — fit_medlyn","text":"Medlyn model simple way describe response leaf's stomata   assimilation rate local environmental consitions. Specifically,   predicts stomatal conductance water vapor (gsw) using   following equation: gsw = g0 + 1.6 * (1 + g1 / sqrt(VPDleaf)) * / Csurface, VPDleaf vapor pressure deficit leaf surface,   net CO2 assimilation rate, Csurface CO2   concentration leaf surface, g0 stomatal conductance   zero, g1 parameter describing leaf's combined   response environmental parameters. Fits model typically plotted gsw Y-axis   / (Csurface * sqrt(VPDleaf)) X-axis. g1   typically close larger 1, model exhibits almost linear   response gsw / (Csurface * sqrt(VPDleaf)),   refer \"Medlyn index\" analogy Ball-Berry index (see   calculate_ball_berry_index). Although model certainly oversimplification, encode   important stomatal responses. example, humidity low, stomata   close, reducing stomatal conductance. Likewise, CO2 concentration   around leaf depleted, stomata open allow CO2 diffuse   leaf's interior, increasing somatal conductance. Medlyn model originally described Medlyn, B. E. et al. \"Reconciling   optimal empirical approaches modelling stomatal conductance.\"   Global Change Biology 17, 2134–2144 (2011)   [doi:10.1111/j.1365-2486.2010.02375.x ]. Medlyn parameters typically determined using type response   curve measured parameterizing Ball-Berry model. See   fit_ball_berry details. function uses nls perform fit, beginning   initial guess g0 = 0.005 g1 = 4. function assumes replicate_exdf represents single response   curve. fit multiple curves , function often used along   .exdf consolidate.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_medlyn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fits the Medlyn model to an experimental curve — fit_medlyn","text":"list two elements: fits: exdf object including measured values           fitted values stomatal conductance. fitted values           stored column whose name determined appending           '_fits' end gsw_column_name; typically,           'gsw_fits'. Also includes residuals           gsw_residuals column values Medlyn model parameters           medlyn_g0 medlyn_g1. parameters: exdf object including fitting           parameters R-squared value. Medlyn model parameters stored           medlyn_g0 medlyn_g1 columns, standard           errors stored medlyn_g0_err medlyn_g1_err           columns. statistical descriptors fit calculated           residual_stats also included.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_medlyn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fits the Medlyn model to an experimental curve — fit_medlyn","text":"","code":"# Read an example Licor file included in the PhotoGEA package, calculate # additional gas properties, calculate the Ball-Berry index, define a new column # that uniquely identifies each curve, and then perform a fit to extract the # Ball-Berry parameters from each curve. licor_file <- read_gasex_file(   PhotoGEA_example_file_path('ball_berry_1.xlsx') )  licor_file <- calculate_total_pressure(licor_file)  licor_file <- calculate_gas_properties(licor_file)  licor_file[,'species_plot'] <-   paste(licor_file[,'species'], '-', licor_file[,'plot'])  # Fit just one curve from the data set (it is rare to do this) one_result <- fit_medlyn(   licor_file[licor_file[, 'species_plot'] == 'soybean - 1a', , TRUE] )  # Fit all curves in the data set (it is more common to do this) medlyn_results <- consolidate(by(   licor_file,   licor_file[, 'species_plot'],   fit_medlyn ))  # View the fitting parameters for each species / plot col_to_keep <- c('species', 'plot', 'species_plot', 'medlyn_g0', 'medlyn_g1') medlyn_results$parameters[ , col_to_keep] #>   species plot species_plot  medlyn_g0 medlyn_g1 #> 1 soybean   1a soybean - 1a 0.10346656 0.9324673 #> 2 soybean   1b soybean - 1b 0.08805109 2.6410048 #> 3 soybean    5  soybean - 5 0.11431838 2.9748932 #> 4 tobacco    2  tobacco - 2 0.09017758 0.8902868  # View the fits for each species / plot lattice::xyplot(   gsw + gsw_fit ~ medlyn_index | species_plot,   data = medlyn_results$fits$main_data,   type = 'b',   pch = 16,   auto = TRUE,   xlab = paste('Medlyn index [', medlyn_results$fits$units$medlyn_index, ']'),   ylab = paste('Stomatal conductance to H2O [', medlyn_results$fits$units$gsw, ']') )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/get_oxygen_from_preamble.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract oxygen information from a Licor file — get_oxygen_from_preamble","title":"Extract oxygen information from a Licor file — get_oxygen_from_preamble","text":"Extracts oxygen information Licor file's preamble adds   main data new column easier access.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/get_oxygen_from_preamble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract oxygen information from a Licor file — get_oxygen_from_preamble","text":"","code":"get_oxygen_from_preamble(licor_exdf)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/get_oxygen_from_preamble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract oxygen information from a Licor file — get_oxygen_from_preamble","text":"licor_exdf exdf object representing data photosynthetic gas exchange     measurement system. exdf_obj$preamble field must defined     contain preamble contents; automatically case     licor_exdf created read_gasex_file.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/get_oxygen_from_preamble.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract oxygen information from a Licor file — get_oxygen_from_preamble","text":"Licor LI-6800 log files include oxygen concentration entry   preamble, helpful include information column   main data. get_oxygen_from_preamble function attempts move   oxygen concentration (percentage) preamble column.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/get_oxygen_from_preamble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract oxygen information from a Licor file — get_oxygen_from_preamble","text":"exdf object based licor_exdf includes oxygen   percentage new column called oxygen.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/get_oxygen_from_preamble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract oxygen information from a Licor file — get_oxygen_from_preamble","text":"","code":"# Example: Read data from a Licor log file and get the oxygen information from # the preamble  # Read the file licor_data <- read_gasex_file(   PhotoGEA_example_file_path('licor_for_gm_site11.xlsx'), )  # Here we can see the oxygen percentage in the preamble str(licor_data$preamble) #> 'data.frame':\t1 obs. of  67 variables: #>  $ File opened   : chr \"2023-08-04 07:54:01\" #>  $ Console s/n   : chr \"68C-571076\" #>  $ Console ver   : chr \"Bluestem v.2.1.08\" #>  $ Scripts ver   : chr \"2022.05  2.1.08, Aug 2022\" #>  $ Head s/n      : chr \"68H-581076\" #>  $ Head ver      : chr \"1.4.22\" #>  $ Head cal      : chr \"{\\\"oxygen\\\": \\\"21\\\", \\\"co2azero\\\": \\\"0.850833\\\", \\\"co2aspan1\\\": \\\"1.00272\\\", \\\"co2aspan2\\\": \\\"-0.03976\\\", \\\"co2\"| __truncated__ #>  $ CO2 rangematch: chr \"Wed Mar  8 15:59\" #>  $ H2O rangematch: chr \"Wed Mar  8 16:05\" #>  $ Chamber type  : chr \"6800-13\" #>  $ Chamber s/n   : chr \"CHM-10960\" #>  $ Chamber rev   : chr \"0\" #>  $ Chamber cal   : chr \"8.12\" #>  $ HeadLS type   : chr \"6800-03\" #>  $ HeadLS s/n    : chr \"181040\" #>  $ HeadLS f      : chr \"0.065 0.0828 0.1212 0.0686\" #>  $ HeadLS u0     : chr \"278 337 932 412\" #>  $ SysConst      : chr NA #>  $ AvgTime       : chr \"4\" #>  $ Oxygen        : chr \"21\" #>  $ ChambConst    : chr NA #>  $ Chamber       : chr \"6800-13\" #>  $ Aperture      : chr NA #>  $ blc_a         : chr \"0.43\" #>  $ blc_b         : chr \"0.26782699999999998\" #>  $ blc_c         : chr \"-1.164018E-4\" #>  $ blc_d         : chr \"2.2482019999999999E-3\" #>  $ blc_e         : chr \"-5.1094620000000004E-3\" #>  $ blc_minS      : chr \"6\" #>  $ blc_maxS      : chr \"36\" #>  $ blc_Po        : chr \"96.8\" #>  $ LTConst       : chr NA #>  $ deltaTw       : chr \"0\" #>  $ fT1           : chr \"1\" #>  $ fT2           : chr \"0\" #>  $ fTeb          : chr \"0\" #>  $ LQConst       : chr NA #>  $ Leaf          : chr \"standard\" #>  $ Ambient       : chr \"Sun+Sky\" #>  $ abs_ambient   : chr \"0.8\" #>  $ abs_redLED    : chr \"0.84\" #>  $ abs_greenLED  : chr \"0.7\" #>  $ abs_blueLED   : chr \"0.87\" #>  $ abs_whiteLED  : chr \"0.75\" #>  $ abs_redFlr    : chr \"0.84\" #>  $ abs_blueFlr   : chr \"0.87\" #>  $ k_ambient     : chr \"0.19109999999999999\" #>  $ k_redLED      : chr \"0.1512\" #>  $ k_greenLED    : chr \"0.161\" #>  $ k_blueLED     : chr \"0.22620000000000001\" #>  $ k_whiteLED    : chr \"0.1575\" #>  $ k_redFlr      : chr \"0.15959999999999999\" #>  $ k_blueFlr     : chr \"0.2175\" #>  $ QConst        : chr NA #>  $ fQ_Amb_in     : chr \"0\" #>  $ fQ_Amb_out    : chr \"0\" #>  $ fQ_HeadLS     : chr \"1\" #>  $ fQ_ConsoleLS  : chr \"0\" #>  $ fQ_Flr        : chr \"0\" #>  $ LeakConst     : chr NA #>  $ fan_a         : chr \"-6276\" #>  $ fan_b         : chr \"6.6\" #>  $ fan_c         : chr \"1.7090000000000001E-5\" #>  $ fan_d         : chr \"3.11\" #>  $ Fs_meas       : chr \"9.9798 88.7742 373.458 604.839 838.545 1049.16 1238.82 1421.25\" #>  $ Fs_true       : chr \"-0.0182238 101.978 404.227 600.718 801.26 1000.46 1201.87 1400.6\" #>  $ leak_wt       : chr \"0\"  # Include the oxygen info as a column in the file licor_data <- get_oxygen_from_preamble(licor_data)  licor_data[, c('replicate', 'oxygen'), TRUE] #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>    replicate [UserDefCon] (NA) oxygen [in] (percent) #> 1                            1                    21 #> 2                            1                    21 #> 3                            1                    21 #> 4                            1                    21 #> 5                            1                    21 #> 6                            1                    21 #> 7                            1                    21 #> 8                            1                    21 #> 9                            1                    21 #> 10                           1                    21 #> 11                           1                    21 #> 12                           1                    21"},{"path":"https://eloch216.github.io/PhotoGEA/reference/get_sample_valve_from_filename.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract TDL valve information from file name — get_sample_valve_from_filename","title":"Extract TDL valve information from file name — get_sample_valve_from_filename","text":"Determines TDL valve number photosynthetic gas exchange system log   file name.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/get_sample_valve_from_filename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract TDL valve information from file name — get_sample_valve_from_filename","text":"","code":"get_sample_valve_from_filename(     exdf_obj,     reference_table = NULL   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/get_sample_valve_from_filename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract TDL valve information from file name — get_sample_valve_from_filename","text":"exdf_obj exdf object representing data photosynthetic gas exchange     measurement system. exdf_obj$file_name field must defined     contain file name; automatically case     exdf_obj created read_gasex_file. reference_table optional list named elements, name element     Licor sample line valve number (character) value     element corresponding Licor reference line valve number.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/get_sample_valve_from_filename.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract TDL valve information from file name — get_sample_valve_from_filename","text":"making combined gas exchange isotope discrimination measurements   using portable photosynthetic gas exchange system (Licor LI-6800)   coupled tunable diode laser (TDL) absorption spectroscopy system,   TDL's gas handling system cycles several gas lines (sites)   opening closing valves. analyzing data, key step   identify TDL valve numbers correspond sample reference gas   lines Licor. UIUC, convention designating sample line valve numbers   Licor file names, \"siteNN\" \"site NN\" means   Licor's sample line valve NN TDL data file.   get_sample_valve_from_filename function extracts valve number   file name stores new column exdf_obj called   valve_number_s. Optionally, also possible specify reference line valve number   corresponding sample line valve number using   reference_table input argument. Reference line valve numbers   stored valve_number_r column.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/get_sample_valve_from_filename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract TDL valve information from file name — get_sample_valve_from_filename","text":"exdf object based exdf_obj includes Licor sample   line valve number new column called valve_number_s   (optionally) Licor reference line valve number new column called   valve_number_r.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/get_sample_valve_from_filename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract TDL valve information from file name — get_sample_valve_from_filename","text":"","code":"## In this example we load a gas exchange data file and determine the TDL valve ## numbers from its file name  # Read the gas exchange data licor_data <- read_gasex_file(   PhotoGEA_example_file_path('licor_for_gm_site11.xlsx'), )  # Get TDL valve information from Licor file name; for this TDL system, the # reference valve is 12 when the sample valve is 11 licor_data <- get_sample_valve_from_filename(licor_data, list('11' = 12))  # View the results licor_data[, c('obs', 'valve_number_s', 'valve_number_r')] #>    obs valve_number_s valve_number_r #> 1    1             11             12 #> 2    2             11             12 #> 3    3             11             12 #> 4    4             11             12 #> 5    5             11             12 #> 6    6             11             12 #> 7    7             11             12 #> 8    8             11             12 #> 9    9             11             12 #> 10  10             11             12 #> 11  11             11             12 #> 12  12             11             12"},{"path":"https://eloch216.github.io/PhotoGEA/reference/identifier_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Find columns that have a single value across all rows — identifier_columns","title":"Find columns that have a single value across all rows — identifier_columns","text":"Identifies columns single value across rows returns .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identifier_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find columns that have a single value across all rows — identifier_columns","text":"","code":"identifier_columns(x)    # S3 method for class 'data.frame' identifier_columns(x)    # S3 method for class 'exdf' identifier_columns(x)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/identifier_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find columns that have a single value across all rows — identifier_columns","text":"x table-like R object data frame exdf.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identifier_columns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find columns that have a single value across all rows — identifier_columns","text":"identifier_columns generic, methods defined data   frames exdf objects. identifier_columns gets names values columns   table-like object single unique value. object represents   set data one replicate, special columns taken   \"identifiers\" describe replicate. function often used inside   fitting functions passed .exdf FUN   input argument. example, see code fit_ball_berry   typing PhotoGEA::fit_ball_berry R terminal.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identifier_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find columns that have a single value across all rows — identifier_columns","text":"return value subset x, restricted include   columns whose values constant. one row returned.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/identifier_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find columns that have a single value across all rows — identifier_columns","text":"","code":"# Create a simple exdf object simple_exdf <- exdf(   data.frame(A = c(3, 2, 7, 9), species = c('a', 'a', 'a', 'a'), plot = c(1, 1, 1, 1)),   data.frame(A = 'm', species = '', plot = ''),   data.frame(A = 'Cat1', species = '', plot = '') )  # Find its identifier columns identifier_columns(simple_exdf) #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>   species [] () plot [] () #> 1             a          1  # Apply the data frame method to the exdf object's main data frame identifier_columns(simple_exdf$main_data) #>   species plot #> 1       a    1"},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_c3_limiting_processes.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify C3 Limiting Processes — identify_c3_limiting_processes","title":"Identify C3 Limiting Processes — identify_c3_limiting_processes","text":"Identify limiting processes C3 curve, typically result fit.   rate users call function directly used   internally fit_c3_aci fit_c3_variable_j.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_c3_limiting_processes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify C3 Limiting Processes — identify_c3_limiting_processes","text":"","code":"identify_c3_limiting_processes(     data_table,     a_column_name = 'A_fit',     ac_column_name = 'Ac',     aj_column_name = 'Aj',     ap_column_name = 'Ap',     tol = 1e-3 )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_c3_limiting_processes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify C3 Limiting Processes — identify_c3_limiting_processes","text":"data_table table-like R object data frame exdf. a_column_name name column data_table contains modeled net CO2     assimilation rate micromol m^(-2) s^(-1). ac_column_name name column data_table contains modeled     Rubisco-limited net CO2 assimilation rate micromol m^(-2) s^(-1). aj_column_name name column data_table contains modeled     RuBP-regeneration-limited net CO2 assimilation rate     micromol m^(-2) s^(-1). ap_column_name name column data_table contains modeled     TPU-limited net CO2 assimilation rate micromol m^(-2) s^(-1). tol relative tolerance factor used identify two rates equal.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_c3_limiting_processes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify C3 Limiting Processes — identify_c3_limiting_processes","text":"C3 leaf, given either Ac, Aj,   Ap. See documentation calculate_c3_assimilation   information. function first identifies points = Ac, = Aj,   = Ap. results stored columns called   Ac_limiting, Aj_limiting, Ap_limiting, value   TRUE indicates corresponding process limiting. , overall limiting state specified limiting_process   column. example, points equals Ac Aj   Ap designated limiting_process = 'Ac', likewise   potential limiting processes. one process   limiting point, limiting_process set 'co-limited'.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_c3_limiting_processes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify C3 Limiting Processes — identify_c3_limiting_processes","text":"exdf object based licor_exdf includes new columns   described : Ac_limiting, Aj_limiting, Ap_limiting,   limiting_process. categories new columns   set identify_c3_limiting_processes indicate   created using function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_c3_limiting_processes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify C3 Limiting Processes — identify_c3_limiting_processes","text":"","code":"# Identify limiting processes in an example curve example_curve <- exdf(   data.frame(     A_fit = c(1.0, 2.0, 3.0, 4.0, 4.0),     Ac    = c(1.0, 2.0, 5.0, 8.0, 9.0),     Aj    = c(2.0, 2.5, 3.0, 4.0, 8.0),     Ap    = c(NA,  NA,  4.0, 4.0, 4.0)   ),   units = data.frame(     A_fit = 'micromol m^(-2) s^(-1)',     Ac    = 'micromol m^(-2) s^(-1)',     Aj    = 'micromol m^(-2) s^(-1)',     Ap    = 'micromol m^(-2) s^(-1)',     stringsAsFactors = FALSE   ) )  identify_c3_limiting_processes(example_curve) #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>   A_fit [NA] (micromol m^(-2) s^(-1)) Ac [NA] (micromol m^(-2) s^(-1)) #> 1                                   1                                1 #> 2                                   2                                2 #> 3                                   3                                5 #> 4                                   4                                8 #> 5                                   4                                9 #>   Aj [NA] (micromol m^(-2) s^(-1)) Ap [NA] (micromol m^(-2) s^(-1)) #> 1                              2.0                               NA #> 2                              2.5                               NA #> 3                              3.0                                4 #> 4                              4.0                                4 #> 5                              8.0                                4 #>   Ac_limiting [identify_c3_limits] () Aj_limiting [identify_c3_limits] () #> 1                                TRUE                               FALSE #> 2                                TRUE                               FALSE #> 3                               FALSE                                TRUE #> 4                               FALSE                                TRUE #> 5                               FALSE                               FALSE #>   Ap_limiting [identify_c3_limits] () limiting_process [identify_c3_limits] () #> 1                               FALSE                                       Ac #> 2                               FALSE                                       Ac #> 3                               FALSE                                       Aj #> 4                                TRUE                   co-limited (Aj and Ap) #> 5                                TRUE                                       Ap  # This function also works for data frames identify_c3_limiting_processes(example_curve$main_data) #>   A_fit Ac  Aj Ap Ac_limiting Aj_limiting Ap_limiting       limiting_process #> 1     1  1 2.0 NA        TRUE       FALSE       FALSE                     Ac #> 2     2  2 2.5 NA        TRUE       FALSE       FALSE                     Ac #> 3     3  5 3.0  4       FALSE        TRUE       FALSE                     Aj #> 4     4  8 4.0  4       FALSE        TRUE        TRUE co-limited (Aj and Ap) #> 5     4  9 8.0  4       FALSE       FALSE        TRUE                     Ap"},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_common_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify columns that are common to multiple objects — identify_common_columns","title":"Identify columns that are common to multiple objects — identify_common_columns","text":"Checks whether input arguments columns","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_common_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify columns that are common to multiple objects — identify_common_columns","text":"","code":"identify_common_columns(...)    # S3 method for class 'data.frame' identify_common_columns(...)    # S3 method for class 'exdf' identify_common_columns(...)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_common_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify columns that are common to multiple objects — identify_common_columns","text":"... One R objects column names.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_common_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify columns that are common to multiple objects — identify_common_columns","text":"character vector column names common input   objects.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_common_columns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify columns that are common to multiple objects — identify_common_columns","text":"identify_common_columns generic, methods defined data   frames exdf objects. case exdf objects, column   considered common name, units, category   input objects.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_common_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify columns that are common to multiple objects — identify_common_columns","text":"","code":"# Here we create two exdf objects with the same column names and units, but # where the categories of one column are not the same in both objects exdf_1 <- exdf(   data.frame(A = c(3, 2, 7, 9), B = c(4, 5, 1, 8)),   data.frame(A = 'm', B = 's'),   data.frame(A = 'Cat1', B = 'Cat2') )  exdf_2 <- exdf(   data.frame(A = c(3, 2, 7, 9), B = c(4, 5, 1, 8)),   data.frame(A = 'm', B = 's'),   data.frame(A = 'Cat1', B = 'Cat3') )  # Calling `identify_common_columns` on the exdf objects will only identify one # common column (A) because the category for column B is not common to all the # exdf objects. identify_common_columns(exdf_1, exdf_2) #> [1] \"A\"  # Calling `identify_common_columns` on the main_data data frames will identify # two common columns because unit and category information will not be # considered here. identify_common_columns(exdf_1$main_data, exdf_2$main_data) #> [1] \"A\" \"B\""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_tdl_cycles.html","id":null,"dir":"Reference","previous_headings":"","what":"Identifying cycles in TDL data — identify_tdl_cycles","title":"Identifying cycles in TDL data — identify_tdl_cycles","text":"Tool identifying complete measurement cycles set tunable diode   laser (TDL) data.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_tdl_cycles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identifying cycles in TDL data — identify_tdl_cycles","text":"","code":"identify_tdl_cycles(     tdl_exdf,     valve_column_name,     cycle_start_valve,     expected_cycle_length_minutes,     expected_cycle_num_valves,     expected_cycle_num_time_pts = expected_cycle_num_valves,     timestamp_colname   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_tdl_cycles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identifying cycles in TDL data — identify_tdl_cycles","text":"tdl_exdf exdf object representing data TDL data logger. valve_column_name name column tdl_exdf contains valve number;     typically, 'valve_number'. cycle_start_valve value valve column indicates start new cycle. expected_cycle_length_minutes expected length full cycle (minutes); length     determined difference timestamp first last     measurements compose cycle. example, cycle consists 9     valves require 20 seconds measure, expected length     cycle minutes 8 * 20 / 60 = 2.7 minutes (approximately). expected_cycle_num_valves total number unique valves measured cycle.     example, cycle consists measuements valves 1, 3, 13, 6, 13,     expected_cycle_num_valves 4. expected_cycle_num_time_pts total number time points recorded cycle.     example, 10 measuements logged per second cycle 12 minutes     long, expected_cycle_num_time_pts     12 * 60 * 10 = 7200. timestamp_colname name column tdl_exdf contains timestamp     measurement; typically, 'TIMESTAMP'.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_tdl_cycles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identifying cycles in TDL data — identify_tdl_cycles","text":"Typically TDL system periodically cycles multiple gas lines   measurements. gas lines represent gas mixtures known   composition can used calibration, others \"unknown\"   mixtures whose composition measured. collection valves used   control gas line measured given time,   \"active\" valve recorded data point included measurement file. using calibration lines apply corrections measured data,   necessary first identify complete measurements cycles within data   set. , complete cycles identified using following criteria: cycle said begin value valve_column_name           cycle_start_valve. cycle ends expected_cycle_num_valves valves           measured. time difference first last points cycle           deviate expected_cycle_length_minutes           +/- 30 seconds. addition identifying valid measurement cycles within data,   identify_tdl_cycles also calculates elapsed time beginning   cycle (minutes).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_tdl_cycles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identifying cycles in TDL data — identify_tdl_cycles","text":"exdf object based tdl_exdf includes two new columns:   cycle_num column indicates measurement cycle corresponding   measurement, elapsed_time column indicates elapsed   time (minutes) start cycle. rows tdl_exdf   found part complete cycle included   return value.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_tdl_cycles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identifying cycles in TDL data — identify_tdl_cycles","text":"","code":"# Example: reading a TDL file that is included with the PhotoGEA package and # identifying its measurement cycles. tdl_file <- read_gasex_file(   PhotoGEA_example_file_path('tdl_sampling_1.dat'),   'TIMESTAMP' )  tdl_file <- identify_tdl_cycles(   tdl_file,   valve_column_name = 'valve_number',   cycle_start_valve = 20,   expected_cycle_length_minutes = 2.7,   expected_cycle_num_valves = 9,   timestamp_colname = 'TIMESTAMP' )  str(tdl_file) # Notice the two new columns: `cycle_num` and `elapsed_time` #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':\t918 obs. of  100 variables: #>  $ TIMESTAMP [read_cr3000] (TS)            : POSIXlt, format: \"2022-07-12 06:12:43\" \"2022-07-12 06:13:03\" ... #>  $ RECORD [read_cr3000] (RN)               : num  0 1 2 3 4 5 6 7 8 9 ... #>  $ valve_number [read_cr3000] ()           : num  20 21 23 26 2 10 11 12 13 20 ... #>  $ diag_system_Avg [read_cr3000] ()        : num  128 128 128 132 128 128 128 128 128 128 ... #>  $ NumSamples [read_cr3000] ()             : num  100 100 100 100 100 100 100 100 100 100 ... #>  $ Conc12C_Avg [read_cr3000] (ppm)         : num  2.9 68.8 311.9 1022.5 294.3 ... #>  $ Conc13C_Avg [read_cr3000] (ppm)         : num  0.132 0.847 3.481 11.114 3.299 ... #>  $ TGAStatus_Avg [read_cr3000] ()          : num  96 96 96 96 96 96 96 96 96 96 ... #>  $ TGAPressure_Avg [read_cr3000] (mb)      : num  30 30 30 30 30 ... #>  $ LaserTemp_Avg [read_cr3000] (degC)      : num  -4 -4 -4 -4 -4 ... #>  $ DCCurrentA_Avg [read_cr3000] (mA)       : num  50.4 50.4 50.4 50.4 50.4 ... #>  $ DCCurrentB_Avg [read_cr3000] (mA)       : num  38.9 38.9 38.9 38.9 38.9 ... #>  $ TGAAnalog1_Avg [read_cr3000] (V)        : num  0.0244 0.0244 0.0244 0.0244 0.0244 ... #>  $ TGATemp1_Avg [read_cr3000] (degC)       : num  30 30 30 30 30 ... #>  $ TGATemp2_Avg [read_cr3000] (degC)       : num  30 30 30 30 30 ... #>  $ LaserCooler_Avg [read_cr3000] (V)       : num  2.02 2.02 2.02 2.02 2.02 ... #>  $ RefDetSigA_Avg [read_cr3000] (mV)       : num  2.48 2.48 2.48 2.48 2.48 ... #>  $ RefDetSigB_Avg [read_cr3000] (mV)       : num  0.503 0.503 0.502 0.502 0.502 ... #>  $ RefDetTransA_Avg [read_cr3000] (%)      : num  41.2 41.2 41.1 41.1 41.1 ... #>  $ RefDetTransB_Avg [read_cr3000] (%)      : num  54.8 54.8 54.7 54.7 54.7 ... #>  $ RefDetTemp_Avg [read_cr3000] (degC)     : num  -35 -35 -35 -35 -35 ... #>  $ RefDetCooler_Avg [read_cr3000] ()       : num  1461 1461 1461 1461 1461 ... #>  $ RefDetGainOffset_Avg [read_cr3000] ()   : num  8217 8217 8217 8217 8217 ... #>  $ SmpDetSigA_Avg [read_cr3000] (mV)       : num  57.8 56.5 51.6 39.8 52 ... #>  $ SmpDetSigB_Avg [read_cr3000] (mV)       : num  10.08 9.88 9.17 7.38 9.22 ... #>  $ SmpDetTransA_Avg [read_cr3000] (%)      : num  99.8 97.4 89.2 68.8 89.8 ... #>  $ SmpDetTransB_Avg [read_cr3000] (%)      : num  114.4 112.2 104.2 84.2 104.8 ... #>  $ SmpDetTemp_Avg [read_cr3000] (degC)     : num  -39 -39 -39 -39 -39 ... #>  $ SmpDetCooler_Avg [read_cr3000] ()       : num  1449 1449 1449 1449 1449 ... #>  $ SmpDetGainOffset_Avg [read_cr3000] ()   : num  8456 8456 8456 8456 8456 ... #>  $ TGATemp1DutyCycle_Avg [read_cr3000] ()  : num  0.13 0.121 0.132 0.129 0.138 ... #>  $ TGATemp2DutyCycle_Avg [read_cr3000] ()  : num  0.0601 0.077 0.0677 0.0676 0.0649 ... #>  $ SampleFlow_Avg [read_cr3000] (ml_min)   : num  167 167 167 164 162 ... #>  $ ExcessFlow_Avg [read_cr3000] (ml_min)   : num  95.77 105.457 140.852 0.123 53.341 ... #>  $ SamplePress_Avg [read_cr3000] (mb)      : num  400 400 400 396 400 ... #>  $ BypassPress_Avg [read_cr3000] (mb)      : num  400 400 400 400 400 ... #>  $ SampleP_control_Avg [read_cr3000] ()    : num  0.4 0.404 0.414 0.2 0.385 ... #>  $ BypassP_control_Avg [read_cr3000] ()    : num  0.477 0.475 0.471 0.484 0.496 ... #>  $ TGAPress_control_Avg [read_cr3000] ()   : num  0.528 0.529 0.53 0.53 0.53 ... #>  $ panel_tmpr_Avg [read_cr3000] (degC)     : num  24.7 24.7 24.7 24.7 24.7 ... #>  $ batt_volt_Avg [read_cr3000] (V)         : num  11.8 11.8 11.8 11.8 11.8 ... #>  $ buff_depth_Max [read_cr3000] ()         : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ Conc12C_Std [read_cr3000] (ppm)         : num  0.5244 0.0946 0.2025 1.1064 1.5535 ... #>  $ Conc13C_Std [read_cr3000] (ppm)         : num  0.00797 0.00637 0.00849 0.02317 0.018 ... #>  $ TGAStatus_Std [read_cr3000] ()          : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ TGAPressure_Std [read_cr3000] (mb)      : num  0.0101 0.0105 0.0115 0.0102 0.0112 ... #>  $ LaserTemp_Std [read_cr3000] (degC)      : num  0.000244 0.000289 0.000272 0.000287 0.00025 ... #>  $ DCCurrentA_Std [read_cr3000] (mA)       : num  0.000454 0.0006 0.000338 0.000492 0.000503 ... #>  $ DCCurrentB_Std [read_cr3000] (mA)       : num  0.000677 0.000844 0.00061 0.000753 0.000625 ... #>  $ TGAAnalog1_Std [read_cr3000] (V)        : num  1.56e-05 1.39e-05 1.31e-05 1.30e-05 1.31e-05 ... #>  $ TGATemp1_Std [read_cr3000] (degC)       : num  0.000994 0.00121 0.003558 0.001737 0.001128 ... #>  $ TGATemp2_Std [read_cr3000] (degC)       : num  0.00215 0.00137 0.00141 0.00126 0.00227 ... #>  $ LaserCooler_Std [read_cr3000] (V)       : num  0.000293 0.000347 0.000326 0.000345 0.000301 ... #>  $ RefDetSigA_Std [read_cr3000] (mV)       : num  0.00155 0.00185 0.00155 0.00199 0.00154 ... #>  $ RefDetSigB_Std [read_cr3000] (mV)       : num  0.00169 0.00148 0.00145 0.0015 0.00188 ... #>  $ RefDetTransA_Std [read_cr3000] (%)      : num  0.0298 0.0354 0.0268 0.0366 0.0293 ... #>  $ RefDetTransB_Std [read_cr3000] (%)      : num  0.255 0.233 0.223 0.226 0.258 ... #>  $ RefDetTemp_Std [read_cr3000] (degC)     : num  0.00364 0.0032 0.00361 0.00365 0.00315 ... #>  $ RefDetCooler_Std [read_cr3000] ()       : num  0.354 0.316 0.356 0.357 0.299 ... #>  $ RefDetGainOffset_Std [read_cr3000] ()   : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ SmpDetSigA_Std [read_cr3000] (mV)       : num  0.01137 0.00519 0.00502 0.01354 0.02786 ... #>  $ SmpDetSigB_Std [read_cr3000] (mV)       : num  0.00497 0.00576 0.00366 0.00388 0.00501 ... #>  $ SmpDetTransA_Std [read_cr3000] (%)      : num  0.0214 0.00781 0.00875 0.02549 0.05127 ... #>  $ SmpDetTransB_Std [read_cr3000] (%)      : num  0.0631 0.0441 0.0564 0.0485 0.0763 ... #>  $ SmpDetTemp_Std [read_cr3000] (degC)     : num  0.00136 0.00128 0.00116 0.00148 0.00128 ... #>  $ SmpDetCooler_Std [read_cr3000] ()       : num  0.1147 0.1077 0.1009 0.1203 0.0931 ... #>  $ SmpDetGainOffset_Std [read_cr3000] ()   : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ TGATemp1DutyCycle_Std [read_cr3000] ()  : num  0.00923 0.00826 0.0119 0.00883 0.00886 ... #>  $ TGATemp2DutyCycle_Std [read_cr3000] ()  : num  0.00837 0.00978 0.00828 0.00849 0.00862 ... #>  $ SampleFlow_Std [read_cr3000] (ml_min)   : num  0.1467 0.2004 0.1747 0.0871 0.1594 ... #>  $ ExcessFlow_Std [read_cr3000] (ml_min)   : num  0.10026 0.11171 0.1207 0.00958 0.08248 ... #>  $ SamplePress_Std [read_cr3000] (mb)      : num  0.0214 0.0234 0.0199 0.0935 0.0242 ... #>  $ BypassPress_Std [read_cr3000] (mb)      : num  0.1431 0.0428 0.1358 0.4229 0.3114 ... #>  $ SampleP_control_Std [read_cr3000] ()    : num  9.05e-05 8.99e-05 7.08e-05 0.00 2.21e-04 ... #>  $ BypassP_control_Std [read_cr3000] ()    : num  1.85e-04 5.47e-05 1.52e-04 4.63e-04 3.60e-04 ... #>  $ TGAPress_control_Std [read_cr3000] ()   : num  0.000536 0.000541 0.000592 0.000525 0.000577 ... #>  $ panel_tmpr_Std [read_cr3000] (degC)     : num  0.00641 0.00222 0.00214 0.0023 0.00224 ... #>  $ batt_volt_Std [read_cr3000] (V)         : num  0.00241 0.00235 0.00224 0.00218 0.00232 ... #>  $ Li64Match_Avg(1) [read_cr3000] ()       : num  1 1 1 1 1 1 1 1 1 1 ... #>  $ Li64Match_Avg(2) [read_cr3000] ()       : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ Li64Tmpr_Avg(1) [read_cr3000] (degC)    : num  -79.2 -77.6 -81.6 -79.4 -79.7 ... #>  $ Li64Tmpr_Avg(2) [read_cr3000] (degC)    : num  NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN ... #>  $ Li64Heat_Avg(1) [read_cr3000] ()        : num  1 1 1 1 1 1 1 1 1 1 ... #>  $ Li64Heat_Avg(2) [read_cr3000] ()        : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ _Mix_diag_system_Avg [read_cr3000] ()   : num  NaN 960 960 960 960 960 960 960 960 960 ... #>  $ _Mix_ExcessZeroFlow_Avg [read_cr3000] (): num  NaN 0.42 0.379 0.441 0.411 ... #>  $ _Mix_ExcessMixFlow_Avg [read_cr3000] () : num  NaN 159 158 158 158 ... #>  $ _Mix_CO2Press_Avg [read_cr3000] ()      : num  NaN 11.4 11.4 11.4 11.4 ... #>  $ _Mix_ZeroPress_Avg [read_cr3000] ()     : num  NaN 16.5 16.5 16.5 16.5 ... #>  $ _Mix_CO2P_control_Avg [read_cr3000] ()  : num  NaN 0 0 0 0 0 0 0 0 0 ... #>  $ _Mix_ZeroP_control_Avg [read_cr3000] () : num  NaN 0 0 0 0 0 0 0 0 0 ... #>  $ _Mix_MixTmpr1_Avg [read_cr3000] ()      : num  NaN 32 32 32 32 ... #>  $ _Mix_MixTmpr2_Avg [read_cr3000] ()      : num  NaN 31.7 31.7 31.7 31.7 ... #>  $ _Mix_MixHeat1_Avg [read_cr3000] ()      : num  NaN 1 1 1 1 1 1 1 1 1 ... #>  $ _Mix_MixHeat2_Avg [read_cr3000] ()      : num  NaN 1 1 1 1 1 1 1 1 1 ... #>  $ _Mix_panel_tmpr_Avg [read_cr3000] ()    : num  NaN 24.1 24.1 24.1 24.1 ... #>  $ _Mix_batt_volt_Avg [read_cr3000] ()     : num  NaN 9.62 9.62 9.62 9.62 ... #>  $ file_name [read_gasex_file] (NA)        : chr  \"/home/runner/work/_temp/Library/PhotoGEA/extdata/tdl_sampling_1.dat\" \"/home/runner/work/_temp/Library/PhotoGEA/extdata/tdl_sampling_1.dat\" \"/home/runner/work/_temp/Library/PhotoGEA/extdata/tdl_sampling_1.dat\" \"/home/runner/work/_temp/Library/PhotoGEA/extdata/tdl_sampling_1.dat\" ... #>  $ cycle_num [calculated] (NA)             : num  1 1 1 1 1 1 1 1 1 2 ... #>   [list output truncated]"},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c3_aci.html","id":null,"dir":"Reference","previous_headings":"","what":"Make an initial guess of FvCB model parameter values for one curve — initial_guess_c3_aci","title":"Make an initial guess of FvCB model parameter values for one curve — initial_guess_c3_aci","text":"Creates function makes initial guess FvCB model parameter values   one curve. function used internally fit_c3_aci. Values estimated guessing function considered inaccurate,   always improved upon optimizer.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c3_aci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make an initial guess of FvCB model parameter values for one curve — initial_guess_c3_aci","text":"","code":"initial_guess_c3_aci(     alpha_g,     alpha_old,     alpha_s,     alpha_t,     Gamma_star_at_25,     gmc_at_25,     Kc_at_25,     Ko_at_25,     cc_threshold_rd = 100,     Wj_coef_C = 4.0,     Wj_coef_Gamma_star = 8.0,     a_column_name = 'A',     ci_column_name = 'Ci',     gamma_star_norm_column_name = 'Gamma_star_norm',     gmc_norm_column_name = 'gmc_norm',     j_norm_column_name = 'J_norm',     kc_norm_column_name = 'Kc_norm',     ko_norm_column_name = 'Ko_norm',     oxygen_column_name = 'oxygen',     rl_norm_column_name = 'RL_norm',     total_pressure_column_name = 'total_pressure',     tp_norm_column_name = 'Tp_norm',     vcmax_norm_column_name = 'Vcmax_norm'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c3_aci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make an initial guess of FvCB model parameter values for one curve — initial_guess_c3_aci","text":"alpha_g dimensionless parameter 0 <= alpha_g <= 1, representing     proportion glycolate carbon taken photorespiratory pathway     glycine. alpha_g often assumed 0. alpha_g     number, must column rc_exdf called alpha_g     appropriate units. numeric value supplied overwrite     values alpha_g column rc_exdf exists. alpha_old dimensionless parameter 0 <= alpha_old <= 1, representing     fraction remaining glycolate carbon returned chloroplast     accounting carbon released CO2. alpha_old often     assumed 0. alpha_old number, must     column rc_exdf called alpha_old appropriate units.     numeric value supplied overwrite values     alpha_old column rc_exdf exists. alpha_s dimensionless parameter 0 <= alpha_s <= 0.75 * (1 - alpha_g)     representing proportion glycolate carbon taken     photorespiratory pathway serine. alpha_s often assumed 0.     alpha_s number, must column     rc_exdf called alpha_s appropriate units. numeric     value supplied overwrite values alpha_s column     rc_exdf exists. alpha_t dimensionless parameter 0 <= alpha_t <= 1 representing     proportion glycolate carbon taken photorespiratory pathway     CH2-THF. alpha_t often assumed 0. alpha_t     number, must column rc_exdf called alpha_t     appropriate units. numeric value supplied overwrite     values alpha_t column rc_exdf exists. Gamma_star_at_25 chloroplastic CO2 concentration CO2 gains Rubisco     carboxylation exactly balanced CO2 losses Rubisco oxygenation,     25 degrees C, expressed micromol mol^(-1).     Gamma_star_at_25 number, must column     rc_exdf called Gamma_star_at_25 appropriate units.     numeric value supplied overwrite values     Gamma_star_at_25 column rc_exdf exists. gmc_at_25 mesophyll conductance CO2 diffusion 25 degrees C, expressed     mol m^(-2) s^(-1) bar^(-1). absence reliable     information, gmc_at_25 often assumed infinitely large.     gmc_at_25 number, must column     rc_exdf called gmc_at_25 appropriate units. numeric     value supplied overwrite values gmc_at_25     column rc_exdf exists. Kc_at_25 Michaelis-Menten constant Rubisco carboxylation 25 degrees C,     expressed micromol mol^(-1). Kc_at_25 number,     must column rc_exdf called Kc_at_25     appropriate units. numeric value supplied overwrite values     Kc_at_25 column rc_exdf exists. Ko_at_25 Michaelis-Menten constant Rubisco oxygenation 25 degrees C,     expressed mmol mol^(-1). Ko_at_25 number,     must column rc_exdf called Ko_at_25     appropriate units. numeric value supplied overwrite values     Ko_at_25 column rc_exdf exists. cc_threshold_rd upper cutoff value chloroplast CO2 concentration     micromol mol^(-1) used estimating RL. Wj_coef_C coefficient equation RuBP-regeneration-limited carboxylation,     whose value depends assumptions NADPH ATP requirements     RuBP regeneration; see calculate_c3_assimilation     information. Wj_coef_Gamma_star coefficient equation RuBP-regeneration-limited carboxylation,     whose value depends assumptions NADPH ATP requirements     RuBP regeneration; see calculate_c3_assimilation     information. a_column_name name column rc_exdf contains net     assimilation micromol m^(-2) s^(-1). ci_column_name name column rc_exdf contains     intercellular CO2 concentration micromol mol^(-1). gamma_star_norm_column_name name column rc_exdf contains normalized     Gamma_star values (units     normalized Gamma_star 25 degrees C). gmc_norm_column_name name column rc_exdf contains normalized     mesophyll conductance values (units     normalized gmc 25 degrees C). j_norm_column_name name column rc_exdf contains normalized     J values (units normalized J 25 degrees C). kc_norm_column_name name column rc_exdf contains normalized     Kc values (units normalized Kc 25 degrees C). ko_norm_column_name name column rc_exdf contains normalized     Ko values (units normalized Ko 25 degrees C). oxygen_column_name name column rc_exdf contains concentration     O2 ambient air, expressed percentage (commonly 21% 2%);     units must percent. rl_norm_column_name name column rc_exdf contains normalized     RL values (units normalized RL 25 degrees C). total_pressure_column_name name column rc_exdf contains total     pressure bar. tp_norm_column_name name column rc_exdf contains normalized     Tp values (units normalized Tp 25 degrees C). vcmax_norm_column_name name column rc_exdf contains normalized     Vcmax values (units     normalized Vcmax 25 degrees C).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c3_aci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make an initial guess of FvCB model parameter values for one curve — initial_guess_c3_aci","text":"estimate values J_at_25, RL_at_25, Tp_at_25,   Vcmax_at_25 measured C3 CO2 response curve. difficult   estimate values alpha_g, alpha_old, alpha_s,   alpha_t, Gamma_star_at_25, gmc_at_25, Kc_at_25,   Ko_at_25 curve, must supplied beforehand.   information parameters, see documentation   calculate_c3_assimilation.  Estimating RL: Regardless process limiting low           Cc, always true = -RL           Cc = Gamma_star_agt. make linear fit measured           vs. Cc values, evaluate           Cc = Gamma_star_agt estimate RL. linear fit           predicts negative value RL, use typical value           instead (0.5 micromol m^(-2) s^(-1)). Estimating Vc: estimate RL found,           RuBP carboxylation rate Vc can estimated using           Vc = (+ RL) / (1 - Gamma_star_agt / Cc). useful           remaining parameter estimates. Estimating Vcmax: estimate Vcmax can           obtained solving equation Wc Vcmax,           evaluating Wc = Vc estimated .           rubisco-limited part curve, Vc = Wc estimated           values Vcmax reasonable. parts           curve, Wc limiting rate, Vc < Wc.           Consequently, estimated values Vcmax parts           curve smaller. , make overall estimate, choose           largest estimated Vcmax value. Estimating J Tp: Estimates parameters can           made using equations Wj Wp, similar           approach followed Vcmax. parameter values estimated , values RL_norm,   Vcmax_norm, J_norm used convert values leaf   temperature values 25 degrees C.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c3_aci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make an initial guess of FvCB model parameter values for one curve — initial_guess_c3_aci","text":"function one input argument rc_exdf,   exdf object representing one C3 CO2 response curve. return value   function numeric vector twelve elements, representing   values alpha_g, alpha_old, alpha_s, alpha_t,   Gamma_star_at_25, gmc_at_25, J_at_25, Kc_at_25,   Ko_at_25, RL_at_25, Tp_at_25, Vcmax_at_25 (  order).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c3_aci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make an initial guess of FvCB model parameter values for one curve — initial_guess_c3_aci","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('c3_aci_1.xlsx') )  # Define a new column that uniquely identifies each curve licor_file[, 'species_plot'] <-   paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )  # Organize the data licor_file <- organize_response_curve_data(     licor_file,     'species_plot',     c(9, 10, 16),     'CO2_r_sp' )  # Calculate the total pressure in the Licor chamber licor_file <- calculate_total_pressure(licor_file)  # Calculate temperature-dependent values of C3 photosynthetic parameters licor_file <- calculate_temperature_response(licor_file, c3_temperature_param_bernacchi)  # Create the guessing function; here we set: # - All alpha values to 0 # - Gamma_star_at_25 to 40 micromol / mol # - gmc to infinity # - Kc_at_25 to 400 micromol / mol # - Ko_at_25 to 275 mmol / mol guessing_func <- initial_guess_c3_aci(   alpha_g = 0,   alpha_old = 0,   alpha_s = 0,   alpha_t = 0,   Gamma_star = 40,   gmc_at_25 = Inf,   Kc_at_25 = 400,   Ko_at_25 = 275 )  # Apply it and see the initial guesses for each curve print(by(licor_file, licor_file[, 'species_plot'], guessing_func)) #> $`soybean - 5a` #>  [1]   0.0000000   0.0000000   0.0000000   0.0000000  40.0000000         Inf #>  [7] 207.7214921 400.0000000 275.0000000   0.8878856  14.9438964 164.3471181 #>  #> $`tobacco - 1` #>  [1]   0.000000   0.000000   0.000000   0.000000  40.000000        Inf #>  [7] 246.842674 400.000000 275.000000   1.325456  18.385860 343.034039 #>  #> $`tobacco - 2` #>  [1]   0.000000   0.000000   0.000000   0.000000  40.000000        Inf #>  [7] 220.413963 400.000000 275.000000   1.197193  17.291378 155.417962 #>   # A simple way to visualize the guesses is to \"fit\" the curves using the null # optimizer, which simply returns the initial guess aci_results <- consolidate(by(   licor_file,   licor_file[, 'species_plot'],   fit_c3_aci,   fit_options = list(alpha_old = 0),   optim_fun = optimizer_null(),   remove_unreliable_param = 0 ))  plot_c3_aci_fit(aci_results, 'species_plot', 'Ci')"},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c3_variable_j.html","id":null,"dir":"Reference","previous_headings":"","what":"Make an initial guess of ","title":"Make an initial guess of ","text":"Creates function makes initial guess \"variable J\" model parameter   values one curve. function used internally   fit_c3_variable_j. Values estimated guessing function considered inaccurate,   always improved upon optimizer.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c3_variable_j.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make an initial guess of ","text":"","code":"initial_guess_c3_variable_j(     alpha_g,     alpha_old,     alpha_s,     alpha_t,     Gamma_star_at_25,     Kc_at_25,     Ko_at_25,     cc_threshold_rd = 100,     Wj_coef_C = 4.0,     Wj_coef_Gamma_star = 8.0,     a_column_name = 'A',     ci_column_name = 'Ci',     etr_column_name = 'ETR',     gamma_star_norm_column_name = 'Gamma_star_norm',     j_norm_column_name = 'J_norm',     kc_norm_column_name = 'Kc_norm',     ko_norm_column_name = 'Ko_norm',     oxygen_column_name = 'oxygen',     phips2_column_name = 'PhiPS2',     qin_column_name = 'Qin',     rl_norm_column_name = 'RL_norm',     total_pressure_column_name = 'total_pressure',     tp_norm_column_name = 'Tp_norm',     vcmax_norm_column_name = 'Vcmax_norm'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c3_variable_j.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make an initial guess of ","text":"alpha_g dimensionless parameter 0 <= alpha_g <= 1, representing     proportion glycolate carbon taken photorespiratory pathway     glycine. alpha_g often assumed 0. alpha_g     number, must column rc_exdf called alpha_g     appropriate units. numeric value supplied overwrite     values alpha_g column rc_exdf exists. alpha_old dimensionless parameter 0 <= alpha_old <= 1, representing     fraction remaining glycolate carbon returned chloroplast     accounting carbon released CO2. alpha_old often     assumed 0. alpha_old number, must     column rc_exdf called alpha_old appropriate units.     numeric value supplied overwrite values     alpha_old column rc_exdf exists. alpha_s dimensionless parameter 0 <= alpha_s <= 0.75 * (1 - alpha_g)     representing proportion glycolate carbon taken     photorespiratory pathway serine. alpha_s often assumed 0.     alpha_s number, must column     rc_exdf called alpha_s appropriate units. numeric     value supplied overwrite values alpha_s column     rc_exdf exists. alpha_t dimensionless parameter 0 <= alpha_t <= 1 representing     proportion glycolate carbon taken photorespiratory pathway     CH2-THF. alpha_t often assumed 0. alpha_t     number, must column rc_exdf called alpha_t     appropriate units. numeric value supplied overwrite     values alpha_t column rc_exdf exists. Gamma_star_at_25 chloroplastic CO2 concentration CO2 gains Rubisco     carboxylation exactly balanced CO2 losses Rubisco oxygenation,     25 degrees C, expressed micromol mol^(-1).     Gamma_star_at_25 number, must column     rc_exdf called Gamma_star_at_25 appropriate units.     numeric value supplied overwrite values     Gamma_star_at_25 column rc_exdf exists. Kc_at_25 Michaelis-Menten constant Rubisco carboxylation 25 degrees C,     expressed micromol mol^(-1). Kc_at_25 number,     must column rc_exdf called Kc_at_25     appropriate units. numeric value supplied overwrite values     Kc_at_25 column rc_exdf exists. Ko_at_25 Michaelis-Menten constant Rubisco oxygenation 25 degrees C,     expressed mmol mol^(-1). Ko_at_25 number,     must column rc_exdf called Ko_at_25     appropriate units. numeric value supplied overwrite values     Ko_at_25 column rc_exdf exists. cc_threshold_rd upper cutoff value chloroplast CO2 concentration     micromol mol^(-1) used estimating RL. Wj_coef_C coefficient equation RuBP-regeneration-limited carboxylation,     whose value depends assumptions NADPH ATP requirements     RuBP regeneration; see calculate_c3_assimilation     information. Wj_coef_Gamma_star coefficient equation RuBP-regeneration-limited carboxylation,     whose value depends assumptions NADPH ATP requirements     RuBP regeneration; see calculate_c3_assimilation     information. a_column_name name column rc_exdf contains net     assimilation micromol m^(-2) s^(-1). ci_column_name name column rc_exdf contains     intercellular CO2 concentration micromol mol^(-1). etr_column_name name column rc_exdf contains electron     transport rate estimated measurement system     micromol m^(-2) s^(-1). gamma_star_norm_column_name name column rc_exdf contains normalized     Gamma_star values (units     normalized Gamma_star 25 degrees C). j_norm_column_name name column rc_exdf contains normalized     J values (units normalized J 25 degrees C). kc_norm_column_name name column rc_exdf contains normalized     Kc values (units normalized Kc 25 degrees C). ko_norm_column_name name column rc_exdf contains normalized     Ko values (units normalized Ko 25 degrees C). oxygen_column_name name column exdf_obj contains concentration     O2 ambient air, expressed percentage (commonly 21% 2%);     units must percent. phips2_column_name name column rc_exdf contains values     operating efficiency photosystem II (dimensionless). qin_column_name name column rc_exdf contains values     incident photosynthetically active flux density     micromol m^(-2) s^(-1). rl_norm_column_name name column rc_exdf contains normalized     RL values (units normalized RL 25 degrees C). total_pressure_column_name name column rc_exdf contains total     pressure bar. tp_norm_column_name name column rc_exdf contains normalized     Tp values (units normalized Tp 25 degrees C). vcmax_norm_column_name name column rc_exdf contains normalized     Vcmax values (units     normalized Vcmax 25 degrees C).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c3_variable_j.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make an initial guess of ","text":"variable J method fitting procedure estimating values   alpha_g, alpha_old, alpha_s, alpha_t,   Gamma_star_at_25, J_at_25, Kc_at_25, Kc_at_25,   RL_at_25, tau, Tp_at_25, Vcmax_at_25   measured C3 CO2 response curve + chlorophyll fluorescence.   information parameters, see documentation   calculate_c3_variable_j   calculate_c3_assimilation. , make estimate tau noting gas exchange   measurement systems equipped chlorophyll fluorometers typically make   estimate electron transport rate (ETR), essentially   synonymous actual RuBP regeneration rate. Thus, tau can   estimated inverting equation J_actual: tau = ETR / (Qin * PhiPSII) Estimates remaining parameters calculated setting Cc = Ci   calling initial_guess_c3_aci.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c3_variable_j.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make an initial guess of ","text":"function one input argument rc_exdf,   exdf object representing one C3 CO2 response curve. return value   function numeric vector twelve elements, representing   values alpha_g, alpha_old, alpha_s, alpha_t,   Gamma_star_at_25, J_at_25, Kc_at_25, Ko_at_25,   RL_at_25, tau, Tp_at_25, Vcmax_at_25 (  order).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c3_variable_j.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make an initial guess of ","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('c3_aci_1.xlsx') )  # Define a new column that uniquely identifies each curve licor_file[, 'species_plot'] <-   paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )  # Organize the data licor_file <- organize_response_curve_data(     licor_file,     'species_plot',     c(9, 10, 16),     'CO2_r_sp' )  # Calculate the total pressure in the Licor chamber licor_file <- calculate_total_pressure(licor_file)  # Calculate temperature-dependent values of C3 photosynthetic parameters licor_file <- calculate_temperature_response(licor_file, c3_temperature_param_bernacchi)  # Create the guessing function; here we set: # - All alpha values to 0 # - Gamma_star_at_25 to 40 micromol / mol # - Kc_at_25 to 400 micromol / mol # - Ko_at_25 to 275 mmol / mol guessing_func <- initial_guess_c3_variable_j(   alpha_g = 0,   alpha_old = 0,   alpha_s = 0,   alpha_t = 0,   Gamma_star = 40,   Kc_at_25 = 400,   Ko_at_25 = 275 )  # Apply it and see the initial guesses for each curve print(by(licor_file, licor_file[, 'species_plot'], guessing_func)) #> $`soybean - 5a` #>  [1]   0.0000000   0.0000000   0.0000000   0.0000000  40.0000000 207.7214921 #>  [7] 400.0000000 275.0000000   0.8878856   0.4202992  14.9438964 164.3471181 #>  #> $`tobacco - 1` #>  [1]   0.0000000   0.0000000   0.0000000   0.0000000  40.0000000 246.8426737 #>  [7] 400.0000000 275.0000000   1.3254559   0.4202993  18.3858596 343.0340389 #>  #> $`tobacco - 2` #>  [1]   0.0000000   0.0000000   0.0000000   0.0000000  40.0000000 220.4139634 #>  [7] 400.0000000 275.0000000   1.1971928   0.4202992  17.2913781 155.4179616 #>   # A simple way to visualize the guesses is to \"fit\" the curves using the null # optimizer, which simply returns the initial guess aci_results <- consolidate(by(   licor_file,   licor_file[, 'species_plot'],   fit_c3_variable_j,   fit_options = list(alpha_old = 0),   optim_fun = optimizer_null(),   remove_unreliable_param = 0 ))  plot_c3_aci_fit(aci_results, 'species_plot', 'Ci')"},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c4_aci.html","id":null,"dir":"Reference","previous_headings":"","what":"Make an initial guess of C4 photosynthesis parameter values for one curve — initial_guess_c4_aci","title":"Make an initial guess of C4 photosynthesis parameter values for one curve — initial_guess_c4_aci","text":"Creates function makes initial guess C4 photosynthesis model   parameter values one curve. function used internally   fit_c4_aci. Values estimated guessing function considered inaccurate,   always improved upon optimizer.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c4_aci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make an initial guess of C4 photosynthesis parameter values for one curve — initial_guess_c4_aci","text":"","code":"initial_guess_c4_aci(     alpha_psii,     gbs,     gmc_at_25,     Rm_frac,     pcm_threshold_rlm = 40,     x_etr = 0.4,     a_column_name = 'A',     ci_column_name = 'Ci',     gmc_norm_column_name = 'gmc_norm',     j_norm_column_name = 'J_norm',     kp_column_name = 'Kp',     rl_norm_column_name = 'RL_norm',     total_pressure_column_name = 'total_pressure',     vcmax_norm_column_name = 'Vcmax_norm',     vpmax_norm_column_name = 'Vpmax_norm'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c4_aci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make an initial guess of C4 photosynthesis parameter values for one curve — initial_guess_c4_aci","text":"alpha_psii fraction photosystem II activity bundle sheath     (dimensionless). alpha_psii number,     must column rc_exdf called alpha_psii     appropriate units. numeric value supplied overwrite values     alpha_psii column rc_exdf exists. gbs bundle sheath conductance CO2 mol m^(-2) s^(-1) bar^(-1).     gbs number, must column     rc_exdf called gbs appropriate units. numeric value     supplied overwrite values gbs column     rc_exdf exists. gmc_at_25 mesophyll conductance CO2 diffusion 25 degrees C, expressed     mol m^(-2) s^(-1) bar^(-1). gmc_at_25 number,     must column rc_exdf called gmc_at_25     appropriate units. numeric value supplied overwrite values     gmc_at_25 column rc_exdf exists. Rm_frac fraction total mitochondrial respiration occurs     mesophyll. Rm_frac number, must column     rc_exdf called Rm_frac appropriate units. numeric     value supplied overwrite values Rm_frac column     rc_exdf exists. pcm_threshold_rlm upper cutoff value partial pressure CO2 mesophyll (    microbar) used estimating RLm. x_etr fraction whole-chain electron transport occurring mesophyll     (dimensionless). See Equation 29 S. von Caemmerer (2021). a_column_name name column rc_exdf contains net     assimilation micromol m^(-2) s^(-1). ci_column_name name column rc_exdf contains     intercellular CO2 concentration micromol mol^(-1). gmc_norm_column_name name column rc_exdf contains normalized     mesophyll conductance values (units     normalized gmc 25 degrees C). j_norm_column_name name column rc_exdf contains normalized     J values (units     normalized J 25 degrees C). kp_column_name name column rc_exdf contains Michaelis-Menten     constant PEP carboxylase carboxylation microbar. rl_norm_column_name name column rc_exdf contains normalized     RL values (units normalized RL 25 degrees C). total_pressure_column_name name column rc_exdf contains total pressure     bar. vcmax_norm_column_name name column rc_exdf contains normalized     Vcmax values (units     normalized Vcmax 25 degrees C). vpmax_norm_column_name name column rc_exdf contains normalized     Vpmax values (units     normalized Vpmax 25 degrees C).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c4_aci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make an initial guess of C4 photosynthesis parameter values for one curve — initial_guess_c4_aci","text":"estimate values J_at_25, RL_at_25,   Vcmax_at_25, Vpmax_at_25, Vpr measured C4 CO2   response curve. difficult estimate values alpha_psii,   gbs, gmc_at_25, Rm_frac curve, must   supplied beforehand. information parameters, see   documentation calculate_c4_assimilation. estimate   parameter values, use several equations S. von Caemmerer, \"Biochemical   Models Leaf Photosynthesis\" (CSIRO Publishing, 2000)   [doi:10.1071/9780643103405 ]. equation numbers referenced   book.  Estimating RL: estimate RLm can obtained           using Equation 4.26, applies low values PCm.           situation, PCm + Kp can approximated Kp,           Equation 4.26 simplifies linear relationship net           assimilation PCm: =           (gbs + Vpmax / kP) * PCm - RLm. , estimate RLm, make           linear fit vs. PCm low PCm range           equation expected valid. RLm given           negative intercept fit. C4 assimilation           model, assume RLm = Rm_frac * RL, can also           estimate RL = RLm / Rm_frac value. Estimating Vpmax: estimate Vpmax can also           obtained Equation 4.26. case, simply solve           equation Vpmax use calculate value           Vpmax point curve measured values           PCm, input value gbs, value           RLm estimated . PEP-carboxylation-limited range,           estimated values Vpmax reasonable.           parts curve, assimilation rate limited factors,           smaller PEP-carboxylation-limited           values, causing estimated values Vpmax smaller.           , make overall estimate, choose largest estimated           Vpmax value. Estimating Vcmax: estimate Vcmax can           obtained solving = Vcmax - RL Vcmax, similar           method used estimate Vpmax. Estimating Vpr: estimate Vpr can           obtained solving = Vpr + gbs * PCm - RLm Vpr,           similar method used estimate Vpmax. Estimating J: First, estimate J can           obtained solving = (1 - x_etr) * J / 3 - RL J.           , estimates J can made J           Qin. largest value J / J_norm chosen           best estimate J_at_25. Note key assumption underlying approach net   assimilation can reasonably approximated   = min(Apc, Apr, Ar, Ajm) (Equations 4.19, 4.25, 4.45, 4.47   combined). approximation seems work well low values   PCm, tends deviate significantly accurate version   higher values PCm, predicting values noticably smaller.   Thus, values Vcmax Vpr estimated using procedure   unlikely accurate. problem; instead simply   highlights importance improving initial guess using optimizer,   can accomplished via fit_c4_aci.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c4_aci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make an initial guess of C4 photosynthesis parameter values for one curve — initial_guess_c4_aci","text":"function one input argument rc_exdf,   exdf object representing one C4 CO2 response curve. return value   function numeric vector eight elements, representing   values alpha_psii, gbs, J_at_25, RL_at_25,   rm_frac, Vcmax_at_25, Vpmax_at_25, Vpr (  order).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c4_aci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make an initial guess of C4 photosynthesis parameter values for one curve — initial_guess_c4_aci","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('c4_aci_1.xlsx') )  # Define a new column that uniquely identifies each curve licor_file[, 'species_plot'] <-   paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )  # Organize the data licor_file <- organize_response_curve_data(     licor_file,     'species_plot',     c(9, 10, 16),     'CO2_r_sp' )  # Calculate temperature-dependent values of C4 photosynthetic parameters licor_file <- calculate_temperature_response(licor_file, c4_temperature_param_vc)  # Calculate the total pressure in the Licor chamber licor_file <- calculate_total_pressure(licor_file)  # Create the guessing function, using typical values for the alpha_psii, gbs, # gmc_at_25, and Rm_frac: 0, 0.003, 1, and 0.5 guessing_func <- initial_guess_c4_aci(0, 0.003, 1, 0.5)  # Apply it and see the initial guesses for each curve print(by(licor_file, licor_file[, 'species_plot'], guessing_func)) #> $`maize - 5` #> [1]   0.00000   0.00300   1.00000 267.72760   1.00000   0.50000  38.46066 #> [8] 215.05235  65.52684 #>  #> $`sorghum - 2` #> [1]   0.000000   0.003000   1.000000 290.584881   1.347936   0.500000  43.328786 #> [8] 327.802842  69.313852 #>  #> $`sorghum - 3` #> [1]   0.00000   0.00300   1.00000 272.76368   1.00000   0.50000  38.14046 #> [8] 191.33879  68.67666 #>   # A simple way to visualize the guesses is to \"fit\" the curves using the null # optimizer, which simply returns the initial guess aci_results <- consolidate(by(   licor_file,   licor_file[, 'species_plot'],   fit_c4_aci,   optim_fun = optimizer_null() ))  plot_c4_aci_fit(aci_results, 'species_plot', 'Ci', ylim = c(-10, 100))"},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c4_aci_hyperbola.html","id":null,"dir":"Reference","previous_headings":"","what":"Make an initial guess of C4 hyperbola parameter values for one curve — initial_guess_c4_aci_hyperbola","title":"Make an initial guess of C4 hyperbola parameter values for one curve — initial_guess_c4_aci_hyperbola","text":"Creates function makes initial guess C4 hyperbola model   parameter values one curve. function used internally   fit_c4_aci_hyperbola. Values estimated guessing function considered inaccurate,   always improved upon optimizer.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c4_aci_hyperbola.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make an initial guess of C4 hyperbola parameter values for one curve — initial_guess_c4_aci_hyperbola","text":"","code":"initial_guess_c4_aci_hyperbola(     a_column_name = 'A'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c4_aci_hyperbola.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make an initial guess of C4 hyperbola parameter values for one curve — initial_guess_c4_aci_hyperbola","text":"a_column_name name column rc_exdf contains net assimilation     rate micromol m^(-2) s^(-1).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c4_aci_hyperbola.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make an initial guess of C4 hyperbola parameter values for one curve — initial_guess_c4_aci_hyperbola","text":"estimate values c4_curvature, c4_slope, rL,   Vmax measured C4 CO2 response curve. information   parameters, see documentation   calculate_c4_assimilation_hyperbola. take simple approach forming initial guess. always   choose c4_curvature = 0.5, c4_slope = 1.0, rL = 0.0.   Vmax, use Vmax = max{} - rL_guess, max{}   largest observed net CO2 assimilation rate rL_guess   guess rL.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c4_aci_hyperbola.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make an initial guess of C4 hyperbola parameter values for one curve — initial_guess_c4_aci_hyperbola","text":"function one input argument rc_exdf,   exdf object representing one C4 CO2 response curve. return value   function numeric vector four elements, representing   values c4_curvature, c4_slope, rL, Vmax   (order).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/initial_guess_c4_aci_hyperbola.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make an initial guess of C4 hyperbola parameter values for one curve — initial_guess_c4_aci_hyperbola","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('c4_aci_1.xlsx') )  # Define a new column that uniquely identifies each curve licor_file[, 'species_plot'] <-   paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )  # Organize the data licor_file <- organize_response_curve_data(     licor_file,     'species_plot',     c(9, 10, 16),     'CO2_r_sp' )  # Create the guessing function guessing_func <- initial_guess_c4_aci_hyperbola()  # Apply it and see the initial guesses for each curve print(by(licor_file, licor_file[, 'species_plot'], guessing_func)) #> $`maize - 5` #> [1]  0.50000  1.00000  0.00000 67.33821 #>  #> $`sorghum - 2` #> [1]  0.50000  1.00000  0.00000 71.16098 #>  #> $`sorghum - 3` #> [1]  0.50000  1.00000  0.00000 69.62463 #>   # A simple way to visualize the guesses is to \"fit\" the curves using the null # optimizer, which simply returns the initial guess aci_results <- consolidate(by(   licor_file,   licor_file[, 'species_plot'],   fit_c4_aci_hyperbola,   optim_fun = optimizer_null() ))  plot_c4_aci_hyperbola_fit(aci_results, 'species_plot', ylim = c(-10, 100))"},{"path":"https://eloch216.github.io/PhotoGEA/reference/is.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Is an object an exdf? — is.exdf","title":"Is an object an exdf? — is.exdf","text":"Checks whether object exdf object.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/is.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is an object an exdf? — is.exdf","text":"","code":"is.exdf(x, consistency_check = FALSE)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/is.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is an object an exdf? — is.exdf","text":"x R object. consistency_check logical value indicating whether perform additional consistency checks.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/is.exdf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Is an object an exdf? — is.exdf","text":"default version .exdf simply checks see 'exdf'   class(x). consistency_check TRUE, additional checks   performed make sure object three elements named main_data,   units, categories; elements data frames   column names; units categories   one row. requirements part definition exdf   object, checks require additional time always   desired.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/is.exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is an object an exdf? — is.exdf","text":"logical (TRUE / FALSE) value indicating whether object exdf   object.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/is.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is an object an exdf? — is.exdf","text":"","code":"# Test a simple exdf object simple_exdf <- exdf(data.frame(A = 1), data.frame(A = 'u'), data.frame(A = 'c')) is.exdf(simple_exdf) #> [1] TRUE is.exdf(simple_exdf, TRUE) #> [1] TRUE  # Test an object that is clearly not an exdf not_an_exdf <- 2 is.exdf(not_an_exdf) #> [1] FALSE is.exdf(not_an_exdf, TRUE) #> [1] FALSE  # Test an object that claims to be an exdf but does not meet all of the # requirements fake_exdf <- not_an_exdf class(fake_exdf) <- c('exdf', class(fake_exdf)) is.exdf(fake_exdf) #> [1] TRUE is.exdf(fake_exdf, TRUE) #> Warning: x must have elements named `main_data`, `units`, and `categories` #> [1] FALSE"},{"path":"https://eloch216.github.io/PhotoGEA/reference/jmax_temperature_param_bernacchi.html","id":null,"dir":"Reference","previous_headings":"","what":"Jmax-related temperature response parameters from Bernacchi et al. — jmax_temperature_param_bernacchi","title":"Jmax-related temperature response parameters from Bernacchi et al. — jmax_temperature_param_bernacchi","text":"Parameters describing temperature response Jmax-related photosynthetic   parameters, intended passed   calculate_temperature_response function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/jmax_temperature_param_bernacchi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jmax-related temperature response parameters from Bernacchi et al. — jmax_temperature_param_bernacchi","text":"","code":"jmax_temperature_param_bernacchi"},{"path":"https://eloch216.github.io/PhotoGEA/reference/jmax_temperature_param_bernacchi.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Jmax-related temperature response parameters from Bernacchi et al. — jmax_temperature_param_bernacchi","text":"List 2 named elements represent variable whose   temperature-dependent value can calculated using polynomial equation: alpha_j_norm: apparent quantum efficiency electron           transport (alpha_j) normalized value 25 degrees C. theta_j_norm: empirical curvature parameter normalized           value 25 degrees C. turn, elements list 3 named elements: type: type temperature response. coef: polynomial coefficients. units: units corresponding variable.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/jmax_temperature_param_bernacchi.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Jmax-related temperature response parameters from Bernacchi et al. — jmax_temperature_param_bernacchi","text":"Polynomial coefficients obtained Bernacchi et al. (2003).   , use values determined plants grown 25 degrees C   (Table 2). coefficients given paper used calculate   values alpha_j theta_j leaf temperature.   normalize values alpha_j theta_j 25 degrees C,   0.6895 0.97875, respectively. References:  Bernacchi, C. J., Pimentel, C. & Long, S. P. \"vivo temperature           response functions parameters required model RuBP-limited           photosynthesis\" Plant, Cell & Environment 26, 1419–1430 (2003)           [doi:10.1046/j.0016-8025.2003.01050.x ].","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/jmax_temperature_param_flat.html","id":null,"dir":"Reference","previous_headings":"","what":"Jmax-related temperature response parameters from Bernacchi et al. — jmax_temperature_param_flat","title":"Jmax-related temperature response parameters from Bernacchi et al. — jmax_temperature_param_flat","text":"Parameters describe flat temperature response (words,   dependence temperature) Jmax-related photosynthetic   parameters, intended passed   calculate_temperature_response function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/jmax_temperature_param_flat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jmax-related temperature response parameters from Bernacchi et al. — jmax_temperature_param_flat","text":"","code":"jmax_temperature_param_flat"},{"path":"https://eloch216.github.io/PhotoGEA/reference/jmax_temperature_param_flat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Jmax-related temperature response parameters from Bernacchi et al. — jmax_temperature_param_flat","text":"List 2 named elements represent variable whose   temperature-dependent value can calculated using polynomial equation: alpha_j_norm: apparent quantum efficiency electron           transport (alpha_j) normalized value 25 degrees C. theta_j_norm: empirical curvature parameter normalized           value 25 degrees C. turn, elements list 3 named elements: type: type temperature response. coef: polynomial coefficients. units: units corresponding variable.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/jmax_temperature_param_flat.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Jmax-related temperature response parameters from Bernacchi et al. — jmax_temperature_param_flat","text":", polynomial coefficients (coef) set 1, speciying   zeroth-order polynomial equal 1, means values   depend temperature.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/length.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Length of an exdf object — length.exdf","title":"Length of an exdf object — length.exdf","text":"Returns length exdf object's main_data.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/length.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Length of an exdf object — length.exdf","text":"","code":"# S3 method for class 'exdf' length(x)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/length.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Length of an exdf object — length.exdf","text":"x exdf object.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/length.exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Length of an exdf object — length.exdf","text":"Returns length(x[['main_data']]).","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/length.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Length of an exdf object — length.exdf","text":"","code":"simple_exdf <- exdf(data.frame(A = 1), data.frame(A = 'u'), data.frame(A = 'c')) length(simple_exdf) #> [1] 1 length(simple_exdf[['main_data']]) # An equivalent command #> [1] 1"},{"path":"https://eloch216.github.io/PhotoGEA/reference/multi_curve_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Set of colors for plotting multiple curves — multi_curve_colors","title":"Set of colors for plotting multiple curves — multi_curve_colors","text":"multi_curve_colors returns vector color specifications work   reasonably well plotting multiple curves axes. multi_curve_line_colors returns vector,   first color set transparent. multi_curve_point_colors also   returns vector, colors except first set   transparent. color specifications can helpful plotting measured   data along fits, allowing data displayed points fits   lines.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/multi_curve_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set of colors for plotting multiple curves — multi_curve_colors","text":"","code":"multi_curve_colors()    multi_curve_line_colors()    multi_curve_point_colors()"},{"path":"https://eloch216.github.io/PhotoGEA/reference/multi_curve_colors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set of colors for plotting multiple curves — multi_curve_colors","text":"color set originally formed calling following: multi_curve_colors <- c(       \"#000000\",       RColorBrewer::brewer.pal(8, \"Set2\"),       RColorBrewer::brewer.pal(12, \"Paired\")[c(1:10,12)],       RColorBrewer::brewer.pal(8, \"Dark2\")   )","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/multi_curve_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set of colors for plotting multiple curves — multi_curve_colors","text":"character vector 28 elements, hexadecimal color   specification.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/multi_curve_colors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set of colors for plotting multiple curves — multi_curve_colors","text":"","code":"multi_curve_colors() #>  [1] \"#000000\" \"#66C2A5\" \"#FC8D62\" \"#8DA0CB\" \"#E78AC3\" \"#A6D854\" \"#FFD92F\" #>  [8] \"#E5C494\" \"#B3B3B3\" \"#A6CEE3\" \"#1F78B4\" \"#B2DF8A\" \"#33A02C\" \"#FB9A99\" #> [15] \"#E31A1C\" \"#FDBF6F\" \"#FF7F00\" \"#CAB2D6\" \"#6A3D9A\" \"#B15928\" \"#1B9E77\" #> [22] \"#D95F02\" \"#7570B3\" \"#E7298A\" \"#66A61E\" \"#E6AB02\" \"#A6761D\" \"#666666\"  multi_curve_line_colors() #>  [1] \"#00000000\" \"#66C2A5\"   \"#FC8D62\"   \"#8DA0CB\"   \"#E78AC3\"   \"#A6D854\"   #>  [7] \"#FFD92F\"   \"#E5C494\"   \"#B3B3B3\"   \"#A6CEE3\"   \"#1F78B4\"   \"#B2DF8A\"   #> [13] \"#33A02C\"   \"#FB9A99\"   \"#E31A1C\"   \"#FDBF6F\"   \"#FF7F00\"   \"#CAB2D6\"   #> [19] \"#6A3D9A\"   \"#B15928\"   \"#1B9E77\"   \"#D95F02\"   \"#7570B3\"   \"#E7298A\"   #> [25] \"#66A61E\"   \"#E6AB02\"   \"#A6761D\"   \"#666666\"    multi_curve_point_colors() #>  [1] \"#000000\"   \"#66C2A500\" \"#FC8D6200\" \"#8DA0CB00\" \"#E78AC300\" \"#A6D85400\" #>  [7] \"#FFD92F00\" \"#E5C49400\" \"#B3B3B300\" \"#A6CEE300\" \"#1F78B400\" \"#B2DF8A00\" #> [13] \"#33A02C00\" \"#FB9A9900\" \"#E31A1C00\" \"#FDBF6F00\" \"#FF7F0000\" \"#CAB2D600\" #> [19] \"#6A3D9A00\" \"#B1592800\" \"#1B9E7700\" \"#D95F0200\" \"#7570B300\" \"#E7298A00\" #> [25] \"#66A61E00\" \"#E6AB0200\" \"#A6761D00\" \"#66666600\""},{"path":"https://eloch216.github.io/PhotoGEA/reference/optimizers.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimizers — optimizers","title":"Optimizers — optimizers","text":"functions return optimizers meet requirements   optim_fun input argument fit_c3_aci,   fit_c3_variable_j, fit_c4_aci,   fit_c4_aci_hyperbola. Essentially, wrappers   optimizers libraries serve standardize inputs   outputs.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/optimizers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizers — optimizers","text":"","code":"optimizer_deoptim(itermax, VTR = -Inf)    optimizer_hjkb(tol, maxfeval = Inf, target = Inf)    optimizer_nlminb(rel.tol, eval.max = 200, iter.max = 200, abs.tol = 0)    optimizer_nmkb(tol, maxfeval = 2000, restarts.max = 10)    optimizer_null()"},{"path":"https://eloch216.github.io/PhotoGEA/reference/optimizers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimizers — optimizers","text":"tol convergence tolerance value; passed nmkb     hjkb via control input arguments.     typical value 1e-7. maxfeval maximum value number function evaluations allow     optimization; passed nmkb     hjkb via control input arguments. target real number restricting absolute function value; passed     hjkb via control input argument. rel.tol relative convergence tolerance value; passed     nlminb via control input argument. typical     value 1e-10. eval.max maximum value number function evaluations; passed     nlminb via control input argument. iter.max maximum value number iterations; passed     nlminb via control input argument. abs.tol absolute convergence tolerance value; passed     nlminb via control input argument. restarts.max maximum value number restarts allowed optimization;     passed nmkb via control input     argument. itermax maximum number generations used; passed     DEoptim via control input argument. Note     VTR -Inf, optimizer always use     maximum number generations. typical value 200. VTR value reached; passed DEoptim via     control input argument.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/optimizers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimizers — optimizers","text":"optimizer_deoptim wrapper DEoptim. optimizer_hjkb wrapper hjkb. optimizer_nlminb wrapper nlminb. optimizer_nmkb wrapper nmkb. optimizer_null simply returns initial guess without   optimization; can useful viewing initial guesses. See documentation functions information   optimizers work.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/optimizers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimizers — optimizers","text":"functions returns optimizer function optim_fun.   returned optim_fun function four input arguments: initial guess   (guess), error function (fun), lower bounds (lower),   upper bounds (upper). returns list four named elements:   par, convergence, feval, convergence_msg.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/optimizers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimizers — optimizers","text":"","code":"# Here we just show examples of the optim_fun results. Other examples using the # optimizers can be found throughout PhotoGEA, such as in the user guides and # the documentation for fit_c3_aci, fit_c4_aci, etc.  optimizer_deoptim(200) #> function (guess, fun, lower, upper)  #> { #>     NP <- 10 * length(guess) #>     initialpop <- matrix(nrow = NP, ncol = length(guess)) #>     initialpop[1, ] <- guess #>     varsize <- 0.25 #>     for (i in seq(2, NP)) { #>         tmp <- guess * (1 + stats::runif(length(guess), -varsize,  #>             varsize)) #>         initialpop[i, ] <- constrain_guess(tmp, lower, upper,  #>             0) #>     } #>     res <- DEoptim::DEoptim(fun, lower, upper, control = list(VTR = VTR,  #>         itermax = itermax, NP = NP, initialpop = initialpop,  #>         trace = FALSE)) #>     list(convergence = NA, convergence_msg = NA, feval = res[[\"optim\"]][[\"nfeval\"]],  #>         par = res[[\"optim\"]][[\"bestmem\"]], optimizer = \"optimizer_deoptim\") #> } #> <bytecode: 0x55dc3f91bfc0> #> <environment: 0x55dc3ce876f0>  optimizer_hjkb(1e-7) #> function (guess, fun, lower, upper)  #> { #>     guess <- constrain_guess(guess, lower, upper, 0.01) #>     res <- dfoptim::hjkb(guess, fun, lower, upper, control = list(tol = tol,  #>         maxfeval = maxfeval, target = target)) #>     list(convergence = res[[\"convergence\"]], convergence_msg = NA,  #>         feval = res[[\"feval\"]], par = res[[\"par\"]], optimizer = \"optimizer_hjkb\") #> } #> <bytecode: 0x55dc3cde5878> #> <environment: 0x55dc3cde6838>  optimizer_nlminb(1e-7) #> function (guess, fun, lower, upper)  #> { #>     guess <- constrain_guess(guess, lower, upper, 0.01) #>     res <- stats::nlminb(guess, fun, lower = lower, upper = upper,  #>         control = list(rel.tol = rel.tol, eval.max = eval.max,  #>             iter.max = iter.max, abs.tol = abs.tol)) #>     list(convergence = res[[\"convergence\"]], convergence_msg = res[[\"message\"]],  #>         feval = res[[\"evaluations\"]][1], par = res[[\"par\"]],  #>         optimizer = \"optimizer_nlminb\") #> } #> <bytecode: 0x55dc3cca9d10> #> <environment: 0x55dc3cca54b0>  optimizer_nmkb(1e-7) #> function (guess, fun, lower, upper)  #> { #>     guess <- constrain_guess(guess, lower, upper, 0.01) #>     res <- dfoptim::nmkb(guess, fun, lower, upper, control = list(tol = tol,  #>         maxfeval = maxfeval, restarts.max = restarts.max)) #>     list(convergence = res[[\"convergence\"]], convergence_msg = res[[\"message\"]],  #>         feval = res[[\"feval\"]], par = res[[\"par\"]], optimizer = \"optimizer_nmkb\") #> } #> <bytecode: 0x55dc3c24f768> #> <environment: 0x55dc3cc4f438>  optimizer_null() #> function (guess, fun, lower, upper)  #> { #>     list(convergence = NA, convergence_msg = NA, feval = 0, par = guess,  #>         optimizer = \"optimizer_null\") #> } #> <bytecode: 0x55dc43198ca8> #> <environment: 0x55dc3cb58eb0>"},{"path":"https://eloch216.github.io/PhotoGEA/reference/organize_response_curve_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorganize response curve data for analysis and plotting — organize_response_curve_data","title":"Reorganize response curve data for analysis and plotting — organize_response_curve_data","text":"Prepares set response curves future processing analysis   numbering reordering points, (optionally) removing recovery points,   (optionally) calculating average values key variables across   curve.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/organize_response_curve_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorganize response curve data for analysis and plotting — organize_response_curve_data","text":"","code":"organize_response_curve_data(     licor_exdf,     identifier_columns,     measurement_numbers_to_remove,     column_for_ordering,     ordering_column_tolerance = Inf,     columns_to_average = c(),     print_information = TRUE   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/organize_response_curve_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorganize response curve data for analysis and plotting — organize_response_curve_data","text":"licor_exdf exdf object representing response curve data Licor gas     exchange measurement system. identifier_columns vector list strings representing names columns     licor_exdf , taken together, uniquely identify curve.     often includes names like plot, event, replicate, etc. measurement_numbers_to_remove vector integers specifying points remove curve;     example, curve 16 points 10^th^ 11^th^ points along     sequence included subsequent analysis,     measurement_numbers_to_remove specified c(10, 11).     measurement_numbers_to_remove set c(), points     removed. column_for_ordering name column systematically varied produce curve;     example, light response curve, typically Qin. ordering_column_tolerance passed check_response_curve_data     driving_column_tolerance input argument. columns_to_average list columns whose average values calculated; see     details. print_information passed check_response_curve_data.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/organize_response_curve_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reorganize response curve data for analysis and plotting — organize_response_curve_data","text":"exdf object consisting multiple response curves can   identified using values identifier_columns, function   performs following actions: Assigns sequential number measurement curve,           beginning 1. words, first point curve           given number 1, second given number 2, etc. numbers           stored new column called seq_num. (Optionally) extracts subset data.           measurement_numbers_to_remove c(), step           skipped; otherwise, values seq_num specified           measurement_numbers_to_remove removed,           check_response_curve_data called make sure           remaining points follow sequence setpoint values           (within tolerance set ordering_column_tolerance),           treating column_for_ordering driving_column. Reorders data according ascending values           column_for_ordering. (Optionally) calculates average values important columns.           columns_to_average c(), step           skipped; otherwise, curve, mean value column           specified columns_to_average stored new column           whose name based original column name,           '_avg' added end. example, average value           Qin column stored Qin_avg. Removing certain points often helpful -Ci curves, CO~2~   concentration begins ambient value, decreased low value,   reset atmospheric several measurements allow plant   reacclimate, increased higher values. case,   first measurement ambient CO~2~ used plotting additional   analysis, \"recovery\" points removed. Reordering points often helpful plotting. example, points   -Ci curve ordered according Ci values curve   measured using sequence described . can cause issues   making line plots, may convenient reorder according   Ci values. Calculating average values certain columns especially useful   estimating Jmax values using calculate_jmax, since   operation requires average values leaf temperature incident photon flux   across curve.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/organize_response_curve_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reorganize response curve data for analysis and plotting — organize_response_curve_data","text":"exdf object based licor_exdf processed described   .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/organize_response_curve_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reorganize response curve data for analysis and plotting — organize_response_curve_data","text":"","code":"# Read an example Licor file included in the PhotoGEA package and organize it. # This file includes several 7-point light-response curves that can be uniquely # identified by the values of its 'species' and 'plot' columns. Since these are # light-response curves, each one follows a pre-set sequence of `Qin` values. licor_file <- read_gasex_file(   PhotoGEA_example_file_path('ball_berry_1.xlsx') )  # Split the data into individual curves, keep all seven measurement points in # each curve, and order them by their incident light values (since these are # light response curves). The curves were measured from high to low values of # `Qin`, so after organizing the curves, their order will be reversed from the # original version. Also add the average value of TleafCnd and Qin for each # curve. licor_file <- organize_response_curve_data(   licor_file,   c('species', 'plot'),   c(),   'Qin',   columns_to_average = c('TleafCnd', 'Qin') )  # View a subset of the data, including the new `seq_num` column print(licor_file[, c('species', 'plot', 'seq_num', 'Qin', 'A', 'Qin_avg'), TRUE]) #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>    species [UserDefCon] (NA) plot [UserDefCon] (NA) seq_num [NA] (NA) #> 1                    soybean                     1a                 7 #> 2                    soybean                     1a                 6 #> 3                    soybean                     1a                 5 #> 4                    soybean                     1a                 4 #> 5                    soybean                     1a                 3 #> 6                    soybean                     1a                 2 #> 7                    soybean                     1a                 1 #> 8                    soybean                     1b                 7 #> 9                    soybean                     1b                 6 #> 10                   soybean                     1b                 5 #> 11                   soybean                     1b                 4 #> 12                   soybean                     1b                 3 #> 13                   soybean                     1b                 2 #> 14                   soybean                     1b                 1 #> 15                   tobacco                      2                 7 #> 16                   tobacco                      2                 6 #> 17                   tobacco                      2                 5 #> 18                   tobacco                      2                 4 #> 19                   tobacco                      2                 3 #> 20                   tobacco                      2                 2 #> 21                   tobacco                      2                 1 #> 22                   soybean                      5                 7 #> 23                   soybean                      5                 6 #> 24                   soybean                      5                 5 #> 25                   soybean                      5                 4 #> 26                   soybean                      5                 3 #> 27                   soybean                      5                 2 #> 28                   soybean                      5                 1 #>    Qin [LeafQ] (micromol m^(-2) s^(-1)) A [GasEx] (micromol m^(-2) s^(-1)) #> 1                               200.141                           5.679174 #> 2                               350.106                          12.240074 #> 3                               500.135                          16.617929 #> 4                               649.951                          23.290614 #> 5                               799.983                          25.430106 #> 6                              1099.800                          22.996635 #> 7                              2000.030                          35.400473 #> 8                               200.070                           9.276031 #> 9                               350.060                          14.666531 #> 10                              499.982                          17.009070 #> 11                              650.070                          26.383035 #> 12                              799.873                          25.472460 #> 13                             1099.890                          30.250627 #> 14                             1999.850                          47.950460 #> 15                              200.236                           7.849870 #> 16                              350.073                          12.044692 #> 17                              500.036                          12.106347 #> 18                              650.001                          16.345888 #> 19                              800.046                          22.218165 #> 20                             1099.980                          25.492278 #> 21                             2000.020                          29.614535 #> 22                              200.029                          10.768250 #> 23                              349.991                          17.091593 #> 24                              499.921                          22.068194 #> 25                              650.108                          22.924484 #> 26                              799.910                          32.769396 #> 27                             1099.960                          36.218245 #> 28                             1999.980                          45.780746 #>    Qin_avg [organize_response_curve_data] (micromol m^(-2) s^(-1)) #> 1                                                         800.0209 #> 2                                                         800.0209 #> 3                                                         800.0209 #> 4                                                         800.0209 #> 5                                                         800.0209 #> 6                                                         800.0209 #> 7                                                         800.0209 #> 8                                                         799.9707 #> 9                                                         799.9707 #> 10                                                        799.9707 #> 11                                                        799.9707 #> 12                                                        799.9707 #> 13                                                        799.9707 #> 14                                                        799.9707 #> 15                                                        800.0560 #> 16                                                        800.0560 #> 17                                                        800.0560 #> 18                                                        800.0560 #> 19                                                        800.0560 #> 20                                                        800.0560 #> 21                                                        800.0560 #> 22                                                        799.9856 #> 23                                                        799.9856 #> 24                                                        799.9856 #> 25                                                        799.9856 #> 26                                                        799.9856 #> 27                                                        799.9856 #> 28                                                        799.9856"},{"path":"https://eloch216.github.io/PhotoGEA/reference/pair_gasex_and_tdl.html","id":null,"dir":"Reference","previous_headings":"","what":"Pair gas exchange and TDL data — pair_gasex_and_tdl","title":"Pair gas exchange and TDL data — pair_gasex_and_tdl","text":"Identifies closest TDL cycle corresponding entry gas   exchange data adds TDL data gas exchange data.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/pair_gasex_and_tdl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pair gas exchange and TDL data — pair_gasex_and_tdl","text":"","code":"pair_gasex_and_tdl(     gasex_exdf,     tdl_exdf,     max_allowed_time_difference = 1,     gasex_timestamp_column_name = 'time',     tdl_timestamp_column_name = 'TIMESTAMP'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/pair_gasex_and_tdl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pair gas exchange and TDL data — pair_gasex_and_tdl","text":"gasex_exdf exdf object representing data photosynthetic gas exchange     measurement system. tdl_exdf exdf object representing calibrated data tunable diode     laser absorption spectroscopy system. Typically output     applying process_tdl_cycle_erml     process_tdl_cycle_polynomial set uncalibrated TDL data. max_allowed_time_difference maximum time difference (minutes) allow gas exchange     TDL timestamp values. gasex_timestamp_column_name name column gasex_exdf contains timestamp     values. tdl_timestamp_column_name name column tdl_exdf contains timestamp     values.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/pair_gasex_and_tdl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pair gas exchange and TDL data — pair_gasex_and_tdl","text":"making combined gas exchange isotope discrimination measurements   using portable photosynthetic gas exchange system (Licor LI-6800)   coupled tunable diode laser (TDL) absorption spectroscopy system,   TDL's gas handling system cycles several gas lines (sites)   opening closing valves. analyzing data, key step   combine TDL gas exchange data measured times. pair_gasex_and_tdl function performs operation locating   TDL cycle whose timestamp closest Licor file entry. ,   12C, 13C, total CO2, delta_13C values measured TDL Licor's   sample reference lines cycle added gas exchange   data new columns.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/pair_gasex_and_tdl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pair gas exchange and TDL data — pair_gasex_and_tdl","text":"exdf object based gasex_exdf includes TDL values   measured times original gas exchange logs. Several new   columns added: 'cycle_num', 'tdl_time_s',   'calibrated_12c_s', 'calibrated_13c_s', 'total_CO2_s',   'delta_C13_s', 'tdl_time_r', 'calibrated_12c_r',   'calibrated_13c_r', 'total_CO2_r', 'delta_C13_r'.   Variables '_s' name refer TDL measurements   Licor sample line, '_r' indicates reference line. category   new column pair_gasex_and_tdl indicate   created using function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/pair_gasex_and_tdl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pair gas exchange and TDL data — pair_gasex_and_tdl","text":"","code":"## In this example we load gas exchange and TDL data files, calibrate the TDL ## data, and pair the data tables together  # Read the TDL data file, making sure to interpret the time zone as US Central # time tdl_data <- read_gasex_file(   PhotoGEA_example_file_path('tdl_for_gm.dat'),   'TIMESTAMP',   list(tz = 'America/Chicago') )  # Identify cycles within the TDL data tdl_data <- identify_tdl_cycles(   tdl_data,   valve_column_name = 'valve_number',   cycle_start_valve = 20,   expected_cycle_length_minutes = 2.7,   expected_cycle_num_valves = 9,   timestamp_colname = 'TIMESTAMP' )  # Use reference tanks to calibrate the TDL data processed_tdl <- consolidate(by(   tdl_data,   tdl_data[, 'cycle_num'],   process_tdl_cycle_erml,   noaa_valve = 2,   calibration_0_valve = 20,   calibration_1_valve = 21,   calibration_2_valve = 23,   calibration_3_valve = 26,   noaa_cylinder_co2_concentration = 294.996,   noaa_cylinder_isotope_ratio = -8.40,   calibration_isotope_ratio = -11.505 ))  # Read the gas exchange data, making sure to interpret the time stamp in the US # Central time zone licor_data <- read_gasex_file(   PhotoGEA_example_file_path('licor_for_gm_site11.xlsx'),   'time',   list(tz = 'America/Chicago') ) # Get TDL valve information from Licor file name; for this TDL system, the # reference valve is 12 when the sample valve is 11 licor_data <- get_sample_valve_from_filename(licor_data, list('11' = 12))  # Pair the Licor and TDL data by locating the TDL cycle corresponding to each # Licor measurement licor_data <- pair_gasex_and_tdl(licor_data, processed_tdl$tdl_data)  # View some of the results licor_data[, c('A', 'delta_C13_r', 'delta_C13_s', 'total_CO2_r', 'total_CO2_s')] #>           A delta_C13_r delta_C13_s total_CO2_r total_CO2_s #> 1  32.01867   -5.438269   -2.306566    702.8716    426.2619 #> 2  31.91890   -5.344929   -2.178155    708.0634    429.6733 #> 3  31.85562   -5.169295   -2.109784    702.7235    427.6489 #> 4  31.76382   -5.212031   -2.105925    702.7264    428.1308 #> 5  31.69923   -5.117179   -1.660248    702.6373    428.8285 #> 6  31.57078   -5.119033   -1.789007    702.7397    430.1372 #> 7  20.11287   -4.778251   -2.248652    445.1621    268.6527 #> 8  20.13905   -4.946493   -2.257818    448.4566    268.1469 #> 9  20.15698   -4.493983   -1.997756    444.8754    267.8980 #> 10 20.16227   -4.754437   -2.246718    444.6889    267.8129 #> 11 20.16253   -4.914201   -1.980538    444.6759    267.9302 #> 12 20.12078   -5.024895   -2.335218    444.8834    268.4257"},{"path":"https://eloch216.github.io/PhotoGEA/reference/pdf_print.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a plot object or save it to a PDF — pdf_print","title":"Print a plot object or save it to a PDF — pdf_print","text":"convenience function either displays plot object R graphics   window saves PDF.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/pdf_print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a plot object or save it to a PDF — pdf_print","text":"","code":"pdf_print(     plot_obj,     width = 7,     height = 7,     save_to_pdf = FALSE,     file = NULL,     new_window = TRUE,     ...   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/pdf_print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a plot object or save it to a PDF — pdf_print","text":"plot_obj plotting object can printed, trellis object returned     call xyplot. width width figure inches. height width figure inches. save_to_pdf save_to_pdf TRUE, plot_obj saved     PDF; otherwise printed R graphics window. file file name use save_to_pdf TRUE. file     NULL, default value determined     pdf function. new_window printing plot_obj R graphics window, new window     created new_window TRUE. Otherwise, plot     replace currently active plot window (one exists). ... Additional arguments passed pdf.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/pdf_print.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print a plot object or save it to a PDF — pdf_print","text":"function helpful developing using analysis scripts.   context, recommended define boolean called SAVE_TO_PDF early   script always use pdf_print creating figures,   passing boolean save_to_pdf input argument. Figures can   initially displayed R (setting SAVE_TO_PDF = FALSE), saved   PDFs graphing parameters optimized (setting   SAVE_TO_PDF = TRUE). Note calling pdf command line (done   internally pdf_print) different exporting R graphics   object PDF RGui RStudio. reason, RGui RStudio   override pdf defaults set useDingbats   TRUE. setting almost always causes problems opening PDFs   software like Adobe Illustrator Inkscape.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/pdf_print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a plot object or save it to a PDF — pdf_print","text":"pdf_print function return anything.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/pdf_print.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a plot object or save it to a PDF — pdf_print","text":"","code":"SAVE_TO_PDF = FALSE # change this to TRUE to save to a PDF  pdf_print(   lattice::xyplot(     1:4 ~ 11:14,     xlab = 'X',     ylab = 'Y',     type = 'b'   ),   save_to_pdf = SAVE_TO_PDF,   file = 'example.pdf', # this name will only be used when saving to a PDF   new_window = FALSE    # necessary for rendering the documentation examples )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/plot_ball_berry_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a C3 CO2 response curve fit — plot_ball_berry_fit","title":"Plot the results of a C3 CO2 response curve fit — plot_ball_berry_fit","text":"Plots output fit_c3_aci   fit_c3_variable_j.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/plot_ball_berry_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a C3 CO2 response curve fit — plot_ball_berry_fit","text":"","code":"plot_ball_berry_fit(     fit_results,     identifier_column_name,     bb_index_column_name = 'bb_index',     gsw_column_name = 'gsw',     ...   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/plot_ball_berry_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a C3 CO2 response curve fit — plot_ball_berry_fit","text":"fit_results list three exdf objects names fits, parameters,     fits_interpolated, calculated fit_c3_aci. identifier_column_name name column element fit_results whose value can     used identify response curve within data set; often,     'curve_identifier'. bb_index_column_name name column fit_results$fits contains     Ball-Berry index mol m^(-2) s^(-1); value     passed fit_ball_berry. gsw_column_name name column fit_results$fits contains stomatal     conductance water vapor mol m^(-2) s^(-1);     value passed fit_ball_berry. ... Additional arguments passed xyplot.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/plot_ball_berry_fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the results of a C3 CO2 response curve fit — plot_ball_berry_fit","text":"convenience function plotting results Ball-Berry curve   fit. typically used displaying several fits , case   fit_results actually output calling   consolidate list created calling .exdf   FUN = fit_ball_berry. resulting plot show curves fitted gsw, along   points measured values gsw. Internally, function uses xyplot perform   plotting. Optionally, additional arguments can passed xyplot.   typically limited things like xlim, ylim,   main, grid, since many xyplot arguments   set internally (xlab, ylab, auto, others). See help file fit_ball_berry example using   function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/plot_ball_berry_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a C3 CO2 response curve fit — plot_ball_berry_fit","text":"trellis object created lattice::xyplot.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/plot_ball_berry_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the results of a C3 CO2 response curve fit — plot_ball_berry_fit","text":"","code":"# Read an example Licor file included in the PhotoGEA package, calculate # additional gas properties, calculate the Ball-Berry index, define a new column # that uniquely identifies each curve, and then perform a fit to extract the # Ball-Berry parameters from each curve. licor_file <- read_gasex_file(   PhotoGEA_example_file_path('ball_berry_1.xlsx') )  licor_file <- calculate_total_pressure(licor_file)  licor_file <- calculate_gas_properties(licor_file)  licor_file[,'species_plot'] <-   paste(licor_file[,'species'], '-', licor_file[,'plot'])  licor_file <- calculate_ball_berry_index(licor_file)  # Fit all curves in the data set bb_results <- consolidate(by(   licor_file,   licor_file[, 'species_plot'],   fit_ball_berry ))  # View the fits for each species / plot plot_ball_berry_fit(bb_results, 'species_plot')"},{"path":"https://eloch216.github.io/PhotoGEA/reference/plot_c3_aci_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a C3 CO2 response curve fit — plot_c3_aci_fit","title":"Plot the results of a C3 CO2 response curve fit — plot_c3_aci_fit","text":"Plots output fit_c3_aci   fit_c3_variable_j.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/plot_c3_aci_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a C3 CO2 response curve fit — plot_c3_aci_fit","text":"","code":"plot_c3_aci_fit(     fit_results,     identifier_column_name,     x_name,     plot_operating_point = TRUE,     plot_Ad = FALSE,     a_column_name = 'A',     cc_column_name = 'Cc',     ci_column_name = 'Ci',     ...   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/plot_c3_aci_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a C3 CO2 response curve fit — plot_c3_aci_fit","text":"fit_results list three exdf objects named fits, parameters,     fits_interpolated, calculated fit_c3_aci. identifier_column_name name column element fit_results whose value can     used identify response curve within data set; often,     'curve_identifier'. x_name name column used x-axis plot.     refer either 'Ci' 'Cc', must     ci_column_name cc_column_name. plot_operating_point logical value indicating whether plot operating point. plot_Ad logical value indicating whether plot RuBP-depletion-limited net     CO2 assimilation rate (Ad). a_column_name name columns elements fit_results contain     net assimilation micromol m^(-2) s^(-1);     value passed fit_c3_aci fit_c3_variable_j. cc_column_name name columns elements fit_results contain     chloroplastic CO2 concentration micromol mol^(-1). ci_column_name name columns elements fit_results contain     intercellular CO2 concentration micromol mol^(-1);     value passed fit_c3_aci     fit_c3_variable_j. ... Additional arguments passed xyplot.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/plot_c3_aci_fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the results of a C3 CO2 response curve fit — plot_c3_aci_fit","text":"convenience function plotting results C3 -Ci curve   fit. typically used displaying several fits , case   fit_results actually output calling   consolidate list created calling .exdf   FUN = fit_c3_aci FUN = fit_c3_variable_j. resulting plot show curves fitted rates , Ac,   Aj, Ap, along points measured values   , (optionally) estimated operating point. x-axis can   set either Ci Cc. Internally, function uses xyplot perform   plotting. Optionally, additional arguments can passed xyplot.   typically limited things like xlim, ylim,   main, grid, since many xyplot arguments   set internally (xlab, ylab, auto, others). See help file fit_c3_aci example using   function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/plot_c3_aci_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a C3 CO2 response curve fit — plot_c3_aci_fit","text":"trellis object created lattice::xyplot.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/plot_c3_aci_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the results of a C3 CO2 response curve fit — plot_c3_aci_fit","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('c3_aci_1.xlsx') )  # Define a new column that uniquely identifies each curve licor_file[, 'species_plot'] <-   paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )  # Organize the data licor_file <- organize_response_curve_data(     licor_file,     'species_plot',     c(9, 10, 16),     'CO2_r_sp' )  # Calculate the total pressure in the Licor chamber licor_file <- calculate_total_pressure(licor_file)  # Calculate temperature-dependent values of C3 photosynthetic parameters licor_file <- calculate_temperature_response(licor_file, c3_temperature_param_bernacchi)  # For these examples, we will use a faster (but sometimes less reliable) # optimizer so they run faster optimizer <- optimizer_nmkb(1e-7)  # Fit all curves in the data set aci_results <- consolidate(by(   licor_file,   licor_file[, 'species_plot'],   fit_c3_aci,   Ca_atmospheric = 420,   optim_fun = optimizer ))  # View the fits for each species / plot plot_c3_aci_fit(aci_results, 'species_plot', 'Ci')"},{"path":"https://eloch216.github.io/PhotoGEA/reference/plot_c4_aci_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a C4 CO2 response curve fit — plot_c4_aci_fit","title":"Plot the results of a C4 CO2 response curve fit — plot_c4_aci_fit","text":"Plots output fit_c4_aci.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/plot_c4_aci_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a C4 CO2 response curve fit — plot_c4_aci_fit","text":"","code":"plot_c4_aci_fit(     fit_results,     identifier_column_name,     x_name,     plot_operating_point = TRUE,     a_column_name = 'A',     ci_column_name = 'Ci',     pcm_column_name = 'PCm',     ...   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/plot_c4_aci_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a C4 CO2 response curve fit — plot_c4_aci_fit","text":"fit_results list three exdf objects named fits, parameters,     fits_interpolated, calculated fit_c4_aci. identifier_column_name name column element fit_results whose value can     used identify response curve within data set; often,     'curve_identifier'. x_name name column used x-axis plot.     refer either 'Ci' 'Cc', must     ci_column_name cc_column_name. plot_operating_point logical value indicating whether plot operating point. a_column_name name columns elements fit_results contain     net assimilation micromol m^(-2) s^(-1);     value passed fit_c4_aci. ci_column_name name columns elements fit_results contain     intercellular CO2 concentration micromol mol^(-1);     value passed fit_c4_aci. pcm_column_name name columns elements exdf_obj contain     partial pressure CO2 mesophyll, expressed microbar. ... Additional arguments passed xyplot.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/plot_c4_aci_fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the results of a C4 CO2 response curve fit — plot_c4_aci_fit","text":"convenience function plotting results C4 -Ci curve   fit. typically used displaying several fits , case   fit_results actually output calling   consolidate list created calling .exdf   FUN = fit_c4_aci. resulting plot show curves fitted rates ,   Apr, Apc, Ar, along points measured   values , (optionally) estimated operating point. x-axis   can set either Ci PCm. Internally, function uses xyplot perform   plotting. Optionally, additional arguments can passed xyplot.   typically limited things like xlim, ylim,   main, grid, since many xyplot arguments   set internally (xlab, ylab, auto, others). See help file fit_c4_aci example using   function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/plot_c4_aci_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a C4 CO2 response curve fit — plot_c4_aci_fit","text":"trellis object created lattice::xyplot.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/plot_c4_aci_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the results of a C4 CO2 response curve fit — plot_c4_aci_fit","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('c4_aci_1.xlsx') )  # Define a new column that uniquely identifies each curve licor_file[, 'species_plot'] <-   paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )  # Organize the data licor_file <- organize_response_curve_data(     licor_file,     'species_plot',     c(9, 10, 16),     'CO2_r_sp' )  # Calculate temperature-dependent values of C4 photosynthetic parameters licor_file <- calculate_temperature_response(licor_file, c4_temperature_param_vc)  # Calculate the total pressure in the Licor chamber licor_file <- calculate_total_pressure(licor_file)  # For these examples, we will use a faster (but sometimes less reliable) # optimizer so they run faster optimizer <- optimizer_nmkb(1e-7)  # Fit all curves in the data set aci_results <- consolidate(by(   licor_file,   licor_file[, 'species_plot'],   fit_c4_aci,   Ca_atmospheric = 420,   optim_fun = optimizer ))  # View the fits for each species / plot plot_c4_aci_fit(aci_results, 'species_plot', 'Ci', ylim = c(0, 100))"},{"path":"https://eloch216.github.io/PhotoGEA/reference/plot_c4_aci_hyperbola_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a hyperbolic C4 CO2 response curve fit — plot_c4_aci_hyperbola_fit","title":"Plot the results of a hyperbolic C4 CO2 response curve fit — plot_c4_aci_hyperbola_fit","text":"Plots output fit_c4_aci_hyperbola.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/plot_c4_aci_hyperbola_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a hyperbolic C4 CO2 response curve fit — plot_c4_aci_hyperbola_fit","text":"","code":"plot_c4_aci_hyperbola_fit(     fit_results,     identifier_column_name,     a_column_name = 'A',     ci_column_name = 'Ci',     ...   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/plot_c4_aci_hyperbola_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a hyperbolic C4 CO2 response curve fit — plot_c4_aci_hyperbola_fit","text":"fit_results list three exdf objects named fits, parameters,     fits_interpolated, calculated     fit_c4_aci_hyperbola. identifier_column_name name column element fit_results whose value can     used identify response curve within data set; often,     'curve_identifier'. a_column_name name columns elements fit_results contain     net assimilation micromol m^(-2) s^(-1);     value passed fit_c4_aci_hyperbola. ci_column_name name columns elements fit_results contain     intercellular CO2 concentration micromol mol^(-1);     value passed fit_c4_aci_hyperbola. ... Additional arguments passed xyplot.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/plot_c4_aci_hyperbola_fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the results of a hyperbolic C4 CO2 response curve fit — plot_c4_aci_hyperbola_fit","text":"convenience function plotting results C4 -Ci curve   fit. typically used displaying several fits , case   fit_results actually output calling   consolidate list created calling .exdf   FUN = fit_c4_aci_hyperbola. resulting plot show curves fitted rates ,   Ainitial, Amax, along points measured values   . Internally, function uses xyplot perform   plotting. Optionally, additional arguments can passed xyplot.   typically limited things like xlim, ylim,   main, grid, since many xyplot arguments   set internally (xlab, ylab, auto, others). See help file fit_c4_aci_hyperbola example using   function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/plot_c4_aci_hyperbola_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a hyperbolic C4 CO2 response curve fit — plot_c4_aci_hyperbola_fit","text":"trellis object created lattice::xyplot.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/plot_c4_aci_hyperbola_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the results of a hyperbolic C4 CO2 response curve fit — plot_c4_aci_hyperbola_fit","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('c4_aci_1.xlsx') )  # Define a new column that uniquely identifies each curve licor_file[, 'species_plot'] <-   paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )  # Organize the data licor_file <- organize_response_curve_data(     licor_file,     'species_plot',     c(9, 10, 16),     'CO2_r_sp' )  # Fit all curves in the data set aci_results <- consolidate(by(   licor_file,   licor_file[, 'species_plot'],   fit_c4_aci_hyperbola ))  # View the fits for each species / plot plot_c4_aci_hyperbola_fit(aci_results, 'species_plot', ylim = c(0, 100))"},{"path":"https://eloch216.github.io/PhotoGEA/reference/plot_laisk_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a C3 CO2 response curve fit — plot_laisk_fit","title":"Plot the results of a C3 CO2 response curve fit — plot_laisk_fit","text":"Plots output fit_laisk.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/plot_laisk_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a C3 CO2 response curve fit — plot_laisk_fit","text":"","code":"plot_laisk_fit(     fit_results,     identifier_column_name,     plot_type,     cols = multi_curve_colors(),     a_column_name = 'A',     ci_column_name = 'Ci',     ppfd_column_name = 'PPFD',     ...   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/plot_laisk_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a C3 CO2 response curve fit — plot_laisk_fit","text":"fit_results list four exdf objects named first_fits,     first_fit_parameters, second_fits,     second_fit_parameters, calculated     fit_laisk. identifier_column_name name column element fit_results whose value can     used identify replicate within data set; often,     'curve_identifier'. plot_type Must either 'first' 'second' (case-insensitive);     determines type plot create (see details). cols vector color specifications use light level plotting. a_column_name name columns elements fit_results contain     net assimilation micromol m^(-2) s^(-1);     value passed fit_laisk. ci_column_name name column elements fit_results contain     intercellular CO2 concentration micromol mol^(-1);     value passed fit_laisk. ppfd_column_name name column elements fit_results can     used split data individual response curves;     value passed fit_laisk. ... Additional arguments passed xyplot.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/plot_laisk_fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the results of a C3 CO2 response curve fit — plot_laisk_fit","text":"convenience function plotting results Laisk curve   fit. typically used displaying several fits , case   fit_results actually output calling   consolidate list created calling .exdf   FUN = fit_laisk. Laisk fitting process involves two sets linear fits,   two possible graphs can created. plot_type   'first', function plot individual -Ci curves   PPFD, along linear fits estimated intersection point.   plot_type 'second', function plot Laisk   intercept vs. Laisk slope results first fits, along   linear fit Laisk intercept vs. Laisk slope. See   fit_laisk details. Internally, function uses xyplot perform   plotting. Optionally, additional arguments can passed xyplot.   typically limited things like xlim, ylim,   main, grid, since many xyplot arguments   set internally (xlab, ylab, auto, others). See help file fit_laisk example using   function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/plot_laisk_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a C3 CO2 response curve fit — plot_laisk_fit","text":"trellis object created lattice::xyplot.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/plot_laisk_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the results of a C3 CO2 response curve fit — plot_laisk_fit","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('c3_aci_1.xlsx') )  # Define a new column that uniquely identifies each curve licor_file[, 'species_plot'] <-   paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )  # Organize the data licor_file <- organize_response_curve_data(     licor_file,     'species_plot',     c(9, 10, 16),     'CO2_r_sp' )  # Apply the Laisk method. Note: this is a bad example because these curves were # measured at the same light intensity, but from different species. Because of # this, the results are not meaningful. laisk_results <- fit_laisk(   licor_file, 20, 150,   ppfd_column_name = 'species_plot' )  # Plot the linear fits of A vs. Ci plot_laisk_fit(laisk_results, 'instrument', 'first', ppfd_column_name = 'species_plot') #> Error in plot_laisk_fit(laisk_results, \"instrument\", \"first\", ppfd_column_name = \"species_plot\"): object 'laisk_results' not found  # Plot the linear fits of Laisk intercept vs. Laisk slope plot_laisk_fit(laisk_results, 'instrument', 'second', ppfd_column_name = 'species_plot') #> Error in plot_laisk_fit(laisk_results, \"instrument\", \"second\", ppfd_column_name = \"species_plot\"): object 'laisk_results' not found"},{"path":"https://eloch216.github.io/PhotoGEA/reference/print.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the contents of an exdf object — print.exdf","title":"Print the contents of an exdf object — print.exdf","text":"Prints contents exdf object's main_data. column   described name, unit, category formatted like   name [category] (units).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/print.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the contents of an exdf object — print.exdf","text":"","code":"# S3 method for class 'exdf' print(x, ...)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/print.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the contents of an exdf object — print.exdf","text":"x exdf object. ... Additional arguments passed print.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/print.exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the contents of an exdf object — print.exdf","text":"None.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/print.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print the contents of an exdf object — print.exdf","text":"","code":"simple_exdf <- exdf(data.frame(A = 1), data.frame(A = 'u'), data.frame(A = 'c')) print(simple_exdf) #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>   A [c] (u) #> 1         1"},{"path":"https://eloch216.github.io/PhotoGEA/reference/process_tdl_cycle_erml.html","id":null,"dir":"Reference","previous_headings":"","what":"Process cycles from the ERML TDL — process_tdl_cycle_erml","title":"Process cycles from the ERML TDL — process_tdl_cycle_erml","text":"Uses 12C 13C signal calibration lines tunable diode   laser (TDL) determine correction factors apply sample   lines. Applicable system NOAA calibration tank, nitrogen tank,   three lines mixing nitrogen CO2 tank different ratios.   function designed specifically TDL operating Carl   Bernacchi's lab Edward R. Madigan Laboratory (ERML) University   Illinois, Urbana-Champaign.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/process_tdl_cycle_erml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process cycles from the ERML TDL — process_tdl_cycle_erml","text":"","code":"process_tdl_cycle_erml(     tdl_cycle,     noaa_valve,     calibration_0_valve,     calibration_1_valve,     calibration_2_valve,     calibration_3_valve,     noaa_cylinder_co2_concentration,     noaa_cylinder_isotope_ratio,     calibration_isotope_ratio,     valve_column_name = 'valve_number',     raw_12c_colname = 'Conc12C_Avg',     raw_13c_colname = 'Conc13C_Avg'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/process_tdl_cycle_erml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process cycles from the ERML TDL — process_tdl_cycle_erml","text":"tdl_cycle exdf object representing one cycle TDL data. noaa_valve valve number corresponds NOAA reference cylinder. calibration_0_valve valve number corresponds calibration valve 0 (nitrogen     cylinder). calibration_1_valve valve number corresponds calibration valve 1 (mixture     nitrogen gas calibrated CO2 source). calibration_2_valve valve number corresponds calibration valve 2 (mixture     nitrogen gas calibrated CO2 source). calibration_3_valve valve number corresponds calibration valve 3 (mixture     nitrogen gas calibrated CO2 source). noaa_cylinder_co2_concentration total CO2 concentration NOAA calibration cylinder ppm;     includes carbon species, 12C18O18O. noaa_cylinder_isotope_ratio isotope ratio NOAA calibration cylinder ppt. calibration_isotope_ratio isotope ratio CO2 cylinder ppt. valve_column_name name column tdl_cycle contains valve number;     typically, 'valve_number'. raw_12c_colname name column tdl_cycle contains 12C signal;     typically, 'Conc12C_Avg'. raw_13c_colname name column tdl_cycle contains 13C signal;     typically, 'Conc13C_Avg'.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/process_tdl_cycle_erml.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process cycles from the ERML TDL — process_tdl_cycle_erml","text":"function applies several corrections data tdl_cycle: First, 12C 13C signals nitrogen line considered           additive offsets data. values subtracted           measured 12C 13C signals produce \"zero-corrected\" values. zero-corrected 12C signal NOAA calibration line           assumed related true 12C concentration line           multiplicative \"gain\" factor. factor calculated using           known values NOAA cylinder's CO2 concentration isotope           ratio, applied zero-corrected 12C signals get           \"calibrated\" 12C concentrations. true 13C concentration calibration lines 0-3 can determined           calibrated 12C concentration measurements known           isotope ratio calibration tank. true concentrations can           compared measured zero-corrected 13C signals develop           correction function. perform third-order polynomial fit           expected vs. measured 13C values. (Four data points used           fit.) fit result can used convert zero-corrected           13C signals \"calibrated\" 13C concentrations. equations ? references cite? function assumes tdl_cycle represents single TDL   measurement cycle. process multiple cycles , function often   used along .exdf consolidate.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/process_tdl_cycle_erml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process cycles from the ERML TDL — process_tdl_cycle_erml","text":"list five elements: tdl_data: exdf object containing original content           tdl_cycle several new columns:           'zero_corrected_12c', 'zero_corrected_13c',           'calibrated_12c', 'calibrated_13c', 'total_CO2',           'delta_C13'. calibration_zero: exdf object describing values           used calculate zero-corrected 12C 13C signals. calibration_12CO2: exdf object describing gain           factor used calculate calibrated 12C signal. calibration_13CO2_data: exdf object describing           data used polynomial fit expected vs. measured 13C signals           calibration valves 0-3. calibration_13CO2_fit: exdf object describing           results polynomial fitting procedure.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/process_tdl_cycle_erml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process cycles from the ERML TDL — process_tdl_cycle_erml","text":"","code":"# Example: reading a TDL file that is included with the PhotoGEA package, # identifying its measurement cycles, and then processing them. tdl_file <- read_gasex_file(   PhotoGEA_example_file_path('tdl_sampling_1.dat'),   'TIMESTAMP' )  # This is a large file; for this example, we will truncate to just the first # 200 rows so it runs faster tdl_file <- tdl_file[seq_len(200), , TRUE]  # Identify TDL cycles tdl_file <- identify_tdl_cycles(   tdl_file,   valve_column_name = 'valve_number',   cycle_start_valve = 20,   expected_cycle_length_minutes = 2.7,   expected_cycle_num_valves = 9,   timestamp_colname = 'TIMESTAMP' )  # Process TDL cycles processed_tdl <- consolidate(by(   tdl_file,   tdl_file[, 'cycle_num'],   process_tdl_cycle_erml,   valve_column_name = 'valve_number',   noaa_valve = 2,   calibration_0_valve = 20,   calibration_1_valve = 21,   calibration_2_valve = 23,   calibration_3_valve = 26,   raw_12c_colname = 'Conc12C_Avg',   raw_13c_colname = 'Conc13C_Avg',   noaa_cylinder_co2_concentration = 294.996,   noaa_cylinder_isotope_ratio = -8.40,   calibration_isotope_ratio = -11.505 ))  # The output is a list of five exdf objects; four of them are related to each # step in the calibration procedure for each TDL cycle names(processed_tdl) #> [1] \"tdl_data\"               \"calibration_zero\"       \"calibration_12CO2\"      #> [4] \"calibration_13CO2_data\" \"calibration_13CO2_fit\"   # The processed TDL data includes new columns for the calibrated CO2 # concentrations colnames(processed_tdl$tdl_data) #>   [1] \"TIMESTAMP\"               \"RECORD\"                  #>   [3] \"valve_number\"            \"diag_system_Avg\"         #>   [5] \"NumSamples\"              \"Conc12C_Avg\"             #>   [7] \"Conc13C_Avg\"             \"TGAStatus_Avg\"           #>   [9] \"TGAPressure_Avg\"         \"LaserTemp_Avg\"           #>  [11] \"DCCurrentA_Avg\"          \"DCCurrentB_Avg\"          #>  [13] \"TGAAnalog1_Avg\"          \"TGATemp1_Avg\"            #>  [15] \"TGATemp2_Avg\"            \"LaserCooler_Avg\"         #>  [17] \"RefDetSigA_Avg\"          \"RefDetSigB_Avg\"          #>  [19] \"RefDetTransA_Avg\"        \"RefDetTransB_Avg\"        #>  [21] \"RefDetTemp_Avg\"          \"RefDetCooler_Avg\"        #>  [23] \"RefDetGainOffset_Avg\"    \"SmpDetSigA_Avg\"          #>  [25] \"SmpDetSigB_Avg\"          \"SmpDetTransA_Avg\"        #>  [27] \"SmpDetTransB_Avg\"        \"SmpDetTemp_Avg\"          #>  [29] \"SmpDetCooler_Avg\"        \"SmpDetGainOffset_Avg\"    #>  [31] \"TGATemp1DutyCycle_Avg\"   \"TGATemp2DutyCycle_Avg\"   #>  [33] \"SampleFlow_Avg\"          \"ExcessFlow_Avg\"          #>  [35] \"SamplePress_Avg\"         \"BypassPress_Avg\"         #>  [37] \"SampleP_control_Avg\"     \"BypassP_control_Avg\"     #>  [39] \"TGAPress_control_Avg\"    \"panel_tmpr_Avg\"          #>  [41] \"batt_volt_Avg\"           \"buff_depth_Max\"          #>  [43] \"Conc12C_Std\"             \"Conc13C_Std\"             #>  [45] \"TGAStatus_Std\"           \"TGAPressure_Std\"         #>  [47] \"LaserTemp_Std\"           \"DCCurrentA_Std\"          #>  [49] \"DCCurrentB_Std\"          \"TGAAnalog1_Std\"          #>  [51] \"TGATemp1_Std\"            \"TGATemp2_Std\"            #>  [53] \"LaserCooler_Std\"         \"RefDetSigA_Std\"          #>  [55] \"RefDetSigB_Std\"          \"RefDetTransA_Std\"        #>  [57] \"RefDetTransB_Std\"        \"RefDetTemp_Std\"          #>  [59] \"RefDetCooler_Std\"        \"RefDetGainOffset_Std\"    #>  [61] \"SmpDetSigA_Std\"          \"SmpDetSigB_Std\"          #>  [63] \"SmpDetTransA_Std\"        \"SmpDetTransB_Std\"        #>  [65] \"SmpDetTemp_Std\"          \"SmpDetCooler_Std\"        #>  [67] \"SmpDetGainOffset_Std\"    \"TGATemp1DutyCycle_Std\"   #>  [69] \"TGATemp2DutyCycle_Std\"   \"SampleFlow_Std\"          #>  [71] \"ExcessFlow_Std\"          \"SamplePress_Std\"         #>  [73] \"BypassPress_Std\"         \"SampleP_control_Std\"     #>  [75] \"BypassP_control_Std\"     \"TGAPress_control_Std\"    #>  [77] \"panel_tmpr_Std\"          \"batt_volt_Std\"           #>  [79] \"Li64Match_Avg(1)\"        \"Li64Match_Avg(2)\"        #>  [81] \"Li64Tmpr_Avg(1)\"         \"Li64Tmpr_Avg(2)\"         #>  [83] \"Li64Heat_Avg(1)\"         \"Li64Heat_Avg(2)\"         #>  [85] \"_Mix_diag_system_Avg\"    \"_Mix_ExcessZeroFlow_Avg\" #>  [87] \"_Mix_ExcessMixFlow_Avg\"  \"_Mix_CO2Press_Avg\"       #>  [89] \"_Mix_ZeroPress_Avg\"      \"_Mix_CO2P_control_Avg\"   #>  [91] \"_Mix_ZeroP_control_Avg\"  \"_Mix_MixTmpr1_Avg\"       #>  [93] \"_Mix_MixTmpr2_Avg\"       \"_Mix_MixHeat1_Avg\"       #>  [95] \"_Mix_MixHeat2_Avg\"       \"_Mix_panel_tmpr_Avg\"     #>  [97] \"_Mix_batt_volt_Avg\"      \"file_name\"               #>  [99] \"cycle_num\"               \"elapsed_time\"            #> [101] \"zero_corrected_12c\"      \"zero_corrected_13c\"      #> [103] \"calibrated_12c\"          \"calibrated_13c\"          #> [105] \"total_CO2_raw\"           \"total_CO2\"               #> [107] \"delta_C13_raw\"           \"delta_C13\"                # Make a plot of the raw and calibrated 13C signals across all the TDL cycles. # Note that the calibrated signal from valve 20 is always exactly zero, since # this is the line from the nitrogen tank. The calibrated signal from valve 2 is # also constant since this is the line from the NOAA tank whose concentration is # known. lattice::xyplot(   Conc13C_Avg + calibrated_13c ~ cycle_num | factor(valve_number),   data = processed_tdl$tdl_data$main_data,   type = 'l',   auto = TRUE,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('13C concentration (', processed_tdl$tdl_data$units$Conc13C_Avg, ')') )   # Make a plot of 12C gain factor against elapsed time lattice::xyplot(   gain_12CO2 ~ elapsed_time,   data = processed_tdl$calibration_12CO2$main_data,   type = 'b',   pch = 16,   grid = TRUE,   xlab = paste0('Elapsed time (', processed_tdl$calibration_12CO2$units$elapsed_time, ')'),   ylab = paste0('12C gain factor (', processed_tdl$calibration_12CO2$units$gain_12CO2, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/process_tdl_cycle_polynomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Process TDL cycles using a polynomial correction method — process_tdl_cycle_polynomial","title":"Process TDL cycles using a polynomial correction method — process_tdl_cycle_polynomial","text":"Uses 12C 13C signal calibration lines tunable diode   laser (TDL) determine correction factors apply sample   lines. Applicable system two reference tanks whose 12C   13C concentrations known beforehand.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/process_tdl_cycle_polynomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process TDL cycles using a polynomial correction method — process_tdl_cycle_polynomial","text":"","code":"process_tdl_cycle_polynomial(     tdl_cycle,     poly_order,     reference_tanks,     reference_tank_time_points = NA,     valve_column_name = 'valve_number',     raw_12c_colname = 'Conc12C_Avg',     raw_13c_colname = 'Conc13C_Avg'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/process_tdl_cycle_polynomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process TDL cycles using a polynomial correction method — process_tdl_cycle_polynomial","text":"tdl_cycle exdf object representing one cycle TDL data. poly_order order polynomial fit, 1 indicates linear fit, 2     indicates quadratic fit, etc. argument passed     stats::poly fitting procedure. reference_tanks list element list three named elements: valve,     conc_12C, conc_13C. valve indicate valve     number reference tank, two elements indicate     known concentrations 12C 13C tank. reference_tank_time_points Either NA list element list three named     elements: valve, start, end. valve     indicate valve number reference tank, two elements     indicate first last time points measurements     valve averaged. order valves must     reference_tanks input argument. valve_column_name name column tdl_cycle contains valve number. raw_12c_colname name column tdl_cycle contains 12C signal. raw_13c_colname name column tdl_cycle contains 13C signal.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/process_tdl_cycle_polynomial.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process TDL cycles using a polynomial correction method — process_tdl_cycle_polynomial","text":"function applies simple correction measured values 12C   13C. correction based fact reference tank   true concentration (known beforehand) measured concentration   (TDL) isotope. Using information, possible   perform polynomial fit true vs. measured concentrations; words,   possible identify polynomial function determines true   concentrations measured ones. function can applied tanks   whose concentration known beforehand; case, provides   estimate true concentration, otherwise referred calibrated   value. making dynamic TDL measurements, concentrations   reference valves may logged multiple time points. case,   typical take average value subset .   process_tdl_cycle_polynomial can handle situation   reference_tank_time_points input argument NA. function assumes tdl_cycle represents single TDL   measurement cycle. process multiple cycles , function often   used along .exdf consolidate.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/process_tdl_cycle_polynomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process TDL cycles using a polynomial correction method — process_tdl_cycle_polynomial","text":"list two elements: tdl_data: exdf object containing original content           tdl_cycle several new columns:           'calibrated_12c', 'calibrated_13c', 'total_CO2',           'delta_C13'. calibration_parameters: exdf object describing           fitted polynomial coefficients.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/process_tdl_cycle_polynomial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process TDL cycles using a polynomial correction method — process_tdl_cycle_polynomial","text":"","code":"# Example 1: An example of a `reference_tank_time_points` list for a situation # where there are just two reference valves (1 and 3) reference_tank_time_points <- list(   list(valve = 1, start = 101, end = 300), # Take an average of time points 101 - 300 for valve 1   list(valve = 3, start = 201, end = 300)  # Take an average of time points 201 - 300 for valve 3 )  # Example2 : reading a TDL file that is included with the PhotoGEA package, # identifying its measurement cycles, and then processing them. tdl_file <- read_gasex_file(   PhotoGEA_example_file_path('tdl_sampling_1.dat'),   'TIMESTAMP' )  # This is a large file; for this example, we will truncate to just the first # 200 rows so it runs faster tdl_file <- tdl_file[seq_len(200), , TRUE]  # Identify TDL cycles tdl_file <- identify_tdl_cycles(   tdl_file,   valve_column_name = 'valve_number',   cycle_start_valve = 20,   expected_cycle_length_minutes = 2.7,   expected_cycle_num_valves = 9,   timestamp_colname = 'TIMESTAMP' )  # Process TDL cycles; note that the reference tank concentrations used in this # example are not accurate, so the results are not meaningful processed_tdl <- consolidate(by(   tdl_file,   tdl_file[, 'cycle_num'],   process_tdl_cycle_polynomial,   poly_order = 1,   reference_tanks = list(     list(valve = 23, conc_12C = 70.37507124, conc_13C = 0.754892652),     list(valve = 26, conc_12C = 491.1854149, conc_13C = 5.269599965)   ) ))  # The output is a list of two exdf objects names(processed_tdl) #> [1] \"tdl_data\"               \"calibration_parameters\"  # The calibration parameters include the coefficients of the polynomial fit for # each cycle colnames(processed_tdl$calibration_parameters) #> [1] \"cycle_num\"         \"elapsed_time\"      \"n_reference_tanks\" #> [4] \"a_12C_0\"           \"a_12C_1\"           \"a_13C_0\"           #> [7] \"a_13C_1\"            # The processed TDL data includes new columns for the calibrated CO2 # concentrations colnames(processed_tdl$tdl_data) #>   [1] \"TIMESTAMP\"               \"RECORD\"                  #>   [3] \"valve_number\"            \"diag_system_Avg\"         #>   [5] \"NumSamples\"              \"Conc12C_Avg\"             #>   [7] \"Conc13C_Avg\"             \"TGAStatus_Avg\"           #>   [9] \"TGAPressure_Avg\"         \"LaserTemp_Avg\"           #>  [11] \"DCCurrentA_Avg\"          \"DCCurrentB_Avg\"          #>  [13] \"TGAAnalog1_Avg\"          \"TGATemp1_Avg\"            #>  [15] \"TGATemp2_Avg\"            \"LaserCooler_Avg\"         #>  [17] \"RefDetSigA_Avg\"          \"RefDetSigB_Avg\"          #>  [19] \"RefDetTransA_Avg\"        \"RefDetTransB_Avg\"        #>  [21] \"RefDetTemp_Avg\"          \"RefDetCooler_Avg\"        #>  [23] \"RefDetGainOffset_Avg\"    \"SmpDetSigA_Avg\"          #>  [25] \"SmpDetSigB_Avg\"          \"SmpDetTransA_Avg\"        #>  [27] \"SmpDetTransB_Avg\"        \"SmpDetTemp_Avg\"          #>  [29] \"SmpDetCooler_Avg\"        \"SmpDetGainOffset_Avg\"    #>  [31] \"TGATemp1DutyCycle_Avg\"   \"TGATemp2DutyCycle_Avg\"   #>  [33] \"SampleFlow_Avg\"          \"ExcessFlow_Avg\"          #>  [35] \"SamplePress_Avg\"         \"BypassPress_Avg\"         #>  [37] \"SampleP_control_Avg\"     \"BypassP_control_Avg\"     #>  [39] \"TGAPress_control_Avg\"    \"panel_tmpr_Avg\"          #>  [41] \"batt_volt_Avg\"           \"buff_depth_Max\"          #>  [43] \"Conc12C_Std\"             \"Conc13C_Std\"             #>  [45] \"TGAStatus_Std\"           \"TGAPressure_Std\"         #>  [47] \"LaserTemp_Std\"           \"DCCurrentA_Std\"          #>  [49] \"DCCurrentB_Std\"          \"TGAAnalog1_Std\"          #>  [51] \"TGATemp1_Std\"            \"TGATemp2_Std\"            #>  [53] \"LaserCooler_Std\"         \"RefDetSigA_Std\"          #>  [55] \"RefDetSigB_Std\"          \"RefDetTransA_Std\"        #>  [57] \"RefDetTransB_Std\"        \"RefDetTemp_Std\"          #>  [59] \"RefDetCooler_Std\"        \"RefDetGainOffset_Std\"    #>  [61] \"SmpDetSigA_Std\"          \"SmpDetSigB_Std\"          #>  [63] \"SmpDetTransA_Std\"        \"SmpDetTransB_Std\"        #>  [65] \"SmpDetTemp_Std\"          \"SmpDetCooler_Std\"        #>  [67] \"SmpDetGainOffset_Std\"    \"TGATemp1DutyCycle_Std\"   #>  [69] \"TGATemp2DutyCycle_Std\"   \"SampleFlow_Std\"          #>  [71] \"ExcessFlow_Std\"          \"SamplePress_Std\"         #>  [73] \"BypassPress_Std\"         \"SampleP_control_Std\"     #>  [75] \"BypassP_control_Std\"     \"TGAPress_control_Std\"    #>  [77] \"panel_tmpr_Std\"          \"batt_volt_Std\"           #>  [79] \"Li64Match_Avg(1)\"        \"Li64Match_Avg(2)\"        #>  [81] \"Li64Tmpr_Avg(1)\"         \"Li64Tmpr_Avg(2)\"         #>  [83] \"Li64Heat_Avg(1)\"         \"Li64Heat_Avg(2)\"         #>  [85] \"_Mix_diag_system_Avg\"    \"_Mix_ExcessZeroFlow_Avg\" #>  [87] \"_Mix_ExcessMixFlow_Avg\"  \"_Mix_CO2Press_Avg\"       #>  [89] \"_Mix_ZeroPress_Avg\"      \"_Mix_CO2P_control_Avg\"   #>  [91] \"_Mix_ZeroP_control_Avg\"  \"_Mix_MixTmpr1_Avg\"       #>  [93] \"_Mix_MixTmpr2_Avg\"       \"_Mix_MixHeat1_Avg\"       #>  [95] \"_Mix_MixHeat2_Avg\"       \"_Mix_panel_tmpr_Avg\"     #>  [97] \"_Mix_batt_volt_Avg\"      \"file_name\"               #>  [99] \"cycle_num\"               \"elapsed_time\"            #> [101] \"calibrated_12c\"          \"calibrated_13c\"          #> [103] \"total_CO2_raw\"           \"total_CO2\"               #> [105] \"delta_C13_raw\"           \"delta_C13\""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_cr3000.html","id":null,"dir":"Reference","previous_headings":"","what":"Reading a CR3000 data file — read_cr3000","title":"Reading a CR3000 data file — read_cr3000","text":"Tool reading output files created Campbell Scientific CR3000 data   loggers storing contents exdf objects.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_cr3000.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reading a CR3000 data file — read_cr3000","text":"","code":"read_cr3000(     file_name,     rows_to_skip = 1,     variable_name_row = 2,     variable_unit_row = 3,     data_start_row = 5,     ...   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_cr3000.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reading a CR3000 data file — read_cr3000","text":"file_name relative absolute path .dat file containing TDL data. rows_to_skip number rows skip beginning file; first row     TDL file typically fewer columns others, causes problems     storing table. variable_name_row row number TDL file containing names variables     (RECORD, Conc12C_Avg, etc). variable_unit_row row number TDL file containing units variables     (ppm, V, etc). data_start_row first row number table containing measured data. ... Additional arguments passed read.csv.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_cr3000.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reading a CR3000 data file — read_cr3000","text":"exdf object fully includes data CR3000 output   file. addition elements described documentation   read_gasex_file, following \"extra\" elements also   included: rows_to_skip: copy input argument name variable_name_row: copy input argument           name. variable_unit_row: copy input argument           name. data_start_row: copy input argument           name.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_cr3000.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reading a CR3000 data file — read_cr3000","text":"","code":"# Example: reading a TDL file that is included with the PhotoGEA package. tdl_file <- read_cr3000(   PhotoGEA_example_file_path('tdl_sampling_1.dat') )  tdl_file$file_name # A record of where the data came from #> NULL str(tdl_file)      # View the contents of the exdf object's main_data #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':\t922 obs. of  97 variables: #>  $ TIMESTAMP [read_cr3000] (TS)            : chr  \"2022-07-12 06:12:43\" \"2022-07-12 06:13:03\" \"2022-07-12 06:13:23\" \"2022-07-12 06:13:43\" ... #>  $ RECORD [read_cr3000] (RN)               : num  0 1 2 3 4 5 6 7 8 9 ... #>  $ valve_number [read_cr3000] ()           : num  20 21 23 26 2 10 11 12 13 20 ... #>  $ diag_system_Avg [read_cr3000] ()        : num  128 128 128 132 128 128 128 128 128 128 ... #>  $ NumSamples [read_cr3000] ()             : num  100 100 100 100 100 100 100 100 100 100 ... #>  $ Conc12C_Avg [read_cr3000] (ppm)         : num  2.9 68.8 311.9 1022.5 294.3 ... #>  $ Conc13C_Avg [read_cr3000] (ppm)         : num  0.132 0.847 3.481 11.114 3.299 ... #>  $ TGAStatus_Avg [read_cr3000] ()          : num  96 96 96 96 96 96 96 96 96 96 ... #>  $ TGAPressure_Avg [read_cr3000] (mb)      : num  30 30 30 30 30 ... #>  $ LaserTemp_Avg [read_cr3000] (degC)      : num  -4 -4 -4 -4 -4 ... #>  $ DCCurrentA_Avg [read_cr3000] (mA)       : num  50.4 50.4 50.4 50.4 50.4 ... #>  $ DCCurrentB_Avg [read_cr3000] (mA)       : num  38.9 38.9 38.9 38.9 38.9 ... #>  $ TGAAnalog1_Avg [read_cr3000] (V)        : num  0.0244 0.0244 0.0244 0.0244 0.0244 ... #>  $ TGATemp1_Avg [read_cr3000] (degC)       : num  30 30 30 30 30 ... #>  $ TGATemp2_Avg [read_cr3000] (degC)       : num  30 30 30 30 30 ... #>  $ LaserCooler_Avg [read_cr3000] (V)       : num  2.02 2.02 2.02 2.02 2.02 ... #>  $ RefDetSigA_Avg [read_cr3000] (mV)       : num  2.48 2.48 2.48 2.48 2.48 ... #>  $ RefDetSigB_Avg [read_cr3000] (mV)       : num  0.503 0.503 0.502 0.502 0.502 ... #>  $ RefDetTransA_Avg [read_cr3000] (%)      : num  41.2 41.2 41.1 41.1 41.1 ... #>  $ RefDetTransB_Avg [read_cr3000] (%)      : num  54.8 54.8 54.7 54.7 54.7 ... #>  $ RefDetTemp_Avg [read_cr3000] (degC)     : num  -35 -35 -35 -35 -35 ... #>  $ RefDetCooler_Avg [read_cr3000] ()       : num  1461 1461 1461 1461 1461 ... #>  $ RefDetGainOffset_Avg [read_cr3000] ()   : num  8217 8217 8217 8217 8217 ... #>  $ SmpDetSigA_Avg [read_cr3000] (mV)       : num  57.8 56.5 51.6 39.8 52 ... #>  $ SmpDetSigB_Avg [read_cr3000] (mV)       : num  10.08 9.88 9.17 7.38 9.22 ... #>  $ SmpDetTransA_Avg [read_cr3000] (%)      : num  99.8 97.4 89.2 68.8 89.8 ... #>  $ SmpDetTransB_Avg [read_cr3000] (%)      : num  114.4 112.2 104.2 84.2 104.8 ... #>  $ SmpDetTemp_Avg [read_cr3000] (degC)     : num  -39 -39 -39 -39 -39 ... #>  $ SmpDetCooler_Avg [read_cr3000] ()       : num  1449 1449 1449 1449 1449 ... #>  $ SmpDetGainOffset_Avg [read_cr3000] ()   : num  8456 8456 8456 8456 8456 ... #>  $ TGATemp1DutyCycle_Avg [read_cr3000] ()  : num  0.13 0.121 0.132 0.129 0.138 ... #>  $ TGATemp2DutyCycle_Avg [read_cr3000] ()  : num  0.0601 0.077 0.0677 0.0676 0.0649 ... #>  $ SampleFlow_Avg [read_cr3000] (ml_min)   : num  167 167 167 164 162 ... #>  $ ExcessFlow_Avg [read_cr3000] (ml_min)   : num  95.77 105.457 140.852 0.123 53.341 ... #>  $ SamplePress_Avg [read_cr3000] (mb)      : num  400 400 400 396 400 ... #>  $ BypassPress_Avg [read_cr3000] (mb)      : num  400 400 400 400 400 ... #>  $ SampleP_control_Avg [read_cr3000] ()    : num  0.4 0.404 0.414 0.2 0.385 ... #>  $ BypassP_control_Avg [read_cr3000] ()    : num  0.477 0.475 0.471 0.484 0.496 ... #>  $ TGAPress_control_Avg [read_cr3000] ()   : num  0.528 0.529 0.53 0.53 0.53 ... #>  $ panel_tmpr_Avg [read_cr3000] (degC)     : num  24.7 24.7 24.7 24.7 24.7 ... #>  $ batt_volt_Avg [read_cr3000] (V)         : num  11.8 11.8 11.8 11.8 11.8 ... #>  $ buff_depth_Max [read_cr3000] ()         : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ Conc12C_Std [read_cr3000] (ppm)         : num  0.5244 0.0946 0.2025 1.1064 1.5535 ... #>  $ Conc13C_Std [read_cr3000] (ppm)         : num  0.00797 0.00637 0.00849 0.02317 0.018 ... #>  $ TGAStatus_Std [read_cr3000] ()          : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ TGAPressure_Std [read_cr3000] (mb)      : num  0.0101 0.0105 0.0115 0.0102 0.0112 ... #>  $ LaserTemp_Std [read_cr3000] (degC)      : num  0.000244 0.000289 0.000272 0.000287 0.00025 ... #>  $ DCCurrentA_Std [read_cr3000] (mA)       : num  0.000454 0.0006 0.000338 0.000492 0.000503 ... #>  $ DCCurrentB_Std [read_cr3000] (mA)       : num  0.000677 0.000844 0.00061 0.000753 0.000625 ... #>  $ TGAAnalog1_Std [read_cr3000] (V)        : num  1.56e-05 1.39e-05 1.31e-05 1.30e-05 1.31e-05 ... #>  $ TGATemp1_Std [read_cr3000] (degC)       : num  0.000994 0.00121 0.003558 0.001737 0.001128 ... #>  $ TGATemp2_Std [read_cr3000] (degC)       : num  0.00215 0.00137 0.00141 0.00126 0.00227 ... #>  $ LaserCooler_Std [read_cr3000] (V)       : num  0.000293 0.000347 0.000326 0.000345 0.000301 ... #>  $ RefDetSigA_Std [read_cr3000] (mV)       : num  0.00155 0.00185 0.00155 0.00199 0.00154 ... #>  $ RefDetSigB_Std [read_cr3000] (mV)       : num  0.00169 0.00148 0.00145 0.0015 0.00188 ... #>  $ RefDetTransA_Std [read_cr3000] (%)      : num  0.0298 0.0354 0.0268 0.0366 0.0293 ... #>  $ RefDetTransB_Std [read_cr3000] (%)      : num  0.255 0.233 0.223 0.226 0.258 ... #>  $ RefDetTemp_Std [read_cr3000] (degC)     : num  0.00364 0.0032 0.00361 0.00365 0.00315 ... #>  $ RefDetCooler_Std [read_cr3000] ()       : num  0.354 0.316 0.356 0.357 0.299 ... #>  $ RefDetGainOffset_Std [read_cr3000] ()   : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ SmpDetSigA_Std [read_cr3000] (mV)       : num  0.01137 0.00519 0.00502 0.01354 0.02786 ... #>  $ SmpDetSigB_Std [read_cr3000] (mV)       : num  0.00497 0.00576 0.00366 0.00388 0.00501 ... #>  $ SmpDetTransA_Std [read_cr3000] (%)      : num  0.0214 0.00781 0.00875 0.02549 0.05127 ... #>  $ SmpDetTransB_Std [read_cr3000] (%)      : num  0.0631 0.0441 0.0564 0.0485 0.0763 ... #>  $ SmpDetTemp_Std [read_cr3000] (degC)     : num  0.00136 0.00128 0.00116 0.00148 0.00128 ... #>  $ SmpDetCooler_Std [read_cr3000] ()       : num  0.1147 0.1077 0.1009 0.1203 0.0931 ... #>  $ SmpDetGainOffset_Std [read_cr3000] ()   : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ TGATemp1DutyCycle_Std [read_cr3000] ()  : num  0.00923 0.00826 0.0119 0.00883 0.00886 ... #>  $ TGATemp2DutyCycle_Std [read_cr3000] ()  : num  0.00837 0.00978 0.00828 0.00849 0.00862 ... #>  $ SampleFlow_Std [read_cr3000] (ml_min)   : num  0.1467 0.2004 0.1747 0.0871 0.1594 ... #>  $ ExcessFlow_Std [read_cr3000] (ml_min)   : num  0.10026 0.11171 0.1207 0.00958 0.08248 ... #>  $ SamplePress_Std [read_cr3000] (mb)      : num  0.0214 0.0234 0.0199 0.0935 0.0242 ... #>  $ BypassPress_Std [read_cr3000] (mb)      : num  0.1431 0.0428 0.1358 0.4229 0.3114 ... #>  $ SampleP_control_Std [read_cr3000] ()    : num  9.05e-05 8.99e-05 7.08e-05 0.00 2.21e-04 ... #>  $ BypassP_control_Std [read_cr3000] ()    : num  1.85e-04 5.47e-05 1.52e-04 4.63e-04 3.60e-04 ... #>  $ TGAPress_control_Std [read_cr3000] ()   : num  0.000536 0.000541 0.000592 0.000525 0.000577 ... #>  $ panel_tmpr_Std [read_cr3000] (degC)     : num  0.00641 0.00222 0.00214 0.0023 0.00224 ... #>  $ batt_volt_Std [read_cr3000] (V)         : num  0.00241 0.00235 0.00224 0.00218 0.00232 ... #>  $ Li64Match_Avg(1) [read_cr3000] ()       : num  1 1 1 1 1 1 1 1 1 1 ... #>  $ Li64Match_Avg(2) [read_cr3000] ()       : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ Li64Tmpr_Avg(1) [read_cr3000] (degC)    : num  -79.2 -77.6 -81.6 -79.4 -79.7 ... #>  $ Li64Tmpr_Avg(2) [read_cr3000] (degC)    : num  NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN ... #>  $ Li64Heat_Avg(1) [read_cr3000] ()        : num  1 1 1 1 1 1 1 1 1 1 ... #>  $ Li64Heat_Avg(2) [read_cr3000] ()        : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ _Mix_diag_system_Avg [read_cr3000] ()   : num  NaN 960 960 960 960 960 960 960 960 960 ... #>  $ _Mix_ExcessZeroFlow_Avg [read_cr3000] (): num  NaN 0.42 0.379 0.441 0.411 ... #>  $ _Mix_ExcessMixFlow_Avg [read_cr3000] () : num  NaN 159 158 158 158 ... #>  $ _Mix_CO2Press_Avg [read_cr3000] ()      : num  NaN 11.4 11.4 11.4 11.4 ... #>  $ _Mix_ZeroPress_Avg [read_cr3000] ()     : num  NaN 16.5 16.5 16.5 16.5 ... #>  $ _Mix_CO2P_control_Avg [read_cr3000] ()  : num  NaN 0 0 0 0 0 0 0 0 0 ... #>  $ _Mix_ZeroP_control_Avg [read_cr3000] () : num  NaN 0 0 0 0 0 0 0 0 0 ... #>  $ _Mix_MixTmpr1_Avg [read_cr3000] ()      : num  NaN 32 32 32 32 ... #>  $ _Mix_MixTmpr2_Avg [read_cr3000] ()      : num  NaN 31.7 31.7 31.7 31.7 ... #>  $ _Mix_MixHeat1_Avg [read_cr3000] ()      : num  NaN 1 1 1 1 1 1 1 1 1 ... #>  $ _Mix_MixHeat2_Avg [read_cr3000] ()      : num  NaN 1 1 1 1 1 1 1 1 1 ... #>  $ _Mix_panel_tmpr_Avg [read_cr3000] ()    : num  NaN 24.1 24.1 24.1 24.1 ... #>  $ _Mix_batt_volt_Avg [read_cr3000] ()     : num  NaN 9.62 9.62 9.62 9.62 ..."},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_gasex_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Reading a gas exchange log file — read_gasex_file","title":"Reading a gas exchange log file — read_gasex_file","text":"Tool reading log files created gas exchange measurement instruments   storing contents exdf objects.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_gasex_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reading a gas exchange log file — read_gasex_file","text":"","code":"read_gasex_file(     file_name,     timestamp_colname = NA,     posix_options = list(),     file_type = 'AUTO',     instrument_type = 'AUTO',     standardize_columns = TRUE,     ...   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_gasex_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reading a gas exchange log file — read_gasex_file","text":"file_name relative absolute path log file containing gas exchange data. timestamp_colname name column contains timestamp measurement;     typically, something like 'time' 'TIMESTAMP'. posix_options Optional arguments pass .POSIXlt; must formatted     list named elements. See details information. file_type type file loaded. file_type 'AUTO',     file type automatically determined extension     file_name. supported options 'plaintext',     'Excel', 'data'. instrument_type type measurement instrument produced log file.     instrument_type 'AUTO', instrument type     determined file_type. supported options     'Licor LI-6800' 'CR3000'. standardize_columns logical value indicating whether standardize columns; see details     . ... Additional arguments passed specialized reading functions; see     details.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_gasex_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reading a gas exchange log file — read_gasex_file","text":"log files contain Unicode characters column names units,   characters represented properly R. address , Unicode   characters replaced reasonable alternatives; example,   character capital Greek letter delta replaced word   Delta. replacement rules stored data frame can   accessed via PhotoGEA:::UNICODE_REPLACEMENTS, information can   found source code (R/unicode_replacements.R). Sometimes useful \"standardize\" names, units, categories   columns instrument log files. can helpful several situations: instrument may consistent name column;           example, Licor LI-6800s may may PhiPs2 PhiPS2           column depending version operating system running           machine. instrument may specify units column; example,           Licor LI-6800s specify PhiPS2 units           dimensionless. instrument may use different names different units another           instrument measured quantity. deal situations, possible \"standardize\" column   names, units, categories reading instrument file. list   definitions standardizations can accessed R session   typing View(PhotoGEA:::gasex_column_conversions). reading log file, can useful identify timestamp column   values can properly interpreted POSIXlt objects.   timestamp_colname NA, conversion skipped.   default, read_gasex_file calls .POSIXlt   origin = '1970-01-01' tz = ''. options,   numeric timestamps (1692386305.5) interpreted   number seconds since January 1, 1970 (UNIX standard) time   expressed using local system time. works well many situations.   However, log file created different time zone local   one, may necessary specify time zone. can done via   posix_options argument. example, interpret timestamp   time US Central time, set posix_options = list(tz = 'US/Central').   may necessary using pair_gasex_and_tdl match   timestamps different log files. automatically determining file type extension, following   rules used: .xlsx extension corresponds file_type = 'Excel'. .dat extension corresponds file_type = 'data'. file extension corresponds file_type =           'plaintext'. automatically determining instrument type file type,   following rules used: File types 'Excel' 'plaintext' correspond           instrument_type = 'Licor LI-6800'. file type 'data' corresponds instrument_type =           'CR3000'. Internally, function calls one several (non-exported) functions   depending values instrument_type file_type: read_licor_6800_plaintext (instrument_type =           'LI-6800' file_type = 'plaintext') read_licor_6800_Excel (instrument_type =           'LI-6800' file_type = 'Excel') read_cr3000 (instrument_type =           'CR3000' file_type = 'data') additional arguments specified via ... passed   functions. IMPORTANT NOTE LICOR EXCEL FILES: default, Licor Excel files   \"calculate\" formula values. causes problem reading   R, since data entry determined formula read 0. fix   issue Licor Excel file, open Excel, go   Formulas menu, choose Calculate Now. (Alternatively, press   F9.) save file close . See read_licor_6800_Excel   details.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_gasex_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reading a gas exchange log file — read_gasex_file","text":"exdf object fully includes data log file.   addition required elements exdf object, following   \"extra\" elements also included: file_name: copy input argument name. instrument_type: copy input argument           name. file_type: copy input argument name,           unless set 'AUTO'; case, file type           determined file's extension. timestamp_colname: copy input argument           name, unless set 'AUTO'; case, instrument           type determined file type.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_gasex_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reading a gas exchange log file — read_gasex_file","text":"","code":"# Example: Eeading a Licor Excel file that is included with the PhotoGEA # package. Here we specify 'time' as the name of the timestamp column. licor_file <- read_gasex_file(   PhotoGEA_example_file_path('ball_berry_1.xlsx'),   'time' )  licor_file$file_name     # A record of where the data came from #> [1] \"/home/runner/work/_temp/Library/PhotoGEA/extdata/ball_berry_1.xlsx\" str(licor_file)          # View the contents of the exdf object's main_data #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':\t28 obs. of  243 variables: #>  $ obs [SysObs] (NA)                                  : num  1 2 3 4 5 6 7 8 9 10 ... #>  $ time [SysObs] (s)                                  : POSIXlt, format: \"2021-08-23 14:30:48\" \"2021-08-23 14:38:15\" ... #>  $ elapsed [SysObs] (s)                               : num  0 448 803 1226 1486 ... #>  $ date [SysObs] (NA)                                 : chr  \"20210823 09:30:48\" \"20210823 09:38:15\" \"20210823 09:44:11\" \"20210823 09:51:14\" ... #>  $ hhmmss [SysObs] (NA)                               : chr  \"09:30:48\" \"09:38:15\" \"09:44:11\" \"09:51:14\" ... #>  $ averaging [SysObs] (s)                             : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ species [UserDefCon] (NA)                          : chr  \"soybean\" \"soybean\" \"soybean\" \"soybean\" ... #>  $ plot [UserDefCon] (NA)                             : chr  \"1a\" \"1a\" \"1a\" \"1a\" ... #>  $ instrument [UserDefCon] (NA)                       : chr  \"ripe4\" \"ripe4\" \"ripe4\" \"ripe4\" ... #>  $ bb index [UserDefVar] (NA)                         : num  5.98 3.91 4.34 3.92 2.8 ... #>  $ TIME [GasEx] (s)                                   : num  1.63e+09 1.63e+09 1.63e+09 1.63e+09 1.63e+09 ... #>  $ E [GasEx] (mol m^(-2) s^(-1))                      : num  0.00532 0.00378 0.00327 0.00263 0.00255 ... #>  $ Emm [GasEx] (mmol m^(-2) s^(-1))                   : num  5.32 3.78 3.27 2.63 2.55 ... #>  $ A [GasEx] (micromol m^(-2) s^(-1))                 : num  35.4 23 25.4 23.3 16.6 ... #>  $ Ca [GasEx] (micromol mol^(-1))                     : num  415 415 415 415 415 ... #>  $ Ci [GasEx] (micromol mol^(-1))                     : num  252 281 257 232 279 ... #>  $ Pci [GasEx] (Pa)                                   : num  25 27.9 25.5 23 27.7 ... #>  $ Pca [GasEx] (Pa)                                   : num  41.2 41.2 41.2 41.2 41.2 ... #>  $ gsw [GasEx] (mol m^(-2) s^(-1))                    : num  0.388 0.304 0.28 0.218 0.212 ... #>  $ gbw [GasEx] (mol m^(-2) s^(-1))                    : num  2.92 2.91 2.91 2.92 2.91 ... #>  $ gtw [GasEx] (mol m^(-2) s^(-1))                    : num  0.362 0.288 0.266 0.209 0.204 ... #>  $ gtc [GasEx] (mol m^(-2) s^(-1))                    : num  0.228 0.181 0.168 0.132 0.128 ... #>  $ Rabs [GasEx] (W m^(-2))                            : num  321.5 177.8 130 106 82.1 ... #>  $ TleafEB [GasEx] (degrees C)                        : num  31.2 30.5 30 29.9 29.8 ... #>  $ TleafCnd [GasEx] (degrees C)                       : num  31 30.3 29.8 29.6 29.6 ... #>  $ SVPleaf [GasEx] (kPa)                              : num  4.52 4.33 4.21 4.17 4.17 ... #>  $ RHcham [GasEx] (%)                                 : num  70.1 70.6 70.8 69.9 69.9 ... #>  $ VPcham [GasEx] (kPa)                               : num  3.11 3.08 3.03 2.97 2.97 ... #>  $ SVPcham [GasEx] (kPa)                              : num  4.44 4.36 4.28 4.25 4.25 ... #>  $ VPDleaf [GasEx] (kPa)                              : num  1.4 1.25 1.18 1.2 1.2 ... #>  $ LatHFlux [GasEx] (W m^(-2))                        : num  -234 -166 -144 -116 -113 ... #>  $ SenHFlux [GasEx] (W m^(-2))                        : num  -47.9 18 48.1 52.3 54.3 ... #>  $ NetTherm [GasEx] (W m^(-2))                        : num  -3.68 1.38 3.67 3.98 4.14 ... #>  $ EBSum [GasEx] (W m^(-2))                           : num  35.5 30.7 37.4 46.5 28 ... #>  $ Leak [Leak] (micromol s^(-1))                      : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ LeakPct [Leak] (%)                                 : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ CorrFact [Leak] (NA)                               : num  1 1 1 1 1 1 1 1 1 1 ... #>  $ CorrFactPct [Leak] (%)                             : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ Fan [Leak] (micromol s^(-1))                       : num  51867 51661 51885 51967 51898 ... #>  $ DarkAdaptedID [FLR] (NA)                           : chr  \"RECT-12243-20210724-05_20_30\" \"RECT-12243-20210724-05_20_30\" \"RECT-12243-20210724-05_20_30\" \"RECT-12243-20210724-05_20_30\" ... #>  $ Qmax_d [FLR] (NA)                                  : num  10239 10239 10239 10239 10239 ... #>  $ Fo [FLR] (NA)                                      : num  302 302 302 302 302 ... #>  $ Fm [FLR] (NA)                                      : num  4052 4052 4052 4052 4052 ... #>  $ Fv/Fm [FLR] (NA)                                   : num  0.925 0.925 0.925 0.925 0.925 ... #>  $ A_dark [FLR] (micromol m^(-2) s^(-1))              : num  -0.323 -0.323 -0.323 -0.323 -0.323 ... #>  $ LightAdaptedID [FLR] (NA)                          : chr  \"MPF-13020-20210823-09_30_24\" \"MPF-13022-20210823-09_37_51\" \"MPF-13024-20210823-09_43_47\" \"MPF-13026-20210823-09_50_50\" ... #>  $ Qmax [FLR] (NA)                                    : num  10175 10195 10208 10218 10221 ... #>  $ Fs [FLR] (NA)                                      : num  813 888 927 924 873 ... #>  $ Fm' [FLR] (NA)                                     : num  1311 1931 2372 2582 2645 ... #>  $ PhiPS2 [FLR] (dimensionless)                       : num  0.38 0.54 0.609 0.642 0.67 ... #>  $ PS2/1 [FLR] (NA)                                   : num  0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ... #>  $ Qabs_fs [FLR] (micromol m^(-2) s^(-1))             : num  1681 925 673 547 421 ... #>  $ A_fs [FLR] (micromol m^(-2) s^(-1))                : num  35.4 23 25.4 23.3 16.6 ... #>  $ ETR [FLR] (micromol m^(-2) s^(-1))                 : num  319 250 205 176 141 ... #>  $ PhiCO2 [FLR] (micromol micromol^(-1))              : num  0.0212 0.0252 0.0383 0.0432 0.0402 ... #>  $ NPQ [FLR] (NA)                                     : num  2.091 1.098 0.708 0.569 0.532 ... #>  $ alt. Fo' [FLR] (NA)                                : num  261 279 287 290 291 ... #>  $ DarkPulseID [FLR] (NA)                             : chr  \"DARK-13021-20210823-09_30_32\" \"DARK-13023-20210823-09_37_59\" \"DARK-13025-20210823-09_43_55\" \"DARK-13027-20210823-09_50_58\" ... #>  $ Fmin [FLR] (NA)                                    : num  577 625 660 681 690 ... #>  $ Fo' [FLR] (NA)                                     : num  577 625 660 681 690 ... #>  $ Fv'/Fm' [FLR] (NA)                                 : num  0.56 0.676 0.722 0.736 0.739 ... #>  $ qP [FLR] (NA)                                      : num  0.679 0.799 0.844 0.872 0.906 ... #>  $ qN [FLR] (NA)                                      : num  0.789 0.619 0.495 0.436 0.418 ... #>  $ qP_Fo [FLR] (NA)                                   : num  0.493 0.641 0.698 0.727 0.757 ... #>  $ qN_Fo [FLR] (NA)                                   : num  0.731 0.566 0.448 0.392 0.375 ... #>  $ qL [FLR] (NA)                                      : num  0.482 0.562 0.6 0.643 0.716 ... #>  $ 1-qL [FLR] (NA)                                    : num  0.518 0.438 0.4 0.357 0.284 ... #>  $ Qin [LeafQ] (micromol m^(-2) s^(-1))               : num  2000 1100 800 650 500 ... #>  $ Qabs [LeafQ] (micromol m^(-2) s^(-1))              : num  1681 925 673 547 421 ... #>  $ alpha [LeafQ] (NA)                                 : num  0.841 0.841 0.841 0.842 0.842 ... #>  $ convert [LeafQ] (J/micromol)                       : num  0.161 0.162 0.162 0.163 0.164 ... #>  $ S [Const] (cm^2)                                   : num  6 6 6 6 6 6 6 6 6 6 ... #>  $ K [Const] (NA)                                     : num  0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ... #>  $ Geometry [Const] (NA)                              : chr  \"0: Broadleaf\" \"0: Broadleaf\" \"0: Broadleaf\" \"0: Broadleaf\" ... #>  $ Custom [Const] (mol m^(-2) s^(-1))                 : num  2 2 2 2 2 2 2 2 2 2 ... #>  $ TIME.1 [Meas] (s)                                  : num  1.63e+09 1.63e+09 1.63e+09 1.63e+09 1.63e+09 ... #>  $ CO2_s [Meas] (micromol mol^(-1))                   : num  415 415 415 415 415 ... #>  $ CO2_r [Meas] (micromol mol^(-1))                   : num  460 444 447 444 436 ... #>  $ H2O_s [Meas] (mmol mol^(-1))                       : num  31.4 31 30.6 29.9 29.9 ... #>  $ H2O_r [Meas] (mmol mol^(-1))                       : num  25.2 26.6 26.8 26.8 27 ... #>  $ CO2_a [Meas] (micromol mol^(-1))                   : num  423 423 423 423 423 ... #>  $ H2O_a [Meas] (mmol mol^(-1))                       : num  31.3 30.9 30.3 30 29.9 ... #>  $ Flow [Meas] (micromol s^(-1))                      : num  500 500 500 500 500 ... #>  $ Pa [Meas] (kPa)                                    : num  99.2 99.2 99.2 99.2 99.1 ... #>  $ DeltaPcham [Meas] (kPa)                            : num  0.0999 0.1002 0.0998 0.1001 0.0998 ... #>  $ Tair [Meas] (degrees C)                            : num  30.7 30.4 30.1 30 30 ... #>  $ Tleaf [Meas] (degrees C)                           : num  31 30.3 29.8 29.6 29.6 ... #>  $ Tleaf2 [Meas] (degrees C)                          : num  1000 1000 1000 1000 1000 ... #>  $ Offset [Meas] (degrees C)                          : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ Offset2 [Meas] (degrees C)                         : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ Fan_speed [Meas] (rpm)                             : num  10016 9964 9998 10009 9998 ... #>  $ Qamb_in [Meas] (micromol m^(-2) s^(-1))            : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ Qamb_out [Meas] (micromol m^(-2) s^(-1))           : num  1212 1253 1322 1350 1393 ... #>  $ DeltaCO2 [Meas2] (micromol mol^(-1))               : num  -41 -33.2 -29 -25.7 -22 ... #>  $ CO2_s_d [Meas2] (micromol mol^(-1))                : num  428 428 428 428 428 ... #>  $ CO2_r_d [Meas2] (micromol mol^(-1))                : num  468 460 456 453 449 ... #>  $ DeltaH2O [Meas2] (mmol mol^(-1))                   : num  6.11 4.18 3.51 3.12 2.91 ... #>  $ CO2_b [Meas2] (micromol mol^(-1))                  : num  456 448 444 441 437 ... #>  $ H2O_b [Meas2] (mmol mol^(-1))                      : num  25.2 26.6 26.8 26.8 27 ... #>   [list output truncated] str(licor_file$preamble) # View the Licor file's preamble data #> 'data.frame':\t1 obs. of  63 variables: #>  $ File opened : chr \"2021-08-23 09:09:04\" #>  $ Console s/n : chr \"68C-831540\" #>  $ Console ver : chr \"Bluestem v.1.5.02\" #>  $ Scripts ver : chr \"2021.03  1.5.02, Feb 2021\" #>  $ Head s/n    : chr \"68H-891540\" #>  $ Head ver    : chr \"1.4.5\" #>  $ Head cal    : chr \"{\\\"h2obspanconc1\\\": \\\"12.33\\\", \\\"h2oaspanconc1\\\": \\\"12.33\\\", \\\"oxygen\\\": \\\"21\\\", \\\"co2bspanconc2\\\": \\\"314.9\\\", \"| __truncated__ #>  $ Chamber type: chr \"6800-01A\" #>  $ Chamber s/n : chr \"MPF-651415\" #>  $ Chamber rev : chr \"0\" #>  $ Chamber cal : chr \"0\" #>  $ Fluorometer : chr \"MPF-651415\" #>  $ Flr. Version: chr \"1.4.5\" #>  $ SysConst    : chr NA #>  $ AvgTime     : chr \"4\" #>  $ Oxygen      : chr \"21\" #>  $ ChambConst  : chr NA #>  $ Chamber     : chr \"6800-01A\" #>  $ Aperture    : chr \"6 cm^2\" #>  $ blc_a       : chr \"0.57799999999999996\" #>  $ blc_b       : chr \"0.52297389999999999\" #>  $ blc_c       : chr \"3.7402519999999999E-3\" #>  $ blc_d       : chr \"-6.1979609999999997E-2\" #>  $ blc_e       : chr \"-5.6085859999999996E-3\" #>  $ blc_minS    : chr \"1\" #>  $ blc_maxS    : chr \"6\" #>  $ blc_Po      : chr \"96.9\" #>  $ LTConst     : chr NA #>  $ deltaTw     : chr \"0\" #>  $ fT1         : chr \"1\" #>  $ fT2         : chr \"0\" #>  $ fTeb        : chr \"0\" #>  $ LQConst     : chr NA #>  $ Leaf        : chr \"standard\" #>  $ Ambient     : chr \"Sun+Sky\" #>  $ abs_ambient : chr \"0.8\" #>  $ abs_redLED  : chr \"0.84\" #>  $ abs_greenLED: chr \"0.7\" #>  $ abs_blueLED : chr \"0.87\" #>  $ abs_whiteLED: chr \"0.75\" #>  $ abs_redFlr  : chr \"0.84\" #>  $ abs_blueFlr : chr \"0.87\" #>  $ k_ambient   : chr \"0.19109999999999999\" #>  $ k_redLED    : chr \"0.1512\" #>  $ k_greenLED  : chr \"0.161\" #>  $ k_blueLED   : chr \"0.22620000000000001\" #>  $ k_whiteLED  : chr \"0.1575\" #>  $ k_redFlr    : chr \"0.15959999999999999\" #>  $ k_blueFlr   : chr \"0.2175\" #>  $ QConst      : chr NA #>  $ fQ_Amb_in   : chr \"0\" #>  $ fQ_Amb_out  : chr \"0\" #>  $ fQ_HeadLS   : chr \"0\" #>  $ fQ_ConsoleLS: chr \"0\" #>  $ fQ_Flr      : chr \"1\" #>  $ LeakConst   : chr NA #>  $ fan_a       : chr \"-6276\" #>  $ fan_b       : chr \"6.6\" #>  $ fan_c       : chr \"1.7090000000000001E-5\" #>  $ fan_d       : chr \"3.11\" #>  $ Fs_meas     : chr \"2.57209 56.8345 376.092 656.102 912.922 1140.22 1323.58 1601.94\" #>  $ Fs_true     : chr \"0.140462 100.535 403.009 601.359 801.268 1002.06 1200.81 1402.44\" #>  $ leak_wt     : chr \"0\""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_licor_6800_Excel.html","id":null,"dir":"Reference","previous_headings":"","what":"Reading a Licor LI-6800 Excel log file — read_licor_6800_Excel","title":"Reading a Licor LI-6800 Excel log file — read_licor_6800_Excel","text":"Tool reading Excel log files created Licor LI-6800 instruments   storing contents exdf objects.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_licor_6800_Excel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reading a Licor LI-6800 Excel log file — read_licor_6800_Excel","text":"","code":"read_licor_6800_Excel(     file_name,     column_name = 'obs',     get_oxygen = TRUE,     check_for_zero = c('A', 'gsw'),     include_user_remark_column = TRUE,     ...   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_licor_6800_Excel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reading a Licor LI-6800 Excel log file — read_licor_6800_Excel","text":"file_name relative absolute path Excel file containing Licor data. column_name column name present log file; used identify     beginning data block file. get_oxygen logical value indicating whether get oxygen percentage     file's preamble using get_oxygen_from_preamble. check_for_zero names columns whose values zero; see     details. include_user_remark_column logical value indicating whether include user remarks column;     see details. ... Additional arguments; currently unused.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_licor_6800_Excel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reading a Licor LI-6800 Excel log file — read_licor_6800_Excel","text":"Licor LI-6800 instruments create two types log files: plain-text file   Excel file, containing information. general, Excel   files much easier modify, example, deleting rows adding new   columns. reason, helpful able read files R.   Unfortunately, base R functionality reading Excel files,   openxlsx package used. Excel log files typically two sheets called Measurements   Remarks. Measurements sheet contains main data logs,   read_licor_6800_Excel find sheet called   Measurements, send error message. , read_licor_6800_Excel looks particular data column   (column_name) order identify start data table within   contents Measurements sheet. Rows main data table   assumed part preamble (header), broken   pairs rows representing names values. \"Calculating\" formula values: default, Licor Excel files   \"calculate\" formula values. causes problem reading R,   since data entry determined formula read 0. fix   issue Licor Excel file, open Excel, go Formulas   menu, choose Calculate Now. (Alternatively, press F9.) save   file close . See articles information   issue: GitHub issue 261 openxlsx package GitHub issue 863 openxlsx2 package GitHub issue 495 readxl package read_licor_6800_Excel attempts detect issue checking   values key columns (specified check_for_zero input argument).   columns 0, error message sent.   feature can disabled setting check_for_zero = c() calling   read_licor_6800_Excel read_gasex_file. User remarks: operating Licor LI-6800, possible make   \"remark.\" remark appear Remarks sheet Excel   log file line, entry first column   HH:MM:SS time, second column contains remark text.   read_licor_6800_Excel function identifies user remarks   includes return \"extra\" element called user_remarks.   Note changing stability criteria also generate user remark   message describing new stability settings. Also note \"remarks\"   tab includes automatically generated entries, instrument   serial number; entries included \"preamble\" output   read_licor_6800_Excel. include_user_remark_column TRUE, user remarks   included main data table column called user_remark.   row table, entry user_remark column set   recent user remark. user remark system prone errors, especially since changes   stability settings recorded log files using exact format   true user remarks. general, better record metadata   measurements via user constants rather user remarks. User constants rows: operating Licor LI-6800,   possible include user constants either rows columns. general,   better include columns, read_licor_6800_Excel   function may able properly read files included   rows. Support user constant rows may added future.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_licor_6800_Excel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reading a Licor LI-6800 Excel log file — read_licor_6800_Excel","text":"exdf object fully includes data Licor Excel   file. addition elements described documentation   read_gasex_file, following \"extra\" elements also   included: preamble: data frame containing \"preamble\" (\"header\")           information file. data_row: line file column name found. user_remarks: data frame containing user remarks           file. data frame two columns timestamp value,           called remark_time remark_value, respectively.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_licor_6800_Excel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reading a Licor LI-6800 Excel log file — read_licor_6800_Excel","text":"","code":"# Example 1: Reading a Licor Excel file that is included with the PhotoGEA # package and viewing some of the \"extra\" information associated with the file licor_file <- read_licor_6800_Excel(   PhotoGEA_example_file_path('ball_berry_1.xlsx') )  str(licor_file$preamble) #> 'data.frame':\t1 obs. of  63 variables: #>  $ File opened : chr \"2021-08-23 09:09:04\" #>  $ Console s/n : chr \"68C-831540\" #>  $ Console ver : chr \"Bluestem v.1.5.02\" #>  $ Scripts ver : chr \"2021.03  1.5.02, Feb 2021\" #>  $ Head s/n    : chr \"68H-891540\" #>  $ Head ver    : chr \"1.4.5\" #>  $ Head cal    : chr \"{\\\"h2obspanconc1\\\": \\\"12.33\\\", \\\"h2oaspanconc1\\\": \\\"12.33\\\", \\\"oxygen\\\": \\\"21\\\", \\\"co2bspanconc2\\\": \\\"314.9\\\", \"| __truncated__ #>  $ Chamber type: chr \"6800-01A\" #>  $ Chamber s/n : chr \"MPF-651415\" #>  $ Chamber rev : chr \"0\" #>  $ Chamber cal : chr \"0\" #>  $ Fluorometer : chr \"MPF-651415\" #>  $ Flr. Version: chr \"1.4.5\" #>  $ SysConst    : chr NA #>  $ AvgTime     : chr \"4\" #>  $ Oxygen      : chr \"21\" #>  $ ChambConst  : chr NA #>  $ Chamber     : chr \"6800-01A\" #>  $ Aperture    : chr \"6 cm^2\" #>  $ blc_a       : chr \"0.57799999999999996\" #>  $ blc_b       : chr \"0.52297389999999999\" #>  $ blc_c       : chr \"3.7402519999999999E-3\" #>  $ blc_d       : chr \"-6.1979609999999997E-2\" #>  $ blc_e       : chr \"-5.6085859999999996E-3\" #>  $ blc_minS    : chr \"1\" #>  $ blc_maxS    : chr \"6\" #>  $ blc_Po      : chr \"96.9\" #>  $ LTConst     : chr NA #>  $ deltaTw     : chr \"0\" #>  $ fT1         : chr \"1\" #>  $ fT2         : chr \"0\" #>  $ fTeb        : chr \"0\" #>  $ LQConst     : chr NA #>  $ Leaf        : chr \"standard\" #>  $ Ambient     : chr \"Sun+Sky\" #>  $ abs_ambient : chr \"0.8\" #>  $ abs_redLED  : chr \"0.84\" #>  $ abs_greenLED: chr \"0.7\" #>  $ abs_blueLED : chr \"0.87\" #>  $ abs_whiteLED: chr \"0.75\" #>  $ abs_redFlr  : chr \"0.84\" #>  $ abs_blueFlr : chr \"0.87\" #>  $ k_ambient   : chr \"0.19109999999999999\" #>  $ k_redLED    : chr \"0.1512\" #>  $ k_greenLED  : chr \"0.161\" #>  $ k_blueLED   : chr \"0.22620000000000001\" #>  $ k_whiteLED  : chr \"0.1575\" #>  $ k_redFlr    : chr \"0.15959999999999999\" #>  $ k_blueFlr   : chr \"0.2175\" #>  $ QConst      : chr NA #>  $ fQ_Amb_in   : chr \"0\" #>  $ fQ_Amb_out  : chr \"0\" #>  $ fQ_HeadLS   : chr \"0\" #>  $ fQ_ConsoleLS: chr \"0\" #>  $ fQ_Flr      : chr \"1\" #>  $ LeakConst   : chr NA #>  $ fan_a       : chr \"-6276\" #>  $ fan_b       : chr \"6.6\" #>  $ fan_c       : chr \"1.7090000000000001E-5\" #>  $ fan_d       : chr \"3.11\" #>  $ Fs_meas     : chr \"2.57209 56.8345 376.092 656.102 912.922 1140.22 1323.58 1601.94\" #>  $ Fs_true     : chr \"0.140462 100.535 403.009 601.359 801.268 1002.06 1200.81 1402.44\" #>  $ leak_wt     : chr \"0\"  print(licor_file$user_remarks) #>   remark_time #> 1    09:09:04 #>                                                                                        remark_value #> 1 Stability Definition: gsw (GasEx): Slp<0.004 Std<0.004 Per=180 A (GasEx): Slp<0.5 Std<0.5 Per=120  # Example 2: Reading a Licor Excel file that is included with the PhotoGEA # package; here we use a different column name to identify the data block within # the file's contents. licor_file <- read_licor_6800_Excel(   PhotoGEA_example_file_path('ball_berry_1.xlsx'),   column_name = 'A' )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_licor_6800_plaintext.html","id":null,"dir":"Reference","previous_headings":"","what":"Reading a Licor LI-6800 plaintext log file — read_licor_6800_plaintext","title":"Reading a Licor LI-6800 plaintext log file — read_licor_6800_plaintext","text":"Tool reading plaintext log files created Licor LI-6800 instruments   storing contents exdf objects.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_licor_6800_plaintext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reading a Licor LI-6800 plaintext log file — read_licor_6800_plaintext","text":"","code":"read_licor_6800_plaintext(     file_name,     get_oxygen = TRUE,     include_user_remark_column = TRUE,     ...   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_licor_6800_plaintext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reading a Licor LI-6800 plaintext log file — read_licor_6800_plaintext","text":"file_name relative absolute path plaintext file containing Licor data. get_oxygen logical value indicating whether get oxygen percentage     file's preamble using get_oxygen_from_preamble. include_user_remark_column logical value indicating whether include user remarks column;     see details. ... Additional arguments; currently unused.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_licor_6800_plaintext.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reading a Licor LI-6800 plaintext log file — read_licor_6800_plaintext","text":"Licor LI-6800 instruments create two types log files: plaintext file   Excel file, containing information. plaintext files   ones guaranteed created, since Excel files require user   select option create . read_licor_6800_plaintext looks two special lines Licor log   file: [Head] line indicates beginning header (  preamble), [Data] line indicates beginning data   table. lines missing file, loaded   properly. Closing reopening log file: operating Licor LI-6800,   possible close reopen log file. causes   plaintext log file contain multiple [Head] [Data]   sections. function able handle files. User remarks: operating Licor LI-6800, possible make   \"remark.\" remark appear plaintext log file line,   begins HH:MM:SS time contains remark text.   read_licor_6800_plaintext function identifies user remarks   includes return \"extra\" element called   user_remarks. Note changing stability criteria also generate   user remark message describing new stability settings. include_user_remark_column TRUE, user remarks   included main data table column called user_remark.   row table, entry user_remark column set   recent user remark. user remark system prone errors, especially since changes   stability settings recorded log files using exact format   true user remarks. general, better record metadata   measurements via user constants rather user remarks. User constants rows: operating Licor LI-6800,   possible include user constants either rows columns. general,   better include columns, read_licor_6800_plaintext   function may able properly read files included   rows. Support user constant rows may added future.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_licor_6800_plaintext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reading a Licor LI-6800 plaintext log file — read_licor_6800_plaintext","text":"exdf object fully includes data Licor Excel   file. addition elements described documentation   read_gasex_file, following \"extra\" elements also   included: preamble: data frame containing \"preamble\" (\"header\")           information file. user_remarks: data frame containing user remarks           file. data frame two columns timestamp value,           called remark_time remark_value, respectively.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_licor_6800_plaintext.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reading a Licor LI-6800 plaintext log file — read_licor_6800_plaintext","text":"","code":"# Example: Reading a Licor plaintext file that is included with the PhotoGEA # package and viewing some of the \"extra\" information associated with the file licor_file <- read_licor_6800_plaintext(   PhotoGEA_example_file_path('plaintext_licor_file') )  str(licor_file$preamble) #> 'data.frame':\t1 obs. of  57 variables: #>  $ File opened         : chr \"2021-08-04 09:22:24\" #>  $ Console s/n         : chr \"68C-831539\" #>  $ Console ver         : chr \"Bluestem v.1.5.02\" #>  $ Scripts ver         : chr \"2021.03  1.5.02, Feb 2021\" #>  $ Head s/n            : chr \"68H-891539\" #>  $ Head ver            : chr \"1.4.5\" #>  $ Head cal            : chr \"{\\\"h2obzero\\\": \\\"1.1092\\\", \\\"ssa_ref\\\": \\\"31965.6\\\", \\\"h2obspan2b\\\": \\\"0.0719985\\\", \\\"h2oaspan2b\\\": \\\"0.0715867\"| __truncated__ #>  $ Chamber type        : chr \"6800-01A\" #>  $ Chamber s/n         : chr \"MPF-651414\" #>  $ Chamber rev         : chr \"0\" #>  $ Chamber cal         : chr \"0\" #>  $ Fluorometer         : chr \"MPF-651414\" #>  $ Flr. Version        : chr \"1.4.5\" #>  $ SysConst:AvgTime    : chr \"4\" #>  $ SysConst:Oxygen     : chr \"21.0\" #>  $ ChambConst:Chamber  : chr \"6800-01A\" #>  $ ChambConst:Aperture : chr \"6 cm^2\" #>  $ ChambConst:blc_a    : chr \"0.578\" #>  $ ChambConst:blc_b    : chr \"0.5229739\" #>  $ ChambConst:blc_c    : chr \"0.003740252\" #>  $ ChambConst:blc_d    : chr \"-0.06197961\" #>  $ ChambConst:blc_e    : chr \"-0.005608586\" #>  $ ChambConst:blc_minS : chr \"1\" #>  $ ChambConst:blc_maxS : chr \"6\" #>  $ ChambConst:blc_Po   : chr \"96.9\" #>  $ LTConst:deltaTw     : chr \"0\" #>  $ LTConst:fT1         : chr \"1\" #>  $ LTConst:fT2         : chr \"0\" #>  $ LTConst:fTeb        : chr \"0\" #>  $ LQConst:Leaf        : chr \"standard\" #>  $ LQConst:Ambient     : chr \"Sun+Sky\" #>  $ LQConst:abs_ambient : chr \"0.8\" #>  $ LQConst:abs_redLED  : chr \"0.84\" #>  $ LQConst:abs_greenLED: chr \"0.7\" #>  $ LQConst:abs_blueLED : chr \"0.87\" #>  $ LQConst:abs_whiteLED: chr \"0.75\" #>  $ LQConst:abs_redFlr  : chr \"0.84\" #>  $ LQConst:abs_blueFlr : chr \"0.87\" #>  $ LQConst:k_ambient   : chr \"0.1911\" #>  $ LQConst:k_redLED    : chr \"0.1512\" #>  $ LQConst:k_greenLED  : chr \"0.161\" #>  $ LQConst:k_blueLED   : chr \"0.2262\" #>  $ LQConst:k_whiteLED  : chr \"0.1575\" #>  $ LQConst:k_redFlr    : chr \"0.1596\" #>  $ LQConst:k_blueFlr   : chr \"0.2175\" #>  $ QConst:fQ_Amb_in    : chr \"0.0\" #>  $ QConst:fQ_Amb_out   : chr \"0.0\" #>  $ QConst:fQ_HeadLS    : chr \"0.0\" #>  $ QConst:fQ_ConsoleLS : chr \"0.0\" #>  $ QConst:fQ_Flr       : chr \"1.0\" #>  $ LeakConst:fan_a     : chr \"-6276.0\" #>  $ LeakConst:fan_b     : chr \"6.6\" #>  $ LeakConst:fan_c     : chr \"1.709e-05\" #>  $ LeakConst:fan_d     : chr \"3.11\" #>  $ LeakConst:Fs_meas   : chr \"3.37548 84.5351 372.99 621.291 866.807 1096.7 1244.78 1402.89\" #>  $ LeakConst:Fs_true   : chr \"0.0646052 105.617 400.849 601.323 799.968 1001.32 1200.39 1401.02\" #>  $ LeakConst:leak_wt   : chr \"0\"  print(licor_file$user_remarks) #>   remark_time #> 1    09:22:24 #>                                                                                 remark_value #> 1 Stability Definition: gsw (GasEx): Slp<0.2 Std<0.02 Per=30 A (GasEx): Slp<1 Std<0.2 Per=30"},{"path":"https://eloch216.github.io/PhotoGEA/reference/remove_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove specific points from an exdf object — remove_points","title":"Remove specific points from an exdf object — remove_points","text":"Removes points exdf object satisfy set   conditions.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/remove_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove specific points from an exdf object — remove_points","text":"","code":"remove_points(exdf_obj, ..., method = 'remove')"},{"path":"https://eloch216.github.io/PhotoGEA/reference/remove_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove specific points from an exdf object — remove_points","text":"exdf_obj exdf object. ... optional argument list named elements specify     points removed exdf_obj. example,     list(species = 'soybean', plot = c('1a', '1b')) specifies set     points (1) species 'soybean' (2) plot     '1a' '1b'. method Specify whether remove points ('remove') designate     excluded subsequent fits ('exclude'); see     details.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/remove_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove specific points from an exdf object — remove_points","text":"function returns exdf object formed exdf_obj,   result depends value method. method 'remove', returned object modified copy   exdf_obj rows meet conditions specified   optional arguments removed. method 'exclude', returned object modified copy   exdf_obj new column called include_when_fitting.   value column FALSE rows meet conditions   specified optional arguments, TRUE otherwise. Points   column FALSE used fitting   fit_c3_aci fitting functions.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/remove_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove specific points from an exdf object — remove_points","text":"","code":"# Create an exdf object by reading a Licor Excel file licor_file <- read_gasex_file(   PhotoGEA_example_file_path('ball_berry_1.xlsx') )  # Print the number of points in the data set nrow(licor_file) #> [1] 28  # Remove the following: # - All points where `obs` is 28 (1 point) # - All points where `species` is `soybean` and `plot` is `1a` or `1b` (14 points) licor_file_2 <- remove_points(   licor_file,   list(obs = 28),   list(species = 'soybean', plot = c('1a', '1b')),   method = 'remove' )  # There should now be 15 fewer points remaining in the data set nrow(licor_file_2) #> [1] 13  # We can also specify the same points for exclusion rather than removal: licor_file_3 <- remove_points(   licor_file,   list(obs = 28),   list(species = 'soybean', plot = c('1a', '1b')),   method = 'exclude' )  print(licor_file_3[, c('species', 'plot', 'include_when_fitting')]) #>    species plot include_when_fitting #> 1  soybean   1a                FALSE #> 2  soybean   1a                FALSE #> 3  soybean   1a                FALSE #> 4  soybean   1a                FALSE #> 5  soybean   1a                FALSE #> 6  soybean   1a                FALSE #> 7  soybean   1a                FALSE #> 8  soybean    5                 TRUE #> 9  soybean    5                 TRUE #> 10 soybean    5                 TRUE #> 11 soybean    5                 TRUE #> 12 soybean    5                 TRUE #> 13 soybean    5                 TRUE #> 14 soybean    5                 TRUE #> 15 soybean   1b                FALSE #> 16 soybean   1b                FALSE #> 17 soybean   1b                FALSE #> 18 soybean   1b                FALSE #> 19 soybean   1b                FALSE #> 20 soybean   1b                FALSE #> 21 soybean   1b                FALSE #> 22 tobacco    2                 TRUE #> 23 tobacco    2                 TRUE #> 24 tobacco    2                 TRUE #> 25 tobacco    2                 TRUE #> 26 tobacco    2                 TRUE #> 27 tobacco    2                 TRUE #> 28 tobacco    2                FALSE  # The number of points where `include_when_fitting` is TRUE should be the same # as the number of remaining rows when using the `remove` method sum(licor_file_3[, 'include_when_fitting']) #> [1] 13"},{"path":"https://eloch216.github.io/PhotoGEA/reference/residual_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate statistics that describe the residuals of a fit — residual_stats","title":"Calculate statistics that describe the residuals of a fit — residual_stats","text":"Calculates several key statistics residuals fit: residual   sum squares (RSS), mean squared error (MSE), root   mean squared error (RMSE), residual standard error (RSE),   Akaike information criterion (AIC). function used   internally fitting functions PhotoGEA package,   fit_ball_berry fit_c3_aci.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/residual_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate statistics that describe the residuals of a fit — residual_stats","text":"","code":"residual_stats(fit_residuals, units, nparam)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/residual_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate statistics that describe the residuals of a fit — residual_stats","text":"fit_residuals numeric vector representing residuals fit, .e.,     differences measured fitted values. units string expressing units residuals. nparam number free parameters varied performing fit.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/residual_stats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate statistics that describe the residuals of a fit — residual_stats","text":"function calculates several model-independent measures quality   fit. basis statistics residuals (also known   errors). measured values quantity y given   y_measured fitted values y_fitted,   residuals defined residual = y_measured - y_fitted. key   statistics can calculated residuals follows: residual sum squares (RSS) also known sum           squared errors (SSE). name implies, simply sum           squared residuals: RSS = sum(residuals^2). mean squared error (MSE) mean value squared           residuals: MSE = sum(residuals^2) / n = RSS / n, n           number residuals. root mean squared error (RMSE) square root           mean squared error: RMSE = sqrt(MSE) = sqrt(RSS / n). residual standard error RSE given RSE =           sqrt(RSS / dof), dof = n - nparam number           degrees freedom involved fit. Akaike information criterion AIC given AIC =           npts * (log(2 * pi) + 1) + npts * log(MSE) + 2 * (nparam + 1). given model, RMSE usually good way compare   quality different fits. trying decide model best fits   measured data, AIC may appropriate metric since   controls number parameters model. AIC definition used appropriate results maximum   likelihood fitting equal variance, minimum least squares fitting.   details AIC equation relation general   definition AIC, see Section 2 Banks & Joyner (2017). References: Banks, H. T. & Joyner, M. L. \"AIC framework least squares   estimation.\" Applied Mathematics Letters 74, 33–45 (2017)   [doi:10.1016/j.aml.2017.05.005 ].","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/residual_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate statistics that describe the residuals of a fit — residual_stats","text":"exdf object one row following columns: npts (  number residual values), nparam, dof, RSS, MSE,   RMSE, RSE, AIC.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/residual_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate statistics that describe the residuals of a fit — residual_stats","text":"","code":"# Generate some random residuals residuals <- runif(10, -1, 1)  # Calculate residual stats as if these values had units of `kg` and were related # to a model with 3 free parameters residual_stats(residuals, 'kg', 3) #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>   npts [residual_stats] (NA) nparam [residual_stats] (NA) #> 1                         10                            3 #>   dof [residual_stats] (NA) RSS [residual_stats] ((kg)^2) #> 1                         7                      3.774498 #>   MSE [residual_stats] ((kg)^2) RMSE [residual_stats] (kg) #> 1                     0.3774498                  0.6143694 #>   RSE [residual_stats] (kg) AIC [residual_stats] () #> 1                 0.7343119                26.63559"},{"path":"https://eloch216.github.io/PhotoGEA/reference/set_variable.html","id":null,"dir":"Reference","previous_headings":"","what":"Set values, units, and categories for a column in a table — set_variable","title":"Set values, units, and categories for a column in a table — set_variable","text":"Sets value, units, /category new existing column   table-like object.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/set_variable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set values, units, and categories for a column in a table — set_variable","text":"","code":"set_variable(     data_table,     name,     units = NULL,     category = NULL,     value = NA,     id_column = NULL,     value_table = NULL   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/set_variable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set values, units, and categories for a column in a table — set_variable","text":"data_table table-like R object data frame exdf. name name column added data_table. units units column added data_table. category category column added data_table. value value column added data_table. id_column name identifier column data_table. value_table list named elements, name element possible value     id_column value element corresponding     value name column take.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/set_variable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set values, units, and categories for a column in a table — set_variable","text":"two main \"modes\" setting value new column: can   set fixed value (using value input argument), can set   according values another column (using id_column   value_table input arguments). latter method useful   different values must specified different treatments within data   set. greater detail, function attempts set value new   existing column exdf object according following rules: value name column data_table set           value; assignment follows usual rules; words,           value single value vector length           nrow(data_table). units categories NULL, units           category specified. case, name           column already exists, units category remain ;           name column new, initialized           NA units category. either units _or_ category NULL,           units category name column _will_ specified.           case, one units category _is_ NULL,           value set NA. id_column NULL, value_table           used set different values name column           specified value id_column. example,           id_column species value_table =           list(soybean = 1, tobacco = 2), name column           set 1 species 'soybean' 2           species 'tobacco'. values           species ('maize'), value name still           value. **Note**: values id_column           converted using .character making comparisons. table-like objects, data frames, values   set, units categories ignored.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/set_variable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set values, units, and categories for a column in a table — set_variable","text":"object based data_table new /modified columns.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/set_variable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set values, units, and categories for a column in a table — set_variable","text":"","code":"# Create a simple exdf object with two columns (`A` and `B`) and default values # for its units and categories. simple_exdf <- exdf(data.frame(A = c(3, 2, 7, 9), B = c(4, 5, 1, 8)))  print(simple_exdf) #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>   A [NA] (NA) B [NA] (NA) #> 1           3           4 #> 2           2           5 #> 3           7           1 #> 4           9           8  # Add a new column called 'C' with units 'u1' and category 'cat1' whose value is # 1000. simple_exdf <- set_variable(simple_exdf, 'C', 'u1', 'cat1', 1000)  # Set the value of the 'B' column to 2000 when 'A' is 3, to 3000 when 'A' is 9, # and to 4000 for all other values of 'A'. Do not modify its units or category. simple_exdf <- set_variable(   simple_exdf,   'B',   value = 4000,   id_column = 'A',   value_table = list('3' = 2000, '9' = 3000) )  print(simple_exdf) #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>   A [NA] (NA) B [NA] (NA) C [cat1] (u1) #> 1           3        2000          1000 #> 2           2        4000          1000 #> 3           7        4000          1000 #> 4           9        3000          1000  # Take the same operations, but using a data frame instead simple_df <- data.frame(A = c(3, 2, 7, 9), B = c(4, 5, 1, 8))  simple_df <- set_variable(simple_exdf$main_data, 'C', 'u1', 'cat1', 1000)  simple_df <- set_variable(   simple_df,   'B',   value = 4000,   id_column = 'A',   value_table = list('3' = 2000, '9' = 3000) )  print(simple_df) #>   A    B    C #> 1 3 2000 1000 #> 2 2 4000 1000 #> 3 7 4000 1000 #> 4 9 3000 1000  # As a more realistic example, load a Licor file and set different values of # mesophyll conductance for each species in the data set. licor_file <- read_gasex_file(   PhotoGEA_example_file_path('ball_berry_1.xlsx') )  licor_file <- set_variable(   licor_file,   'gmc',   'mol m^(-2) s^(-1) bar^(-1)',   '',   id_column = 'species',   value_table = list(soybean = 0.9, tobacco = 1.1) )  print(licor_file[, c('species', 'gmc'), TRUE]) #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>    species [UserDefCon] (NA) gmc [] (mol m^(-2) s^(-1) bar^(-1)) #> 1                    soybean                                 0.9 #> 2                    soybean                                 0.9 #> 3                    soybean                                 0.9 #> 4                    soybean                                 0.9 #> 5                    soybean                                 0.9 #> 6                    soybean                                 0.9 #> 7                    soybean                                 0.9 #> 8                    soybean                                 0.9 #> 9                    soybean                                 0.9 #> 10                   soybean                                 0.9 #> 11                   soybean                                 0.9 #> 12                   soybean                                 0.9 #> 13                   soybean                                 0.9 #> 14                   soybean                                 0.9 #> 15                   soybean                                 0.9 #> 16                   soybean                                 0.9 #> 17                   soybean                                 0.9 #> 18                   soybean                                 0.9 #> 19                   soybean                                 0.9 #> 20                   soybean                                 0.9 #> 21                   soybean                                 0.9 #> 22                   tobacco                                 1.1 #> 23                   tobacco                                 1.1 #> 24                   tobacco                                 1.1 #> 25                   tobacco                                 1.1 #> 26                   tobacco                                 1.1 #> 27                   tobacco                                 1.1 #> 28                   tobacco                                 1.1"},{"path":"https://eloch216.github.io/PhotoGEA/reference/smooth_tdl_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Smoothing data from one TDL valve — smooth_tdl_data","title":"Smoothing data from one TDL valve — smooth_tdl_data","text":"Tool applying smoothing function time series corresponding   measurements single valve tunable diode laser (TDL) data set.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/smooth_tdl_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smoothing data from one TDL valve — smooth_tdl_data","text":"","code":"smooth_tdl_data(     tdl_exdf,     column_to_be_smoothed,     valve_column_name,     valve_number,     smoothing_function   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/smooth_tdl_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smoothing data from one TDL valve — smooth_tdl_data","text":"tdl_exdf exdf object representing data TDL data logger. column_to_be_smoothed name column tdl_exdf contains data     smoothed; typically, 'Conc12C_Avg' 'Conc12C_Avg'. valve_column_name name column tdl_exdf contains valve number;     typically, 'valve_number'. valve_number value valve_column_name column indicates valve     smoothed. smoothing_function function accepts two vectors Y X (order)     returns smoothed version Y(X); typically,     smoothing_function based smooth.spline     filter signal package.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/smooth_tdl_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Smoothing data from one TDL valve — smooth_tdl_data","text":"output TDL highly sensitive electronic atmospheric noise,   often helpful smooth data one valves   attempting apply calibration corrections determine content   unknown gas mixture. smooth_tdl_data convenience function   extracts time series corresponding data one valve, applies   smoothing operation, replaces original data tdl_exdf   smoothed version. smoothing function user-supplied allow   flexbility. addition column_to_be_smoothed valve_column_name   columns, tdl_exdf must also contain 'elapsed_time'   column, typically created call   identify_tdl_cycles.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/smooth_tdl_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smoothing data from one TDL valve — smooth_tdl_data","text":"exdf object based tdl_exdf, time series   column_to_be_smoothed vs. 'elapsed_time' replaced   smoothed version obtained applying smoothing_function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/smooth_tdl_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smoothing data from one TDL valve — smooth_tdl_data","text":"","code":"# Example: Smoothing the 12C signal from one TDL valve using a spline fit tdl_file <- read_gasex_file(   PhotoGEA_example_file_path('tdl_sampling_1.dat'),   'TIMESTAMP' )  tdl_file <- identify_tdl_cycles(   tdl_file,   valve_column_name = 'valve_number',   cycle_start_valve = 20,   expected_cycle_length_minutes = 2.7,   expected_cycle_num_valves = 9,   timestamp_colname = 'TIMESTAMP' )  spline_smoothing_function <- function(Y, X) {     ss <- smooth.spline(X, Y)     return(ss$y) }  spline_smoothed_tdl_file <- smooth_tdl_data(   tdl_file, 'Conc12C_Avg', 'valve_number', 20, spline_smoothing_function )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/split.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Divide an exdf object into groups — split.exdf","title":"Divide an exdf object into groups — split.exdf","text":"Divides exdf object groups defined one factors.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/split.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Divide an exdf object into groups — split.exdf","text":"","code":"# S3 method for class 'exdf' split(x, f, drop = FALSE, lex.order = FALSE, ...)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/split.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Divide an exdf object into groups — split.exdf","text":"x exdf object. f factor list factors. drop logical value indicating whether levels f occur     dropped. lex.order logical value passed interaction. ... Additional arguments passed default method     split.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/split.exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Divide an exdf object into groups — split.exdf","text":"Returns list exdf objects created splitting x along   values f.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/split.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Divide an exdf object into groups — split.exdf","text":"","code":"# Read a Licor file, select just a few columns, and then split it by the value # of the `plot` column licor_file <- read_gasex_file(   PhotoGEA_example_file_path('ball_berry_1.xlsx') )  licor_file <- licor_file[, c('plot', 'species', 'Qin', 'A', 'gsw'), TRUE]  split(   licor_file,   list(licor_file[,'species'], licor_file[,'plot']),   drop = TRUE ) #> $soybean.1a #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>   plot [UserDefCon] (NA) species [UserDefCon] (NA) #> 1                     1a                   soybean #> 2                     1a                   soybean #> 3                     1a                   soybean #> 4                     1a                   soybean #> 5                     1a                   soybean #> 6                     1a                   soybean #> 7                     1a                   soybean #>   Qin [LeafQ] (micromol m^(-2) s^(-1)) A [GasEx] (micromol m^(-2) s^(-1)) #> 1                             2000.030                          35.400473 #> 2                             1099.800                          22.996635 #> 3                              799.983                          25.430106 #> 4                              649.951                          23.290614 #> 5                              500.135                          16.617929 #> 6                              350.106                          12.240074 #> 7                              200.141                           5.679174 #>   gsw [GasEx] (mol m^(-2) s^(-1)) #> 1                       0.3881885 #> 2                       0.3044869 #> 3                       0.2804279 #> 4                       0.2181023 #> 5                       0.2123801 #> 6                       0.1848656 #> 7                       0.1685880 #>  #> $soybean.1b #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>    plot [UserDefCon] (NA) species [UserDefCon] (NA) #> 15                     1b                   soybean #> 16                     1b                   soybean #> 17                     1b                   soybean #> 18                     1b                   soybean #> 19                     1b                   soybean #> 20                     1b                   soybean #> 21                     1b                   soybean #>    Qin [LeafQ] (micromol m^(-2) s^(-1)) A [GasEx] (micromol m^(-2) s^(-1)) #> 15                             1999.850                          47.950460 #> 16                             1099.890                          30.250627 #> 17                              799.873                          25.472460 #> 18                              650.070                          26.383035 #> 19                              499.982                          17.009070 #> 20                              350.060                          14.666531 #> 21                              200.070                           9.276031 #>    gsw [GasEx] (mol m^(-2) s^(-1)) #> 15                       0.6974767 #> 16                       0.5627892 #> 17                       0.4941281 #> 18                       0.4676789 #> 19                       0.4235752 #> 20                       0.1587479 #> 21                       0.2030845 #>  #> $tobacco.2 #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>    plot [UserDefCon] (NA) species [UserDefCon] (NA) #> 22                      2                   tobacco #> 23                      2                   tobacco #> 24                      2                   tobacco #> 25                      2                   tobacco #> 26                      2                   tobacco #> 27                      2                   tobacco #> 28                      2                   tobacco #>    Qin [LeafQ] (micromol m^(-2) s^(-1)) A [GasEx] (micromol m^(-2) s^(-1)) #> 22                             2000.020                           29.61454 #> 23                             1099.980                           25.49228 #> 24                              800.046                           22.21817 #> 25                              650.001                           16.34589 #> 26                              500.036                           12.10635 #> 27                              350.073                           12.04469 #> 28                              200.236                            7.84987 #>    gsw [GasEx] (mol m^(-2) s^(-1)) #> 22                      0.29002835 #> 23                      0.26095999 #> 24                      0.24715976 #> 25                      0.22395230 #> 26                      0.22348130 #> 27                      0.20608729 #> 28                      0.08301745 #>  #> $soybean.5 #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #>    plot [UserDefCon] (NA) species [UserDefCon] (NA) #> 8                       5                   soybean #> 9                       5                   soybean #> 10                      5                   soybean #> 11                      5                   soybean #> 12                      5                   soybean #> 13                      5                   soybean #> 14                      5                   soybean #>    Qin [LeafQ] (micromol m^(-2) s^(-1)) A [GasEx] (micromol m^(-2) s^(-1)) #> 8                              1999.980                           45.78075 #> 9                              1099.960                           36.21825 #> 10                              799.910                           32.76940 #> 11                              650.108                           22.92448 #> 12                              499.921                           22.06819 #> 13                              349.991                           17.09159 #> 14                              200.029                           10.76825 #>    gsw [GasEx] (mol m^(-2) s^(-1)) #> 8                        0.8771680 #> 9                        0.6695119 #> 10                       0.5599051 #> 11                       0.5758128 #> 12                       0.3805223 #> 13                       0.3462828 #> 14                       0.3181253 #>"},{"path":"https://eloch216.github.io/PhotoGEA/reference/str.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Display the structure of an exdf object — str.exdf","title":"Display the structure of an exdf object — str.exdf","text":"Displays structure exdf object's main_data.   column described name, unit, category formatted like   name [category] (units).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/str.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display the structure of an exdf object — str.exdf","text":"","code":"# S3 method for class 'exdf' str(object, ...)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/str.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display the structure of an exdf object — str.exdf","text":"object exdf object. ... Additional arguments passed str.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/str.exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display the structure of an exdf object — str.exdf","text":"None.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/str.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display the structure of an exdf object — str.exdf","text":"","code":"simple_exdf <- exdf(data.frame(A = 1), data.frame(A = 'u'), data.frame(A = 'c')) str(simple_exdf) #>  #> Converting an `exdf` object to a `data.frame` before printing #>  #> 'data.frame':\t1 obs. of  1 variable: #>  $ A [c] (u): num 1"},{"path":"https://eloch216.github.io/PhotoGEA/reference/xyplot_avg_rc.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot average response curves with error bars — xyplot_avg_rc","title":"Plot average response curves with error bars — xyplot_avg_rc","text":"wrapper lattice::xyplot plots average response curves   error bars.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/xyplot_avg_rc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot average response curves with error bars — xyplot_avg_rc","text":"","code":"xyplot_avg_rc(     Y,     X,     point_identifier,     group_identifier,     y_error_bars = TRUE,     x_error_bars = FALSE,     cols = multi_curve_colors(),     eb_length = 0.05,     eb_lwd = 1,     na.rm = TRUE,     subset = rep_len(TRUE, length(Y)),     ...   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/xyplot_avg_rc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot average response curves with error bars — xyplot_avg_rc","text":"Y numeric vector y-values. X numeric vector x-values length Y point_identifier vector length Y indicates location     (x, y) pair along response curve; typically     seq_num column exdf object. group_identifier vector length Y indicates \"group\"     response curve. y_error_bars logical value indicating whether plot y-axis error bars. x_error_bars logical value indicating whether plot x-axis error bars. cols vector color specifications. eb_length width error bars. eb_lwd line width (thickness) error bars. na.rm logical value indicating whether remove NA values     calculating means standard errors. subset logical vector (length Y) indicating points     include final plot. ... Additional arguments passed lattice::xyplot.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/xyplot_avg_rc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot average response curves with error bars — xyplot_avg_rc","text":"function calculates average values X Y value   point_identifier across groups defined   group_identifier, uses values plot average response   curves group. Error bars determined calculating standard   errors X Y value point_identifier   across groups defined group_identifier. points excluded data set using remove_points   method = 'exclude', include_when_fitting column   passed xyplot_avg_rc subset input argument;   ensure excluded points used calculating   average response curves.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/xyplot_avg_rc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot average response curves with error bars — xyplot_avg_rc","text":"trellis object created lattice::xyplot.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/xyplot_avg_rc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot average response curves with error bars — xyplot_avg_rc","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_gasex_file(   PhotoGEA_example_file_path('ball_berry_1.xlsx') )  # Organize the response curve data licor_file <- organize_response_curve_data(   licor_file,   c('species', 'plot'),   c(),   'Qin' )  # Plot the average light response curve for each species (here there is only one # curve for tobacco, so there are no tobacco error bars) xyplot_avg_rc(   licor_file[, 'A'],   licor_file[, 'Qin'],   licor_file[, 'seq_num'],   licor_file[, 'species'],   ylim = c(0, 50),   xlab = paste0('Incident PPFD (', licor_file$units$Qin, ')'),   ylab = paste0('Average net assimilation (', licor_file$units$A, ')'),   auto = TRUE,   grid = TRUE )   # Exclude a few points from the data set and re-plot the average curves licor_file <- remove_points(   licor_file,   list(obs = c(5, 10, 18)),   method = 'exclude' )  xyplot_avg_rc(   licor_file[, 'A'],   licor_file[, 'Qin'],   licor_file[, 'seq_num'],   licor_file[, 'species'],   subset = licor_file[, 'include_when_fitting'],   ylim = c(0, 50),   xlab = paste0('Incident PPFD (', licor_file$units$Qin, ')'),   ylab = paste0('Average net assimilation (', licor_file$units$A, ')'),   auto = TRUE,   grid = TRUE )"},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"changes-in-photogea-version-131-2024-04-07","dir":"Changelog","previous_headings":"","what":"Changes in PhotoGEA version 1.3.1 (2024-04-07)","title":"Changes in PhotoGEA version 1.3.1 (2024-04-07)","text":"CRAN release: 2025-04-08","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"minor-user-facing-changes-1-3-1","dir":"Changelog","previous_headings":"","what":"Minor user-facing changes","title":"Changes in PhotoGEA version 1.3.1 (2024-04-07)","text":"Made sure exported functions value examples sections documentation. Specify tz = 'America/Chicago' pairing TDL gas exchange data, since setting tz = 'US/Central') seem work debian. CRAN checks package examples debian. Added read_cr3000, read_licor_6800_Excel, read_licor_6800_plaintext can used examples without needing :::.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"internal-changes-1-3-1","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"Changes in PhotoGEA version 1.3.1 (2024-04-07)","text":"Designated vignettes “web ” make package smaller; important complying CRAN guidelines. Set maxiter 40 using stats::uniroot calculate confidence intervals; saves quite bit time compared default value (1000) prevents several examples flagged R CMD check taking long run. Use message send messages user rbind.exdf rather cat print. necessary comply CRAN requirements.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"bug-fixes-1-3-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"Changes in PhotoGEA version 1.3.1 (2024-04-07)","text":"Fixed error occurred removing unreliable C4 parameter estimates without first calculating confidence intervals.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"minor-user-facing-changes-1-3-0","dir":"Changelog","previous_headings":"","what":"Minor user-facing changes","title":"Changes in PhotoGEA version 1.3.0 (2024-04-04)","text":"Separated temperature response Gamma_star value 25 degrees C. change, several functions (including fit_c3_aci fit_c3_variable_j) now separate inputs Gamma_star_at_25 Gamma_star_norm. fitting functions can now fit Gamma_star_at_25 rather Gamma_star, previously represented value leaf temperature. Since set temperature response parameters (c3_temperature_param_bernacchi) tends use different value Gamma_star_at_25, temperature response parameter lists now include Gamma_star_at_25 Gamma_star_norm. Separated temperature responses Kc Ko values 25 degrees C, enabled fits Kc_at_25 Ko_at_25. Gamma_star, temperature response parameter lists include values 25 degrees C normalized temperature responses. Added values alpha_j_at_25 theta_j_at_25 Jmax-related temperature response parameter lists. calculate_gamma_star function now returns values Gamma_star_tl clearly indicate values specified leaf temperature. organize_response_curve_data function now calls check_response_curve_data points removed, making flexible. Added two new vignettes: one frequently asked questions (frequent_questions.Rmd), gallery PhotoGEA publications (publications.Rmd). Along change, pkgdown web site reorganized put PhotoGEA publications tab main navigation bar. Removed curvature parameters calculate_c3_assimilation. Allowing co-limitation complication fitting, tends produce unreasonable results, doesn’t make sense allow . Renamed atp_use nadph_use Wj_coef_C Wj_coef_Gamma_star old names definitions parameters accurate. Included references PhotoGEA paper several places, DESCRIPTION README.md.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"bug-fixes-1-3-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"Changes in PhotoGEA version 1.3.0 (2024-04-04)","text":"carboxylation rate (Vc) net assimilation rate () now consistent using min-variant FvCB model.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"minor-user-facing-changes-1-2-0","dir":"Changelog","previous_headings":"","what":"Minor user-facing changes","title":"Changes in PhotoGEA version 1.2.0 (2025-03-12)","text":"Added vignette advice Licor LI-6800 user constants. Added new function calculating values Jmax (calculate_jmax) included C3 C4 -Ci curve vignettes. Along function, new temperature response parameters added: jmax_temperature_param_bernacchi jmax_temperature_param_flat. employ polynomial temperature responses, new type also added package via calculate_temperature_response_polynomial function. identify_c3_limiting_processes now returns co-limiting process assimilation co-limited. Several functions modified accept data.frame objects addition exdf objects: calculate_ball_berry_index, calculate_c3_assimilation, calculate_residuals, document_variables, identify_c3_limiting_processes, set_variable. Added functionality reading user remarks read_licor_6800_plaintext read_licor_6800_Excel. Added new input argument organize_response_curve_data enables calculations average values specified columns. Improved exdf construction element access; now possible provide just units creating exdf object, possible create single-column exdf objects. calling print str exdf object, text printed terminal now explains generated converting exdf data.frame. Licor LI-6800 Excel log files must now sheet called Measurements. Remarks sheet optional. factorize_id_column can now work control group names besides WT.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"bug-fixes-1-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"Changes in PhotoGEA version 1.2.0 (2025-03-12)","text":"bug fixed Gamma_star sometimes accidentally removed outputs fit_c3_aci fit_c3_variable_j Optional input arguments calculate_c3_assimilation checked make sure supported. Going forward, new functions optional arguments (calculate_jmax) use check. Removed Qin several functions related C4 -Ci curves, since Qin actually needed fitting C4 -Ci curves.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"internal-changes-1-2-0","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"Changes in PhotoGEA version 1.2.0 (2025-03-12)","text":"unit_dictionary now function rather list, enables better error messages quantity included dictionary; mistakes discovered way (fixed).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"changes-in-photogea-version-110-2024-12-09","dir":"Changelog","previous_headings":"","what":"Changes in PhotoGEA version 1.1.0 (2024-12-09)","title":"Changes in PhotoGEA version 1.1.0 (2024-12-09)","text":"parameter trust values changed logical values (TRUE FALSE) numeric indicator (0, 1, 2). values indicate severe unreliability, potential unreliability, full reliability, respectively. Added several optional input arguments calculate_c3_assimilation allow variants FvCB model used: use_min_A, TPU_threshold, use_FRL, consider_depletion. can also specified fitting curves. behavior identify_c3_unreliable_pts modified make compatible new use_min_A option. plot_c3_aci_fit fit plotting functions altered distinguish points included excluded fit. xyplot_avg_rc altered exclude points calculating average values Outliers can now excluded automatically creating barchart using barchart_with_errorbars information now included output fit_ball_berry: standard error fitted parameter, p-value fit. dedicated plotting function also added (plot_ball_berry_fit). function added fitting Medlyn conductance model (alternative Ball-Berry model): fit_medlyn Update input argument checks several functions: check_required_columns set_variable calculate_arrhenius calculate_peaked_gaussian renamed calculate_temperature_response_arrhenius calculate_temperature_response_gaussian better reflect purpose. new type temperature response added: calculate_temperature_response_johnson. calculating C3 assimilation rates fitting C3 -Ci curves, Tp now specified 25 degrees C follows temperature response function, already done Vcmax, J, RL. calculating C4 assimilation rates fitting C4 -Ci curves, Jmax now specified 25 degrees C, rather optimum value, consistency parameters can fit PhotoGEA. central function calculating temperature responses added: calculate_temperature_response. internally calls functions, users can just use single function. c4_arrhenius_von_caemmerer c4_peaked_gaussian_von_caemmerer consolidated single list suitable use calculate_temperature_response, caled c4_temperature_param_vc. c3_arrhenius_sharkey c3_arrhenius_bernacchi lists now include Johnson-Eyring-Williams reponses Tp gmc renamed c3_temperature_param_sharkey c3_temperature_param_bernacchi since longer pure list Arrhenius parameters. changes may compatible scripts written earlier versions PhotoGEA. read_licor_6800_Excel now checks make sure gsw columns zero; columns zero, indicates Excel file needs “calculated,” relevant message sent user. Another parameter related TPU (alpha_t) Mesophyll conductance (gmc_at_25) C4 -Ci fits also updated include mesophyll conductance (gmc_at_25) fit J rather Jmax. Renamed function calculate_RL_laisk fit_laisk since fitting procedure used, method also estimates Ci_star addition RL. Used method described Walker & Ort (2015) Busch et al. (2024) Added plotting function displaying results Laisk fit: plot_laisk_fit. AIC calculations moved residual_stats AIC can easily calculated fits packages. Added new optimizer (optimizer_nlminb) improved optimizer documentation testing. new optimizer wrapper stats::nlminb employs quasi-Newton algorithm. Added new function identifying limiting processes C3 curves: identify_c3_limiting_processes. function used internally fit_c3_aci fit_c3_variable_j. new option added Variable J fits: check_j","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"changes-in-photogea-version-100-2024-08-13","dir":"Changelog","previous_headings":"","what":"Changes in PhotoGEA version 1.0.0 (2024-08-13)","title":"Changes in PhotoGEA version 1.0.0 (2024-08-13)","text":"Several supporting functions also added: calculate_c4_assimilation_hyperbola, confidence_intervals_c4_aci_hyperbola, error_function_c4_aci_hyperbola, initial_guess_c4_aci_hyperbola, plot_c4_aci_hyperbola_fit. Tests also added fit_c4_aci_hyperbola calculate_c4_assimilation_hyperbola input called hard_constraints takes numerical value, higher values impose constraints parameter values. highest value 2. Setting hard_constraints 2 equivalent default behavior previous versions PhotoGEA. default value functions take input 0, imposes hard constraints. added calculate_c3_assimilation, calculate_c3_variable_j, calculate_c4_assimilation, calculate_c4_assimilation_hyperbola, well functions use internally, calculate_c3_limitations_warren fit_c3_aci. default bounds curve fitting functions expanded avoid biasing results. Confidence limits parameters leaf temperature added. value 0 disables feature (equivalent FALSE previous versions PhotoGEA). value 1 removes parameters (corresponding rates) corresponding rate never smallest rate. value 2 removes parameters (corresponding rates) corresponding rate never smallest rate, removes parameters upper confidence limit infinity (equivalent TRUE previous versions PhotoGEA). default value functions option 2. warning removed fit_c4_aci, previously suggested avoid fitting one Vcmax_at_25, Vpr, Jmax_at_opt. default value require_positive_gmc input argument fit_c3_variable_j function changed positive_a. names respiration rates changed: Rd (rate day respiration) changed RL (rate respiration light) Rm (rate day respiration occurring mesophyll) changed RLm (rate respiration light occurring mesophyll). subscript L “light” clear d “day,” since contexts d refers “dark.” One function name modified process: calculate_rd_laisk became calculate_RL_laisk. basic_stats function updated can ignore NA values calculating averages standard errors. check_response_curve_data function updated now option create warning rather error message problem detected. estimate_operating_point function updated value NA Ca_atmospheric input simply bypasses operating point calculations. Along , default value Ca_atmospheric set NA fit_c3_aci, fit_c3_variable_j, fit_c4_aci functions. changes, calculating operating point now optional. C3 C4 -Ci vignettes updated remove outdated information take advantage new fitting function fit_c4_aci_hyperbola. Increased minimum required R version 3.6.0 4.0.0. GitHub actions testing setup longer works R < 4.0, become difficult guarantee compatability earlier version.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"changes-in-photogea-version-0120-2024-06-03","dir":"Changelog","previous_headings":"","what":"Changes in PhotoGEA version 0.12.0 (2024-06-03)","title":"Changes in PhotoGEA version 0.12.0 (2024-06-03)","text":"use normal distribution calculating likelihood. Best-fit parameter values determined sigma = 1. true value likelihood can estimated using sigma = RMSE. Confidence intervals also calculated using sigma = RMSE. Fitting functions include Akaike information criterion (AIC) outputs Default settings changed always calculate confidence intervals remove unreliable parameter estimates, use reliable (slower) optimizer, fit alpha_old (C3 -Ci Variable J fits); settings ensure robust fitting results now three separate parameters: alpha_old (previously alpha_g), alpha_g, alpha_s alpha_old nonzero, alpha_g alpha_s must zero. Likewise, alpha_g alpha_s nonzero, alpha_old must zero. prevent users mixing two models together. fitting functions fit_c3_aci, fit_c3_variable_j, fit_c4_aci now include new output called fits_interpolated contains values predicted assimilation rates Ci step 1 ppm. New plotting functions added: plot_c3_aci_fit plot_c4_aci_fit. functions use new information fits_interpolated make nice plots comparing measured data fits. Now users can optionally ignore NA values using xyplot_avg_rc barchart_with_errorbars Changed exclude_outliers make sure doesn’t exclude NA values Specialized functions writing exdf objects CSV files recreating exdf objects files now available: write.csv.exdf read.csv.exdf. determining degree trust best-fit parameter value, now consider parameters upper confidence limit Inf unreliable. Light- electron-limited assimilation added calculate_c4_assimilation; now fully implemented von Caemmerer model equations. also necessitated new function temperature response calculations: calculate_peaked_gaussian. New fitting parameters added fit_c4_aci: alpha_psii, gbs, Jmax_at_opt Rm_frac. now possible remove unreliable parameter estimates using fit_c4_aci. Tests updated make sure fitting functions can gracefully handle fit failure, even estimating confidence intervals /removing unreliable parameter estimates. Added new optimizer (optimizer_hjkb) changed default arguments user must always specify tolerance number generations. functions require O2 partial pressure now calculate total pressure oxygen concentration (expressed percentage). new option added read_licor_6800_Excel read_licor_6800_plaintext: get_oxygen. input TRUE, get_oxygen_from_preamble automatically used get oxygen percentage file’s preamble loaded. new option added read_gasex_file: standardize_columns. read_licor_6800_plaintext can now read log files closed reopened Added new function called PhotoGEA_example_file_path avoid using system.file examples since system.path confusing users check_licor_data renamed check_response_curve_data since limited Licor measurements Specified minimum supported R version: 3.6.0.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"changes-in-photogea-version-0110-2024-02-12","dir":"Changelog","previous_headings":"","what":"Changes in PhotoGEA version 0.11.0 (2024-02-12)","title":"Changes in PhotoGEA version 0.11.0 (2024-02-12)","text":"Added new options adding penalties error function Variable J fits, enable user selectively penalize negative unreasonably large values mesophyll conductance. Two parameters can now fit: alpha (related TPU) Gamma_star. Unreliable parameter estimates can now excluded; example, points curve = Ap, fit return NA TPU. initial guess functions (initial_guess_c3_aci initial_guess_c3_variable_j) can now accommodate user-supplied values alpha. error functions now available package namespace error_function_c3_aci, error_function_c3_variable_j, error_function_c4_aci. Confidence intervals around best-fit values can now calculated automatically fitting functions, manually using three new functions package namespace: confidence_intervals_c3_aci, confidence_intervals_c3_variable_j, confidence_intervals_c4_aci. initial guess functions now created internally instead input argument. Users now need specify changes default settings. order parameters longer matters lists named elements used. Parameters fit, fit, can either set fixed values values column exdf object. Unknown parameters now provided alphabetical order applicable (first input arguments calculate_c3_assimilation). functions tolerant curves severe problems (negative Ci) prevent good fit found; rather throwing error, fit functions now silently return NA results, along message explaining issue. Added function estimating Rd Laisk method: calculate_rd_laisk “unit dictionary” added internal use; may expanded used often future. alpha_g: used C3 assimilation calculations alpha_pr: used Gamma_star calculations alpha_psii: used C4 assimilation calculations acronym “TPU” used refer process (triose phosphate utilization) maximum rate process. avoid confusion, rate parameter renamed Tp calculate_c3_assimilation fit_c3_aci fit_c3_variable_j fit_c4_aci calculate_c3_limitations_grassi calculate_c3_limitations_warren read_gasex_file function now automatically includes filename column resulting exdf object; helps troubleshooting problematic curves files. https://github.com/eloch216/PhotoGEA/pull/85 https://github.com/eloch216/PhotoGEA/pull/86 https://github.com/eloch216/PhotoGEA/pull/88 https://github.com/eloch216/PhotoGEA/pull/89","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"changes-in-photogea-version-0100-2023-12-16","dir":"Changelog","previous_headings":"","what":"Changes in PhotoGEA version 0.10.0 (2023-12-16)","title":"Changes in PhotoGEA version 0.10.0 (2023-12-16)","text":"Added calculate_c3_variable_j, initial_guess_c3_variable_j, fit_c3_variable_j. Removed dpmn_error_jrv, dpmn_error_jrvtt, dpmn_error_jrv_tau, dpmn_error_jrv_tpu, photosynthesis_TRF. Added new optimizer DEoptim package (called optimizer_deoptim) renamed default_optimizer optimizer_nmkb. new optimizer_deoptim used default optimizer variable J fitting. Added two new functions calculating relative limiting factors C3 photosynthesis: calculate_c3_limitations_grassi calculate_c3_limitations_warren. Added new function estimating operating point measured -Ci curve: estimate_operating_point. Added two new color specifications (multi_curve_line_colors multi_curve_point_colors) used vignette examples. fit_c3_aci fit_c4_aci now use estimate_operating_point automatically estimate operating point include fit parameters. C3 C4 -Ci vignettes now show include operating point one figures. Renamed calculate_iwue calculate_wue provided documentation function, now calculates two measures leaf-level water use efficiency. Provided documentation factorize_id_column converted S3 method can applied data frames exdf objects. Removed process_id_column function since can easily replicated using paste. Stopped reversing colors xyplot_avg_rc. Fixed typo calculate_c3_assimilation Rd (value day respiration 25 degrees C) used place Rd_tl (value day respiration leaf temperature) calculating net assimilation rates. Added developer documentation, R CMD check GitHub workflow, code coverage GitHub workflow. https://github.com/eloch216/PhotoGEA/pull/77 https://github.com/eloch216/PhotoGEA/pull/78 https://github.com/eloch216/PhotoGEA/pull/79 https://github.com/eloch216/PhotoGEA/pull/80 https://github.com/eloch216/PhotoGEA/pull/81 https://github.com/eloch216/PhotoGEA/pull/82 https://github.com/eloch216/PhotoGEA/pull/83 https://github.com/eloch216/PhotoGEA/pull/84","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"changes-in-photogea-version-092-2023-11-16","dir":"Changelog","previous_headings":"","what":"Changes in PhotoGEA version 0.9.2 (2023-11-16)","title":"Changes in PhotoGEA version 0.9.2 (2023-11-16)","text":"Fixed bug check_required_variables missing units exdf object properly identified Added tests make sure check_required_variables functioning expected https://github.com/eloch216/PhotoGEA/pull/75 https://github.com/eloch216/PhotoGEA/pull/76","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"changes-in-photogea-version-091-2023-11-13","dir":"Changelog","previous_headings":"","what":"Changes in PhotoGEA version 0.9.1 (2023-11-13)","title":"Changes in PhotoGEA version 0.9.1 (2023-11-13)","text":"Added logo package documentation https://github.com/eloch216/PhotoGEA/pull/73 https://github.com/eloch216/PhotoGEA/pull/74","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"changes-in-photogea-version-090-2023-10-25","dir":"Changelog","previous_headings":"","what":"Changes in PhotoGEA version 0.9.0 (2023-10-25)","title":"Changes in PhotoGEA version 0.9.0 (2023-10-25)","text":"Added new convenience function printing plot objects: pdf_print calculate_gamma_star calculate_gm_busch calculate_gm_ubierna calculate_isotope_discrimination calculate_leakiness_ubierna calculate_ternary_correction get_oxygen_from_preamble get_sample_valve_from_filename pair_gasex_and_tdl Added two new example data files (licor_for_gm_site11.xslx tdl_for_gm.dat) use examples vignettes. total_isotope_ratio renamed delta_13C total_mixing_ratio renamed total_CO2 Removed function specific one user (batch_get_genotype_info_from_licor_filename). Added new R file (constants.R) store values constants appear multiple functions; help ensure consistent values used instance. Improved error handling read_gasex_file attempted clarify instructions selecting files load. Added two basic tests read_gasex_file using testthat package. https://github.com/eloch216/PhotoGEA/pull/70 https://github.com/eloch216/PhotoGEA/pull/71 https://github.com/eloch216/PhotoGEA/pull/72","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"changes-in-photogea-version-080-2023-04-30","dir":"Changelog","previous_headings":"","what":"Changes in PhotoGEA version 0.8.0 (2023-04-30)","title":"Changes in PhotoGEA version 0.8.0 (2023-04-30)","text":"Modified identify_tdl_cycles process_tdl_cycle_polynomial can handle cycles multiple measurement logs valve. Added several functions calculating quadratic roots; exported package namespace, now used calculate_c3_assimilation calculate_c4_assimilation make code cleaner robust. Choose minimal RuBP carboxylation rate rather minimal net CO2 assimilation rate. Allow user specify value alpha (previously value hard-coded 0). Allow user specify two separate curvature values including co-limitation. Renamed min_aj_cutoff max_aj_cutoff cj_crossover_min cj_crossover_max better reflect purpose. https://github.com/eloch216/PhotoGEA/pull/68 https://github.com/eloch216/PhotoGEA/pull/69","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"changes-in-photogea-version-071-2023-01-11","dir":"Changelog","previous_headings":"","what":"Changes in PhotoGEA version 0.7.1 (2023-01-11)","title":"Changes in PhotoGEA version 0.7.1 (2023-01-11)","text":"Added new outputs fit_c3_aci fit_c4_aci include average values leaf-temperature-dependent parameters like Vcmax Rd. Added options specifying flat temperature response fitting C3 C4 -Ci curves; available via two new data sets c3_arrhenius_no_temp c4_arrhenius_no_temp. https://github.com/eloch216/PhotoGEA/pull/64 https://github.com/eloch216/PhotoGEA/pull/65","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"changes-in-photogea-version-070-2022-12-19","dir":"Changelog","previous_headings":"","what":"Changes in PhotoGEA version 0.7.0 (2022-12-19)","title":"Changes in PhotoGEA version 0.7.0 (2022-12-19)","text":"plaintext_licor_file represents plaintext Licor LI-6800 log file. c4_aci_1.xlsx c4_aci_2.xlsx contain examples C4 -Ci curves measured Licor LI-6800 instruments. Added ability read plaintext Licor LI-6800 log files. Consolidated file-reading functions single one called read_gasex_file. Depending user-supplied inputs specify instrument file type, read_gasex_file internally calls either read_licor_6800_Excel, read_licor_6800_plaintext, read_CR3000 actually read data file. loading LI-6800 Excel log files, longer necessary provide information preamble data rows. previous reading functions read_licor_file read_tdl_file now deprecated. Since functions commonly used scripts, message sent users attempt call functions. Eventually completely removed package namespace. Added new function calculates total pressure inside Licor chamber separate values ambient pressure chamber overpressure: calculate_total_pressure. apply_gm calculate_c3_assimilation calculate_gas_properties fit_c3_aci calculate_cc now apply_gm can used C3 C4 photosynthesis calculations. apply_gm modified include partial pressures outputs. fit_c4_aci modified make like fit_c3_aci. Added new input argument xyplot_avg_rc y-axis error bars can disabled. Added new input argument apply_gm drawdown calculations now optional. Improved error messages generated check_licor_data. Included ATP NADPH usage C3 assimilation calculations. initial_guess_c4_aci makes initial guesses C4 photosynthetic parameters. calculate_c4_assimilation calculates assimilation values using S. von Caemmerer’s model C4 photosynthesis. Added new vignette demonstrating analyze C4 -Ci curve data. https://github.com/eloch216/PhotoGEA/pull/58 https://github.com/eloch216/PhotoGEA/pull/59 https://github.com/eloch216/PhotoGEA/pull/60 https://github.com/eloch216/PhotoGEA/pull/61 https://github.com/eloch216/PhotoGEA/pull/62","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"changes-in-photogea-version-061-2022-11-01","dir":"Changelog","previous_headings":"","what":"Changes in PhotoGEA version 0.6.1 (2022-11-01)","title":"Changes in PhotoGEA version 0.6.1 (2022-11-01)","text":"Modified fit_c3_aci now ensures initial guess lies within () bounds. requirement dfoptim::nmkb solver presumably bounded optimizers well. https://github.com/eloch216/PhotoGEA/pull/57","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"changes-in-photogea-version-060-2022-10-06","dir":"Changelog","previous_headings":"","what":"Changes in PhotoGEA version 0.6.0 (2022-10-06)","title":"Changes in PhotoGEA version 0.6.0 (2022-10-06)","text":"Moved dfoptim package Suggests Imports used essential part PhotoGEA. check_required_variables function moved package namespace. default optimizer function (default_optimizer). function guessing C3 parameter values (initial_guess_c3_aci). function identifying columns take single unique value (identifier_columns). function calculates error metrics values residuals, including root mean squared error (RMSE) several others (residual_stats). cbind.exdf longer requires objects number rows. [<-.exdf now allows users remove columns setting values NULL. conversion timestamp column POSIXlt read_tdl_file read_licor_file can now skipped setting timestamp_colname NA. now option set curvature value can used allow co-limitation net assimilation rate. now uses initial_guess_c3_aci generate initial guesses default. now option fix certain parameter values (TPU) exclude fitting process via new input argument called fixed. output now includes residuals error metrics RMSE. fit_ball_berry also returns residuals error metrics output. “Creating Processing Tools” discusses best practices writing custom functions processing. example, function fitting rectangular hyperbola -Ci curve developed. “Combining PhotoGEA Packages” discusses best practices writing wrappers processing tools packages. example, wrapper plantecophys::fitaci developed. “Analyzing C3 -Ci Curves” vignette updated include new features fit_c3_aci. “Developing Data Analysis Pipeline” vignette updated include new functions added version. “Working Extended Data Frames” vignette updated include new diagrams. “Getting Started PhotoGEA” vignette updated include links new vignettes. https://github.com/eloch216/PhotoGEA/pull/50 https://github.com/eloch216/PhotoGEA/pull/52 https://github.com/eloch216/PhotoGEA/pull/53 https://github.com/eloch216/PhotoGEA/pull/54 https://github.com/eloch216/PhotoGEA/pull/55 https://github.com/eloch216/PhotoGEA/pull/56","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"changes-in-photogea-version-050-2022-09-16","dir":"Changelog","previous_headings":"","what":"Changes in PhotoGEA version 0.5.0 (2022-09-16)","title":"Changes in PhotoGEA version 0.5.0 (2022-09-16)","text":"Added new vignette demonstrating analyze C3 -Ci curve data. Included TPU output calculate_c3_assimilation. organize_response_curve_data function, changed default value ordering_column_tolerance column Inf disable check default, since often want reorder using column like Ci follow sequence values every curve. Added new input arguments fit_c3_aci: min_aj_cutoff max_aj_cutoff, provide way constrain range Cc Aj allowed limiting assimilation rate. Added new function calibrating TDL data (process_tdl_cycle_polynomial) option using gm_from_tdl script. Modified Licor-TDL pairing stop assuming particular relationship sample reference valve numbers. Fixed issue calculate_c3_assimilation causing report incorrect values low Cc. Fixed several typos Ac misidentified “RuBP-limited” rate; fact, RuBP-saturated rate commonly referred rubisco-limited rate. Added new example script uses fit_c3_aci. https://github.com/eloch216/PhotoGEA/pull/44 https://github.com/eloch216/PhotoGEA/pull/46 https://github.com/eloch216/PhotoGEA/pull/47 https://github.com/eloch216/PhotoGEA/pull/48","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"changes-in-photogea-version-040-2022-09-07","dir":"Changelog","previous_headings":"","what":"Changes in PhotoGEA version 0.4.0 (2022-09-07)","title":"Changes in PhotoGEA version 0.4.0 (2022-09-07)","text":"Renamed GitHub repository licor-processing--analysis PhotoGEA. Made GitHub repository public, allows simpler installation via remotes::install_github. Initialized website using pkgdown GitHub Pages using usethis::use_pkgdown_github_pages; website now available https://eloch216.github.io/PhotoGEA/index.html. Added stability check. Made stats calculations clear. function excluding data points (remove_points). cross-platform file selection tool (choose_input_files). function calculating C3 assimilation rates (calculate_c3_assimilation). function fitting C3 CO2 response curves (fit_c3_aci). function setting exdf column values (set_variable). function calculating Arrhenius exponents (calculate_arrhenius). Added option thorough check .exdf. organize_response_curve_data now specification points remove rather points keep, usually easier . document_variables (formerly specify_variables) exclude_outliers barchart_with_errorbars (formerly bar_wrapper) bwplot_wrapper (formerly box_wrapper) xyplot_avg_rc (formerly avg_xyplot) multi_curve_colors (formerly default_colors) calculate_cc check_required_variables (formerly check_required_columns) example_data_files (also added new files C3 -Ci curves) c3_arrhenius_bernacchi, c3_arrhenius_sharkey, c4_arrhenius_von_caemmerer add_gm_to_licor_data_from_table add_gm_to_licor_data_from_value batch_specify_oxygen batch_specify_respiration choose_input_gm_table_file read_gm_table (functions can replicated set_variable) vignette describing work extended data frames. vignette describing develop data analysis pipeline. vignette introducing new users PhotoGEA. fit_c3_aci calculate_c3_assimilation calculate_cc calculate_gas_properties calculate_c3_assimilation calculate_ball_berry_index fit_ball_berry https://github.com/eloch216/PhotoGEA/pull/33 https://github.com/eloch216/PhotoGEA/pull/34 https://github.com/eloch216/PhotoGEA/pull/35 https://github.com/eloch216/PhotoGEA/pull/37 https://github.com/eloch216/PhotoGEA/pull/41 https://github.com/eloch216/PhotoGEA/pull/42","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"changes-in-photogea-version-030-2022-08-15","dir":"Changelog","previous_headings":"","what":"Changes in PhotoGEA version 0.3.0 (2022-08-15)","title":"Changes in PhotoGEA version 0.3.0 (2022-08-15)","text":"version adds substantial amount documentation, including vignette describing use PhotoGEA analyze TDL data. working documentation, several changes made key functions behaved reasonably became easier document. exdf objects can now initialized just data frame; case, units categories NA. apply_fit_across_reps process_tdl_cycles replaced two new lower-level functions offer generality: .exdf consolidate. check_response_curve_data check_signal_averaging_data consolidated one function: check_licor_data. exdf method cbind added. exclude_tdl_cycles extract_tdl_valve removed since can easily reproduced basic exdf functionality. functions creating modifying Excel files removed since longer want follow strategy. basic_stats “Variable J” example script fixed.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"changes-in-photogea-version-020-2022-07-26","dir":"Changelog","previous_headings":"","what":"Changes in PhotoGEA version 0.2.0 (2022-07-26)","title":"Changes in PhotoGEA version 0.2.0 (2022-07-26)","text":"version adds substantial amount documentation, including vignette describing use PhotoGEA analyze Ball-Berry data. working documentation, several changes made key functions behaved reasonably became easier document. moment, basic_stats “Variable J” example script broken.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"changes-in-photogea-version-010","dir":"Changelog","previous_headings":"","what":"Changes in PhotoGEA version 0.1.0","title":"Changes in PhotoGEA version 0.1.0","text":"first version PhotoGEA. point, package state rapid development, changes described . reserving version 1.0.0 first version R package functions data sets documented; , major changes increase minor version number.","code":""}]
