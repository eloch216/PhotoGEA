[{"path":"https://eloch216.github.io/PhotoGEA/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 PhotoGEA authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Analyzing Ball-Berry Data","text":"vignette, give example showing analyze Ball-Berry data using PhotoGEA package. commands vignette can used initialize script, described Customizing Script.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"the-model","dir":"Articles","previous_headings":"Background","what":"The Model","title":"Analyzing Ball-Berry Data","text":"Ball-Berry model simple way describe response leaf’s stomata assimilation rate local environmental conditions. Specifically, predicts stomatal conductance water vapor using following equation: \\[ g_{sw} = b_0 + b_1 * A_n * h_s / C_s \\] \\(g_{sw}\\) stomatal conductance, \\(A_n\\) net assimilation rate, \\(h_s\\) relative humidity leaf surface, \\(C_s\\) CO2 concentration leaf surface. term \\(A_n * h_s / C_s\\) commonly referred Ball-Berry index, model can described predicting linear relationship stomatal conductance Ball-Berry index. intercept (\\(b_0\\)) slope (\\(b_1\\)) linear relationship referred Ball-Berry parameters, describe leaf’s stomatal response. Although model certainly oversimplification, encode important stomatal responses. example, humidity low, stomata real plant tend close, reducing stomatal conductance. Likewise, CO2 concentration around leaf depleted, stomata real plant tend open, increasing somatal conductance. information model possible alternatives, see following papers: Ball, Woodrow, Berry (1987) Tardieu Davies (1993) Leuning (1995) Dewar (2002)","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"the-data","dir":"Articles","previous_headings":"Background","what":"The Data","title":"Analyzing Ball-Berry Data","text":"Ball-Berry parameters typically determined measuring Ball-Berry curve, one environmental factors influence Ball-Berry index systematically varied across range values. value, care taken \\(A_n\\) \\(g_{sw}\\) reached steady-state values, \\(A_n\\), \\(g_{sw}\\), key pieces information recorded. Finally, linear fit experimentally observed \\(g_{sw}\\) function Ball-Berry index performed extract values Ball-Berry intercept slope. photosynthetic gas exchange measurements commonly performed using Licor portable photosynthesis system Li-6400 Li-6800. machines record values \\(A_n\\), \\(g_{sw}\\), many important quantities. produce two types output files: plain-text Microsoft Excel. often convenient work Excel files since entries can easily modified (example, remove extraneous row add new column). hand, can difficult access file contents using pieces software R. However, PhotoGEA package reduces barrier including tools reading Licor Excel files R, demonstrated following section.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"loading-packages","dir":"Articles","previous_headings":"","what":"Loading Packages","title":"Analyzing Ball-Berry Data","text":"always, first step load packages using. addition PhotoGEA, also use lattice package generating plots. lattice package installed R setup, can install typing install.packages('lattice').","code":"# Load required packages library(PhotoGEA) library(lattice)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"loading-licor-data","dir":"Articles","previous_headings":"","what":"Loading Licor Data","title":"Analyzing Ball-Berry Data","text":"PhotoGEA package includes two files representing Ball-Berry data measured using two Li-6800 instruments. data stored Microsoft Excel files, includes curves measured two different crop species (tobacco soybean) several different plots . curve seven-point light response curve; words, incident light intensity varied change \\(A_n\\) hence Ball-Berry index. Although two files based real data, noise added since unpublished, files used examples. files stored computer somewhere R package installation directory, full paths files can obtained system.file: actually read data files store R objects, use read_licor_file function PhotoGEA. Since multiple files read, call function file using lapply: result command R list “extended data frames” (abbreviated exdf objects). exdf class special data structure defined PhotoGEA package. many ways, exdf object equivalent data frame, major difference exdf object includes units column. information, type ?exdf R terminal access built-help menu entry. Generally, convenient work single exdf object rather list , next step combine objects list. action can accomplished using rbind function, combines table-like objects rows; words, stacks two tables vertically. action makes sense tables columns, combine exdf objects, make sure case. PhotoGEA package includes function called identify_common_columns can used get names columns present Licor files. , can extract just columns, combine exdf objects single one. Now single R object called licor_data includes data several Licor Excel files.","code":"# Define a vector of paths to the files we wish to load file_paths <- c(   system.file('extdata', 'ball_berry_1.xlsx', package = 'PhotoGEA'),   system.file('extdata', 'ball_berry_2.xlsx', package = 'PhotoGEA') ) # Load each file, storing the result in a list licor_exdf_list <- lapply(file_paths, function(fpath) {   read_licor_file(fpath, c(3, 5, 7, 9, 11, 13), 14, 15, 16, 17, 'time') }) # Get the names of all columns that are present in all of the Licor files columns_to_keep <- do.call(identify_common_columns, licor_exdf_list)  # Extract just these columns licor_exdf_list <- lapply(licor_exdf_list, function(x) {   x[ , columns_to_keep, TRUE] })  # Use `rbind` to combine all the data licor_data <- do.call(rbind, licor_exdf_list)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"checking-licor-data","dir":"Articles","previous_headings":"","what":"Checking Licor Data","title":"Analyzing Ball-Berry Data","text":"extracting Ball-Berry parameters, good idea basic checks data ensure organized properly measured properly.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"basic-checks","dir":"Articles","previous_headings":"Checking Licor Data","what":"Basic Checks","title":"Analyzing Ball-Berry Data","text":"First, make sure column data whose value uniquely identifies curve. particular data set, several “user constants” defined making measurements help identify curve: instrument, species, plot. However, neither columns alone sufficient uniquely identify curve. can solve issue creating new column combines values : next step make sure column correctly identifies response curve. , can use check_licor_data function PhotoGEA. supply name column uniquely identify response curve (curve_identifier), expected number points curve (7), name “driving” column follow sequence curve (Qin), tolerance values driving column (1.0 mol / m^2 / s). data passes checks, function output produce messages. (information, see built-help menu entry typing ?check_licor_data.) However, check_licor_data detects issue, print helpful message R terminal. example, specified wrong number points, wrong identifier column, unrealistic tolerance, get error messages:","code":"# Create a new identifier column formatted like `instrument - species - plot` licor_data[ , 'curve_identifier'] <-   paste(licor_data[ , 'instrument'], '-', licor_data[ , 'species'], '-', licor_data[ , 'plot']) # Make sure the data meets basic requirements check_licor_data(licor_data, 'curve_identifier', 7, 'Qin', 1.0) check_licor_data(licor_data, 'curve_identifier', 8) #>       curve_identifier npts #> 1 ripe4 - soybean - 1a    7 #> 2 ripe4 - soybean - 1b    7 #> 3  ripe4 - soybean - 5    7 #> 4  ripe4 - tobacco - 2    7 #> 5  ripe5 - soybean - 1    7 #> 6 ripe5 - soybean - 5a    7 #> 7 ripe5 - soybean - 5c    7 #> 8  ripe5 - tobacco - 5    7 #> Error in check_licor_data(licor_data, \"curve_identifier\", 8): One or more curves does not have the expected number of points.  check_licor_data(licor_data, 'species', 7) #>   species npts #> 1 soybean   42 #> 2 tobacco   14 #> Error in check_licor_data(licor_data, \"species\", 7): One or more curves does not have the expected number of points.  check_licor_data(licor_data, 'curve_identifier', 7, 'Qin', 0.1) #> ripe4 - soybean - 1a ripe4 - soybean - 1b  ripe4 - soybean - 5  #>              2000.03              1999.85              1999.98  #>  ripe4 - tobacco - 2  ripe5 - soybean - 1 ripe5 - soybean - 5a  #>              2000.02              2000.05              2000.14  #> ripe5 - soybean - 5c  ripe5 - tobacco - 5  #>              2000.12              1999.81 #> Error in check_licor_data(licor_data, \"curve_identifier\", 7, \"Qin\", 0.1): Values of the `Qin` column are not identical (within the tolerance of 0.1) for point 1 within the curve sequence."},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"qualitative-checks","dir":"Articles","previous_headings":"Checking Licor Data","what":"Qualitative Checks","title":"Analyzing Ball-Berry Data","text":"Since data passed basic checks, can now take look make sure seems reasonable. Sometimes Licor override temperature humidity controls making measurements; case, conditions inside measurement chamber may stable, curves may accurately reflect plant’s true steady-state stomatal response. can check types issues making plots. situation, lattice library makes simple include curve separate subplot figure. following sections, generate several different plots check curve quality.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"humidity-control","dir":"Articles","previous_headings":"Checking Licor Data > Qualitative Checks","what":"Humidity Control","title":"Analyzing Ball-Berry Data","text":", Humidifier_% Desiccant_% represent flow humidifier desiccant columns, value 0 indicates valve column fully closed value 100 indicates valve column fully opened. RHcham represents relative humidity inside chamber percentage (words, value 0 100). Qin incident photosynthetically active flux density (PPFD). curves measured, chamber humidity setpoint specified. , looking plot, check relative humidity fairly constant curve. Typically, accompanied relatively smooth changes valve percentages accomodate changes ambient humidity leaf photosynthesis. plot, data looks good.","code":"# Make a plot to check humidity control xyplot(   RHcham + `Humidifier_%` + `Desiccant_%` ~ Qin | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(0, 100),   xlim = c(0, 2200),   xlab = paste0('Incident PPFD (', licor_data$units$Qin, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"temperature-control","dir":"Articles","previous_headings":"Checking Licor Data > Qualitative Checks","what":"Temperature Control","title":"Analyzing Ball-Berry Data","text":", TleafCnd leaf temperature measured using thermocouple, Txchg temperature heat exhanger used control air temperature measurement instrument. curves measured, exchanger setpoint specified. , looking plot, check Txchg constant curve leaf temperature vary erratic way. plot, data looks good.","code":"# Make a plot to check temperature control xyplot(   TleafCnd + Txchg ~ Qin | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(25, 40),   xlim = c(0, 2200),   xlab = paste0('Incident PPFD (', licor_data$units$Qin, ')'),   ylab = paste0('Temperature (', licor_data$units$TleafCnd, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"co2-control","dir":"Articles","previous_headings":"Checking Licor Data > Qualitative Checks","what":"CO2 Control","title":"Analyzing Ball-Berry Data","text":", CO2_s CO2 concentration sample cell CO2_r CO2 concentration reference cell. curves measured, sample cell CO2 concentration setpoint supplied. , looking plot, check CO2_s constant curve. , looks like ripe5 instrument controlling CO2 expected several curves; CO2_s constant ripe5 - soybean - 1, ripe5 - soybean - 5c, ripe5 - soybean - 5. However, CO2_r relatively constant curves, changes CO2_s smooth, reasonable expect measurements represent true steady-state values. Considering , curves acceptable based CO2 plots.","code":"# Make a plot to check CO2 control xyplot(   CO2_s + CO2_r ~ Qin | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(360, 480),   xlim = c(0, 2200),   xlab = paste0('Incident PPFD (', licor_data$units$Qin, ')'),   ylab = paste0('CO2 concentration (', licor_data$units$CO2_r, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"light-response-curves","dir":"Articles","previous_headings":"Checking Licor Data > Qualitative Checks","what":"Light-Response Curves","title":"Analyzing Ball-Berry Data","text":"simply looking reasonable light-response curve shape, assimilation low light low, assimilation roughly linear response initial increases light intensity, finally reaches plateau. strong deviations expected shape may indicate plant stressed otherwise behaving abnormally, might want use curve Ball-Berry analysis. plot, three curves look like normal C3 light response curves: ripe4 - soybean - 1a, ripe4 - soybean - 1b, ripe4 - soybean - 5. strange curves likely byproduct noise intentionally added true measured data (see Data). Nevertheless, may good idea remove proceeding Ball-Berry fitting.","code":"# Make a plot to check light-response curves xyplot(   A ~ Qin | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(-5, 50),   xlim = c(0, 2200),   xlab = paste0('Incident PPFD (', licor_data$units$Qin, ')'),   ylab = paste0('Net assimilation (', licor_data$units$A, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"removing-bad-curves","dir":"Articles","previous_headings":"Checking Licor Data","what":"Removing Bad Curves","title":"Analyzing Ball-Berry Data","text":"Since identified curves may acceptable Ball-Berry fitting, can remove follows:","code":"# Define a list of curves to remove from the data set curves_to_remove <- c(   'ripe4 - soybean - 1a',   'ripe4 - soybean - 1b',   'ripe4 - soybean - 5' )  # Remove them licor_data <-   licor_data[!licor_data[, 'curve_identifier'] %in% curves_to_remove, , TRUE]"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"fitting-licor-data","dir":"Articles","previous_headings":"","what":"Fitting Licor Data","title":"Analyzing Ball-Berry Data","text":"Now checked data quality, ready perform fitting. produced instruments, Licor data files include values Ball-Berry index; fact, even include values \\(h_s\\) \\(C_s\\) required calculate Ball-Berry index. However, PhotoGEA package includes two functions help calculations: calculate_gas_properties calculate_ball_berry_index. requires exdf object containing Licor data, well names several important columns data. units column checked attempt avoid unit-related errors. information functions can obtained built-help system typing ?calculate_gas_properties ?calculate_ball_berry_index. use sequentially calculate values Ball-Berry index: Together, functions add several new columns licor_data, including one called bb_index, includes values Ball-Berry index. information, now ready perform fitting procedure. operation, can use fit_ball_berry function PhotoGEA package, fits single Ball-Berry curve extract Ball-Berry parameters. apply function curve larger data set consolidate results, can use conjunction consolidate, also part PhotoGEA. (information functions, see built-help menu entries typing ?fit_ball_berry, ?.exdf, ?consolidate.) Together, functions split apart main data using curve identifier column defined (Basic Checks), make linear fit \\(g_{sw}\\) Ball-Berry index, return resulting parameters fits:","code":"# Calculate additional gas properties, including `RHleaf` and `Csurface` licor_data <- calculate_gas_properties(   licor_data,   'A', 'Ca', 'DeltaPcham', 'E', 'gbw', 'gsw', 'H2O_s', 'Pa', 'TleafCnd' )  # Calculate the Ball-Berry index licor_data <- calculate_ball_berry_index(licor_data, 'A', 'RHleaf', 'Csurface') # Fit a linear model to the Ball-Berry data ball_berry_results <- consolidate(by(   licor_data,                       # The `exdf` object containing the curves   licor_data[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_ball_berry,                   # The function to apply to each chunk of `licor_data`   'gsw',                            # Additional argument required by `fit_ball_berry`   'bb_index'                        # Additional argument required by `fit_ball_berry` ))"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"viewing-the-fitted-curves","dir":"Articles","previous_headings":"Fitting Licor Data","what":"Viewing the Fitted Curves","title":"Analyzing Ball-Berry Data","text":"made fits, now good idea visually check , making sure look reasonable. , can use xyplot lattice library quickly make plots fits, stored ball_berry_results$fits, exdf object:  fits look good!","code":"# Plot the Ball-Berry fits xyplot(   gsw + gsw_fit ~ bb_index | curve_identifier,   data = ball_berry_results$fits$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste0('Ball-Berry index (', ball_berry_results$fits$units$bb_index, ')'),   ylab = paste0('Stomatal conductance to H2O (', ball_berry_results$fits$units$gsw, ')'),   ylim = c(0, 0.8),   xlim = c(0, 0.1) )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"viewing-the-fitted-parameter-values","dir":"Articles","previous_headings":"Fitting Licor Data","what":"Viewing the Fitted Parameter Values","title":"Analyzing Ball-Berry Data","text":"can also take look fitted Ball-Berry parameter values, stored ball_berry_results$parameters, another exdf object. object includes many columns care . can view follows:","code":"# View the Ball-Berry parameters columns_for_viewing <-   c('instrument', 'species', 'plot', 'bb_intercept', 'bb_slope', 'r_squared')  ball_berry_parameters <-   ball_berry_results$parameters[ , columns_for_viewing, TRUE]  print(ball_berry_parameters) #>    instrument [UserDefCon] (NA) species [UserDefCon] (NA) #> 22                        ripe4                   tobacco #> 36                        ripe5                   soybean #> 29                        ripe5                   soybean #> 43                        ripe5                   soybean #> 50                        ripe5                   tobacco #>    plot [UserDefCon] (NA) bb_intercept [fit_ball_berry] (mol m^(-2) s^(-1)) #> 22                      2                                        0.09410874 #> 36                      1                                        0.18849637 #> 29                     5a                                        0.10722148 #> 43                     5c                                        0.09976589 #> 50                      5                                        0.12819393 #>    bb_slope [fit_ball_berry] (dimensionless) r_squared [fit_ball_berry] () #> 22                                  3.613489                     0.7186892 #> 36                                  5.240165                     0.9321769 #> 29                                  4.823671                     0.8866346 #> 43                                  5.123674                     0.8454999 #> 50                                  4.332600                     0.9846671"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"extracting-average-values","dir":"Articles","previous_headings":"Fitting Licor Data","what":"Extracting Average Values","title":"Analyzing Ball-Berry Data","text":"Finally, can extract average values Ball-Berry parameters species using basic_stats function PhotoGEA:","code":"# Compute the average and standard error for the Ball-Berry slope and intercept # for each species ball_berry_averages <- basic_stats(   ball_berry_results$parameters[ , c('species', 'K', 'bb_intercept', 'bb_slope'), TRUE],   'species' )  # View the averages and errors print(ball_berry_averages) #>   species [UserDefCon] (NA) K [Const] (NA) #> 1                   soybean            0.5 #> 2                   tobacco            0.5 #>   bb_intercept_avg [fit_ball_berry] (mol m^(-2) s^(-1)) #> 1                                             0.1318279 #> 2                                             0.1111513 #>   bb_intercept_stderr [fit_ball_berry] (mol m^(-2) s^(-1)) #> 1                                               0.02841585 #> 2                                               0.01704259 #>   bb_slope_avg [fit_ball_berry] (dimensionless) #> 1                                      5.062503 #> 2                                      3.973044 #>   bb_slope_stderr [fit_ball_berry] (dimensionless) #> 1                                        0.1240609 #> 2                                        0.3595554"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"customizing-your-script","dir":"Articles","previous_headings":"","what":"Customizing Your Script","title":"Analyzing Ball-Berry Data","text":"Note commands vignette written general way can used basis Ball-Berry analysis script (see Commands Document). order use script, following changes may required. may also others specifically mentioned .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"input-files","dir":"Articles","previous_headings":"Customizing Your Script","what":"Input Files","title":"Analyzing Ball-Berry Data","text":"file paths specified file_paths need modified point Licor files. script, may want consider using choose_input_licor_files function PhotoGEA; function create pop-browser window can interactively select set Excel files. Sometimes convenient writing full file paths. example, replace previous definition file_paths one: Unfortunately, choose_input_licor_files available interactive R sessions running Microsoft Windows.","code":"# Interactively define a vector of paths to the files we wish to load file_paths <- choose_input_licor_files()"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"curve-identifier","dir":"Articles","previous_headings":"Customizing Your Script","what":"Curve Identifier","title":"Analyzing Ball-Berry Data","text":"Depending user constants defined Licor Excel files, may need modify definition curve_identifier column.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"excluded-curves","dir":"Articles","previous_headings":"Customizing Your Script","what":"Excluded Curves","title":"Analyzing Ball-Berry Data","text":"Depending qualitative data checks, may need change definition curves_to_remove vector.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"averages-and-standard-errors","dir":"Articles","previous_headings":"Customizing Your Script","what":"Averages and Standard Errors","title":"Analyzing Ball-Berry Data","text":"Depending data organized, may want change column used divide data calculating averages standard errors.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"plots","dir":"Articles","previous_headings":"Customizing Your Script","what":"Plots","title":"Analyzing Ball-Berry Data","text":"may need change axis limits plots. Alternatively, can remove , allowing xyplot automatically choose .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"saving-results","dir":"Articles","previous_headings":"Customizing Your Script","what":"Saving Results","title":"Analyzing Ball-Berry Data","text":"may want use write.csv save fitting results csv files. example, following commands allow interactively choose output filenames resulting csv files:","code":"write.csv(ball_berry_results$fits, file.choose(), row.names = FALSE) write.csv(ball_berry_results$parameters, file.choose(), row.names = FALSE) write.csv(ball_berry_averages, file.choose(), row.names = FALSE)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_ball_berry_data.html","id":"commands-from-this-document","dir":"Articles","previous_headings":"","what":"Commands From This Document","title":"Analyzing Ball-Berry Data","text":"following code chunk includes central commands used throughout document. compiled make easy copy/paste text file initialize script.","code":"# Load required packages library(PhotoGEA) library(lattice)  # Define a vector of paths to the files we wish to load file_paths <- c(   system.file('extdata', 'ball_berry_1.xlsx', package = 'PhotoGEA'),   system.file('extdata', 'ball_berry_2.xlsx', package = 'PhotoGEA') )  # Load each file, storing the result in a list licor_exdf_list <- lapply(file_paths, function(fpath) {   read_licor_file(fpath, c(3, 5, 7, 9, 11, 13), 14, 15, 16, 17, 'time') })  # Get the names of all columns that are present in all of the Licor files columns_to_keep <- do.call(identify_common_columns, licor_exdf_list)  # Extract just these columns licor_exdf_list <- lapply(licor_exdf_list, function(x) {   x[ , columns_to_keep, TRUE] })  # Use `rbind` to combine all the data licor_data <- do.call(rbind, licor_exdf_list)  # Create a new identifier column formatted like `instrument - species - plot` licor_data[ , 'curve_identifier'] <-   paste(licor_data[ , 'instrument'], '-', licor_data[ , 'species'], '-', licor_data[ , 'plot'])  # Make sure the data meets basic requirements check_licor_data(licor_data, 'curve_identifier', 7, 'Qin', 1.0)  # Make a plot to check humidity control xyplot(   RHcham + `Humidifier_%` + `Desiccant_%` ~ Qin | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(0, 100),   xlim = c(0, 2200),   xlab = paste0('Incident PPFD (', licor_data$units$Qin, ')') )  # Make a plot to check temperature control xyplot(   TleafCnd + Txchg ~ Qin | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(25, 40),   xlim = c(0, 2200),   xlab = paste0('Incident PPFD (', licor_data$units$Qin, ')'),   ylab = paste0('Temperature (', licor_data$units$TleafCnd, ')') )  # Make a plot to check CO2 control xyplot(   CO2_s + CO2_r ~ Qin | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(360, 480),   xlim = c(0, 2200),   xlab = paste0('Incident PPFD (', licor_data$units$Qin, ')'),   ylab = paste0('CO2 concentration (', licor_data$units$CO2_r, ')') )  # Make a plot to check light-response curves xyplot(   A ~ Qin | curve_identifier,   data = licor_data$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   ylim = c(-5, 50),   xlim = c(0, 2200),   xlab = paste0('Incident PPFD (', licor_data$units$Qin, ')'),   ylab = paste0('Net assimilation (', licor_data$units$A, ')') )  # Define a list of curves to remove from the data set curves_to_remove <- c(   'ripe4 - soybean - 1a',   'ripe4 - soybean - 1b',   'ripe4 - soybean - 5' )  # Remove them licor_data <-   licor_data[!licor_data[, 'curve_identifier'] %in% curves_to_remove, , TRUE]  # Calculate additional gas properties, including `RHleaf` and `Csurface` licor_data <- calculate_gas_properties(   licor_data,   'A', 'Ca', 'DeltaPcham', 'E', 'gbw', 'gsw', 'H2O_s', 'Pa', 'TleafCnd' )  # Calculate the Ball-Berry index licor_data <- calculate_ball_berry_index(licor_data, 'A', 'RHleaf', 'Csurface')  # Fit a linear model to the Ball-Berry data ball_berry_results <- consolidate(by(   licor_data,                       # The `exdf` object containing the curves   licor_data[, 'curve_identifier'], # A factor used to split `licor_data` into chunks   fit_ball_berry,                   # The function to apply to each chunk of `licor_data`   'gsw',                            # Additional argument required by `fit_ball_berry`   'bb_index'                        # Additional argument required by `fit_ball_berry` ))  # Plot the Ball-Berry fits xyplot(   gsw + gsw_fit ~ bb_index | curve_identifier,   data = ball_berry_results$fits$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste0('Ball-Berry index (', ball_berry_results$fits$units$bb_index, ')'),   ylab = paste0('Stomatal conductance to H2O (', ball_berry_results$fits$units$gsw, ')'),   ylim = c(0, 0.8),   xlim = c(0, 0.1) )  # View the Ball-Berry parameters columns_for_viewing <-   c('instrument', 'species', 'plot', 'bb_intercept', 'bb_slope', 'r_squared')  ball_berry_parameters <-   ball_berry_results$parameters[ , columns_for_viewing, TRUE]  print(ball_berry_parameters)  # Compute the average and standard error for the Ball-Berry slope and intercept # for each species ball_berry_averages <- basic_stats(   ball_berry_results$parameters[ , c('species', 'K', 'bb_intercept', 'bb_slope'), TRUE],   'species' )  # View the averages and errors print(ball_berry_averages)"},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Analyzing TDL Data","text":"vignette, give example showing analyze data tunable diode laser (TDL) using PhotoGEA package. commands vignette can used initialize script, described Customizing Script.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Analyzing TDL Data","text":"process photosynthesis tends preferentially assimilate 12C often rarer heavier stable isotope 13C, carbon isotope discrimination measurements proven incredibly useful fields plant biology climate science (Evans Caemmerer 2013). Although several methods available measuring relative concentrations 12C 13C gas mixtures, tunable diode laser (TDL) absorption spectroscopy emerged one popular due high sensitivity relatively short measurement times. technique, emission wavelength laser tuned characteristic absorption lines species present gas, resulting decrease light transmission can used determine gas concentration even properties temperature. information general technique, please see Wikipedia page. gas concentrations reported directly TDL measurement system tend influenced electrical noise subtle changes air properties within measurement room. reason, usually necessary make frequent measurements gas mixtures known concentrations output signals can calibrated. fact, TDL systems used plant biology include gas handling system multiple valves can attached various gas sources, including calibration tanks well lines gas whose isotopic makeup determined. measurement, gas handling system periodically cycles valve succession, data logger used record TDL output signal valve. “TDL cycles” basic unit TDL measurement. typical output file TDL used carbon isotope discrimination measurements therefore includes following columns (minimum): time stamp, valve number, raw 12C concentration, raw 13C concentration. analyze data set, necessary identify individual TDL cycles within entire set use calibration valves determine accurate gas concentrations valves. Additional operations may also required, removing cycles seem unreliable smoothing data calibration decrease noise. vignette, demonstrate several tools PhotoGEA package can help streamline operations R environment.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"loading-packages","dir":"Articles","previous_headings":"","what":"Loading Packages","title":"Analyzing TDL Data","text":"always, first step load packages using. addition PhotoGEA, also use lattice package generating plots. lattice package installed R setup, can install typing install.packages('lattice').","code":"# Load required packages library(PhotoGEA) library(lattice)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"loading-tdl-data","dir":"Articles","previous_headings":"","what":"Loading TDL Data","title":"Analyzing TDL Data","text":"PhotoGEA package includes two files representing TDL data recorded Campbell Scientific CR3000 data logger two consecutive days. Although two files based real data, noise added since unpublished, files used examples. files stored computer somewhere R package installation directory, full paths files can obtained system.file: actually read data files store R objects, use read_tdl_file function PhotoGEA. Since multiple files read, call function file using lapply: result command R list “extended data frames” (abbreviated exdf objects). exdf class special data structure defined PhotoGEA package. many ways, exdf object equivalent data frame, major difference exdf object includes units column. information, type ?exdf R terminal access built-help menu entry. Generally, convenient work single exdf object rather list , next step combine objects list. action can accomplished using rbind function, combines table-like objects rows; words, stacks two tables vertically. action makes sense tables columns, combine exdf objects, make sure case. PhotoGEA package includes function called identify_common_columns can used get names columns present TDL files. , can extract just columns, combine exdf objects single one. Now single R object called tdl_files includes data several TDL data files.","code":"# Define a vector of paths to the files we wish to load file_paths <- c(   system.file('extdata', 'tdl_sampling_1.dat', package = 'PhotoGEA'),   system.file('extdata', 'tdl_sampling_2.dat', package = 'PhotoGEA') ) # Load each file, storing the result in a list tdl_exdf_list <- lapply(file_paths, function(fpath) {   read_tdl_file(fpath, 1, 2, 3, 5, 'TIMESTAMP') }) # Get the names of all columns that are present in all of the TDL files columns_to_keep <- do.call(identify_common_columns, tdl_exdf_list)  # Extract just these columns tdl_exdf_list <- lapply(tdl_exdf_list, function(x) {   x[ , columns_to_keep, TRUE] })  # Use `rbind` to combine all the data tdl_files <- do.call(rbind, tdl_exdf_list)"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"identifying-tdl-cycles","dir":"Articles","previous_headings":"","what":"Identifying TDL Cycles","title":"Analyzing TDL Data","text":"first step analyzing TDL data identify “TDL cycles” present within . , need know following information: name column TDL data indicates valve measured. valve number marks beginning new cycle. many valves measured cycle. name column TDL data indicates time measurement made. amount time take cycle valves. information usually known beforehand settings specified operating TDL; alternatively, isn’t known already, can often determined taking look data via View(tdl_files). information obtained, identify_tdl_cycles function PhotoGEA package can used automatically assign number measurement cycle: Now tdl_files object two new columns: one called cycle_num specifies TDL cycle, called elapsed_time indicates elapsed time start cycle.","code":"# Assign numbers to all full cycles in the data set tdl_files <- identify_tdl_cycles(   tdl_files,   valve_column_name = 'valve_number',   cycle_start_valve = 20,   expected_cycle_length_minutes = 2.7,   expected_cycle_num_pts = 9,   timestamp_colname = 'TIMESTAMP' )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"processing-tdl-cycles","dir":"Articles","previous_headings":"","what":"Processing TDL Cycles","title":"Analyzing TDL Data","text":"Now individual cycles identified, next step use reference valves calibrate TDL readings. general, procedure depend strongly individual TDL system, since one may different types reference tanks. data used vignette measured using TDL Carl Bernacchi’s lab Edward R. Madigan Laboratory University Illinois, Urbana-Champaign. includes five reference tanks can broken three types: One certified tank whose total CO2 concentration carbon isotope ratio supplied NOAA. One nitrogen tank carbon . final type reference another CO2 tank whose isotype ratio measured UIUC using different method; tank mixed nitrogen three different ratios provide range carbon concentrations. full procedure using references calibrate TDL signal somewhat complicated. Fortunately, easy determine apply calibrations single TDL cycle using process_tdl_cycle_erml function PhotoGEA. apply function TDL cycle larger data set consolidate results, can use conjunction consolidate, also part PhotoGEA. (information functions, see built-help menu entries typing ?process_tdl_cycle_erml, ?.exdf, ?consolidate.) previous function, many inputs (noaa_cylinder_isotope_ratio) must obtained whoever managing TDL system used: output function – processed_tdl – list several exdf objects include calibrated TDL readings valve information calibration parameters determined processing data.","code":"# Use the data from the calibration valves to determine calibrated carbon # concentrations from all valves in each TDL cycle processed_tdl <- consolidate(by(   tdl_files,   tdl_files[, 'cycle_num'],   process_tdl_cycle_erml,   valve_column_name = 'valve_number',   noaa_valve = 2,   calibration_0_valve = 20,   calibration_1_valve = 21,   calibration_2_valve = 23,   calibration_3_valve = 26,   raw_12c_colname = 'Conc12C_Avg',   raw_13c_colname = 'Conc13C_Avg',   noaa_cylinder_co2_concentration = 294.996,   noaa_cylinder_isotope_ratio = -8.40,   calibration_isotope_ratio = -11.505,   f_other = 0.00474,   R_VPDB = 0.0111797 ))"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"checking-the-calibrated-data","dir":"Articles","previous_headings":"Processing TDL Cycles","what":"Checking the Calibrated Data","title":"Analyzing TDL Data","text":"Typically good idea check raw data, calibrated data, calibration constants issues might affect reliability results. Since many valves involved calibration involves several different steps (see ?process_tdl_cycle_erml), also many possible things check. full check data might require creating viewing many different plots. first take look raw calibrated values 12C valve. information stored tdl_data element processed_tdl. lattice library makes simple include valve separate subplot figure, raw calibrated values separate traces. goal simply keep eye anythign looks unusual data.  figure, apparent valves 23 26 large spikes, surprising since calibration valves; gas flowing TDL valves expected fairly constant carbon concentration. possible view just one valve time detailed analysis. take look 12C concentration valve 26, exhibits spike.  graph, can see calibrated 12C concentration large deviation raw values near large spike, although calibrated raw values generally similar rest data. fact, can see valve 12 (one valves whose composition trying determine), also large deviation raw calibrated 12C signals near spike.  Finally, can also see traces anomaly calibration constants determined TDL cycle processing. plot, 12C gain factor nearly constant times exception cycles also spike 12C signal valve 26.","code":"# Plot the 12C concentration data from all the valves xyplot(   Conc12C_Avg + calibrated_12c ~ cycle_num | factor(valve_number),   data = processed_tdl$tdl_data$main_data,   type = 'p',   pch = 20,   auto = TRUE,   grid = TRUE,   xlab = paste0('Elapsed time (', processed_tdl$tdl_data$units$cycle_num, ')'),   ylab = paste0('12C concentration (', processed_tdl$tdl_data$units$Conc12C_Avg, ')'),   main = '12C concentrations' ) # Specify a single valve to plot valve_to_plot <- 26  # Get the processed data from the single valve single_valve <-   processed_tdl$tdl_data[processed_tdl$tdl_data[, 'valve_number'] == valve_to_plot, , TRUE]  # Plot the 12C concentration data from the single valve xyplot(   Conc12C_Avg + calibrated_12c ~ cycle_num,   data = single_valve$main_data,   type = 'b',   pch = 20,   auto = TRUE,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('12C concentration (', single_valve$units$Conc12C_Avg, ')'),   main = paste('12C concentrations from valve', valve_to_plot) ) # Plot the 12C gain factor determined during the calibration process xyplot(   gain_12CO2 ~ cycle_num,   data = processed_tdl$calibration_12CO2$main_data,   type = 'b',   pch = 16,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('12C gain factor (', processed_tdl$calibration_12CO2$units$gain_12CO2, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"processing-tdl-cycles-with-removal-and-smoothing","dir":"Articles","previous_headings":"","what":"Processing TDL Cycles (With Removal and Smoothing)","title":"Analyzing TDL Data","text":"Processing TDL Cycles, processed full contents raw TDL file. However, typical remove unreliable cycles apply smoothing functions valves processing data. section, demonstrate .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"removing-problematic-cycles","dir":"Articles","previous_headings":"Processing TDL Cycles (With Removal and Smoothing)","what":"Removing Problematic Cycles","title":"Analyzing TDL Data","text":"Checking Calibrated Data, located spike measured 12C concentration valve 26, one calibration values. Since presence spike indicates something unexpected happened TDL system, evidence calibration may compromised spike, probably good idea remove TDL cycles 12C signal valve 26 suddenly becomes large. Fortunately, simple R. following illustrates one way “clean” data removing unreliable TDL cycles; , actually remove two regions data appear suspicious:","code":"# Define a vector of cycle numbers that should be removed tdl_cycles_to_remove <- c(   145:150, # The big spike in valve 26   103:107  # A smaller spike in valve 26 )  # Remove them tdl_files_clean <-   tdl_files[!tdl_files[, 'cycle_num'] %in% tdl_cycles_to_remove, , TRUE]"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"smoothing-the-tdl-data","dir":"Articles","previous_headings":"Processing TDL Cycles (With Removal and Smoothing)","what":"Smoothing the TDL Data","title":"Analyzing TDL Data","text":"Since TDL signals susceptible several types noise composition gas calibration tanks expected relatively constant, safe assume high-frequency variations calibration valve signals due noise. reason, may helpful smooth data calibration valves processing TDL cycles. may reduce noise calibrated values “unknown” valves. many possible strategies smoothing time series values measured valve, PhotoGEA package attempt provide smoothing algorithms. Instead, PhotoGEA provides general function called smooth_tdl_data can apply smoothing function data one valve. use function, user must specify smoothing method. (information, see help menu entry typing ?smooth_tdl_data.) show spline smoothing function base R package can used smooth 12C 13C signals calibration valves:","code":"# Define a spline smoothing function spline_smoothing_function <- function(Y, X) {     ss <- smooth.spline(X, Y)     return(ss$y) }  # Specify the valves that should be smoothed valves_to_smooth <- c(2, 20, 21, 23, 26)  # Initialize a smoothed copy of the data tdl_files_smooth <- tdl_files_clean  # Apply the smoothing function to the 12C and 13C signal from each valve for (valve in valves_to_smooth) {   for (column in c('Conc12C_Avg', 'Conc13C_Avg')) {     tdl_files_smooth <-       smooth_tdl_data(tdl_files_smooth, column, 'valve_number', valve, spline_smoothing_function)   } }"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"checking-the-data-after-cleaning-and-smoothing","dir":"Articles","previous_headings":"Processing TDL Cycles (With Removal and Smoothing)","what":"Checking the Data After Cleaning and Smoothing","title":"Analyzing TDL Data","text":"Now removed problematic cycles applied spline smoothing function calibration valves, can process TDL cycles using command Processing TDL Cycles; difference operating smoothed data: important confirm smoothing procedure produced reasonable outputs. create plot comparing raw smoothed 12C signal valves:  Although clear successfully removed spikes valve 26, may helpful display just valve take closer look:  graph can see spike indeed removed smoothed data good job following raw data valve. another check, can also see smoothed data altered calibration process. look valve 12, Checking Calibrated Data:  see cleaning smoothing data, calibrated data “unknown” valve slightly different raw data across cycles. Finally, can also plot 12C gain factor Checking Calibrated Data:  , sudden spikes remaining gain factor, indicating good job cleaning smoothing data.","code":"# Use the data from the calibration valves to determine calibrated carbon # concentrations from all valves in each TDL cycle processed_smooth_tdl <- consolidate(by(   tdl_files_smooth,   tdl_files_smooth[, 'cycle_num'],   process_tdl_cycle_erml,   valve_column_name = 'valve_number',   noaa_valve = 2,   calibration_0_valve = 20,   calibration_1_valve = 21,   calibration_2_valve = 23,   calibration_3_valve = 26,   raw_12c_colname = 'Conc12C_Avg',   raw_13c_colname = 'Conc13C_Avg',   noaa_cylinder_co2_concentration = 294.996,   noaa_cylinder_isotope_ratio = -8.40,   calibration_isotope_ratio = -11.505,   f_other = 0.00474,   R_VPDB = 0.0111797 )) # Add columns indicating which which operations have been applied to each exdf tdl_files[ , 'data_type'] <- '01 raw data' tdl_files_clean[ , 'data_type'] <- '02 cleaned data' tdl_files_smooth[ , 'data_type'] <- '03 cleaned smoothed data'  # Make a big exdf object with the raw and smoothed data tdl_compare <- rbind(tdl_files, tdl_files_clean, tdl_files_smooth)  # Keep only the valves that were smoothed tdl_compare <-   tdl_compare[tdl_compare[ , 'valve_number'] %in% valves_to_smooth, , TRUE]  # Plot the uncalibrated 12C concentration data from all the valves xyplot(   Conc12C_Avg ~ cycle_num | factor(valve_number),   group = data_type,   data = tdl_compare$main_data,   type = 'b',   pch = 20,   auto = TRUE,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('Uncalibrated 12C concentration (', tdl_compare$tdl_data$units$Conc12C_Avg, ')'),   main = 'Uncalibrated 12C concentrations' ) # Specify a single valve to plot valve_to_compare <- 26  # Get the comparison data from the single valve single_valve_compare <-   tdl_compare[tdl_compare[, 'valve_number'] == valve_to_compare, , TRUE]  # Plot the 12C concentration data from the single valve xyplot(   Conc12C_Avg ~ cycle_num,   group = data_type,   data = single_valve_compare$main_data,   type = 'b',   pch = 20,   auto = TRUE,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('Uncalibrated 12C concentration (', single_valve_compare$units$Conc12C_Avg, ')'),   main = paste('Uncalibrated 12C concentrations from valve', valve_to_compare) ) # Specify a single valve to plot valve_to_plot <- 12  # Get the processed data from the single valve single_valve_smooth <- processed_smooth_tdl$tdl_data[   processed_smooth_tdl$tdl_data[, 'valve_number'] == valve_to_plot, , TRUE]  # Plot the 12C concentration data from the single valve xyplot(   Conc12C_Avg + calibrated_12c ~ cycle_num,   data = single_valve_smooth$main_data,   type = 'b',   pch = 20,   auto = TRUE,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('12C concentration (', single_valve_smooth$units$Conc12C_Avg, ')'),   main = paste('12C concentrations from valve', valve_to_plot) ) # Plot the 12C gain factor determined during the calibration process xyplot(   gain_12CO2 ~ cycle_num,   data = processed_smooth_tdl$calibration_12CO2$main_data,   type = 'b',   pch = 16,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('12C gain factor (', processed_smooth_tdl$calibration_12CO2$units$gain_12CO2, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next steps","title":"Analyzing TDL Data","text":"cleaned, smoothed, visually checked data, can now confident calibrated 12C 13C values accurate can . next step analysis interpret data valves whose composition unknown determined. depend particular application, give general advice !","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"customizing-your-script","dir":"Articles","previous_headings":"","what":"Customizing Your Script","title":"Analyzing TDL Data","text":"Note commands vignette written general way can used basis TDL analysis script (see Commands Document). order use script, following changes may required. may also others specifically mentioned .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"input-files","dir":"Articles","previous_headings":"Customizing Your Script","what":"Input Files","title":"Analyzing TDL Data","text":"file paths specified file_paths need modified point TDL data files. script, may want consider using choose_input_tdl_files function PhotoGEA; function create pop-browser window can interactively select set .dat files. Sometimes convenient writing full file paths. example, replace previous definition file_paths one: Unfortunately, choose_input_tdl_files available interactive R sessions running Microsoft Windows.","code":"# Interactively define a vector of paths to the files we wish to load file_paths <- choose_input_tdl_files()"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"plots-for-checking","dir":"Articles","previous_headings":"Customizing Your Script","what":"Plots for Checking","title":"Analyzing TDL Data","text":"keep vignette shorter, skipped many possible plots may want view. addition ones generated , may also helpful make following plots: Plots 13C signals addition plots 12C. Individual plots raw, cleaned, smoothed data valve. Plots 13C calibration constants. Plots 13C calibration fits. plots can created making small modifications commands document.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"cycles-to-remove","dir":"Articles","previous_headings":"Customizing Your Script","what":"Cycles to Remove","title":"Analyzing TDL Data","text":"beginning analyze new data set, advisable remove TDL cycles; can accomplished defining tdl_cycles_to_remove following command place one used : viewing data, unreliable cycles removed can identified.","code":"tdl_cycles_to_remove <- c()"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"smoothing-function","dir":"Articles","previous_headings":"Customizing Your Script","what":"Smoothing Function","title":"Analyzing TDL Data","text":"beginning analyze new data set, advisable disable smoothing. can done definining “null” smoothing function; words, function actually perform smoothing: , function passed smooth_tdl_data place spline_smoothing_function.","code":"# Define a null smoothing function null_smoothing_function <- function(Y, X) {return(Y)}"},{"path":"https://eloch216.github.io/PhotoGEA/articles/analyzing_tdl_data.html","id":"commands-from-this-document","dir":"Articles","previous_headings":"","what":"Commands From This Document","title":"Analyzing TDL Data","text":"following code chunk includes central commands used throughout document. compiled make easy copy/paste text file initialize script.","code":"# Load required packages library(PhotoGEA) library(lattice)  # Define a vector of paths to the files we wish to load file_paths <- c(   system.file('extdata', 'tdl_sampling_1.dat', package = 'PhotoGEA'),   system.file('extdata', 'tdl_sampling_2.dat', package = 'PhotoGEA') )  # Load each file, storing the result in a list tdl_exdf_list <- lapply(file_paths, function(fpath) {   read_tdl_file(fpath, 1, 2, 3, 5, 'TIMESTAMP') })  # Get the names of all columns that are present in all of the TDL files columns_to_keep <- do.call(identify_common_columns, tdl_exdf_list)  # Extract just these columns tdl_exdf_list <- lapply(tdl_exdf_list, function(x) {   x[ , columns_to_keep, TRUE] })  # Use `rbind` to combine all the data tdl_files <- do.call(rbind, tdl_exdf_list)  # Assign numbers to all full cycles in the data set tdl_files <- identify_tdl_cycles(   tdl_files,   valve_column_name = 'valve_number',   cycle_start_valve = 20,   expected_cycle_length_minutes = 2.7,   expected_cycle_num_pts = 9,   timestamp_colname = 'TIMESTAMP' )  # Define a vector of cycle numbers that should be removed tdl_cycles_to_remove <- c(   145:150, # The big spike in valve 26   103:107  # A smaller spike in valve 26 )  # Remove them tdl_files_clean <-   tdl_files[!tdl_files[, 'cycle_num'] %in% tdl_cycles_to_remove, , TRUE]  # Define a spline smoothing function spline_smoothing_function <- function(Y, X) {     ss <- smooth.spline(X, Y)     return(ss$y) }  # Specify the valves that should be smoothed valves_to_smooth <- c(2, 20, 21, 23, 26)  # Initialize a smoothed copy of the data tdl_files_smooth <- tdl_files_clean  # Apply the smoothing function to the 12C and 13C signal from each valve for (valve in valves_to_smooth) {   for (column in c('Conc12C_Avg', 'Conc13C_Avg')) {     tdl_files_smooth <-       smooth_tdl_data(tdl_files_smooth, column, 'valve_number', valve, spline_smoothing_function)   } }  # Use the data from the calibration valves to determine calibrated carbon # concentrations from all valves in each TDL cycle processed_smooth_tdl <- consolidate(by(   tdl_files_smooth,   tdl_files_smooth[, 'cycle_num'],   process_tdl_cycle_erml,   valve_column_name = 'valve_number',   noaa_valve = 2,   calibration_0_valve = 20,   calibration_1_valve = 21,   calibration_2_valve = 23,   calibration_3_valve = 26,   raw_12c_colname = 'Conc12C_Avg',   raw_13c_colname = 'Conc13C_Avg',   noaa_cylinder_co2_concentration = 294.996,   noaa_cylinder_isotope_ratio = -8.40,   calibration_isotope_ratio = -11.505,   f_other = 0.00474,   R_VPDB = 0.0111797 ))  # Add columns indicating which which operations have been applied to each exdf tdl_files[ , 'data_type'] <- '01 raw data' tdl_files_clean[ , 'data_type'] <- '02 cleaned data' tdl_files_smooth[ , 'data_type'] <- '03 cleaned smoothed data'  # Make a big exdf object with the raw and smoothed data tdl_compare <- rbind(tdl_files, tdl_files_clean, tdl_files_smooth)  # Keep only the valves that were smoothed tdl_compare <-   tdl_compare[tdl_compare[ , 'valve_number'] %in% valves_to_smooth, , TRUE]  # Plot the uncalibrated 12C concentration data from all the valves xyplot(   Conc12C_Avg ~ cycle_num | factor(valve_number),   group = data_type,   data = tdl_compare$main_data,   type = 'b',   pch = 20,   auto = TRUE,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('Uncalibrated 12C concentration (', tdl_compare$tdl_data$units$Conc12C_Avg, ')'),   main = 'Uncalibrated 12C concentrations' )  # Specify a single valve to plot valve_to_compare <- 26  # Get the comparison data from the single valve single_valve_compare <-   tdl_compare[tdl_compare[, 'valve_number'] == valve_to_compare, , TRUE]  # Plot the 12C concentration data from the single valve xyplot(   Conc12C_Avg ~ cycle_num,   group = data_type,   data = single_valve_compare$main_data,   type = 'b',   pch = 20,   auto = TRUE,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('Uncalibrated 12C concentration (', single_valve_compare$units$Conc12C_Avg, ')'),   main = paste('Uncalibrated 12C concentrations from valve', valve_to_compare) )  # Specify a single valve to plot valve_to_plot <- 12  # Get the processed data from the single valve single_valve_smooth <- processed_smooth_tdl$tdl_data[   processed_smooth_tdl$tdl_data[, 'valve_number'] == valve_to_plot, , TRUE]  # Plot the 12C concentration data from the single valve xyplot(   Conc12C_Avg + calibrated_12c ~ cycle_num,   data = single_valve_smooth$main_data,   type = 'b',   pch = 20,   auto = TRUE,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('12C concentration (', single_valve_smooth$units$Conc12C_Avg, ')'),   main = paste('12C concentrations from valve', valve_to_plot) )  # Plot the 12C gain factor determined during the calibration process xyplot(   gain_12CO2 ~ cycle_num,   data = processed_smooth_tdl$calibration_12CO2$main_data,   type = 'b',   pch = 16,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('12C gain factor (', processed_smooth_tdl$calibration_12CO2$units$gain_12CO2, ')') )"},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edward B. Lochocki. Maintainer, author. Coralie E. Salesse-Smith. Contributor. PhotoGEA authors. Copyright holder.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lochocki E (2022). PhotoGEA: Photosynthetic Gas Exchange Analysis. https://github.com/eloch216/PhotoGEA, https://eloch216.github.io/PhotoGEA/.","code":"@Manual{,   title = {PhotoGEA: Photosynthetic Gas Exchange Analysis},   author = {Edward B. Lochocki},   year = {2022},   note = {https://github.com/eloch216/PhotoGEA, https://eloch216.github.io/PhotoGEA/}, }"},{"path":"https://eloch216.github.io/PhotoGEA/index.html","id":"photogea","dir":"","previous_headings":"","what":"PhotoGEA","title":"Photosynthetic Gas Exchange Analysis","text":"PhotoGEA (short photosynthetic gas exchange analysis) R package provides suite tools loading, processing, analyzing photosynthetic gas exchange data. package work progress yet fully documented. documentation proceeds, functions subject modification removal without notice.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/index.html","id":"installing-the-r-package","dir":"","previous_headings":"PhotoGEA","what":"Installing the R Package","title":"Photosynthetic Gas Exchange Analysis","text":"easiest way install PhotoGEA type following within R terminal: Note method requires remotes package, can installed within R typing install.packages('remotes').","code":"remotes::install_github('eloch216/PhotoGEA')"},{"path":"https://eloch216.github.io/PhotoGEA/index.html","id":"learning-to-use-photogea","dir":"","previous_headings":"PhotoGEA","what":"Learning to Use PhotoGEA","title":"Photosynthetic Gas Exchange Analysis","text":"best way learn using PhotoGEA visit PhotoGEA website, includes articles describe several important use cases. Currently, following articles available: Analyzing Ball-Berry Data Analyzing TDL Data","code":""},{"path":"https://eloch216.github.io/PhotoGEA/index.html","id":"example-scripts","dir":"","previous_headings":"PhotoGEA","what":"Example Scripts","title":"Photosynthetic Gas Exchange Analysis","text":"Several example scripts provided example_scripts directory source code repository. run one scripts, set working directory folder contains local copy script use source command execute code script. guarantees made scripts run machine compatible data, may useful source ideas.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/index.html","id":"license","dir":"","previous_headings":"PhotoGEA","what":"License","title":"Photosynthetic Gas Exchange Analysis","text":"PhotoGEA R package, documentation, associated example scripts licensed MIT license.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/as.data.frame.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"as.data.frame.exdf — as.data.frame.exdf","title":"as.data.frame.exdf — as.data.frame.exdf","text":"Converts exdf object data frame appending units   categories top column exdf object's   main_data data frame. Typically function used displaying   contents exdf object; fact, used internally   View, write.csv, functions. main_data   exdf object x can accessed directly (without including   units categories first row) via x[['main_data']]   list element.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/as.data.frame.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"as.data.frame.exdf — as.data.frame.exdf","text":"","code":"# S3 method for exdf as.data.frame(x, ...)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/as.data.frame.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"as.data.frame.exdf — as.data.frame.exdf","text":"x exdf object. ... Unused.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/as.data.frame.exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"as.data.frame.exdf — as.data.frame.exdf","text":"data frame formed x.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/as.data.frame.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"as.data.frame.exdf — as.data.frame.exdf","text":"","code":"simple_exdf <- exdf(data.frame(A = 1), data.frame(A = 'u'), data.frame(A = 'c')) as.data.frame(simple_exdf) # Includes units and categories in the first rows #>   A #> 1 c #> 2 u #> 3 1 simple_exdf[['main_data']] # Just returns the main data #>   A #> 1 1"},{"path":"https://eloch216.github.io/PhotoGEA/reference/basic_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"basic_stats — basic_stats","title":"basic_stats — basic_stats","text":"Calculates basic stats (mean standard error) applicable column   exdf object split according values one   identifier columns.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/basic_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"basic_stats — basic_stats","text":"","code":"basic_stats(     exdf_obj,     identifier_columns   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/basic_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"basic_stats — basic_stats","text":"exdf_obj exdf object. identifier_columns name(s) one columns vector list can used     split exdf_obj chunks.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/basic_stats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"basic_stats — basic_stats","text":"function first splits exdf_obj chunks according   values identifier_columns. chunk, columns   single unique value identified excluded statistical   calculations. remaining numeric columns, mean standard error   calculated.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/basic_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"basic_stats — basic_stats","text":"exdf object including mean standard error   applicable column, row represents one value  identifier_columns. column names determined appending  '_avg' '_stderr' original names.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/basic_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"basic_stats — basic_stats","text":"","code":"# Read an example Licor file included in the PhotoGEA package licor_file <- read_licor_file(   system.file(\"extdata\", \"ball_berry_1.xlsx\", package = \"PhotoGEA\"),   preamble_data_rows = c(3, 5, 7, 9, 11, 13),   variable_category_row = 14,   variable_name_row = 15,   variable_unit_row = 16,   data_start_row = 17,   timestamp_colname = 'time' )  # Calculate the average assimilation and stomatal conductance values for each # species. (Note: this is not a meaningful calculation!) basic_stats(   licor_file[ , c('species', 'K', 'A', 'gsw'), TRUE],   'species' ) #>   species [UserDefCon] (NA) K [Const] (NA) #> 1                   soybean            0.5 #> 2                   tobacco            0.5 #>   A_avg [GasEx] (micromol m^(-2) s^(-1)) #> 1                               23.82305 #> 2                               17.95311 #>   A_stderr [GasEx] (micromol m^(-2) s^(-1)) gsw_avg [GasEx] (mol m^(-2) s^(-1)) #> 1                                  2.470260                           0.4043737 #> 2                                  3.026751                           0.2192409 #>   gsw_stderr [GasEx] (mol m^(-2) s^(-1)) #> 1                             0.04320554 #> 2                             0.02502419"},{"path":"https://eloch216.github.io/PhotoGEA/reference/by.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"by.exdf — by.exdf","title":"by.exdf — by.exdf","text":"Divides exdf object groups defined one factors.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/by.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"by.exdf — by.exdf","text":"","code":"# S3 method for exdf by(data, INDICES, FUN, ...)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/by.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"by.exdf — by.exdf","text":"data exdf object. INDICES factor list factors. FUN function whose first input argument exdf object. ... Additional arguments passed FUN.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/by.exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"by.exdf — by.exdf","text":"Splits data chunks x values INDICES calls FUN(x, ...) chunk; returns list   element output call FUN.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/by.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"by.exdf — by.exdf","text":"","code":"# Read a Licor file, split it into chunks according to the `species` column, # and count the number of measurements for each species licor_file <- read_licor_file(   system.file(\"extdata\", \"ball_berry_1.xlsx\", package = \"PhotoGEA\"),   c(3, 5, 7, 9, 11, 13), 14, 15, 16, 17, 'time' )  by(licor_file, licor_file[, 'species'], nrow) #> $soybean #> [1] 21 #>  #> $tobacco #> [1] 7 #>"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_ball_berry_index.html","id":null,"dir":"Reference","previous_headings":"","what":"calculate_ball_berry_index — calculate_ball_berry_index","title":"calculate_ball_berry_index — calculate_ball_berry_index","text":"Calculates Ball-Berry index. function can accomodate alternative   column names variables taken Licor file case change   point future. function also checks units   required column produce error units incorrect.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_ball_berry_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculate_ball_berry_index — calculate_ball_berry_index","text":"","code":"calculate_ball_berry_index(     licor_exdf,     a_column_name,     rhleaf_column_name,     csurface_column_name   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_ball_berry_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calculate_ball_berry_index — calculate_ball_berry_index","text":"licor_exdf exdf object representing data Licor gas exchange     measurement system. a_column_name name column licor_exdf contains net     assimilation (typically ''). rhleaf_column_name name column licor_exdf contains relative     humidity leaf surface (typically 'RHleaf'). csurface_column_name name column licor_exdf contains CO2     concentration leaf surface (typically 'Csurface').","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_ball_berry_index.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"calculate_ball_berry_index — calculate_ball_berry_index","text":"Ball-Berry index defined * h_s / c_s,   net assimilation rate, h_s relative humidity   leaf surface, c_s CO2 concentration leaf   surface. variable key part Ball-Berry model, assumes   stomatal conductance linearly related Ball-Berry index.   information, please see original publication describing model:   Ball, J. T., Woodrow, . E. Berry, J. . \"Model Predicting Stomatal   Conductance Contribution Control Photosynthesis   Different Environmental Conditions.\" \"Progress Photosynthesis Research:   Volume 4\" (1986) [doi:10.1007/978-94-017-0519-6_48 ]. Typically, relative humidity CO2 concentration leaf surface   included Licor output files. Instead, output files include   relative humidity CO2 concentration sample chamber, conditions   leaf surface may slightly different. required inputs can   calculated using calculate_gas_properties function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_ball_berry_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calculate_ball_berry_index — calculate_ball_berry_index","text":"exdf object based licor_exdf includes Ball-Berry   index new column called bb_index. category new column   calculate_ball_berry_index indicate created using   function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_ball_berry_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"calculate_ball_berry_index — calculate_ball_berry_index","text":"","code":"# Read an example Licor file included in the PhotoGEA package, calculate # additional gas properties, and then calculate the Ball-Berry index. licor_file <- read_licor_file(   system.file(\"extdata\", \"ball_berry_1.xlsx\", package = \"PhotoGEA\"),   preamble_data_rows = c(3, 5, 7, 9, 11, 13),   variable_category_row = 14,   variable_name_row = 15,   variable_unit_row = 16,   data_start_row = 17,   timestamp_colname = 'time' )  licor_file <- calculate_gas_properties(   licor_file,   'A',   'Ca',   'DeltaPcham',   'E',   'gbw',   'gsw',   'H2O_s',   'Pa',   'TleafCnd' )  licor_file <- calculate_ball_berry_index(     licor_file,     'A',     'RHleaf',     'Csurface' )  licor_file$units$bb_index      # View the units of the new `bb_index` column #> [1] \"mol m^(-2) s^(-1)\" licor_file$categories$bb_index # View the category of the new `bb_index` column #> [1] \"calculate_ball_berry_index\" licor_file[,'bb_index']        # View the values of the new `bb_index` column #>  [1] 0.06487443 0.04217299 0.04717440 0.04230129 0.02995968 0.02208180 #>  [7] 0.01020448 0.09725402 0.07554299 0.06709379 0.04710046 0.04354188 #> [13] 0.03356910 0.02099952 0.09939125 0.06184597 0.05190328 0.05356902 #> [19] 0.03397142 0.02811785 0.01762407 0.05661131 0.04955238 0.04342732 #> [25] 0.03150718 0.02329131 0.02336237 0.01465243"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gas_properties.html","id":null,"dir":"Reference","previous_headings":"","what":"calculate_gas_properties — calculate_gas_properties","title":"calculate_gas_properties — calculate_gas_properties","text":"Calculates gas properties typically included Licor files.   function can accomodate alternative column names variables taken   Licor file case change point future. function   also checks units required column produce error   units incorrect.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gas_properties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculate_gas_properties — calculate_gas_properties","text":"","code":"calculate_gas_properties(     licor_exdf,     a_column_name,     ca_column_name,     deltapcham_column_name,     e_column_name,     gbw_column_name,     gsw_column_name,     h2o_s_column_name,     pa_column_name,     tleaf_column_name   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gas_properties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calculate_gas_properties — calculate_gas_properties","text":"licor_exdf exdf object representing data Licor gas exchange     measurement system. a_column_name name column licor_exdf contains net     assimilation (typically ''). ca_column_name name column licor_exdf contains ambient CO2     concentration chamber (typically 'Ca'). deltapcham_column_name name column licor_exdf contains chamber     overpressure (typically 'DeltaPcham'). e_column_name name column licor_exdf contains transpiration     rate (typically 'E'). gbw_column_name name column licor_exdf contains boundary layer     conductance water vapor (typically 'gbw'). gsw_column_name name column licor_exdf contains stomatal     conductance water vapor (typically 'gsw'). h2o_s_column_name name column licor_exdf contains sample cell     H2O concentration (typically 'H2O_s'). pa_column_name name column licor_exdf contains atmospheric     pressure (typically 'Pa'). tleaf_column_name name column licor_exdf contains leaf     temperature (typically 'TleafCnd').","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gas_properties.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"calculate_gas_properties — calculate_gas_properties","text":"default, Licor file provides following gas concentrations   conductances: Water vapor conductance diffusion stomata (gsw). Water vapor conductance diffusion boundary layer           (gbw). Water vapor conductance diffusion leaf's intercellular           spaces ambient air; words, total conductance           water vapor (gtw). Water vapor concentration sample cell (H2O_s). CO2 conductance diffusion leaf's intercellular spaces           ambient air; words, total conductance CO2           (gtc). CO2 concentration sample cell, corrected chamber leaks          (Ca). CO2 concentration leaf's intercellular spaces (Ci). However, sometimes helpful know \"missing\" conductances   concentrations, example, calculating mesophyll conductances   Ball-Berry parameters. function adds missing values, along   related water vapor properties: Water vapor concentration sample surface (H2O_surf). Water vapor concentration leaf's intercellular spaces           (H2O_i). Saturation water vapor pressure leaf temperature           (SVPleaf). Relative humidity leaf surface (RHleaf). CO2 conductance diffusion stomata (gsc). CO2 conductance diffusion boundary layer (gbc). CO2 concentration leaf surface (Cs). Equations used calculations equations used calculate quantities can found Licor   Li-6800 manual (Appendix C), relies heavily Appendix 2   following paper: von Caemmerer, S. & Farquhar, G. D. \"relationships   biochemistry photosynthesis gas exchange leaves\"   Planta 153, 376–387 (1981) [doi:10.1007/BF00384257 ] Equation C-79 Licor manual describes total flow water vapor   leaf interior ambient air using gtw, H2O_i,   H2O_s, transpiration rate E: (1) gtw = E * (1000 - (H2O_i + H2O_s) / 2) / (H2O_i - H2O_s) steady-state conditions, flux H2O molecules across portion   gas flow identical E, can also apply equation   flow water vapor leaf surface ambient air: (2) gbw = E * (1000 - (H2O_surf + H2O_s) / 2) / (H2O_surf - H2O_s) Equation (2) can solved H2O_surf: (3) H2O_surf = (E * (1000 - H2O_s / 2) + gbw * H2O_s) / (gbw + E / 2) Equation C-70 Licor manual describes calculate saturation water   vapor pressure air temperature. leaf surface, air temperature   leaf temperature (Tleaf; degrees C),   can determine SVPleaf using Equation C-70 follows: (4) SVPleaf = 0.6135 * e^((17.502 * Tleaf) / (240.97 + Tleaf)) gas exchange measurements, assume water vapor saturated   leaf's intecellular spaces, can determine H2O_i   SVPleaf relationship partial pressure molar gas   concentration: (5) H2O_i = SVPleaf / Pcham = SVPleaf / (Pa + deltaPcham) Pcham th total pressure sample chamber, Pa   atmospheric pressure, deltaPcham chamber overpressure.   related Pcham = Pa + deltaPcham. relative humidity leaf surface RHleaf can determined   H2O_surf SVPleaf using definitions relative humidity   partial pressure: (6) RHleaf = Pwl / SVPleaf = H2O_surf * (Pa + deltaPcham) / SVPleaf Pwl, partial pressure H2O leaf surface, given   H2O_surf * Pcham. CO2 conductances stomata boundary layer can determined   corresponding H2O conductances using ratios molecular   diffusivities two molecules, explained vicinty Equation   C-106 Licor manual: (7) gsc = gsw / 1.6 (8) gbc = gbw / 1.37 Equation C-105 Licor manual describes flow CO2 ambient   air intercellular spaces: (9) C_i = ((gtc - E / 2) * Ca - ) / (gtc + E / 2) replaced C_s (CO2 concentration sample   chamber) Ca clarity. steady state conditions, flows   H2O CO2 identical E , respectively, can   also apply equation flow CO2 ambient air leaf   surface: (10) Csurface = ((gbc - E / 2) * Ca - ) / (gbc + E / 2) function uses Equations (3)-(8) (10) calculate desired values.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gas_properties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calculate_gas_properties — calculate_gas_properties","text":"exdf object based licor_exdf includes following   additional columns, calculated described : H2O_surf,  SVPleaf, H2O_i, RHleaf, gsc, gbc,  Csurface. category new columns  calculate_gas_properties indicate created using   function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/calculate_gas_properties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"calculate_gas_properties — calculate_gas_properties","text":"","code":"# Read an example Licor file included in the PhotoGEA package and calculate # additional gas properties. licor_file <- read_licor_file(   system.file(\"extdata\", \"ball_berry_1.xlsx\", package = \"PhotoGEA\"),   preamble_data_rows = c(3, 5, 7, 9, 11, 13),   variable_category_row = 14,   variable_name_row = 15,   variable_unit_row = 16,   data_start_row = 17,   timestamp_colname = 'time' )  licor_file <- calculate_gas_properties(   licor_file,   'A',   'Ca',   'DeltaPcham',   'E',   'gbw',   'gsw',   'H2O_s',   'Pa',   'TleafCnd' )  licor_file$units$RHleaf      # View the units of the new `RHleaf` column #> [1] \"%\" licor_file$categories$RHleaf # View the category of the new `RHleaf` column #> [1] \"calculate_gas_properties\" licor_file[,'RHleaf']        # View the values of the new `RHleaf` column #>  [1] 72.82992 73.97870 74.65520 73.30259 73.32851 73.76332 74.02142 83.24810 #>  [9] 82.76472 81.59332 82.83944 79.67378 79.80127 79.81986 81.01622 81.70109 #> [17] 81.91860 81.55661 81.12870 78.16409 77.93890 76.56099 78.22673 78.97098 #> [25] 78.41431 78.65405 79.31713 76.73647"},{"path":"https://eloch216.github.io/PhotoGEA/reference/cbind.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine exdf objects by columns or rows — cbind.exdf","title":"Combine exdf objects by columns or rows — cbind.exdf","text":"Combines one exdf objects columns rows   main_data. rbind, errors occur column names   exdf objects, units categories   identical. cbind, errors occur number rows   exdf objects.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/cbind.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine exdf objects by columns or rows — cbind.exdf","text":"","code":"# S3 method for exdf cbind(..., deparse.level = 1)    # S3 method for exdf rbind(     ...,     deparse.level = 1,     make.row.names = TRUE,     stringsAsFactors = FALSE,     factor.exclude = TRUE   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/cbind.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine exdf objects by columns or rows — cbind.exdf","text":"... Two exdf objects. deparse.level See associated documentation generic versions cbind     rbind. make.row.names See associated documentation generic version rbind. stringsAsFactors See associated documentation generic version rbind. factor.exclude See associated documentation generic version rbind.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/cbind.exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine exdf objects by columns or rows — cbind.exdf","text":"Returns new exdf object.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/cbind.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine exdf objects by columns or rows — cbind.exdf","text":"","code":"# Make some simple exdf objects. 1 and 2 have the same number of rows but # different columns, while 1 and 3 have the same columns but different rows. simple_exdf_1 <- exdf(data.frame(A = 1), data.frame(A = 'au'), data.frame(A = 'ac')) simple_exdf_2 <- exdf(data.frame(B = 2), data.frame(B = 'bu'), data.frame(B = 'bc')) simple_exdf_3 <- exdf(data.frame(A = 2), data.frame(A = 'au'), data.frame(A = 'ac'))  cbind(simple_exdf_1) # will just return simple_exdf_1 #>   A [ac] (au) #> 1           1 cbind(simple_exdf_1, simple_exdf_2) #>   A [ac] (au) B [bc] (bu) #> 1           1           2  rbind(simple_exdf_1) # will just return simple_exdf_1 #>   A [ac] (au) #> 1           1 rbind(simple_exdf_1, simple_exdf_3) #>   A [ac] (au) #> 1           1 #> 2           2"},{"path":"https://eloch216.github.io/PhotoGEA/reference/check_licor_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Check response curve data for common issues — check_licor_data","title":"Check response curve data for common issues — check_licor_data","text":"Checks make sure exdf object representing response curve data   expected number rows contain infinite values.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/check_licor_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check response curve data for common issues — check_licor_data","text":"","code":"check_licor_data(     licor_exdf,     identifier_columns,     expected_npts = 0,     driving_column = NULL,     driving_column_tolerance = 1.0,     col_to_ignore_for_inf = 'gmc'   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/check_licor_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check response curve data for common issues — check_licor_data","text":"licor_exdf exdf object representing data Licor gas exchange     measurement system. identifier_columns vector list strings representing names columns     licor_exdf , taken together, uniquely identify curve.     often includes names like plot, event, replicate, etc. expected_npts number points response curve.     expected_npts == 0, response curves expected     (unspecified) number points. expected_npts < 0,     check skipped. driving_column name column systematically varied produce curve;     example, light response curve, typically Qin.     driving_column NULL, check skipped. driving_column_tolerance absolute tolerance deviation value     driving_column away mean across curves. col_to_ignore_for_inf columns ignore checking infinite values. Mesophyll     conductance (gmc) often set infinity intentionally     ignored performing check. completely disable check, set     col_to_ignore_for_inf NULL.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/check_licor_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check response curve data for common issues — check_licor_data","text":"function makes basic checks ensure Licor data includes   expected information include mistakes. problem   detected, silent return value. perform   following checks, optional: col_to_ignore_for_inf NULL, numeric columns           licor_exdf infinite values, exception           columns designated col_to_ignore_for_inf. elements identifier_columns present columns           licor_exdf. driving_column NULL,           also present column licor_exdf. licor_exdf split chunks according values           identifier_columns. exdf file represents           response curves, chunk represent single curve           additional checks can performed: expected_npts >= 0, chunk                   number points. expected_npts > 0,                   chunk expected_npts points. driving_column NULL, code                   chunk sequence values column.                   allow small variations, nonzero                   driving_column_tolerance can specified.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/check_licor_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check response curve data for common issues — check_licor_data","text":"","code":"# Read an example Licor file included in the PhotoGEA package and check it. # This file includes several 7-point light-response curves that can be uniquely # identified by the values of its 'species' and 'plot' columns. Since these are # light-response curves, each one follows a pre-set sequence of `Qin` values. licor_file <- read_licor_file(   system.file('extdata', 'ball_berry_1.xlsx', package = 'PhotoGEA'),   c(3, 5, 7, 9, 11, 13), 14, 15, 16, 17, 'time' )  # Make sure there are no infinite values and that all curves have the same # number of points check_licor_data(licor_file, c('species', 'plot'))  # Make sure there are no inifinite values and that all curves have 7 points check_licor_data(licor_file, c('species', 'plot'), 7)  # Make sure there are no infinite values, that all curves have 7 points, and # that the values of the `Qin` column follow the same sequence in all curves # (to within 1.0 micromol / m^2 / s) check_licor_data(licor_file, c('species', 'plot'), 7, 'Qin', 1.0)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/choose_input_licor_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Choosing Licor Excel files — choose_input_licor_files","title":"Choosing Licor Excel files — choose_input_licor_files","text":"Opens window choose Licor Excel files. available interactive   R sessions running Microsoft Windows. output function   typically passed read_licor_file via lapply.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/choose_input_licor_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choosing Licor Excel files — choose_input_licor_files","text":"","code":"choose_input_licor_files()"},{"path":"https://eloch216.github.io/PhotoGEA/reference/choose_input_licor_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choosing Licor Excel files — choose_input_licor_files","text":"character vector full file paths.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/choose_input_licor_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Choosing Licor Excel files — choose_input_licor_files","text":"","code":"# Interactively select one or more Licor Excel files and read each one to create # a list of exdf objects  if (FALSE) {  lapply(choose_input_licor_files(), function(fname) {   read_licor_file(     fname,     preamble_data_rows = c(3, 5, 7, 9, 11, 13),     variable_category_row = 14,     variable_name_row = 15,     variable_unit_row = 16,     data_start_row = 17,     timestamp_colname = 'time'   ) }) }"},{"path":"https://eloch216.github.io/PhotoGEA/reference/choose_input_tdl_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Choosing TDL data files — choose_input_tdl_files","title":"Choosing TDL data files — choose_input_tdl_files","text":"Opens window choose TDL data files. available interactive   R sessions running Microsoft Windows. output function   typically passed read_tdl_file via lapply.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/choose_input_tdl_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choosing TDL data files — choose_input_tdl_files","text":"","code":"choose_input_tdl_files()"},{"path":"https://eloch216.github.io/PhotoGEA/reference/choose_input_tdl_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choosing TDL data files — choose_input_tdl_files","text":"character vector full file paths.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/choose_input_tdl_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Choosing TDL data files — choose_input_tdl_files","text":"","code":"# Interactively select one or more TDL data files and read each one to create a # list of exdf objects  if (FALSE) {  lapply(choose_input_tdl_files(), function(fname) {   read_tdl_file(     fname,     rows_to_skip = 1,     variable_name_row = 2,     variable_unit_row = 3,     data_start_row = 5,     timestamp_colname = 'TIMESTAMP'   ) }) }"},{"path":"https://eloch216.github.io/PhotoGEA/reference/consolidate.html","id":null,"dir":"Reference","previous_headings":"","what":"Consolidate a list of lists — consolidate","title":"Consolidate a list of lists — consolidate","text":"Consolidates list lists regular list combining like-named   elements.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/consolidate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Consolidate a list of lists — consolidate","text":"","code":"consolidate(x)    # S3 method for data.frame consolidate(x)    # S3 method for exdf consolidate(x)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/consolidate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Consolidate a list of lists — consolidate","text":"x list lists list_1, list_2, ..., list_N,   sub-list list_i elements named name_1,   name_2, ..., name_M.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/consolidate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Consolidate a list of lists — consolidate","text":"list elements named name_1, name_2, ..., name_M,   element created combining elements x   name using rbind; example, element name name_1 created calling rbind(list_1$name_1, list_2$name_1, ...,   list_N$name_1). calling rbind, element limited   columns common elements name.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/consolidate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Consolidate a list of lists — consolidate","text":"consolidate generic, methods defined nested   lists data frames exdf objects.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/consolidate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Consolidate a list of lists — consolidate","text":"","code":"# Example 1: Create a nested list of data frames and then consolidate them into # a regular list by combining the like-named elements nested_df_list <- list(   list_1 = list(     name_1 = data.frame(A = c(1, 2), B = c(0, 0)),     name_2 = data.frame(A = c(3, 4), B = c(0, 0)),     name_3 = data.frame(A = c(5, 6), B = c(0, 0))   ),   list_2 = list(     name_1 = data.frame(A = c(7, 8), B = c(0, 0)),     name_2 = data.frame(A = c(9, 10), B = c(0, 0)),     name_3 = data.frame(A = c(11, 12), B = c(0, 0))   ),   list_3 = list(     name_1 = data.frame(A = c(13, 14), B = c(0, 0)),     name_2 = data.frame(A = c(15, 16), B = c(0, 0)),     name_3 = data.frame(A = c(17, 18), B = c(0, 0))   ) )  str(nested_df_list) #> List of 3 #>  $ list_1:List of 3 #>   ..$ name_1:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A: num [1:2] 1 2 #>   .. ..$ B: num [1:2] 0 0 #>   ..$ name_2:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A: num [1:2] 3 4 #>   .. ..$ B: num [1:2] 0 0 #>   ..$ name_3:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A: num [1:2] 5 6 #>   .. ..$ B: num [1:2] 0 0 #>  $ list_2:List of 3 #>   ..$ name_1:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A: num [1:2] 7 8 #>   .. ..$ B: num [1:2] 0 0 #>   ..$ name_2:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A: num [1:2] 9 10 #>   .. ..$ B: num [1:2] 0 0 #>   ..$ name_3:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A: num [1:2] 11 12 #>   .. ..$ B: num [1:2] 0 0 #>  $ list_3:List of 3 #>   ..$ name_1:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A: num [1:2] 13 14 #>   .. ..$ B: num [1:2] 0 0 #>   ..$ name_2:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A: num [1:2] 15 16 #>   .. ..$ B: num [1:2] 0 0 #>   ..$ name_3:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A: num [1:2] 17 18 #>   .. ..$ B: num [1:2] 0 0  consolidated_df_list <- consolidate(nested_df_list)  str(consolidated_df_list) #> List of 3 #>  $ name_1:'data.frame':\t6 obs. of  2 variables: #>   ..$ A: num [1:6] 1 2 7 8 13 14 #>   ..$ B: num [1:6] 0 0 0 0 0 0 #>  $ name_2:'data.frame':\t6 obs. of  2 variables: #>   ..$ A: num [1:6] 3 4 9 10 15 16 #>   ..$ B: num [1:6] 0 0 0 0 0 0 #>  $ name_3:'data.frame':\t6 obs. of  2 variables: #>   ..$ A: num [1:6] 5 6 11 12 17 18 #>   ..$ B: num [1:6] 0 0 0 0 0 0  # Example 2: Create a nested list of `exdf` objects and then consolidate them # into a regular list by combining the like-named elements. Here, some of the # elements have columns not present in the others (for example, # `nested_exdf_list$list_3$name_1`). However, these \"extra\" columns are removed # before calling `rbind` and they do not appear in `consolidated_exdf_list`. nested_exdf_list <- list(   list_1 = list(     name_1 = exdf(data.frame(A = c(1, 2), B = c(0, 0))),     name_2 = exdf(data.frame(A = c(3, 4), B = c(0, 0))),     name_3 = exdf(data.frame(A = c(5, 6), B = c(0, 0)))   ),   list_2 = list(     name_1 = exdf(data.frame(A = c(7, 8), B = c(0, 0))),     name_2 = exdf(data.frame(A = c(9, 10), B = c(0, 0))),     name_3 = exdf(data.frame(A = c(11, 12), B = c(0, 0)))   ),   list_3 = list(     name_1 = exdf(data.frame(A = c(13, 14), B = c(0, 0), C = c(-1, -2))),     name_2 = exdf(data.frame(A = c(15, 16), B = c(0, 0), C = c(-1, -2))),     name_3 = exdf(data.frame(A = c(17, 18), B = c(0, 0), C = c(-1, -2)))   ) )  str(nested_exdf_list) #> List of 3 #>  $ list_1:List of 3 #>   ..$ name_1:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A [NA] (NA): num [1:2] 1 2 #>   .. ..$ B [NA] (NA): num [1:2] 0 0 #>   ..$ name_2:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A [NA] (NA): num [1:2] 3 4 #>   .. ..$ B [NA] (NA): num [1:2] 0 0 #>   ..$ name_3:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A [NA] (NA): num [1:2] 5 6 #>   .. ..$ B [NA] (NA): num [1:2] 0 0 #>  $ list_2:List of 3 #>   ..$ name_1:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A [NA] (NA): num [1:2] 7 8 #>   .. ..$ B [NA] (NA): num [1:2] 0 0 #>   ..$ name_2:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A [NA] (NA): num [1:2] 9 10 #>   .. ..$ B [NA] (NA): num [1:2] 0 0 #>   ..$ name_3:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ A [NA] (NA): num [1:2] 11 12 #>   .. ..$ B [NA] (NA): num [1:2] 0 0 #>  $ list_3:List of 3 #>   ..$ name_1:'data.frame':\t2 obs. of  3 variables: #>   .. ..$ A [NA] (NA): num [1:2] 13 14 #>   .. ..$ B [NA] (NA): num [1:2] 0 0 #>   .. ..$ C [NA] (NA): num [1:2] -1 -2 #>   ..$ name_2:'data.frame':\t2 obs. of  3 variables: #>   .. ..$ A [NA] (NA): num [1:2] 15 16 #>   .. ..$ B [NA] (NA): num [1:2] 0 0 #>   .. ..$ C [NA] (NA): num [1:2] -1 -2 #>   ..$ name_3:'data.frame':\t2 obs. of  3 variables: #>   .. ..$ A [NA] (NA): num [1:2] 17 18 #>   .. ..$ B [NA] (NA): num [1:2] 0 0 #>   .. ..$ C [NA] (NA): num [1:2] -1 -2  consolidated_exdf_list <- consolidate(nested_exdf_list)  str(consolidated_exdf_list) #> List of 3 #>  $ name_1:'data.frame':\t6 obs. of  2 variables: #>   ..$ A [NA] (NA): num [1:6] 1 2 7 8 13 14 #>   ..$ B [NA] (NA): num [1:6] 0 0 0 0 0 0 #>  $ name_2:'data.frame':\t6 obs. of  2 variables: #>   ..$ A [NA] (NA): num [1:6] 3 4 9 10 15 16 #>   ..$ B [NA] (NA): num [1:6] 0 0 0 0 0 0 #>  $ name_3:'data.frame':\t6 obs. of  2 variables: #>   ..$ A [NA] (NA): num [1:6] 5 6 11 12 17 18 #>   ..$ B [NA] (NA): num [1:6] 0 0 0 0 0 0"},{"path":"https://eloch216.github.io/PhotoGEA/reference/dim.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"dim.exdf — dim.exdf","title":"dim.exdf — dim.exdf","text":"Returns dimensions exdf object's main_data. Also   enables nrow ncol exdf objects.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/dim.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dim.exdf — dim.exdf","text":"","code":"# S3 method for exdf dim(x)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/dim.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dim.exdf — dim.exdf","text":"x exdf object.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/dim.exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dim.exdf — dim.exdf","text":"Returns dim(x[['main_data']]).","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/dim.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dim.exdf — dim.exdf","text":"","code":"simple_exdf <- exdf(data.frame(A = 1), data.frame(A = 'u'), data.frame(A = 'c'))  dim(simple_exdf) #> [1] 1 1 dim(simple_exdf[['main_data']]) # An equivalent command #> [1] 1 1  nrow(simple_exdf) #> [1] 1 ncol(simple_exdf) #> [1] 1"},{"path":"https://eloch216.github.io/PhotoGEA/reference/dimnames.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"dimnames.exdf — dimnames.exdf","title":"dimnames.exdf — dimnames.exdf","text":"Returns sets dimension names exdf object's   main_data. setting names, column names exdf   object's units categories also set. Also enables   colnames rownames exdf objects.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/dimnames.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dimnames.exdf — dimnames.exdf","text":"","code":"# S3 method for exdf dimnames(x)    # S3 method for exdf dimnames(x) <- value"},{"path":"https://eloch216.github.io/PhotoGEA/reference/dimnames.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dimnames.exdf — dimnames.exdf","text":"x exdf object. value possible value dimnames(x)","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/dimnames.exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dimnames.exdf — dimnames.exdf","text":"Returns dimnames(x[['main_data']]).","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/dimnames.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dimnames.exdf — dimnames.exdf","text":"","code":"simple_exdf <- exdf(data.frame(A = 1), data.frame(A = 'u'), data.frame(A = 'c'))  dimnames(simple_exdf) #> [[1]] #> [1] \"1\" #>  #> [[2]] #> [1] \"A\" #>  dimnames(simple_exdf[['main_data']]) # An equivalent command #> [[1]] #> [1] \"1\" #>  #> [[2]] #> [1] \"A\" #>   colnames(simple_exdf) <- \"B\" rownames(simple_exdf) <- 2  colnames(simple_exdf) #> [1] \"B\" rownames(simple_exdf) #> [1] \"2\""},{"path":"https://eloch216.github.io/PhotoGEA/reference/exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Extended data frame — exdf","title":"Extended data frame — exdf","text":"\"extended data frame\" (exdf) object similar data frame,   also contains information units categories   column.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extended data frame — exdf","text":"","code":"exdf(main_data, units = NULL, categories = NULL, ...)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extended data frame — exdf","text":"main_data data frame. units data frame columns main_data just one     row, entry describes units corresponding column     main_data. units NULL, initialized     NA column. categories data frame columns main_data just one     row, entry describes category corresponding column     main_data. categories NULL,     initialized NA column. ... additional properties include entries resulting exdf     object; must passed named arguments.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/exdf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extended data frame — exdf","text":"exdf class originally created way represent   contents Licor Excel file R structure. Licor Excel files,   column name, units, category; example, column values   net assimilation rate called , units micromol / m^2   / s, categorized GasEx variable. technical point view, exdf object simply list   three required elements: main_data, units,   categories. data frame column   names, described . also possible exdf object   additional entries filename stores name   file used create exdf. Several S3 methods defined exdf objects, following   general guidance   Advanced R S3 classes: .exdf .data.frame.exdf print.exdf str.exdf length.exdf dim.exdf dimnames.exdf [.exdf [<-.exdf rbind.exdf cbind.exdf split.exdf .exdf","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extended data frame — exdf","text":"exdf object described .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extended data frame — exdf","text":"","code":"# Example 1: Creating a simple exdf object with two columns (`A` and `B`) and # default values for its units and categories. There are four values of each # variable. exdf(data.frame(A = c(3, 2, 7, 9), B = c(4, 5, 1, 8))) #>   A [NA] (NA) B [NA] (NA) #> 1           3           4 #> 2           2           5 #> 3           7           1 #> 4           9           8  # Example 2: Creating a simple exdf object with two columns (`A` and `B`) that # have units of `m` and `s`, respectively, and categories of `Cat1` and `Cat2`, # respectively. There are four values of each variable. exdf(   data.frame(A = c(3, 2, 7, 9), B = c(4, 5, 1, 8)),   data.frame(A = 'm', B = 's'),   data.frame(A = 'Cat1', B = 'Cat2') ) #>   A [Cat1] (m) B [Cat2] (s) #> 1            3            4 #> 2            2            5 #> 3            7            1 #> 4            9            8"},{"path":"https://eloch216.github.io/PhotoGEA/reference/extract.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Access or modify exdf elements — extract.exdf","title":"Access or modify exdf elements — extract.exdf","text":"Returns sets values elements exdf object.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/extract.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access or modify exdf elements — extract.exdf","text":"","code":"# S3 method for exdf [(x, i, j, return_exdf = FALSE)    # S3 method for exdf [(x, i, j) <- value"},{"path":"https://eloch216.github.io/PhotoGEA/reference/extract.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access or modify exdf elements — extract.exdf","text":"x exdf object. , j Indices specifying elements extract replace. Indices     numeric character vectors empty (missing)     NULL. return_exdf logical value indicating whether return value exdf     object. value Typically array-like R object similar class x.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/extract.exdf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Access or modify exdf elements — extract.exdf","text":"Since exdf object actually list named elements,   elements can accessed using [[ $ operators, list   named elements can obtained calling names. Elements main_data data frame exdf object can   accessed set using [ [<- operators. applied   exdf object, operators essentially shortcuts calling   operators object's main_data data frame. create new exdf object subset data contained   another exdf object, [ operator   return_exdf = TRUE can used.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/extract.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access or modify exdf elements — extract.exdf","text":"","code":"# Create a small exdf object that includes an extra element in addition to the # required ones (`main_data`, `units`, and `categories`). small_exdf <- exdf(   data.frame(A = c(3, 2, 7, 9), B = c(4, 5, 1, 8)),   data.frame(A = 'm', B = 's'),   data.frame(A = 'Cat1', B = 'Cat2'),   extra_exdf_element = \"This is an example of an extra exdf element\" )  # Accessing elements of `small_exdf` names(small_exdf)     # Get the names of all elements of small_exdf #> [1] \"main_data\"          \"units\"              \"categories\"         #> [4] \"extra_exdf_element\" small_exdf[['units']] # View the units using the `[[` operator #>   A B #> 1 m s small_exdf$categories # View the categories using the `$` operator #>      A    B #> 1 Cat1 Cat2  # Accessing elements of `small_exdf$main_data` small_exdf[,1]   # Access the first column #> [1] 3 2 7 9 small_exdf[1,]   # Access the first row #>   A B #> 1 3 4 small_exdf[,'B'] # Access the column named 'B' #> [1] 4 5 1 8 small_exdf[1,2]  # Access element 1 of column 2 #> [1] 4  # Equivalent (but longer) commands for accessing elements of `small_exdf$main_data` small_exdf$main_data[,1]   # Access the first column #> [1] 3 2 7 9 small_exdf$main_data[1,]   # Access the first row #>   A B #> 1 3 4 small_exdf$main_data[,'B'] # Access the column named 'B' #> [1] 4 5 1 8 small_exdf$main_data[1,2]  # Access element 1 of column 2 #> [1] 4  # Replacing elements of `small_exdf$main_data` small_exdf[,'A'] <- seq_len(4)             # Replace column A with new values small_exdf[small_exdf[,'A'] > 2, 'B'] <- 0 # Replace some rows of column B with new values  # Creating a new exdf object with a subset of the data from small_exdf. Here we # specify `return_exdf = TRUE` so that the `[` operator returns an exdf object # instead of a data frame new_exdf <- small_exdf[small_exdf[,'A'] > 2, , TRUE] names(new_exdf) # Check that the `extra_exdf_element` is still present #> [1] \"main_data\"          \"units\"              \"categories\"         #> [4] \"extra_exdf_element\" print(new_exdf) # Check that only the rows with A > 2 are included #>   A [Cat1] (m) B [Cat2] (s) #> 3            3            0 #> 4            4            0"},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_ball_berry.html","id":null,"dir":"Reference","previous_headings":"","what":"fit_ball_berry — fit_ball_berry","title":"fit_ball_berry — fit_ball_berry","text":"Calculates linear fit stomatal conductance vs. Ball-Berry index using   data exdf object. function can accomodate alternative   column names variables taken Licor file case change   point future. function also checks units   required column produce error units incorrect.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_ball_berry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fit_ball_berry — fit_ball_berry","text":"","code":"fit_ball_berry(     replicate_exdf,     gsw_column_name,     bb_index_column_name   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_ball_berry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fit_ball_berry — fit_ball_berry","text":"replicate_exdf exdf object representing one Ball-Berry curve. gsw_column_name name column replicate_exdf contains stomatal     conductance water vapor (typically 'gsw'). bb_index_column_name name column replicate_exdf contains Ball-Berry     index (typically 'bb_index').","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_ball_berry.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"fit_ball_berry — fit_ball_berry","text":"Ball-Berry model simple way describe response leaf's   stomata assimilation rate local environmental conditions.   Specifically, predicts stomatal conductance water vapor using   following equation: gsw = bb_0 + bb_1 * * h_s / C_s gsw stomatal conductance, net assimilation   rate, h_s relative humidity leaf surface, C_s   CO2 concentration leaf surface. term * h_s / C_s   commonly referred Ball-Berry index, intercept   (bb_0) slope (bb_1) linear relationship   Ball-Berry parameters describe stomatal response. Although model certainly oversimplification, encode   important stomatal responses. example, humidity low, stomata   close, reducing stomatal conductance. Likewise, CO2 concentration   around leaf depleted, stomata open allow CO2 diffuse   leaf's interior, increasing somatal conductance. information   model possible alternatives, see following papers: Ball, J. T., Woodrow, . E. Berry, J. . \"Model Predicting           Stomatal Conductance Contribution Control           Photosynthesis Different Environmental Conditions.\" \"Progress           Photosynthesis Research: Volume 4\" (1986)           [doi:10.1007/978-94-017-0519-6_48 ]. Tardieu, F. Davies, W. J. \"Integration hydraulic chemical           signalling control stomatal conductance water status           droughted plants.\" Plant, Cell & Environment 16, 341–349 (1993).           [doi:10.1111/j.1365-3040.1993.tb00880.x ]. Leuning, R. \"critical appraisal combined           stomatal-photosynthesis model C3 plants.\" Plant, Cell &           Environment 18, 339–355 (1995)           [doi:10.1111/j.1365-3040.1995.tb00370.x ]. Dewar, R. C. \"Ball–Berry–Leuning Tardieu–Davies stomatal           models: synthesis extension within spatially aggregated picture           guard cell function.\" Plant, Cell & Environment 25, 1383–1398 (2002).           [doi:10.1046/j.1365-3040.2002.00909.x ]. Ball-Berry parameters typically determined measuring Ball-Berry   curve, one factors influence Ball-Berry index   systematically varied across range values. value, care   taken net assimilation stomatal conductance reached   steady-state values, values recorded. , linear fit   experimentally observed stomatal conductances function   Ball-Berry index performed extract estimates Ball-Berry   intercept slope. function assumes replicate_exdf represents single   Ball-Berry curve. fit multiple curves , function often used   along .exdf consolidate.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_ball_berry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fit_ball_berry — fit_ball_berry","text":"list two elements:  fits: exdf object including measured values           fitted values stomatal conductance. fitted values           stored column whose name determined appending           '_fits' end gsw_column_name; typically,           'gsw_fits'. parameters: exdf object including fitting           parameters R-squared values Ball-Berry curve.           Ball-Berry intercept stored bb_intercept column,           Ball-Berry slope stored bb_slope column,           R-squared value fit stored r_squared column.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/fit_ball_berry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fit_ball_berry — fit_ball_berry","text":"","code":"# Read an example Licor file included in the PhotoGEA package, calculate # additional gas properties, calculate the Ball-Berry index, define a new column # that uniquely identifies each curve, and then perform a fit to extract the # Ball-Berry parameters from each curve. licor_file <- read_licor_file(   system.file(\"extdata\", \"ball_berry_1.xlsx\", package = \"PhotoGEA\"),   c(3, 5, 7, 9, 11, 13), 14, 15, 16, 17, 'time' )  licor_file <- calculate_gas_properties(   licor_file,   'A',   'Ca',   'DeltaPcham',   'E',   'gbw',   'gsw',   'H2O_s',   'Pa',   'TleafCnd' )  licor_file[,'species_plot'] <-   paste(licor_file[,'species'], '-', licor_file[,'plot'])  licor_file <- calculate_ball_berry_index(     licor_file,     'A',     'RHleaf',     'Csurface' )  # Fit just one curve from the data set (it is rare to do this) one_result <- fit_ball_berry(   licor_file[licor_file[, 'species_plot'] == 'soybean - 1a', , TRUE],   'gsw',   'bb_index' )  # Fit all curves in the data set (it is more common to do this) bb_results <- consolidate(by(   licor_file,   licor_file[, 'species_plot'],   fit_ball_berry,   'gsw',   'bb_index' ))  # View the fitting parameters for each species / plot col_to_keep <- c('species', 'plot', 'species_plot', 'bb_intercept', 'bb_slope', 'r_squared') bb_results$parameters[ , col_to_keep] #>    species plot species_plot bb_intercept bb_slope r_squared #> 1  soybean   1a soybean - 1a   0.10331765 3.995129 0.8469371 #> 15 soybean   1b soybean - 1b   0.10835188 6.492116 0.8394901 #> 8  soybean    5  soybean - 5   0.13085656 7.300232 0.9094708 #> 22 tobacco    2  tobacco - 2   0.09410874 3.613489 0.7186892  # View the fits for each species / plot lattice::xyplot(   gsw_fit + gsw ~ bb_index | species_plot,   data = bb_results$fit$main_data,   type = 'b',   pch = 16,   auto = TRUE,   grid = TRUE,   xlab = paste0('Ball-Berry index (', licor_file$units$bb_index, ')'),   ylab = paste0('Stomatal conductance (', licor_file$units$gsw, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_common_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify columns that are common to multiple objects — identify_common_columns","title":"Identify columns that are common to multiple objects — identify_common_columns","text":"Checks whether input arguments columns","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_common_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify columns that are common to multiple objects — identify_common_columns","text":"","code":"identify_common_columns(...)    # S3 method for data.frame identify_common_columns(...)    # S3 method for exdf identify_common_columns(...)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_common_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify columns that are common to multiple objects — identify_common_columns","text":"... One R objects column names.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_common_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify columns that are common to multiple objects — identify_common_columns","text":"character vector column names common input   objects.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_common_columns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify columns that are common to multiple objects — identify_common_columns","text":"identify_common_columns generic, methods defined data   frames exdf objects. case exdf objects, column   considered common name, units, category   input objects.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_common_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify columns that are common to multiple objects — identify_common_columns","text":"","code":"# Here we create two exdf objects with the same column names and units, but # where the categories of one column are not the same in both objects exdf_1 <- exdf(   data.frame(A = c(3, 2, 7, 9), B = c(4, 5, 1, 8)),   data.frame(A = 'm', B = 's'),   data.frame(A = 'Cat1', B = 'Cat2') )  exdf_2 <- exdf(   data.frame(A = c(3, 2, 7, 9), B = c(4, 5, 1, 8)),   data.frame(A = 'm', B = 's'),   data.frame(A = 'Cat1', B = 'Cat3') )  # Calling `identify_common_columns` on the exdf objects will only identify one # common column (A) because the category for column B is not common to all the # exdf objects. identify_common_columns(exdf_1, exdf_2) #> [1] \"A\"  # Calling `identify_common_columns` on the main_data data frames will identify # two common columns because unit and category information will not be # considered here. identify_common_columns(exdf_1$main_data, exdf_2$main_data) #> [1] \"A\" \"B\""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_tdl_cycles.html","id":null,"dir":"Reference","previous_headings":"","what":"Identifying cycles in TDL data — identify_tdl_cycles","title":"Identifying cycles in TDL data — identify_tdl_cycles","text":"Tool identifying complete measurement cycles set tunable diode   laser (TDL) data.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_tdl_cycles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identifying cycles in TDL data — identify_tdl_cycles","text":"","code":"identify_tdl_cycles(     tdl_exdf,     valve_column_name,     cycle_start_valve,     expected_cycle_length_minutes,     expected_cycle_num_pts,     timestamp_colname   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_tdl_cycles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identifying cycles in TDL data — identify_tdl_cycles","text":"tdl_exdf exdf object representing data TDL data logger. valve_column_name name column tdl_exdf contains valve number;     typically, 'valve_number'. cycle_start_valve value valve column indicates start new cycle. expected_cycle_length_minutes expected length full cycle (minutes); length     determined difference timestamp first last     measurements compose cycle. example, cycle consists 9     valves require 20 seconds measure, expected length     cycle minutes 8 * 20 / 60 = 2.7 minutes (approximately). expected_cycle_num_pts total number valves measured cycle. timestamp_colname name column tdl_exdf contains timestamp     measurement; typically, 'TIMESTAMP'.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_tdl_cycles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identifying cycles in TDL data — identify_tdl_cycles","text":"Typically TDL system periodically cycles multiple gas lines   measurements. gas lines represent gas mixtures known   composition can used calibration, others \"unknown\"   mixtures whose composition measured. collection valves used   control gas line measured given time,   \"active\" valve recorded data point included measurement file. using calibration lines apply corrections measured data,   necessary first identify complete measurements cycles within data   set. , complete cycles identified using following criteria: cycle said begin value valve_column_name           cycle_start_valve. cycle ends expected_cycle_num_pts valves           measured. time difference first last points cycle           deviate expected_cycle_length_minutes           +/- 30 seconds. addition identifying valid measurement cycles within data,   identify_tdl_cycles also calculates elapsed time beginning   cycle (minutes).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_tdl_cycles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identifying cycles in TDL data — identify_tdl_cycles","text":"exdf object based tdl_exdf includes two new columns:   cycle_num column indicates measurement cycle corresponding   measurement, elapsed_time column indicates elapsed   time (minutes) start cycle. rows tdl_exdf   found part complete cycle included   return value.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/identify_tdl_cycles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identifying cycles in TDL data — identify_tdl_cycles","text":"","code":"# Example: reading a TDL file that is included with the PhotoGEA package and # identifying its measurement cycles. tdl_file <- read_tdl_file(   system.file(\"extdata\", \"tdl_sampling_1.dat\", package = \"PhotoGEA\"),   1, 2, 3, 5, 'TIMESTAMP' )  tdl_file <- identify_tdl_cycles(   tdl_file,   valve_column_name = 'valve_number',   cycle_start_valve = 20,   expected_cycle_length_minutes = 2.7,   expected_cycle_num_pts = 9,   timestamp_colname = 'TIMESTAMP' )  str(tdl_file) # Notice the two new columns: `cycle_num` and `elapsed_time` #> 'data.frame':\t918 obs. of  99 variables: #>  $ TIMESTAMP [Raw TDL] (TS)            : POSIXlt, format: \"2022-07-12 06:12:43\" \"2022-07-12 06:13:03\" ... #>  $ RECORD [Raw TDL] (RN)               : num  0 1 2 3 4 5 6 7 8 9 ... #>  $ valve_number [Raw TDL] ()           : num  20 21 23 26 2 10 11 12 13 20 ... #>  $ diag_system_Avg [Raw TDL] ()        : num  128 128 128 132 128 128 128 128 128 128 ... #>  $ NumSamples [Raw TDL] ()             : num  100 100 100 100 100 100 100 100 100 100 ... #>  $ Conc12C_Avg [Raw TDL] (ppm)         : num  2.9 68.8 311.9 1022.5 294.3 ... #>  $ Conc13C_Avg [Raw TDL] (ppm)         : num  0.132 0.847 3.481 11.114 3.299 ... #>  $ TGAStatus_Avg [Raw TDL] ()          : num  96 96 96 96 96 96 96 96 96 96 ... #>  $ TGAPressure_Avg [Raw TDL] (mb)      : num  30 30 30 30 30 ... #>  $ LaserTemp_Avg [Raw TDL] (degC)      : num  -4 -4 -4 -4 -4 ... #>  $ DCCurrentA_Avg [Raw TDL] (mA)       : num  50.4 50.4 50.4 50.4 50.4 ... #>  $ DCCurrentB_Avg [Raw TDL] (mA)       : num  38.9 38.9 38.9 38.9 38.9 ... #>  $ TGAAnalog1_Avg [Raw TDL] (V)        : num  0.0244 0.0244 0.0244 0.0244 0.0244 ... #>  $ TGATemp1_Avg [Raw TDL] (degC)       : num  30 30 30 30 30 ... #>  $ TGATemp2_Avg [Raw TDL] (degC)       : num  30 30 30 30 30 ... #>  $ LaserCooler_Avg [Raw TDL] (V)       : num  2.02 2.02 2.02 2.02 2.02 ... #>  $ RefDetSigA_Avg [Raw TDL] (mV)       : num  2.48 2.48 2.48 2.48 2.48 ... #>  $ RefDetSigB_Avg [Raw TDL] (mV)       : num  0.503 0.503 0.502 0.502 0.502 ... #>  $ RefDetTransA_Avg [Raw TDL] (%)      : num  41.2 41.2 41.1 41.1 41.1 ... #>  $ RefDetTransB_Avg [Raw TDL] (%)      : num  54.8 54.8 54.7 54.7 54.7 ... #>  $ RefDetTemp_Avg [Raw TDL] (degC)     : num  -35 -35 -35 -35 -35 ... #>  $ RefDetCooler_Avg [Raw TDL] ()       : num  1461 1461 1461 1461 1461 ... #>  $ RefDetGainOffset_Avg [Raw TDL] ()   : num  8217 8217 8217 8217 8217 ... #>  $ SmpDetSigA_Avg [Raw TDL] (mV)       : num  57.8 56.5 51.6 39.8 52 ... #>  $ SmpDetSigB_Avg [Raw TDL] (mV)       : num  10.08 9.88 9.17 7.38 9.22 ... #>  $ SmpDetTransA_Avg [Raw TDL] (%)      : num  99.8 97.4 89.2 68.8 89.8 ... #>  $ SmpDetTransB_Avg [Raw TDL] (%)      : num  114.4 112.2 104.2 84.2 104.8 ... #>  $ SmpDetTemp_Avg [Raw TDL] (degC)     : num  -39 -39 -39 -39 -39 ... #>  $ SmpDetCooler_Avg [Raw TDL] ()       : num  1449 1449 1449 1449 1449 ... #>  $ SmpDetGainOffset_Avg [Raw TDL] ()   : num  8456 8456 8456 8456 8456 ... #>  $ TGATemp1DutyCycle_Avg [Raw TDL] ()  : num  0.13 0.121 0.132 0.129 0.138 ... #>  $ TGATemp2DutyCycle_Avg [Raw TDL] ()  : num  0.0601 0.077 0.0677 0.0676 0.0649 ... #>  $ SampleFlow_Avg [Raw TDL] (ml_min)   : num  167 167 167 164 162 ... #>  $ ExcessFlow_Avg [Raw TDL] (ml_min)   : num  95.77 105.457 140.852 0.123 53.341 ... #>  $ SamplePress_Avg [Raw TDL] (mb)      : num  400 400 400 396 400 ... #>  $ BypassPress_Avg [Raw TDL] (mb)      : num  400 400 400 400 400 ... #>  $ SampleP_control_Avg [Raw TDL] ()    : num  0.4 0.404 0.414 0.2 0.385 ... #>  $ BypassP_control_Avg [Raw TDL] ()    : num  0.477 0.475 0.471 0.484 0.496 ... #>  $ TGAPress_control_Avg [Raw TDL] ()   : num  0.528 0.529 0.53 0.53 0.53 ... #>  $ panel_tmpr_Avg [Raw TDL] (degC)     : num  24.7 24.7 24.7 24.7 24.7 ... #>  $ batt_volt_Avg [Raw TDL] (V)         : num  11.8 11.8 11.8 11.8 11.8 ... #>  $ buff_depth_Max [Raw TDL] ()         : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ Conc12C_Std [Raw TDL] (ppm)         : num  0.5244 0.0946 0.2025 1.1064 1.5535 ... #>  $ Conc13C_Std [Raw TDL] (ppm)         : num  0.00797 0.00637 0.00849 0.02317 0.018 ... #>  $ TGAStatus_Std [Raw TDL] ()          : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ TGAPressure_Std [Raw TDL] (mb)      : num  0.0101 0.0105 0.0115 0.0102 0.0112 ... #>  $ LaserTemp_Std [Raw TDL] (degC)      : num  0.000244 0.000289 0.000272 0.000287 0.00025 ... #>  $ DCCurrentA_Std [Raw TDL] (mA)       : num  0.000454 0.0006 0.000338 0.000492 0.000503 ... #>  $ DCCurrentB_Std [Raw TDL] (mA)       : num  0.000677 0.000844 0.00061 0.000753 0.000625 ... #>  $ TGAAnalog1_Std [Raw TDL] (V)        : num  1.56e-05 1.39e-05 1.31e-05 1.30e-05 1.31e-05 ... #>  $ TGATemp1_Std [Raw TDL] (degC)       : num  0.000994 0.00121 0.003558 0.001737 0.001128 ... #>  $ TGATemp2_Std [Raw TDL] (degC)       : num  0.00215 0.00137 0.00141 0.00126 0.00227 ... #>  $ LaserCooler_Std [Raw TDL] (V)       : num  0.000293 0.000347 0.000326 0.000345 0.000301 ... #>  $ RefDetSigA_Std [Raw TDL] (mV)       : num  0.00155 0.00185 0.00155 0.00199 0.00154 ... #>  $ RefDetSigB_Std [Raw TDL] (mV)       : num  0.00169 0.00148 0.00145 0.0015 0.00188 ... #>  $ RefDetTransA_Std [Raw TDL] (%)      : num  0.0298 0.0354 0.0268 0.0366 0.0293 ... #>  $ RefDetTransB_Std [Raw TDL] (%)      : num  0.255 0.233 0.223 0.226 0.258 ... #>  $ RefDetTemp_Std [Raw TDL] (degC)     : num  0.00364 0.0032 0.00361 0.00365 0.00315 ... #>  $ RefDetCooler_Std [Raw TDL] ()       : num  0.354 0.316 0.356 0.357 0.299 ... #>  $ RefDetGainOffset_Std [Raw TDL] ()   : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ SmpDetSigA_Std [Raw TDL] (mV)       : num  0.01137 0.00519 0.00502 0.01354 0.02786 ... #>  $ SmpDetSigB_Std [Raw TDL] (mV)       : num  0.00497 0.00576 0.00366 0.00388 0.00501 ... #>  $ SmpDetTransA_Std [Raw TDL] (%)      : num  0.0214 0.00781 0.00875 0.02549 0.05127 ... #>  $ SmpDetTransB_Std [Raw TDL] (%)      : num  0.0631 0.0441 0.0564 0.0485 0.0763 ... #>  $ SmpDetTemp_Std [Raw TDL] (degC)     : num  0.00136 0.00128 0.00116 0.00148 0.00128 ... #>  $ SmpDetCooler_Std [Raw TDL] ()       : num  0.1147 0.1077 0.1009 0.1203 0.0931 ... #>  $ SmpDetGainOffset_Std [Raw TDL] ()   : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ TGATemp1DutyCycle_Std [Raw TDL] ()  : num  0.00923 0.00826 0.0119 0.00883 0.00886 ... #>  $ TGATemp2DutyCycle_Std [Raw TDL] ()  : num  0.00837 0.00978 0.00828 0.00849 0.00862 ... #>  $ SampleFlow_Std [Raw TDL] (ml_min)   : num  0.1467 0.2004 0.1747 0.0871 0.1594 ... #>  $ ExcessFlow_Std [Raw TDL] (ml_min)   : num  0.10026 0.11171 0.1207 0.00958 0.08248 ... #>  $ SamplePress_Std [Raw TDL] (mb)      : num  0.0214 0.0234 0.0199 0.0935 0.0242 ... #>  $ BypassPress_Std [Raw TDL] (mb)      : num  0.1431 0.0428 0.1358 0.4229 0.3114 ... #>  $ SampleP_control_Std [Raw TDL] ()    : num  9.05e-05 8.99e-05 7.08e-05 0.00 2.21e-04 ... #>  $ BypassP_control_Std [Raw TDL] ()    : num  1.85e-04 5.47e-05 1.52e-04 4.63e-04 3.60e-04 ... #>  $ TGAPress_control_Std [Raw TDL] ()   : num  0.000536 0.000541 0.000592 0.000525 0.000577 ... #>  $ panel_tmpr_Std [Raw TDL] (degC)     : num  0.00641 0.00222 0.00214 0.0023 0.00224 ... #>  $ batt_volt_Std [Raw TDL] (V)         : num  0.00241 0.00235 0.00224 0.00218 0.00232 ... #>  $ Li64Match_Avg(1) [Raw TDL] ()       : num  1 1 1 1 1 1 1 1 1 1 ... #>  $ Li64Match_Avg(2) [Raw TDL] ()       : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ Li64Tmpr_Avg(1) [Raw TDL] (degC)    : num  -79.2 -77.6 -81.6 -79.4 -79.7 ... #>  $ Li64Tmpr_Avg(2) [Raw TDL] (degC)    : num  NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN ... #>  $ Li64Heat_Avg(1) [Raw TDL] ()        : num  1 1 1 1 1 1 1 1 1 1 ... #>  $ Li64Heat_Avg(2) [Raw TDL] ()        : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ _Mix_diag_system_Avg [Raw TDL] ()   : num  NaN 960 960 960 960 960 960 960 960 960 ... #>  $ _Mix_ExcessZeroFlow_Avg [Raw TDL] (): num  NaN 0.42 0.379 0.441 0.411 ... #>  $ _Mix_ExcessMixFlow_Avg [Raw TDL] () : num  NaN 159 158 158 158 ... #>  $ _Mix_CO2Press_Avg [Raw TDL] ()      : num  NaN 11.4 11.4 11.4 11.4 ... #>  $ _Mix_ZeroPress_Avg [Raw TDL] ()     : num  NaN 16.5 16.5 16.5 16.5 ... #>  $ _Mix_CO2P_control_Avg [Raw TDL] ()  : num  NaN 0 0 0 0 0 0 0 0 0 ... #>  $ _Mix_ZeroP_control_Avg [Raw TDL] () : num  NaN 0 0 0 0 0 0 0 0 0 ... #>  $ _Mix_MixTmpr1_Avg [Raw TDL] ()      : num  NaN 32 32 32 32 ... #>  $ _Mix_MixTmpr2_Avg [Raw TDL] ()      : num  NaN 31.7 31.7 31.7 31.7 ... #>  $ _Mix_MixHeat1_Avg [Raw TDL] ()      : num  NaN 1 1 1 1 1 1 1 1 1 ... #>  $ _Mix_MixHeat2_Avg [Raw TDL] ()      : num  NaN 1 1 1 1 1 1 1 1 1 ... #>  $ _Mix_panel_tmpr_Avg [Raw TDL] ()    : num  NaN 24.1 24.1 24.1 24.1 ... #>  $ _Mix_batt_volt_Avg [Raw TDL] ()     : num  NaN 9.62 9.62 9.62 9.62 ... #>  $ cycle_num [calculated] (NA)         : num  1 1 1 1 1 1 1 1 1 2 ... #>  $ elapsed_time [calculated] (minutes) : num  0 0 0 0 0 0 0 0 0 3 ..."},{"path":"https://eloch216.github.io/PhotoGEA/reference/is.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"is.exdf — is.exdf","title":"is.exdf — is.exdf","text":"Checks whether object exdf object.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/is.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"is.exdf — is.exdf","text":"","code":"is.exdf(x)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/is.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"is.exdf — is.exdf","text":"x R object.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/is.exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"is.exdf — is.exdf","text":"logical (TRUE / FALSE) value indicating whether object exdf object.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/is.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"is.exdf — is.exdf","text":"","code":"simple_exdf <- exdf(data.frame(A = 1), data.frame(A = 'u'), data.frame(A = 'c')) is.exdf(simple_exdf) # should return TRUE #> [1] TRUE is.exdf(2)           # should return FALSE #> [1] FALSE"},{"path":"https://eloch216.github.io/PhotoGEA/reference/length.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"length.exdf — length.exdf","title":"length.exdf — length.exdf","text":"Returns length exdf object's main_data.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/length.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"length.exdf — length.exdf","text":"","code":"# S3 method for exdf length(x)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/length.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"length.exdf — length.exdf","text":"x exdf object.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/length.exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"length.exdf — length.exdf","text":"Returns length(x[['main_data']]).","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/length.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"length.exdf — length.exdf","text":"","code":"simple_exdf <- exdf(data.frame(A = 1), data.frame(A = 'u'), data.frame(A = 'c')) length(simple_exdf) #> [1] 1 length(simple_exdf[['main_data']]) # An equivalent command #> [1] 1"},{"path":"https://eloch216.github.io/PhotoGEA/reference/organize_response_curve_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Check response curve data for common issues — organize_response_curve_data","title":"Check response curve data for common issues — organize_response_curve_data","text":"Checks make sure exdf object representing response curve data   expected number rows contain infinite values.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/organize_response_curve_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check response curve data for common issues — organize_response_curve_data","text":"","code":"organize_response_curve_data(     licor_exdf,     identifier_columns,     measurement_numbers_to_keep,     column_for_ordering,     ordering_column_tolerance = 1.0   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/organize_response_curve_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check response curve data for common issues — organize_response_curve_data","text":"licor_exdf exdf object representing response curve data Licor gas     exchange measurement system. identifier_columns vector list strings representing names columns     licor_exdf , taken together, uniquely identify curve.     often includes names like plot, event, replicate, etc. measurement_numbers_to_keep vector integers specifying points keep curve;     example, curve 16 points 10^th^ 11^th^ points along     sequence included subsequent analysis,     measurement_numbers_to_keep specified     c(1:9, 12:16). column_for_ordering name column systematically varied produce curve;     example, light response curve, typically Qin. ordering_column_tolerance passed check_licor_data     driving_column_tolerance input argument.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/organize_response_curve_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check response curve data for common issues — organize_response_curve_data","text":"exdf object consisting multiple response curves can   identified using values identifier_columns, function   performs following actions: Assigns sequential number measurement curve,           beginning 1; words, first point curve           given number 1, second given number 2, etc. numbers           stored new column called seq_num. Extracts subset data corresponding values           seq_num measurement_numbers_to_keep; often           helpful -Ci curves, CO~2~ concentration begins           ambient value, decreased low value, reset atmospheric           several measurements allow plant reacclimate,           increased higher values. case, first           measurement ambient used plotting additional analysis. Reorders data according ascending values           column_for_ordering. example, points -Ci curve           ordered according Ci values curve measured           using sequence described . can cause issues making           line plots, may convenient reorder according           Ci values. performing operations, function checks make sure   identifier_columns specify response curves (1)   number points (2) column_for_ordering follows   sequence values curve (within tolerance set   ordering_column_tolerance). check accomplished via   check_licor_data, treating column_for_ordering   driving_column.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/organize_response_curve_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check response curve data for common issues — organize_response_curve_data","text":"exdf object based licor_exdf processed described   .","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/organize_response_curve_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check response curve data for common issues — organize_response_curve_data","text":"","code":"# Read an example Licor file included in the PhotoGEA package and organize it. # This file includes several 7-point light-response curves that can be uniquely # identified by the values of its 'species' and 'plot' columns. Since these are # light-response curves, each one follows a pre-set sequence of `Qin` values. licor_file <- read_licor_file(   system.file('extdata', 'ball_berry_1.xlsx', package = 'PhotoGEA'),   c(3, 5, 7, 9, 11, 13), 14, 15, 16, 17, 'time' )  # Split the data into individual curves, keep all seven measurement points in # each curve, and order them by their incident light values (since these are # light response curves). The curves were measured from high to low values of # `Qin`, so after organizing the curves, their order will be reversed from the # original version. licor_file <- organize_response_curve_data(   licor_file,   c('species', 'plot'),   1:7,   'Qin' )  # View a subset of the data, including the new `seq_num` column print(licor_file[, c('species', 'plot', 'seq_num', 'Qin', 'A'), TRUE]) #>    species [UserDefCon] (NA) plot [UserDefCon] (NA) seq_num [NA] (NA) #> 1                    soybean                     1a                 7 #> 2                    soybean                     1a                 6 #> 3                    soybean                     1a                 5 #> 4                    soybean                     1a                 4 #> 5                    soybean                     1a                 3 #> 6                    soybean                     1a                 2 #> 7                    soybean                     1a                 1 #> 8                    soybean                     1b                 7 #> 9                    soybean                     1b                 6 #> 10                   soybean                     1b                 5 #> 11                   soybean                     1b                 4 #> 12                   soybean                     1b                 3 #> 13                   soybean                     1b                 2 #> 14                   soybean                     1b                 1 #> 15                   tobacco                      2                 7 #> 16                   tobacco                      2                 6 #> 17                   tobacco                      2                 5 #> 18                   tobacco                      2                 4 #> 19                   tobacco                      2                 3 #> 20                   tobacco                      2                 2 #> 21                   tobacco                      2                 1 #> 22                   soybean                      5                 7 #> 23                   soybean                      5                 6 #> 24                   soybean                      5                 5 #> 25                   soybean                      5                 4 #> 26                   soybean                      5                 3 #> 27                   soybean                      5                 2 #> 28                   soybean                      5                 1 #>    Qin [LeafQ] (micromol m^(-2) s^(-1)) A [GasEx] (micromol m^(-2) s^(-1)) #> 1                               200.141                           5.679174 #> 2                               350.106                          12.240074 #> 3                               500.135                          16.617929 #> 4                               649.951                          23.290614 #> 5                               799.983                          25.430106 #> 6                              1099.800                          22.996635 #> 7                              2000.030                          35.400473 #> 8                               200.070                           9.276031 #> 9                               350.060                          14.666531 #> 10                              499.982                          17.009070 #> 11                              650.070                          26.383035 #> 12                              799.873                          25.472460 #> 13                             1099.890                          30.250627 #> 14                             1999.850                          47.950460 #> 15                              200.236                           7.849870 #> 16                              350.073                          12.044692 #> 17                              500.036                          12.106347 #> 18                              650.001                          16.345888 #> 19                              800.046                          22.218165 #> 20                             1099.980                          25.492278 #> 21                             2000.020                          29.614535 #> 22                              200.029                          10.768250 #> 23                              349.991                          17.091593 #> 24                              499.921                          22.068194 #> 25                              650.108                          22.924484 #> 26                              799.910                          32.769396 #> 27                             1099.960                          36.218245 #> 28                             1999.980                          45.780746"},{"path":"https://eloch216.github.io/PhotoGEA/reference/print.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"print.exdf — print.exdf","title":"print.exdf — print.exdf","text":"Prints contents exdf object's main_data. column   described name, unit, category formatted like   name [category] (units).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/print.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print.exdf — print.exdf","text":"","code":"# S3 method for exdf print(x, ...)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/print.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print.exdf — print.exdf","text":"x exdf object. ... Additional arguments passed print.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/print.exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print.exdf — print.exdf","text":"None.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/print.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"print.exdf — print.exdf","text":"","code":"simple_exdf <- exdf(data.frame(A = 1), data.frame(A = 'u'), data.frame(A = 'c')) print(simple_exdf) #>   A [c] (u) #> 1         1"},{"path":"https://eloch216.github.io/PhotoGEA/reference/process_tdl_cycle_erml.html","id":null,"dir":"Reference","previous_headings":"","what":"Process cycles from the ERML TDL — process_tdl_cycle_erml","title":"Process cycles from the ERML TDL — process_tdl_cycle_erml","text":"Uses 12C 13C signal calibration lines tunable diode   laser (TDL) determine correction factors apply sample   lines. Applicable system NOAA calibration tank, nitrogen tank,   three lines mixing nitrogen CO2 tank different ratios.   function designed specifically TDL operating Carl   Bernacchi's lab Edward R. Madigan Laboratory (ERML) University   Illinois, Urbana-Champaign.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/process_tdl_cycle_erml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process cycles from the ERML TDL — process_tdl_cycle_erml","text":"","code":"process_tdl_cycle_erml(     tdl_cycle,     valve_column_name,     noaa_valve,     calibration_0_valve,     calibration_1_valve,     calibration_2_valve,     calibration_3_valve,     raw_12c_colname,     raw_13c_colname,     noaa_cylinder_co2_concentration,     noaa_cylinder_isotope_ratio,     calibration_isotope_ratio,     f_other,     R_VPDB   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/process_tdl_cycle_erml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process cycles from the ERML TDL — process_tdl_cycle_erml","text":"tdl_cycle exdf object representing one cycle TDL data. valve_column_name name column tdl_cycle contains valve number;     typically, 'valve_number'. noaa_valve valve number corresponds NOAA reference cylinder. calibration_0_valve valve number corresponds calibration valve 0 (nitrogen     cylinder). calibration_1_valve valve number corresponds calibration valve 1 (mixture     nitrogen gas calibrated CO2 source). calibration_2_valve valve number corresponds calibration valve 2 (mixture     nitrogen gas calibrated CO2 source). calibration_3_valve valve number corresponds calibration valve 3 (mixture     nitrogen gas calibrated CO2 source). raw_12c_colname name column tdl_cycle contains 12C signal;     typically, 'Conc12C_Avg'. raw_13c_colname name column tdl_cycle contains 13C signal;     typically, 'Conc13C_Avg'. noaa_cylinder_co2_concentration total CO2 concentration NOAA calibration cylinder ppm;     includes carbon species, 12C18O18O. noaa_cylinder_isotope_ratio isotope ratio NOAA calibration cylinder ppt. calibration_isotope_ratio isotope ratio CO2 cylinder ppt. f_other fraction CO2 13C16O16O 12C16O16O. R_VPDB Vienna Pee Dee Belemnite reference value.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/process_tdl_cycle_erml.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process cycles from the ERML TDL — process_tdl_cycle_erml","text":"function applies several corrections data tdl_cycle: First, 12C 13C signals nitrogen line considered           additive offsets data. values subtracted           measured 12C 13C signals produce \"zero-corrected\" values. zero-corrected 12C signal NOAA calibration line           assumed related true 12C concentration line           multiplicative \"gain\" factor. factor calculated using           known values NOAA cylinder's CO2 concentration isotope           ratio, applied zero-corrected 12C signals get           \"calibrated\" 12C concentrations. true 13C concentration calibration lines 0-3 can determined           calibrated 12C concentration measurements known           isotope ratio calibration tank. true concentrations can           compared measured zero-corrected 13C signals develop           correction function. perform third-order polynomial fit           expected vs. measured 13C values. (Four data points used           fit.) fit result can used convert zero-corrected           13C signals \"calibrated\" 13C concentrations. equations ? references cite? function assumes tdl_cycle represents single TDL   measurement cycle. process multiple cycles , function often   used along .exdf consolidate.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/process_tdl_cycle_erml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process cycles from the ERML TDL — process_tdl_cycle_erml","text":"list five elements:  tdl_data: exdf object containing original content           tdl_cycle several new columns:           'zero_corrected_12c', 'zero_corrected_13c',           'calibrated_12c', 'calibrated_13c',           'total_mixing_ratio', 'total_isotope_ratio'. calibration_zero: exdf object describing values           used calculate zero-corrected 12C 13C signals. calibration_12CO2: exdf object describing gain           factor used calculate calibrated 12C signal. calibration_13CO2_data: exdf object describing           data used polynomial fit expected vs. measured 13C signals           calibration valves 0-3. calibration_13CO2_fit: exdf object describing           results polynomial fitting procedure.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/process_tdl_cycle_erml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process cycles from the ERML TDL — process_tdl_cycle_erml","text":"","code":"# Example: reading a TDL file that is included with the PhotoGEA package, # identifying its measurement cycles, and then process them. tdl_file <- read_tdl_file(   system.file(\"extdata\", \"tdl_sampling_1.dat\", package = \"PhotoGEA\"),   1, 2, 3, 5, 'TIMESTAMP' )  tdl_file <- identify_tdl_cycles(   tdl_file,   valve_column_name = 'valve_number',   cycle_start_valve = 20,   expected_cycle_length_minutes = 2.7,   expected_cycle_num_pts = 9,   timestamp_colname = 'TIMESTAMP' )  processed_tdl <- consolidate(by(   tdl_file,   tdl_file[, 'cycle_num'],   process_tdl_cycle_erml,   valve_column_name = 'valve_number',   noaa_valve = 2,   calibration_0_valve = 20,   calibration_1_valve = 21,   calibration_2_valve = 23,   calibration_3_valve = 26,   raw_12c_colname = 'Conc12C_Avg',   raw_13c_colname = 'Conc13C_Avg',   noaa_cylinder_co2_concentration = 294.996,   noaa_cylinder_isotope_ratio = -8.40,   calibration_isotope_ratio = -11.505,   f_other = 0.00474,   R_VPDB = 0.0111797 ))  # Make a plot of the raw and calibrated 13C signals across all the TDL cycles. # Note that the calibrated signal from valve 20 is always exactly zero, since # this is the line from the nitrogen tank. The calibrated signal from valve 2 is # also constant since this is the line from the NOAA tank whose concentration is # known. lattice::xyplot(   Conc13C_Avg + calibrated_13c ~ cycle_num | factor(valve_number),   data = processed_tdl$tdl_data$main_data,   type = 'l',   auto = TRUE,   grid = TRUE,   xlab = 'TDL cycle',   ylab = paste0('13C concentration (', processed_tdl$tdl_data$units$Conc13C_Avg, ')') )   # Make a plot of 12C gain factor against elapsed time lattice::xyplot(   gain_12CO2 ~ elapsed_time,   data = processed_tdl$calibration_12CO2$main_data,   type = 'b',   pch = 16,   grid = TRUE,   xlab = paste0('Elapsed time (', processed_tdl$calibration_12CO2$units$elapsed_time, ')'),   ylab = paste0('12C gain factor (', processed_tdl$calibration_12CO2$units$gain_12CO2, ')') )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_licor_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Reading a Licor Excel file — read_licor_file","title":"Reading a Licor Excel file — read_licor_file","text":"Tool reading Excel output files created Licor LI-6800 instruments   storing contents exdf objects. function   yet tested files Licor LI-6400.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_licor_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reading a Licor Excel file — read_licor_file","text":"","code":"read_licor_file(     file_name,     preamble_data_rows,     variable_category_row,     variable_name_row,     variable_unit_row,     data_start_row,     timestamp_colname   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_licor_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reading a Licor Excel file — read_licor_file","text":"file_name relative absolute path Excel file containing Licor data. preamble_data_rows numeric vector whose entries indicate rows Licor excel file     contain preamble information. variable_category_row row number Licor Excel file containing variable category     information (GasEx, FLR, etc). variable_name_row row number Licor Excel file containing variable names     (, Ci, etc). variable_unit_row row number Licor Excel file containing variable units     (Pa, s, etc). data_start_row first row number table containing measured data. timestamp_colname name column contains timestamp measurement;     typically, 'time'.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_licor_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reading a Licor Excel file — read_licor_file","text":"Licor LI-6800 instruments create two types output files: plain-text file   Excel file, containing information. general, Excel   files much easier modify, example, deleting rows adding new   columns. reason, helpful able read files R.   Unfortunately, base R functionality reading Excel files,   openxlsx package used. Licor Excel files created different machines using different settings   may different \"preambles\" stored main data table,   read_licor_file offers flexible options specifying details   preamble start actual data table. Licor Excel files contain Unicode characters column names units,   characters represented properly R. address ,   Unicode characters replaced reasonable alternatives; example,   character capital Greek letter delta replaced word   Delta. replacement rules stored data frame can   accessed via PhotoGEA:::UNICODE_REPLACEMENTS, information can   found source code (R/unicode_replacements.R). reading Licor Excel file, useful identify timestamp column   values can properly interpreted POSIXlt objects. IMPORTANT NOTE LICOR EXCEL FILES: default, Licor Excel files   \"calculate\" formula values. causes problem reading   R, since data entry determined formula read 0. fix   issue Licor Excel file, open Excel, go   Formulas menu, choose Calculate Now. (Alternatively, press   F9.) save file close . See   GitHub issue 495 readxl package   details.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_licor_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reading a Licor Excel file — read_licor_file","text":"exdf object fully includes data Licor Excel   file. addition required elements exdf object,   following \"extra\" elements also included:  file_name: copy input argument name. preamble: list data frames representing line           preamble, data frame one row named columns.           Unicode replacement performed preamble data. preamble_data_rows: copy input argument           name. variable_category_row: copy input argument           name. variable_name_row: copy input argument           name. variable_unit_row: copy input argument           name. data_start_row: copy input argument           name. timestamp_colname: copy input argument           name.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_licor_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reading a Licor Excel file — read_licor_file","text":"","code":"# Example: reading a Licor file that is included with the PhotoGEA package. Note # that although named input arguments are not required, here we supply them for # clarity. licor_file <- read_licor_file(   system.file(\"extdata\", \"ball_berry_1.xlsx\", package = \"PhotoGEA\"),   preamble_data_rows = c(3, 5, 7, 9, 11, 13),   variable_category_row = 14,   variable_name_row = 15,   variable_unit_row = 16,   data_start_row = 17,   timestamp_colname = 'time' )  licor_file$file_name     # A record of where the data came from #> [1] \"/home/runner/work/_temp/Library/PhotoGEA/extdata/ball_berry_1.xlsx\" str(licor_file)          # View the contents of the exdf object's main_data #> 'data.frame':\t28 obs. of  240 variables: #>  $ obs [SysObs] (NA)                                  : num  1 2 3 4 5 6 7 8 9 10 ... #>  $ time [SysObs] (s)                                  : POSIXlt, format: \"2021-08-23 14:30:48\" \"2021-08-23 14:38:15\" ... #>  $ elapsed [SysObs] (s)                               : num  0 448 803 1226 1486 ... #>  $ date [SysObs] (NA)                                 : chr  \"20210823 09:30:48\" \"20210823 09:38:15\" \"20210823 09:44:11\" \"20210823 09:51:14\" ... #>  $ hhmmss [SysObs] (NA)                               : chr  \"09:30:48\" \"09:38:15\" \"09:44:11\" \"09:51:14\" ... #>  $ averaging [SysObs] (s)                             : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ species [UserDefCon] (NA)                          : chr  \"soybean\" \"soybean\" \"soybean\" \"soybean\" ... #>  $ plot [UserDefCon] (NA)                             : chr  \"1a\" \"1a\" \"1a\" \"1a\" ... #>  $ instrument [UserDefCon] (NA)                       : chr  \"ripe4\" \"ripe4\" \"ripe4\" \"ripe4\" ... #>  $ bb index [UserDefVar] (NA)                         : num  5.98 3.91 4.34 3.92 2.8 ... #>  $ TIME [GasEx] (s)                                   : num  1.63e+09 1.63e+09 1.63e+09 1.63e+09 1.63e+09 ... #>  $ E [GasEx] (mol m^(-2) s^(-1))                      : num  0.00532 0.00378 0.00327 0.00263 0.00255 ... #>  $ Emm [GasEx] (mmol m^(-2) s^(-1))                   : num  5.32 3.78 3.27 2.63 2.55 ... #>  $ A [GasEx] (micromol m^(-2) s^(-1))                 : num  35.4 23 25.4 23.3 16.6 ... #>  $ Ca [GasEx] (micromol mol^(-1))                     : num  415 415 415 415 415 ... #>  $ Ci [GasEx] (micromol mol^(-1))                     : num  252 281 257 232 279 ... #>  $ Pci [GasEx] (Pa)                                   : num  25 27.9 25.5 23 27.7 ... #>  $ Pca [GasEx] (Pa)                                   : num  41.2 41.2 41.2 41.2 41.2 ... #>  $ gsw [GasEx] (mol m^(-2) s^(-1))                    : num  0.388 0.304 0.28 0.218 0.212 ... #>  $ gbw [GasEx] (mol m^(-2) s^(-1))                    : num  2.92 2.91 2.91 2.92 2.91 ... #>  $ gtw [GasEx] (mol m^(-2) s^(-1))                    : num  0.362 0.288 0.266 0.209 0.204 ... #>  $ gtc [GasEx] (mol m^(-2) s^(-1))                    : num  0.228 0.181 0.168 0.132 0.128 ... #>  $ Rabs [GasEx] (W m^(-2))                            : num  321.5 177.8 130 106 82.1 ... #>  $ TleafEB [GasEx] (degrees C)                        : num  31.2 30.5 30 29.9 29.8 ... #>  $ TleafCnd [GasEx] (degrees C)                       : num  31 30.3 29.8 29.6 29.6 ... #>  $ SVPleaf [GasEx] (kPa)                              : num  4.52 4.33 4.21 4.17 4.17 ... #>  $ RHcham [GasEx] (%)                                 : num  70.1 70.6 70.8 69.9 69.9 ... #>  $ VPcham [GasEx] (kPa)                               : num  3.11 3.08 3.03 2.97 2.97 ... #>  $ SVPcham [GasEx] (kPa)                              : num  4.44 4.36 4.28 4.25 4.25 ... #>  $ VPDleaf [GasEx] (kPa)                              : num  1.4 1.25 1.18 1.2 1.2 ... #>  $ LatHFlux [GasEx] (W m^(-2))                        : num  -234 -166 -144 -116 -113 ... #>  $ SenHFlux [GasEx] (W m^(-2))                        : num  -47.9 18 48.1 52.3 54.3 ... #>  $ NetTherm [GasEx] (W m^(-2))                        : num  -3.68 1.38 3.67 3.98 4.14 ... #>  $ EBSum [GasEx] (W m^(-2))                           : num  35.5 30.7 37.4 46.5 28 ... #>  $ Leak [Leak] (micromol s^(-1))                      : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ LeakPct [Leak] (%)                                 : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ CorrFact [Leak] (NA)                               : num  1 1 1 1 1 1 1 1 1 1 ... #>  $ CorrFactPct [Leak] (%)                             : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ Fan [Leak] (micromol s^(-1))                       : num  51867 51661 51885 51967 51898 ... #>  $ DarkAdaptedID [FLR] (NA)                           : chr  \"RECT-12243-20210724-05_20_30\" \"RECT-12243-20210724-05_20_30\" \"RECT-12243-20210724-05_20_30\" \"RECT-12243-20210724-05_20_30\" ... #>  $ Qmax_d [FLR] (NA)                                  : num  10239 10239 10239 10239 10239 ... #>  $ Fo [FLR] (NA)                                      : num  302 302 302 302 302 ... #>  $ Fm [FLR] (NA)                                      : num  4052 4052 4052 4052 4052 ... #>  $ Fv/Fm [FLR] (NA)                                   : num  0.925 0.925 0.925 0.925 0.925 ... #>  $ A_dark [FLR] (micromol m^(-2) s^(-1))              : num  -0.323 -0.323 -0.323 -0.323 -0.323 ... #>  $ LightAdaptedID [FLR] (NA)                          : chr  \"MPF-13020-20210823-09_30_24\" \"MPF-13022-20210823-09_37_51\" \"MPF-13024-20210823-09_43_47\" \"MPF-13026-20210823-09_50_50\" ... #>  $ Qmax [FLR] (NA)                                    : num  10175 10195 10208 10218 10221 ... #>  $ Fs [FLR] (NA)                                      : num  813 888 927 924 873 ... #>  $ Fm' [FLR] (NA)                                     : num  1311 1931 2372 2582 2645 ... #>  $ PhiPS2 [FLR] (NA)                                  : num  0.38 0.54 0.609 0.642 0.67 ... #>  $ PS2/1 [FLR] (NA)                                   : num  0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ... #>  $ Qabs_fs [FLR] (micromol m^(-2) s^(-1))             : num  1681 925 673 547 421 ... #>  $ A_fs [FLR] (micromol m^(-2) s^(-1))                : num  35.4 23 25.4 23.3 16.6 ... #>  $ ETR [FLR] (micromol m^(-2) s^(-1))                 : num  319 250 205 176 141 ... #>  $ PhiCO2 [FLR] (micromol micromol^(-1))              : num  0.0212 0.0252 0.0383 0.0432 0.0402 ... #>  $ NPQ [FLR] (NA)                                     : num  2.091 1.098 0.708 0.569 0.532 ... #>  $ alt. Fo' [FLR] (NA)                                : num  261 279 287 290 291 ... #>  $ DarkPulseID [FLR] (NA)                             : chr  \"DARK-13021-20210823-09_30_32\" \"DARK-13023-20210823-09_37_59\" \"DARK-13025-20210823-09_43_55\" \"DARK-13027-20210823-09_50_58\" ... #>  $ Fmin [FLR] (NA)                                    : num  577 625 660 681 690 ... #>  $ Fo' [FLR] (NA)                                     : num  577 625 660 681 690 ... #>  $ Fv'/Fm' [FLR] (NA)                                 : num  0.56 0.676 0.722 0.736 0.739 ... #>  $ qP [FLR] (NA)                                      : num  0.679 0.799 0.844 0.872 0.906 ... #>  $ qN [FLR] (NA)                                      : num  0.789 0.619 0.495 0.436 0.418 ... #>  $ qP_Fo [FLR] (NA)                                   : num  0.493 0.641 0.698 0.727 0.757 ... #>  $ qN_Fo [FLR] (NA)                                   : num  0.731 0.566 0.448 0.392 0.375 ... #>  $ qL [FLR] (NA)                                      : num  0.482 0.562 0.6 0.643 0.716 ... #>  $ 1-qL [FLR] (NA)                                    : num  0.518 0.438 0.4 0.357 0.284 ... #>  $ Qin [LeafQ] (micromol m^(-2) s^(-1))               : num  2000 1100 800 650 500 ... #>  $ Qabs [LeafQ] (micromol m^(-2) s^(-1))              : num  1681 925 673 547 421 ... #>  $ alpha [LeafQ] (NA)                                 : num  0.841 0.841 0.841 0.842 0.842 ... #>  $ convert [LeafQ] (J/micromol)                       : num  0.161 0.162 0.162 0.163 0.164 ... #>  $ S [Const] (cm^2)                                   : num  6 6 6 6 6 6 6 6 6 6 ... #>  $ K [Const] (NA)                                     : num  0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ... #>  $ Geometry [Const] (NA)                              : chr  \"0: Broadleaf\" \"0: Broadleaf\" \"0: Broadleaf\" \"0: Broadleaf\" ... #>  $ Custom [Const] (mol m^(-2) s^(-1))                 : num  2 2 2 2 2 2 2 2 2 2 ... #>  $ TIME [Meas] (s)                                    : num  1.63e+09 1.63e+09 1.63e+09 1.63e+09 1.63e+09 ... #>  $ CO2_s [Meas] (micromol mol^(-1))                   : num  415 415 415 415 415 ... #>  $ CO2_r [Meas] (micromol mol^(-1))                   : num  460 444 447 444 436 ... #>  $ H2O_s [Meas] (mmol mol^(-1))                       : num  31.4 31 30.6 29.9 29.9 ... #>  $ H2O_r [Meas] (mmol mol^(-1))                       : num  25.2 26.6 26.8 26.8 27 ... #>  $ CO2_a [Meas] (micromol mol^(-1))                   : num  423 423 423 423 423 ... #>  $ H2O_a [Meas] (mmol mol^(-1))                       : num  31.3 30.9 30.3 30 29.9 ... #>  $ Flow [Meas] (micromol s^(-1))                      : num  500 500 500 500 500 ... #>  $ Pa [Meas] (kPa)                                    : num  99.2 99.2 99.2 99.2 99.1 ... #>  $ DeltaPcham [Meas] (kPa)                            : num  0.0999 0.1002 0.0998 0.1001 0.0998 ... #>  $ Tair [Meas] (degrees C)                            : num  30.7 30.4 30.1 30 30 ... #>  $ Tleaf [Meas] (degrees C)                           : num  31 30.3 29.8 29.6 29.6 ... #>  $ Tleaf2 [Meas] (degrees C)                          : num  1000 1000 1000 1000 1000 ... #>  $ Offset [Meas] (degrees C)                          : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ Offset2 [Meas] (degrees C)                         : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ Fan_speed [Meas] (rpm)                             : num  10016 9964 9998 10009 9998 ... #>  $ Qamb_in [Meas] (micromol m^(-2) s^(-1))            : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ Qamb_out [Meas] (micromol m^(-2) s^(-1))           : num  1212 1253 1322 1350 1393 ... #>  $ DeltaCO2 [Meas2] (micromol mol^(-1))               : num  -41 -33.2 -29 -25.7 -22 ... #>  $ CO2_s_d [Meas2] (micromol mol^(-1))                : num  428 428 428 428 428 ... #>  $ CO2_r_d [Meas2] (micromol mol^(-1))                : num  468 460 456 453 449 ... #>  $ DeltaH2O [Meas2] (mmol mol^(-1))                   : num  6.11 4.18 3.51 3.12 2.91 ... #>  $ CO2_b [Meas2] (micromol mol^(-1))                  : num  456 448 444 441 437 ... #>  $ H2O_b [Meas2] (mmol mol^(-1))                      : num  25.2 26.6 26.8 26.8 27 ... #>   [list output truncated] str(licor_file$preamble) # View the Licor file's preamble data #> List of 6 #>  $ :'data.frame':\t1 obs. of  3 variables: #>   ..$ SysConst: num NA #>   ..$ AvgTime : chr \"4\" #>   ..$ Oxygen  : num 21 #>  $ :'data.frame':\t1 obs. of  11 variables: #>   ..$ ChambConst: num NA #>   ..$ Chamber   : chr \"6800-01A\" #>   ..$ Aperture  : chr \"6 cm²\" #>   ..$ blc_a     : num 0.578 #>   ..$ blc_b     : num 0.523 #>   ..$ blc_c     : num 0.00374 #>   ..$ blc_d     : num -0.062 #>   ..$ blc_e     : num -0.00561 #>   ..$ blc_minS  : num 1 #>   ..$ blc_maxS  : num 6 #>   ..$ blc_Po    : num 96.9 #>  $ :'data.frame':\t1 obs. of  5 variables: #>   ..$ LTConst: num NA #>   ..$ deltaTw: num 0 #>   ..$ fT1    : num 1 #>   ..$ fT2    : num 0 #>   ..$ fTeb   : num 0 #>  $ :'data.frame':\t1 obs. of  17 variables: #>   ..$ LQConst     : num NA #>   ..$ Leaf        : chr \"standard\" #>   ..$ Ambient     : chr \"Sun+Sky\" #>   ..$ abs_ambient : num 0.8 #>   ..$ abs_redLED  : num 0.84 #>   ..$ abs_greenLED: num 0.7 #>   ..$ abs_blueLED : num 0.87 #>   ..$ abs_whiteLED: num 0.75 #>   ..$ abs_redFlr  : num 0.84 #>   ..$ abs_blueFlr : num 0.87 #>   ..$ k_ambient   : num 0.191 #>   ..$ k_redLED    : num 0.151 #>   ..$ k_greenLED  : num 0.161 #>   ..$ k_blueLED   : num 0.226 #>   ..$ k_whiteLED  : num 0.158 #>   ..$ k_redFlr    : num 0.16 #>   ..$ k_blueFlr   : num 0.217 #>  $ :'data.frame':\t1 obs. of  6 variables: #>   ..$ QConst      : num NA #>   ..$ fQ_Amb_in   : num 0 #>   ..$ fQ_Amb_out  : num 0 #>   ..$ fQ_HeadLS   : num 0 #>   ..$ fQ_ConsoleLS: num 0 #>   ..$ fQ_Flr      : num 1 #>  $ :'data.frame':\t1 obs. of  8 variables: #>   ..$ LeakConst: num NA #>   ..$ fan_a    : num -6276 #>   ..$ fan_b    : num 6.6 #>   ..$ fan_c    : num 1.71e-05 #>   ..$ fan_d    : num 3.11 #>   ..$ Fs_meas  : chr \"2.57209 56.8345 376.092 656.102 912.922 1140.22 1323.58 1601.94\" #>   ..$ Fs_true  : chr \"0.140462 100.535 403.009 601.359 801.268 1002.06 1200.81 1402.44\" #>   ..$ leak_wt  : num 0"},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_tdl_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Reading a TDL data file — read_tdl_file","title":"Reading a TDL data file — read_tdl_file","text":"Tool reading tunable diode laser (TDL) output files created Campbell   Scientific CR3000 data loggers storing contents   exdf objects.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_tdl_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reading a TDL data file — read_tdl_file","text":"","code":"read_tdl_file(     file_name,     rows_to_skip,     variable_name_row,     variable_unit_row,     data_start_row,     timestamp_colname   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_tdl_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reading a TDL data file — read_tdl_file","text":"file_name relative absolute path .dat file containing TDL data. rows_to_skip number rows skip beginning file; first row     TDL file typically fewer columns others, causes problems     storing table. variable_name_row row number TDL file containing names variables     (RECORD, Conc12C_Avg, etc). variable_unit_row row number TDL file containing units variables     (ppm, V, etc). data_start_row first row number table containing measured data. timestamp_colname name column contains timestamp measurement;     typically, 'TIMESTAMP'.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_tdl_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reading a TDL data file — read_tdl_file","text":"reading TDL data file, useful identify timestamp column   values can properly interpreted POSIXlt objects.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_tdl_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reading a TDL data file — read_tdl_file","text":"exdf object fully includes data TDL data file.   addition required elements exdf object, following   \"extra\" elements also included:  file_name: copy input argument name. rows_to_skip: copy input argument name variable_name_row: copy input argument           name. variable_unit_row: copy input argument           name. data_start_row: copy input argument           name. timestamp_colname: copy input argument           name.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/read_tdl_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reading a TDL data file — read_tdl_file","text":"","code":"# Example: reading a TDL file that is included with the PhotoGEA package. Note # that although named input arguments are not required, here we supply them for # clarity. tdl_file <- read_tdl_file(   system.file(\"extdata\", \"tdl_sampling_1.dat\", package = \"PhotoGEA\"),   rows_to_skip = 1,   variable_name_row = 2,   variable_unit_row = 3,   data_start_row = 5,   timestamp_colname = 'TIMESTAMP' )  tdl_file$file_name # A record of where the data came from #> [1] \"/home/runner/work/_temp/Library/PhotoGEA/extdata/tdl_sampling_1.dat\" str(tdl_file)      # View the contents of the exdf object's main_data #> 'data.frame':\t922 obs. of  97 variables: #>  $ TIMESTAMP [Raw TDL] (TS)            : POSIXlt, format: \"2022-07-12 06:12:43\" \"2022-07-12 06:13:03\" ... #>  $ RECORD [Raw TDL] (RN)               : num  0 1 2 3 4 5 6 7 8 9 ... #>  $ valve_number [Raw TDL] ()           : num  20 21 23 26 2 10 11 12 13 20 ... #>  $ diag_system_Avg [Raw TDL] ()        : num  128 128 128 132 128 128 128 128 128 128 ... #>  $ NumSamples [Raw TDL] ()             : num  100 100 100 100 100 100 100 100 100 100 ... #>  $ Conc12C_Avg [Raw TDL] (ppm)         : num  2.9 68.8 311.9 1022.5 294.3 ... #>  $ Conc13C_Avg [Raw TDL] (ppm)         : num  0.132 0.847 3.481 11.114 3.299 ... #>  $ TGAStatus_Avg [Raw TDL] ()          : num  96 96 96 96 96 96 96 96 96 96 ... #>  $ TGAPressure_Avg [Raw TDL] (mb)      : num  30 30 30 30 30 ... #>  $ LaserTemp_Avg [Raw TDL] (degC)      : num  -4 -4 -4 -4 -4 ... #>  $ DCCurrentA_Avg [Raw TDL] (mA)       : num  50.4 50.4 50.4 50.4 50.4 ... #>  $ DCCurrentB_Avg [Raw TDL] (mA)       : num  38.9 38.9 38.9 38.9 38.9 ... #>  $ TGAAnalog1_Avg [Raw TDL] (V)        : num  0.0244 0.0244 0.0244 0.0244 0.0244 ... #>  $ TGATemp1_Avg [Raw TDL] (degC)       : num  30 30 30 30 30 ... #>  $ TGATemp2_Avg [Raw TDL] (degC)       : num  30 30 30 30 30 ... #>  $ LaserCooler_Avg [Raw TDL] (V)       : num  2.02 2.02 2.02 2.02 2.02 ... #>  $ RefDetSigA_Avg [Raw TDL] (mV)       : num  2.48 2.48 2.48 2.48 2.48 ... #>  $ RefDetSigB_Avg [Raw TDL] (mV)       : num  0.503 0.503 0.502 0.502 0.502 ... #>  $ RefDetTransA_Avg [Raw TDL] (%)      : num  41.2 41.2 41.1 41.1 41.1 ... #>  $ RefDetTransB_Avg [Raw TDL] (%)      : num  54.8 54.8 54.7 54.7 54.7 ... #>  $ RefDetTemp_Avg [Raw TDL] (degC)     : num  -35 -35 -35 -35 -35 ... #>  $ RefDetCooler_Avg [Raw TDL] ()       : num  1461 1461 1461 1461 1461 ... #>  $ RefDetGainOffset_Avg [Raw TDL] ()   : num  8217 8217 8217 8217 8217 ... #>  $ SmpDetSigA_Avg [Raw TDL] (mV)       : num  57.8 56.5 51.6 39.8 52 ... #>  $ SmpDetSigB_Avg [Raw TDL] (mV)       : num  10.08 9.88 9.17 7.38 9.22 ... #>  $ SmpDetTransA_Avg [Raw TDL] (%)      : num  99.8 97.4 89.2 68.8 89.8 ... #>  $ SmpDetTransB_Avg [Raw TDL] (%)      : num  114.4 112.2 104.2 84.2 104.8 ... #>  $ SmpDetTemp_Avg [Raw TDL] (degC)     : num  -39 -39 -39 -39 -39 ... #>  $ SmpDetCooler_Avg [Raw TDL] ()       : num  1449 1449 1449 1449 1449 ... #>  $ SmpDetGainOffset_Avg [Raw TDL] ()   : num  8456 8456 8456 8456 8456 ... #>  $ TGATemp1DutyCycle_Avg [Raw TDL] ()  : num  0.13 0.121 0.132 0.129 0.138 ... #>  $ TGATemp2DutyCycle_Avg [Raw TDL] ()  : num  0.0601 0.077 0.0677 0.0676 0.0649 ... #>  $ SampleFlow_Avg [Raw TDL] (ml_min)   : num  167 167 167 164 162 ... #>  $ ExcessFlow_Avg [Raw TDL] (ml_min)   : num  95.77 105.457 140.852 0.123 53.341 ... #>  $ SamplePress_Avg [Raw TDL] (mb)      : num  400 400 400 396 400 ... #>  $ BypassPress_Avg [Raw TDL] (mb)      : num  400 400 400 400 400 ... #>  $ SampleP_control_Avg [Raw TDL] ()    : num  0.4 0.404 0.414 0.2 0.385 ... #>  $ BypassP_control_Avg [Raw TDL] ()    : num  0.477 0.475 0.471 0.484 0.496 ... #>  $ TGAPress_control_Avg [Raw TDL] ()   : num  0.528 0.529 0.53 0.53 0.53 ... #>  $ panel_tmpr_Avg [Raw TDL] (degC)     : num  24.7 24.7 24.7 24.7 24.7 ... #>  $ batt_volt_Avg [Raw TDL] (V)         : num  11.8 11.8 11.8 11.8 11.8 ... #>  $ buff_depth_Max [Raw TDL] ()         : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ Conc12C_Std [Raw TDL] (ppm)         : num  0.5244 0.0946 0.2025 1.1064 1.5535 ... #>  $ Conc13C_Std [Raw TDL] (ppm)         : num  0.00797 0.00637 0.00849 0.02317 0.018 ... #>  $ TGAStatus_Std [Raw TDL] ()          : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ TGAPressure_Std [Raw TDL] (mb)      : num  0.0101 0.0105 0.0115 0.0102 0.0112 ... #>  $ LaserTemp_Std [Raw TDL] (degC)      : num  0.000244 0.000289 0.000272 0.000287 0.00025 ... #>  $ DCCurrentA_Std [Raw TDL] (mA)       : num  0.000454 0.0006 0.000338 0.000492 0.000503 ... #>  $ DCCurrentB_Std [Raw TDL] (mA)       : num  0.000677 0.000844 0.00061 0.000753 0.000625 ... #>  $ TGAAnalog1_Std [Raw TDL] (V)        : num  1.56e-05 1.39e-05 1.31e-05 1.30e-05 1.31e-05 ... #>  $ TGATemp1_Std [Raw TDL] (degC)       : num  0.000994 0.00121 0.003558 0.001737 0.001128 ... #>  $ TGATemp2_Std [Raw TDL] (degC)       : num  0.00215 0.00137 0.00141 0.00126 0.00227 ... #>  $ LaserCooler_Std [Raw TDL] (V)       : num  0.000293 0.000347 0.000326 0.000345 0.000301 ... #>  $ RefDetSigA_Std [Raw TDL] (mV)       : num  0.00155 0.00185 0.00155 0.00199 0.00154 ... #>  $ RefDetSigB_Std [Raw TDL] (mV)       : num  0.00169 0.00148 0.00145 0.0015 0.00188 ... #>  $ RefDetTransA_Std [Raw TDL] (%)      : num  0.0298 0.0354 0.0268 0.0366 0.0293 ... #>  $ RefDetTransB_Std [Raw TDL] (%)      : num  0.255 0.233 0.223 0.226 0.258 ... #>  $ RefDetTemp_Std [Raw TDL] (degC)     : num  0.00364 0.0032 0.00361 0.00365 0.00315 ... #>  $ RefDetCooler_Std [Raw TDL] ()       : num  0.354 0.316 0.356 0.357 0.299 ... #>  $ RefDetGainOffset_Std [Raw TDL] ()   : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ SmpDetSigA_Std [Raw TDL] (mV)       : num  0.01137 0.00519 0.00502 0.01354 0.02786 ... #>  $ SmpDetSigB_Std [Raw TDL] (mV)       : num  0.00497 0.00576 0.00366 0.00388 0.00501 ... #>  $ SmpDetTransA_Std [Raw TDL] (%)      : num  0.0214 0.00781 0.00875 0.02549 0.05127 ... #>  $ SmpDetTransB_Std [Raw TDL] (%)      : num  0.0631 0.0441 0.0564 0.0485 0.0763 ... #>  $ SmpDetTemp_Std [Raw TDL] (degC)     : num  0.00136 0.00128 0.00116 0.00148 0.00128 ... #>  $ SmpDetCooler_Std [Raw TDL] ()       : num  0.1147 0.1077 0.1009 0.1203 0.0931 ... #>  $ SmpDetGainOffset_Std [Raw TDL] ()   : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ TGATemp1DutyCycle_Std [Raw TDL] ()  : num  0.00923 0.00826 0.0119 0.00883 0.00886 ... #>  $ TGATemp2DutyCycle_Std [Raw TDL] ()  : num  0.00837 0.00978 0.00828 0.00849 0.00862 ... #>  $ SampleFlow_Std [Raw TDL] (ml_min)   : num  0.1467 0.2004 0.1747 0.0871 0.1594 ... #>  $ ExcessFlow_Std [Raw TDL] (ml_min)   : num  0.10026 0.11171 0.1207 0.00958 0.08248 ... #>  $ SamplePress_Std [Raw TDL] (mb)      : num  0.0214 0.0234 0.0199 0.0935 0.0242 ... #>  $ BypassPress_Std [Raw TDL] (mb)      : num  0.1431 0.0428 0.1358 0.4229 0.3114 ... #>  $ SampleP_control_Std [Raw TDL] ()    : num  9.05e-05 8.99e-05 7.08e-05 0.00 2.21e-04 ... #>  $ BypassP_control_Std [Raw TDL] ()    : num  1.85e-04 5.47e-05 1.52e-04 4.63e-04 3.60e-04 ... #>  $ TGAPress_control_Std [Raw TDL] ()   : num  0.000536 0.000541 0.000592 0.000525 0.000577 ... #>  $ panel_tmpr_Std [Raw TDL] (degC)     : num  0.00641 0.00222 0.00214 0.0023 0.00224 ... #>  $ batt_volt_Std [Raw TDL] (V)         : num  0.00241 0.00235 0.00224 0.00218 0.00232 ... #>  $ Li64Match_Avg(1) [Raw TDL] ()       : num  1 1 1 1 1 1 1 1 1 1 ... #>  $ Li64Match_Avg(2) [Raw TDL] ()       : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ Li64Tmpr_Avg(1) [Raw TDL] (degC)    : num  -79.2 -77.6 -81.6 -79.4 -79.7 ... #>  $ Li64Tmpr_Avg(2) [Raw TDL] (degC)    : num  NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN ... #>  $ Li64Heat_Avg(1) [Raw TDL] ()        : num  1 1 1 1 1 1 1 1 1 1 ... #>  $ Li64Heat_Avg(2) [Raw TDL] ()        : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ _Mix_diag_system_Avg [Raw TDL] ()   : num  NaN 960 960 960 960 960 960 960 960 960 ... #>  $ _Mix_ExcessZeroFlow_Avg [Raw TDL] (): num  NaN 0.42 0.379 0.441 0.411 ... #>  $ _Mix_ExcessMixFlow_Avg [Raw TDL] () : num  NaN 159 158 158 158 ... #>  $ _Mix_CO2Press_Avg [Raw TDL] ()      : num  NaN 11.4 11.4 11.4 11.4 ... #>  $ _Mix_ZeroPress_Avg [Raw TDL] ()     : num  NaN 16.5 16.5 16.5 16.5 ... #>  $ _Mix_CO2P_control_Avg [Raw TDL] ()  : num  NaN 0 0 0 0 0 0 0 0 0 ... #>  $ _Mix_ZeroP_control_Avg [Raw TDL] () : num  NaN 0 0 0 0 0 0 0 0 0 ... #>  $ _Mix_MixTmpr1_Avg [Raw TDL] ()      : num  NaN 32 32 32 32 ... #>  $ _Mix_MixTmpr2_Avg [Raw TDL] ()      : num  NaN 31.7 31.7 31.7 31.7 ... #>  $ _Mix_MixHeat1_Avg [Raw TDL] ()      : num  NaN 1 1 1 1 1 1 1 1 1 ... #>  $ _Mix_MixHeat2_Avg [Raw TDL] ()      : num  NaN 1 1 1 1 1 1 1 1 1 ... #>  $ _Mix_panel_tmpr_Avg [Raw TDL] ()    : num  NaN 24.1 24.1 24.1 24.1 ... #>  $ _Mix_batt_volt_Avg [Raw TDL] ()     : num  NaN 9.62 9.62 9.62 9.62 ..."},{"path":"https://eloch216.github.io/PhotoGEA/reference/smooth_tdl_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Smoothing data from one TDL valve — smooth_tdl_data","title":"Smoothing data from one TDL valve — smooth_tdl_data","text":"Tool applying smoothing function time series corresponding   measurements single valve tunable diode laser (TDL) data set.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/smooth_tdl_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smoothing data from one TDL valve — smooth_tdl_data","text":"","code":"smooth_tdl_data(     tdl_exdf,     column_to_be_smoothed,     valve_column_name,     valve_number,     smoothing_function   )"},{"path":"https://eloch216.github.io/PhotoGEA/reference/smooth_tdl_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smoothing data from one TDL valve — smooth_tdl_data","text":"tdl_exdf exdf object representing data TDL data logger. column_to_be_smoothed name column tdl_exdf contains data     smoothed; typically, 'Conc12C_Avg' 'Conc12C_Avg'. valve_column_name name column tdl_exdf contains valve number;     typically, 'valve_number'. valve_number value valve_column_name column indicates valve     smoothed. smoothing_function function accepts two vectors Y X (order)     returns smoothed version Y(X); typically,     smoothing_function based smooth.spline     filter signal package.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/smooth_tdl_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Smoothing data from one TDL valve — smooth_tdl_data","text":"output TDL highly sensitive electronic atmospheric noise,   often helpful smooth data one valves   attempting apply calibration corrections determine content   unknown gas mixture. smooth_tdl_data convenience function   extracts time series corresponding data one valve, applies   smoothing operation, replaces original data tdl_exdf   smoothed version. smoothing function user-supplied allow   flexbility. addition column_to_be_smoothed valve_column_name   columns, tdl_exdf must also contain 'elapsed_time'   column, typically created call   identify_tdl_cycles.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/smooth_tdl_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smoothing data from one TDL valve — smooth_tdl_data","text":"exdf object based tdl_exdf, time series  column_to_be_smoothed vs. 'elapsed_time' replaced   smoothed version obtained applying smoothing_function.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/smooth_tdl_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smoothing data from one TDL valve — smooth_tdl_data","text":"","code":"# Example 1: Smoothing the 12C signal from one TDL valve using a spline fit tdl_file <- read_tdl_file(   system.file(\"extdata\", \"tdl_sampling_1.dat\", package = \"PhotoGEA\"),   1, 2, 3, 5, 'TIMESTAMP' )  tdl_file <- identify_tdl_cycles(   tdl_file,   valve_column_name = 'valve_number',   cycle_start_valve = 20,   expected_cycle_length_minutes = 2.7,   expected_cycle_num_pts = 9,   timestamp_colname = 'TIMESTAMP' )  spline_smoothing_function <- function(Y, X) {     ss <- smooth.spline(X, Y)     return(ss$y) }  spline_smoothed_tdl_file <- smooth_tdl_data(   tdl_file, 'Conc12C_Avg', 'valve_number', 20, spline_smoothing_function )  # Example 2: Smoothing the same data with a Butterworth filter (as an # alternative to the spline_smoothing_function above)  if (FALSE) {  butterworth_smoothing_function <- function(Y, X) {   # Create a low-pass Butterworth filter   lpf <- signal::butter(1, 0.25, type = \"low\")    # Apply it to the Y data   signal::filter(lpf, Y) }  butterworth_smoothed_tdl_file <- smooth_tdl_data(   tdl_file, 'Conc12C_Avg', 'valve_number', 20, butterworth_smoothing_function ) }"},{"path":"https://eloch216.github.io/PhotoGEA/reference/split.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"split.exdf — split.exdf","title":"split.exdf — split.exdf","text":"Divides exdf object groups defined one factors.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/split.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"split.exdf — split.exdf","text":"","code":"# S3 method for exdf split(x, f, drop = FALSE, lex.order = FALSE, ...)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/split.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"split.exdf — split.exdf","text":"x exdf object. f factor list factors. drop logical value indicating whether levels f occur     dropped. lex.order logical value passed interaction. ... Additional arguments passed default method     split.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/split.exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"split.exdf — split.exdf","text":"Returns list exdf objects created splitting x along   values f.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/split.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"split.exdf — split.exdf","text":"","code":"# Read a Licor file, select just a few columns, and then split it by the value # of the `plot` column licor_file <- read_licor_file(   system.file(\"extdata\", \"ball_berry_1.xlsx\", package = \"PhotoGEA\"),   c(3, 5, 7, 9, 11, 13), 14, 15, 16, 17, 'time' )  licor_file <- licor_file[, c('plot', 'species', 'Qin', 'A', 'gsw'), TRUE]  split(   licor_file,   list(licor_file[,'species'], licor_file[,'plot']),   drop = TRUE ) #> $soybean.1a #>   plot [UserDefCon] (NA) species [UserDefCon] (NA) #> 1                     1a                   soybean #> 2                     1a                   soybean #> 3                     1a                   soybean #> 4                     1a                   soybean #> 5                     1a                   soybean #> 6                     1a                   soybean #> 7                     1a                   soybean #>   Qin [LeafQ] (micromol m^(-2) s^(-1)) A [GasEx] (micromol m^(-2) s^(-1)) #> 1                             2000.030                          35.400473 #> 2                             1099.800                          22.996635 #> 3                              799.983                          25.430106 #> 4                              649.951                          23.290614 #> 5                              500.135                          16.617929 #> 6                              350.106                          12.240074 #> 7                              200.141                           5.679174 #>   gsw [GasEx] (mol m^(-2) s^(-1)) #> 1                       0.3881885 #> 2                       0.3044869 #> 3                       0.2804279 #> 4                       0.2181023 #> 5                       0.2123801 #> 6                       0.1848656 #> 7                       0.1685880 #>  #> $soybean.1b #>    plot [UserDefCon] (NA) species [UserDefCon] (NA) #> 15                     1b                   soybean #> 16                     1b                   soybean #> 17                     1b                   soybean #> 18                     1b                   soybean #> 19                     1b                   soybean #> 20                     1b                   soybean #> 21                     1b                   soybean #>    Qin [LeafQ] (micromol m^(-2) s^(-1)) A [GasEx] (micromol m^(-2) s^(-1)) #> 15                             1999.850                          47.950460 #> 16                             1099.890                          30.250627 #> 17                              799.873                          25.472460 #> 18                              650.070                          26.383035 #> 19                              499.982                          17.009070 #> 20                              350.060                          14.666531 #> 21                              200.070                           9.276031 #>    gsw [GasEx] (mol m^(-2) s^(-1)) #> 15                       0.6974767 #> 16                       0.5627892 #> 17                       0.4941281 #> 18                       0.4676789 #> 19                       0.4235752 #> 20                       0.1587479 #> 21                       0.2030845 #>  #> $tobacco.2 #>    plot [UserDefCon] (NA) species [UserDefCon] (NA) #> 22                      2                   tobacco #> 23                      2                   tobacco #> 24                      2                   tobacco #> 25                      2                   tobacco #> 26                      2                   tobacco #> 27                      2                   tobacco #> 28                      2                   tobacco #>    Qin [LeafQ] (micromol m^(-2) s^(-1)) A [GasEx] (micromol m^(-2) s^(-1)) #> 22                             2000.020                           29.61454 #> 23                             1099.980                           25.49228 #> 24                              800.046                           22.21817 #> 25                              650.001                           16.34589 #> 26                              500.036                           12.10635 #> 27                              350.073                           12.04469 #> 28                              200.236                            7.84987 #>    gsw [GasEx] (mol m^(-2) s^(-1)) #> 22                      0.29002835 #> 23                      0.26095999 #> 24                      0.24715976 #> 25                      0.22395230 #> 26                      0.22348130 #> 27                      0.20608729 #> 28                      0.08301745 #>  #> $soybean.5 #>    plot [UserDefCon] (NA) species [UserDefCon] (NA) #> 8                       5                   soybean #> 9                       5                   soybean #> 10                      5                   soybean #> 11                      5                   soybean #> 12                      5                   soybean #> 13                      5                   soybean #> 14                      5                   soybean #>    Qin [LeafQ] (micromol m^(-2) s^(-1)) A [GasEx] (micromol m^(-2) s^(-1)) #> 8                              1999.980                           45.78075 #> 9                              1099.960                           36.21825 #> 10                              799.910                           32.76940 #> 11                              650.108                           22.92448 #> 12                              499.921                           22.06819 #> 13                              349.991                           17.09159 #> 14                              200.029                           10.76825 #>    gsw [GasEx] (mol m^(-2) s^(-1)) #> 8                        0.8771680 #> 9                        0.6695119 #> 10                       0.5599051 #> 11                       0.5758128 #> 12                       0.3805223 #> 13                       0.3462828 #> 14                       0.3181253 #>"},{"path":"https://eloch216.github.io/PhotoGEA/reference/str.exdf.html","id":null,"dir":"Reference","previous_headings":"","what":"str.exdf — str.exdf","title":"str.exdf — str.exdf","text":"Displays structure exdf object's main_data.   column described name, unit, category formatted like   name [category] (units).","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/str.exdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"str.exdf — str.exdf","text":"","code":"# S3 method for exdf str(object, ...)"},{"path":"https://eloch216.github.io/PhotoGEA/reference/str.exdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"str.exdf — str.exdf","text":"object exdf object. ... Additional arguments passed str.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/reference/str.exdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"str.exdf — str.exdf","text":"None.","code":""},{"path":[]},{"path":"https://eloch216.github.io/PhotoGEA/reference/str.exdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"str.exdf — str.exdf","text":"","code":"simple_exdf <- exdf(data.frame(A = 1), data.frame(A = 'u'), data.frame(A = 'c')) str(simple_exdf) #> 'data.frame':\t1 obs. of  1 variable: #>  $ A [c] (u): num 1"},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"photogea-version-030-2022-08-15","dir":"Changelog","previous_headings":"","what":"PhotoGEA VERSION 0.3.0 (2022-08-15)","title":"PhotoGEA VERSION 0.3.0 (2022-08-15)","text":"version adds substantial amount documentation, including vignette describing use PhotoGEA analyze TDL data. working documentation, several changes made key functions behaved reasonably became easier document. exdf objects can now initialized just data frame; case, units categories NA. apply_fit_across_reps process_tdl_cycles replaced two new lower-level functions offer generality: .exdf consolidate. check_response_curve_data check_signal_averaging_data consolidated one function: check_licor_data. exdf method cbind added. exclude_tdl_cycles extract_tdl_valve removed since can easily reproduced basic exdf functionality. functions creating modifying Excel files removed since longer want follow strategy. basic_stats “Variable J” example script fixed.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"photogea-version-020-2022-07-26","dir":"Changelog","previous_headings":"","what":"PhotoGEA VERSION 0.2.0 (2022-07-26)","title":"PhotoGEA VERSION 0.2.0 (2022-07-26)","text":"version adds substantial amount documentation, including vignette describing use PhotoGEA analyze Ball-Berry data. working documentation, several changes made key functions behaved reasonably became easier document. moment, basic_stats “Variable J” example script broken.","code":""},{"path":"https://eloch216.github.io/PhotoGEA/news/index.html","id":"photogea-version-010","dir":"Changelog","previous_headings":"","what":"PhotoGEA VERSION 0.1.0","title":"PhotoGEA VERSION 0.1.0","text":"first version PhotoGEA. point, package state rapid development, changes described . reserving version 1.0.0 first version R package functions data sets documented; , major changes increase minor version number.","code":""}]
